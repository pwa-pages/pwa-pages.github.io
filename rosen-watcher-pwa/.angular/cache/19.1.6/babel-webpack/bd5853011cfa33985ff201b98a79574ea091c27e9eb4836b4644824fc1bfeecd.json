{"ast":null,"code":"import '../../shared/ts/chain.service';\nimport { map } from 'rxjs/operators';\nimport { of } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"./download.service\";\nexport let PriceService = /*#__PURE__*/(() => {\n  class PriceService {\n    constructor(downloadService) {\n      this.downloadService = downloadService;\n      this.currencyRates = {};\n    }\n    convert(amount, from, to) {\n      return this.getPrices().pipe(map(rates => {\n        if (rates[from][to] || rates[from][to] == 0) {\n          return rates[from][to] * amount;\n        } else {\n          return rates[from]['EUR'] / rates[to]['EUR'] * amount;\n        }\n      }));\n    }\n    getPrices() {\n      const pricesUrl = `https://api.coingecko.com/api/v3/simple/price?ids=rosen-bridge,ergo&vs_currencies=eur,usd`;\n      if (this.currencyRates['ERG']) {\n        return of(this.currencyRates);\n      }\n      this.currencyRates = {\n        ERG: {\n          EUR: 0,\n          USD: 0\n        },\n        RSN: {\n          EUR: 0,\n          USD: 0\n        }\n      };\n      return this.downloadService.downloadStream(pricesUrl).pipe(map(data => {\n        this.currencyRates['ERG']['EUR'] = data.ergo.eur;\n        this.currencyRates['ERG']['USD'] = data.ergo.usd;\n        this.currencyRates['RSN']['EUR'] = data['rosen-bridge'].eur;\n        this.currencyRates['RSN']['USD'] = data['rosen-bridge'].usd;\n        return this.currencyRates;\n      }));\n    }\n    static {\n      this.ɵfac = function PriceService_Factory(__ngFactoryType__) {\n        return new (__ngFactoryType__ || PriceService)(i0.ɵɵinject(i1.DownloadService));\n      };\n    }\n    static {\n      this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n        token: PriceService,\n        factory: PriceService.ɵfac,\n        providedIn: 'root'\n      });\n    }\n  }\n  return PriceService;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}