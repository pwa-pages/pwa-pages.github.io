import { Observable, mergeMap, filter, map } from 'rxjs';
export class ActiveItemObserver {
    observe(root, elements, rootMargin) {
        return createIntersectionObserver(root, elements, rootMargin).pipe(map((entry) => {
            if (entry.isIntersecting) {
                entry.target.classList.add('g-item-highlight');
                return +entry.target.getAttribute('galleryIndex');
            }
            else {
                entry.target.classList.remove('g-item-highlight');
                return -1;
            }
        }), filter((index) => index !== -1));
    }
}
function createIntersectionObserver(root, elements, rootMargin) {
    return new Observable((observer) => {
        const intersectionObserver = new IntersectionObserver((entries) => observer.next(entries), {
            root,
            rootMargin,
            threshold: 1
        });
        elements.forEach((element) => intersectionObserver.observe(element));
        return () => {
            elements.forEach((element) => intersectionObserver.unobserve(element));
            intersectionObserver.disconnect();
        };
    }).pipe(mergeMap((entries) => entries));
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYWN0aXZlLWl0ZW0tb2JzZXJ2ZXIuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9wcm9qZWN0cy9uZy1nYWxsZXJ5L3NyYy9saWIvb2JzZXJ2ZXJzL2FjdGl2ZS1pdGVtLW9ic2VydmVyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxVQUFVLEVBQWMsUUFBUSxFQUFFLE1BQU0sRUFBRSxHQUFHLEVBQUUsTUFBTSxNQUFNLENBQUM7QUFFckUsTUFBTSxPQUFPLGtCQUFrQjtJQUU3QixPQUFPLENBQUMsSUFBaUIsRUFBRSxRQUF1QixFQUFFLFVBQWtCO1FBQ3BFLE9BQU8sMEJBQTBCLENBQUMsSUFBSSxFQUFFLFFBQVEsRUFBRSxVQUFVLENBQUMsQ0FBQyxJQUFJLENBQ2hFLEdBQUcsQ0FBQyxDQUFDLEtBQWdDLEVBQUUsRUFBRTtZQUN2QyxJQUFJLEtBQUssQ0FBQyxjQUFjLEVBQUUsQ0FBQztnQkFDekIsS0FBSyxDQUFDLE1BQU0sQ0FBQyxTQUFTLENBQUMsR0FBRyxDQUFDLGtCQUFrQixDQUFDLENBQUM7Z0JBQy9DLE9BQU8sQ0FBQyxLQUFLLENBQUMsTUFBTSxDQUFDLFlBQVksQ0FBQyxjQUFjLENBQUMsQ0FBQztZQUNwRCxDQUFDO2lCQUFNLENBQUM7Z0JBQ04sS0FBSyxDQUFDLE1BQU0sQ0FBQyxTQUFTLENBQUMsTUFBTSxDQUFDLGtCQUFrQixDQUFDLENBQUM7Z0JBQ2xELE9BQU8sQ0FBQyxDQUFDLENBQUM7WUFDWixDQUFDO1FBQ0gsQ0FBQyxDQUFDLEVBQ0YsTUFBTSxDQUFDLENBQUMsS0FBYSxFQUFFLEVBQUUsQ0FBQyxLQUFLLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FDeEMsQ0FBQztJQUNKLENBQUM7Q0FDRjtBQUVELFNBQVMsMEJBQTBCLENBQUMsSUFBaUIsRUFBRSxRQUF1QixFQUFFLFVBQWtCO0lBQ2hHLE9BQU8sSUFBSSxVQUFVLENBQUMsQ0FBQyxRQUFpRCxFQUFFLEVBQUU7UUFDMUUsTUFBTSxvQkFBb0IsR0FBeUIsSUFBSSxvQkFBb0IsQ0FDekUsQ0FBQyxPQUFvQyxFQUFFLEVBQUUsQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxFQUNoRTtZQUNFLElBQUk7WUFDSixVQUFVO1lBQ1YsU0FBUyxFQUFFLENBQUM7U0FDYixDQUNGLENBQUM7UUFDRixRQUFRLENBQUMsT0FBTyxDQUFDLENBQUMsT0FBb0IsRUFBRSxFQUFFLENBQUMsb0JBQW9CLENBQUMsT0FBTyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUM7UUFDbEYsT0FBTyxHQUFHLEVBQUU7WUFDVixRQUFRLENBQUMsT0FBTyxDQUFDLENBQUMsT0FBb0IsRUFBRSxFQUFFLENBQUMsb0JBQW9CLENBQUMsU0FBUyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUM7WUFDcEYsb0JBQW9CLENBQUMsVUFBVSxFQUFFLENBQUM7UUFDcEMsQ0FBQyxDQUFDO0lBQ0osQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUNMLFFBQVEsQ0FBQyxDQUFDLE9BQW9DLEVBQUUsRUFBRSxDQUFDLE9BQU8sQ0FBQyxDQUM1RCxDQUFDO0FBQ0osQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE9ic2VydmFibGUsIFN1YnNjcmliZXIsIG1lcmdlTWFwLCBmaWx0ZXIsIG1hcCB9IGZyb20gJ3J4anMnO1xyXG5cclxuZXhwb3J0IGNsYXNzIEFjdGl2ZUl0ZW1PYnNlcnZlciB7XHJcblxyXG4gIG9ic2VydmUocm9vdDogSFRNTEVsZW1lbnQsIGVsZW1lbnRzOiBIVE1MRWxlbWVudFtdLCByb290TWFyZ2luOiBzdHJpbmcpOiBPYnNlcnZhYmxlPG51bWJlcj4ge1xyXG4gICAgcmV0dXJuIGNyZWF0ZUludGVyc2VjdGlvbk9ic2VydmVyKHJvb3QsIGVsZW1lbnRzLCByb290TWFyZ2luKS5waXBlKFxyXG4gICAgICBtYXAoKGVudHJ5OiBJbnRlcnNlY3Rpb25PYnNlcnZlckVudHJ5KSA9PiB7XHJcbiAgICAgICAgaWYgKGVudHJ5LmlzSW50ZXJzZWN0aW5nKSB7XHJcbiAgICAgICAgICBlbnRyeS50YXJnZXQuY2xhc3NMaXN0LmFkZCgnZy1pdGVtLWhpZ2hsaWdodCcpO1xyXG4gICAgICAgICAgcmV0dXJuICtlbnRyeS50YXJnZXQuZ2V0QXR0cmlidXRlKCdnYWxsZXJ5SW5kZXgnKTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgZW50cnkudGFyZ2V0LmNsYXNzTGlzdC5yZW1vdmUoJ2ctaXRlbS1oaWdobGlnaHQnKTtcclxuICAgICAgICAgIHJldHVybiAtMTtcclxuICAgICAgICB9XHJcbiAgICAgIH0pLFxyXG4gICAgICBmaWx0ZXIoKGluZGV4OiBudW1iZXIpID0+IGluZGV4ICE9PSAtMSlcclxuICAgICk7XHJcbiAgfVxyXG59XHJcblxyXG5mdW5jdGlvbiBjcmVhdGVJbnRlcnNlY3Rpb25PYnNlcnZlcihyb290OiBIVE1MRWxlbWVudCwgZWxlbWVudHM6IEhUTUxFbGVtZW50W10sIHJvb3RNYXJnaW46IHN0cmluZyk6IE9ic2VydmFibGU8SW50ZXJzZWN0aW9uT2JzZXJ2ZXJFbnRyeT4ge1xyXG4gIHJldHVybiBuZXcgT2JzZXJ2YWJsZSgob2JzZXJ2ZXI6IFN1YnNjcmliZXI8SW50ZXJzZWN0aW9uT2JzZXJ2ZXJFbnRyeVtdPikgPT4ge1xyXG4gICAgY29uc3QgaW50ZXJzZWN0aW9uT2JzZXJ2ZXI6IEludGVyc2VjdGlvbk9ic2VydmVyID0gbmV3IEludGVyc2VjdGlvbk9ic2VydmVyKFxyXG4gICAgICAoZW50cmllczogSW50ZXJzZWN0aW9uT2JzZXJ2ZXJFbnRyeVtdKSA9PiBvYnNlcnZlci5uZXh0KGVudHJpZXMpLFxyXG4gICAgICB7XHJcbiAgICAgICAgcm9vdCxcclxuICAgICAgICByb290TWFyZ2luLFxyXG4gICAgICAgIHRocmVzaG9sZDogMVxyXG4gICAgICB9XHJcbiAgICApO1xyXG4gICAgZWxlbWVudHMuZm9yRWFjaCgoZWxlbWVudDogSFRNTEVsZW1lbnQpID0+IGludGVyc2VjdGlvbk9ic2VydmVyLm9ic2VydmUoZWxlbWVudCkpO1xyXG4gICAgcmV0dXJuICgpID0+IHtcclxuICAgICAgZWxlbWVudHMuZm9yRWFjaCgoZWxlbWVudDogSFRNTEVsZW1lbnQpID0+IGludGVyc2VjdGlvbk9ic2VydmVyLnVub2JzZXJ2ZShlbGVtZW50KSk7XHJcbiAgICAgIGludGVyc2VjdGlvbk9ic2VydmVyLmRpc2Nvbm5lY3QoKTtcclxuICAgIH07XHJcbiAgfSkucGlwZShcclxuICAgIG1lcmdlTWFwKChlbnRyaWVzOiBJbnRlcnNlY3Rpb25PYnNlcnZlckVudHJ5W10pID0+IGVudHJpZXMpXHJcbiAgKTtcclxufVxyXG5cclxuIl19