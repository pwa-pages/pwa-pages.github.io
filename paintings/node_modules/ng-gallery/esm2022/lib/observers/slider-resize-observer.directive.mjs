import { Directive, Input, Output, EventEmitter } from '@angular/core';
import { of, tap, take, filter, fromEvent, switchMap, debounceTime, firstValueFrom, distinctUntilChanged, EMPTY, animationFrameScheduler } from 'rxjs';
import { resizeObservable } from '../utils/resize-observer';
import * as i0 from "@angular/core";
import * as i1 from "../services/gallery.service";
import * as i2 from "../utils/img-manager";
export class SliderResizeObserver {
    get _viewport() {
        return this._el.nativeElement;
    }
    get _galleryCore() {
        return this._el.nativeElement.parentElement.parentElement.parentElement;
    }
    get _isAutoHeight() {
        return this.config.autoHeight &&
            !this.config.itemAutosize &&
            this.config.orientation === 'horizontal' &&
            (this.config.thumbPosition === 'top' || this.config.thumbPosition === 'bottom');
    }
    constructor(_el, _zone, _gallery, _imgManager) {
        this._el = _el;
        this._zone = _zone;
        this._gallery = _gallery;
        this._imgManager = _imgManager;
        this.isResizingChange = new EventEmitter();
    }
    ngOnInit() {
        const galleryRef = this._gallery.ref(this.galleryId);
        // Check if height has transition for the auto-height feature
        const transitionDuration = getComputedStyle(this._viewport).getPropertyValue('transition-duration');
        if (parseFloat(transitionDuration) === 0) {
            this._afterHeightChanged$ = of(null);
        }
        else {
            this._afterHeightChanged$ = fromEvent(this._viewport, 'transitionend');
        }
        this._zone.runOutsideAngular(() => {
            // Detect if the size of the slider has changed detecting current index on scroll
            this._resizeSubscription = resizeObservable(this._viewport, (observer) => this._resizeObserver = observer).pipe(
            // Check if resize should skip due to re-observing the slider
            filter(() => !this._shouldSkip || !(this._shouldSkip = false)), 
            // Immediately set visibility to hidden to avoid changing the active item caused by appearance of other items when size is expanded
            tap(() => this.setResizingState()), debounceTime(this.config.resizeDebounceTime, animationFrameScheduler), tap(async (entry) => {
                // Update CSS variables with the proper values
                this.updateSliderSize();
                if (this._isAutoHeight) {
                    const img = await firstValueFrom(this._imgManager.getActiveItem(galleryRef.state));
                    // If img height is identical to the viewport height then skip
                    if (img.height === this._viewport.clientHeight) {
                        this.resetResizingState();
                    }
                    else {
                        // Unobserve the slider while the height is being changed
                        this.setResizingState({ unobserve: true });
                        // Change the height
                        this._galleryCore.style.setProperty('--slider-height', `${img.height}px`);
                        // Wait until height transition ends
                        await firstValueFrom(this._afterHeightChanged$);
                        this.resetResizingState({
                            // Mark to skip first emit after re-observing the slider if height content rect height and client height are identical
                            shouldSkip: entry.contentRect.height === this._viewport.clientHeight,
                            observe: true
                        });
                    }
                }
                else {
                    requestAnimationFrame(() => this.resetResizingState({ shouldSkip: true }));
                }
            })).subscribe();
        });
    }
    ngOnChanges() {
        this._isAutoHeight ? this._subscribeAutoHeight() : this._unsubscribeAutoHeight();
    }
    ngOnDestroy() {
        this._resizeSubscription?.unsubscribe();
        this._unsubscribeAutoHeight();
    }
    ngAfterViewChecked() {
        this.updateSliderSize();
    }
    updateSliderSize() {
        // Update slider width and height CSS variables
        this._galleryCore.style.setProperty('--slider-width', `${this._viewport.clientWidth}px`);
        // Only update height if auto-height is false, because when it's true, another function will take care of it
        if (!this.config.autoHeight) {
            this._galleryCore.style.setProperty('--slider-height', `${this._viewport.clientHeight}px`);
        }
        this.updateCentralizeCSSVariables();
    }
    updateCentralizeCSSVariables() {
        if (this.config.itemAutosize) {
            this._galleryCore.style.setProperty('--slider-centralize-start-size', `${this.adapter.getCentralizerStartSize()}px`);
            this._galleryCore.style.setProperty('--slider-centralize-end-size', `${this.adapter.getCentralizerEndSize()}px`);
        }
    }
    _subscribeAutoHeight() {
        this._unsubscribeAutoHeight();
        this._shouldSkip = false;
        this._zone.runOutsideAngular(() => {
            const galleryRef = this._gallery.ref(this.galleryId);
            // TODO: Why is galleryRef.state emits when screen size changes?
            const state = galleryRef.state.pipe(distinctUntilChanged((a, b) => a.currIndex === b.currIndex));
            this._autoHeightSubscription = this._imgManager.getActiveItem(state).pipe(switchMap((img) => {
                this.setResizingState({ unobserve: true });
                this._galleryCore.style.setProperty('--slider-height', `${img.clientHeight}px`);
                // Check if the new item height is equal to the current height, there will be no transition,
                // So reset resizing state
                if (img.height === this._viewport.clientHeight) {
                    this.resetResizingState({ shouldSkip: true, observe: true });
                    return EMPTY;
                }
                return this._afterHeightChanged$.pipe(tap(() => this.resetResizingState({ shouldSkip: true, observe: true })), take(1));
            })).subscribe();
        });
    }
    _unsubscribeAutoHeight() {
        this._autoHeightSubscription?.unsubscribe();
    }
    setResizingState({ unobserve } = {}) {
        this._zone.run(() => {
            this.isResizingChange.emit(true);
        });
        this._viewport.classList.add('g-resizing');
        if (unobserve) {
            // Unobserve the slider while the height is being changed
            this._resizeObserver.unobserve(this._viewport);
        }
    }
    resetResizingState({ shouldSkip, observe } = {}) {
        this._zone.run(() => {
            this.isResizingChange.emit(false);
        });
        this._viewport.classList.remove('g-resizing');
        this._shouldSkip = shouldSkip;
        if (observe) {
            this._resizeObserver.observe(this._viewport);
        }
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.2.1", ngImport: i0, type: SliderResizeObserver, deps: [{ token: i0.ElementRef }, { token: i0.NgZone }, { token: i1.Gallery }, { token: i2.ImgManager }], target: i0.ɵɵFactoryTarget.Directive }); }
    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "14.0.0", version: "18.2.1", type: SliderResizeObserver, isStandalone: true, selector: "[sliderResizeObserver]", inputs: { galleryId: "galleryId", adapter: "adapter", config: "config" }, outputs: { isResizingChange: "isResizingChange" }, usesOnChanges: true, ngImport: i0 }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.2.1", ngImport: i0, type: SliderResizeObserver, decorators: [{
            type: Directive,
            args: [{
                    selector: '[sliderResizeObserver]',
                    standalone: true
                }]
        }], ctorParameters: () => [{ type: i0.ElementRef }, { type: i0.NgZone }, { type: i1.Gallery }, { type: i2.ImgManager }], propDecorators: { galleryId: [{
                type: Input
            }], adapter: [{
                type: Input
            }], config: [{
                type: Input
            }], isResizingChange: [{
                type: Output
            }] } });
//# sourceMappingURL=data:application/json;base64,