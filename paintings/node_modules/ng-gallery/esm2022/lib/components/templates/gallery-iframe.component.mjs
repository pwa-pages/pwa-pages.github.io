import { Component, Input, ViewChild, ChangeDetectionStrategy } from '@angular/core';
import { NgIf } from '@angular/common';
import * as i0 from "@angular/core";
import * as i1 from "@angular/platform-browser";
export class GalleryIframeComponent {
    set src(src) {
        this.videoSrc = src;
        this.iframeSrc = this._sanitizer.bypassSecurityTrustResourceUrl(src);
    }
    set pauseVideo(shouldPause) {
        if (this.iframe?.nativeElement) {
            if (shouldPause) {
                const iframe = this.iframe.nativeElement;
                iframe.src = null;
                if (!this.autoplay && this.videoSrc) {
                    this.iframeSrc = this._sanitizer.bypassSecurityTrustResourceUrl(this.videoSrc);
                }
            }
        }
    }
    constructor(_sanitizer) {
        this._sanitizer = _sanitizer;
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.2.1", ngImport: i0, type: GalleryIframeComponent, deps: [{ token: i1.DomSanitizer }], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "18.2.1", type: GalleryIframeComponent, isStandalone: true, selector: "gallery-iframe", inputs: { src: "src", pauseVideo: ["pause", "pauseVideo"], autoplay: "autoplay", loadingAttr: "loadingAttr" }, viewQueries: [{ propertyName: "iframe", first: true, predicate: ["iframe"], descendants: true }], ngImport: i0, template: `
    <iframe *ngIf="autoplay; else default"
            #iframe
            [attr.loading]="loadingAttr"
            allowfullscreen
            allow
            style="border:none"
            [src]="iframeSrc">
    </iframe>
    <ng-template #default>
      <iframe #iframe
              [attr.loading]="loadingAttr"
              allowfullscreen
              style="border:none"
              [src]="iframeSrc">
      </iframe>
    </ng-template>
  `, isInline: true, dependencies: [{ kind: "directive", type: NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.2.1", ngImport: i0, type: GalleryIframeComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'gallery-iframe',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    template: `
    <iframe *ngIf="autoplay; else default"
            #iframe
            [attr.loading]="loadingAttr"
            allowfullscreen
            allow
            style="border:none"
            [src]="iframeSrc">
    </iframe>
    <ng-template #default>
      <iframe #iframe
              [attr.loading]="loadingAttr"
              allowfullscreen
              style="border:none"
              [src]="iframeSrc">
      </iframe>
    </ng-template>
  `,
                    standalone: true,
                    imports: [NgIf]
                }]
        }], ctorParameters: () => [{ type: i1.DomSanitizer }], propDecorators: { src: [{
                type: Input,
                args: ['src']
            }], pauseVideo: [{
                type: Input,
                args: ['pause']
            }], autoplay: [{
                type: Input
            }], loadingAttr: [{
                type: Input
            }], iframe: [{
                type: ViewChild,
                args: ['iframe']
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ2FsbGVyeS1pZnJhbWUuY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vcHJvamVjdHMvbmctZ2FsbGVyeS9zcmMvbGliL2NvbXBvbmVudHMvdGVtcGxhdGVzL2dhbGxlcnktaWZyYW1lLmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsU0FBUyxFQUFFLEtBQUssRUFBRSxTQUFTLEVBQWMsdUJBQXVCLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDakcsT0FBTyxFQUFFLElBQUksRUFBRSxNQUFNLGlCQUFpQixDQUFDOzs7QUEyQnZDLE1BQU0sT0FBTyxzQkFBc0I7SUFLakMsSUFBa0IsR0FBRyxDQUFDLEdBQVc7UUFDL0IsSUFBSSxDQUFDLFFBQVEsR0FBRyxHQUFHLENBQUM7UUFDcEIsSUFBSSxDQUFDLFNBQVMsR0FBRyxJQUFJLENBQUMsVUFBVSxDQUFDLDhCQUE4QixDQUFDLEdBQUcsQ0FBQyxDQUFDO0lBQ3ZFLENBQUM7SUFFRCxJQUFvQixVQUFVLENBQUMsV0FBb0I7UUFDakQsSUFBSSxJQUFJLENBQUMsTUFBTSxFQUFFLGFBQWEsRUFBRSxDQUFDO1lBQy9CLElBQUksV0FBVyxFQUFFLENBQUM7Z0JBQ2hCLE1BQU0sTUFBTSxHQUFzQixJQUFJLENBQUMsTUFBTSxDQUFDLGFBQWEsQ0FBQztnQkFDNUQsTUFBTSxDQUFDLEdBQUcsR0FBRyxJQUFJLENBQUM7Z0JBRWxCLElBQUksQ0FBQyxJQUFJLENBQUMsUUFBUSxJQUFJLElBQUksQ0FBQyxRQUFRLEVBQUUsQ0FBQztvQkFDcEMsSUFBSSxDQUFDLFNBQVMsR0FBRyxJQUFJLENBQUMsVUFBVSxDQUFDLDhCQUE4QixDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQztnQkFDakYsQ0FBQztZQUNILENBQUM7UUFDSCxDQUFDO0lBQ0gsQ0FBQztJQVFELFlBQW9CLFVBQXdCO1FBQXhCLGVBQVUsR0FBVixVQUFVLENBQWM7SUFDNUMsQ0FBQzs4R0E5QlUsc0JBQXNCO2tHQUF0QixzQkFBc0IsMlJBckJ2Qjs7Ozs7Ozs7Ozs7Ozs7Ozs7R0FpQlQsNERBRVMsSUFBSTs7MkZBRUgsc0JBQXNCO2tCQXhCbEMsU0FBUzttQkFBQztvQkFDVCxRQUFRLEVBQUUsZ0JBQWdCO29CQUMxQixlQUFlLEVBQUUsdUJBQXVCLENBQUMsTUFBTTtvQkFDL0MsUUFBUSxFQUFFOzs7Ozs7Ozs7Ozs7Ozs7OztHQWlCVDtvQkFDRCxVQUFVLEVBQUUsSUFBSTtvQkFDaEIsT0FBTyxFQUFFLENBQUMsSUFBSSxDQUFDO2lCQUNoQjtpRkFNbUIsR0FBRztzQkFBcEIsS0FBSzt1QkFBQyxLQUFLO2dCQUtRLFVBQVU7c0JBQTdCLEtBQUs7dUJBQUMsT0FBTztnQkFhTCxRQUFRO3NCQUFoQixLQUFLO2dCQUVHLFdBQVc7c0JBQW5CLEtBQUs7Z0JBRWUsTUFBTTtzQkFBMUIsU0FBUzt1QkFBQyxRQUFRIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQ29tcG9uZW50LCBJbnB1dCwgVmlld0NoaWxkLCBFbGVtZW50UmVmLCBDaGFuZ2VEZXRlY3Rpb25TdHJhdGVneSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQgeyBOZ0lmIH0gZnJvbSAnQGFuZ3VsYXIvY29tbW9uJztcclxuaW1wb3J0IHsgRG9tU2FuaXRpemVyLCBTYWZlUmVzb3VyY2VVcmwgfSBmcm9tICdAYW5ndWxhci9wbGF0Zm9ybS1icm93c2VyJztcclxuXHJcbkBDb21wb25lbnQoe1xyXG4gIHNlbGVjdG9yOiAnZ2FsbGVyeS1pZnJhbWUnLFxyXG4gIGNoYW5nZURldGVjdGlvbjogQ2hhbmdlRGV0ZWN0aW9uU3RyYXRlZ3kuT25QdXNoLFxyXG4gIHRlbXBsYXRlOiBgXHJcbiAgICA8aWZyYW1lICpuZ0lmPVwiYXV0b3BsYXk7IGVsc2UgZGVmYXVsdFwiXHJcbiAgICAgICAgICAgICNpZnJhbWVcclxuICAgICAgICAgICAgW2F0dHIubG9hZGluZ109XCJsb2FkaW5nQXR0clwiXHJcbiAgICAgICAgICAgIGFsbG93ZnVsbHNjcmVlblxyXG4gICAgICAgICAgICBhbGxvd1xyXG4gICAgICAgICAgICBzdHlsZT1cImJvcmRlcjpub25lXCJcclxuICAgICAgICAgICAgW3NyY109XCJpZnJhbWVTcmNcIj5cclxuICAgIDwvaWZyYW1lPlxyXG4gICAgPG5nLXRlbXBsYXRlICNkZWZhdWx0PlxyXG4gICAgICA8aWZyYW1lICNpZnJhbWVcclxuICAgICAgICAgICAgICBbYXR0ci5sb2FkaW5nXT1cImxvYWRpbmdBdHRyXCJcclxuICAgICAgICAgICAgICBhbGxvd2Z1bGxzY3JlZW5cclxuICAgICAgICAgICAgICBzdHlsZT1cImJvcmRlcjpub25lXCJcclxuICAgICAgICAgICAgICBbc3JjXT1cImlmcmFtZVNyY1wiPlxyXG4gICAgICA8L2lmcmFtZT5cclxuICAgIDwvbmctdGVtcGxhdGU+XHJcbiAgYCxcclxuICBzdGFuZGFsb25lOiB0cnVlLFxyXG4gIGltcG9ydHM6IFtOZ0lmXVxyXG59KVxyXG5leHBvcnQgY2xhc3MgR2FsbGVyeUlmcmFtZUNvbXBvbmVudCB7XHJcblxyXG4gIGlmcmFtZVNyYzogU2FmZVJlc291cmNlVXJsO1xyXG4gIHZpZGVvU3JjOiBzdHJpbmc7XHJcblxyXG4gIEBJbnB1dCgnc3JjJykgc2V0IHNyYyhzcmM6IHN0cmluZykge1xyXG4gICAgdGhpcy52aWRlb1NyYyA9IHNyYztcclxuICAgIHRoaXMuaWZyYW1lU3JjID0gdGhpcy5fc2FuaXRpemVyLmJ5cGFzc1NlY3VyaXR5VHJ1c3RSZXNvdXJjZVVybChzcmMpO1xyXG4gIH1cclxuXHJcbiAgQElucHV0KCdwYXVzZScpIHNldCBwYXVzZVZpZGVvKHNob3VsZFBhdXNlOiBib29sZWFuKSB7XHJcbiAgICBpZiAodGhpcy5pZnJhbWU/Lm5hdGl2ZUVsZW1lbnQpIHtcclxuICAgICAgaWYgKHNob3VsZFBhdXNlKSB7XHJcbiAgICAgICAgY29uc3QgaWZyYW1lOiBIVE1MSUZyYW1lRWxlbWVudCA9IHRoaXMuaWZyYW1lLm5hdGl2ZUVsZW1lbnQ7XHJcbiAgICAgICAgaWZyYW1lLnNyYyA9IG51bGw7XHJcblxyXG4gICAgICAgIGlmICghdGhpcy5hdXRvcGxheSAmJiB0aGlzLnZpZGVvU3JjKSB7XHJcbiAgICAgICAgICB0aGlzLmlmcmFtZVNyYyA9IHRoaXMuX3Nhbml0aXplci5ieXBhc3NTZWN1cml0eVRydXN0UmVzb3VyY2VVcmwodGhpcy52aWRlb1NyYyk7XHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBASW5wdXQoKSBhdXRvcGxheTogYm9vbGVhbjtcclxuXHJcbiAgQElucHV0KCkgbG9hZGluZ0F0dHI6ICdlYWdlcicgfCAnbGF6eSc7XHJcblxyXG4gIEBWaWV3Q2hpbGQoJ2lmcmFtZScpIGlmcmFtZTogRWxlbWVudFJlZjtcclxuXHJcbiAgY29uc3RydWN0b3IocHJpdmF0ZSBfc2FuaXRpemVyOiBEb21TYW5pdGl6ZXIpIHtcclxuICB9XHJcbn1cclxuIl19