import { Component, Input, Output, HostBinding, EventEmitter, ChangeDetectionStrategy } from '@angular/core';
import { NgSwitch, NgSwitchCase, NgIf } from '@angular/common';
import { animate, style, transition, trigger } from '@angular/animations';
import { imageFailedSvg } from './svg-assets';
import { ImgRecognizer } from '../../utils/img-recognizer';
import * as i0 from "@angular/core";
import * as i1 from "@angular/platform-browser";
export class GalleryImageComponent {
    get imageState() {
        return this.state;
    }
    constructor(_sanitizer) {
        this._sanitizer = _sanitizer;
        this.state = 'loading';
        this.errorIcon = imageFailedSvg;
        /** Stream that emits when an error occurs */
        this.error = new EventEmitter();
    }
    ngOnInit() {
        if (this.loadingIcon) {
            this.loaderTemplate = this._sanitizer.bypassSecurityTrustHtml(this.loadingIcon);
        }
        if (this.loadingError) {
            this.errorTemplate = this._sanitizer.bypassSecurityTrustHtml(this.loadingError);
        }
        if (this.errorIcon) {
            this.errorSvg = this._sanitizer.bypassSecurityTrustHtml(this.errorIcon);
        }
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.2.1", ngImport: i0, type: GalleryImageComponent, deps: [{ token: i1.DomSanitizer }], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "18.2.1", type: GalleryImageComponent, isStandalone: true, selector: "gallery-image", inputs: { isThumbnail: "isThumbnail", index: "index", loadingAttr: "loadingAttr", alt: "alt", src: "src", loadingIcon: "loadingIcon", loadingError: "loadingError", errorIcon: "errorIcon" }, outputs: { error: "error" }, host: { properties: { "attr.imageState": "this.imageState" } }, ngImport: i0, template: `
    <ng-container [ngSwitch]="state">

      <ng-container *ngIf="isThumbnail; else main">
        <img [@fadeIn]="state"
             [src]="src"
             [attr.alt]="alt"
             [attr.loading]="loadingAttr"
             [style.visibility]="state === 'success' ? 'visible' : 'hidden'"
             class="g-image-item"
             (load)="state = 'success'"
             (error)="state = 'failed'; error.emit($event)"/>
      </ng-container>
      <ng-template #main>
        <img [galleryImage]="index"
             [@fadeIn]="state"
             [src]="src"
             [attr.alt]="alt"
             [attr.loading]="loadingAttr"
             [style.visibility]="state === 'success' ? 'visible' : 'hidden'"
             class="g-image-item"
             (load)="state = 'success'"
             (error)="state = 'failed'; error.emit($event)"/>
      </ng-template>

      <div *ngSwitchCase="'failed'"
           class="g-image-error-message">
        <div *ngIf="errorTemplate; else defaultError"
             [innerHTML]="errorTemplate"></div>
        <ng-template #defaultError>
          <ng-container *ngIf="isThumbnail; else isLarge">
            <h4>
              <div class="gallery-thumb-error" [innerHTML]="errorSvg"></div>
            </h4>
          </ng-container>
          <ng-template #isLarge>
            <h2>
              <div class="gallery-image-error" [innerHTML]="errorSvg"></div>
            </h2>
            <p>Unable to load the image!</p>
          </ng-template>
        </ng-template>
      </div>

      <ng-container *ngSwitchCase="'loading'">
        <div *ngIf="loaderTemplate; else defaultLoader"
             class="g-loading"
             [innerHTML]="loaderTemplate">
        </div>
        <ng-template #defaultLoader>
          <div *ngIf="isThumbnail" class="g-thumb-loading"></div>
        </ng-template>
      </ng-container>
    </ng-container>
  `, isInline: true, styles: [":host{display:flex;width:100%;height:100%;max-height:100%;max-width:100%;transition:opacity .3s cubic-bezier(.5,0,.5,1);opacity:var(--g-thumb-opacity)}:host[imageState=success]{align-self:center}:host ::ng-deep svg{width:100%;height:100%}.gallery-image-error{width:100px;height:100px}.gallery-thumb-error{width:40px;height:40px}img.g-image-item{object-fit:var(--image-object-fit);width:100%;height:100%;pointer-events:none;max-height:100%;max-width:100%}.g-image-error-message{position:absolute;z-index:10;inset:0;color:#fff;display:flex;align-items:center;justify-content:center;flex-direction:column}h2,h4{color:coral;margin:0}h2{font-size:3.5em;margin-bottom:.3em}h4{font-size:1.6em}.g-loading{position:absolute;transform:translate3d(-50%,-50%,0);left:50%;top:50%;width:80px;height:80px}.g-active-thumb .g-thumb-loading{background-color:#464646}.g-thumb-loading{position:relative;overflow:hidden;width:100%;height:100%;background-color:#262626}.g-thumb-loading:before{content:\"\";position:absolute;inset:0 0 0 50%;z-index:1;width:500%;margin-left:-250%;animation:phAnimation .8s linear infinite;background:linear-gradient(to right,#fff0 46%,#ffffff59,#fff0 54%) 50% 50%}@keyframes phAnimation{0%{transform:translate3d(-30%,0,0)}to{transform:translate3d(30%,0,0)}}\n"], dependencies: [{ kind: "directive", type: NgSwitch, selector: "[ngSwitch]", inputs: ["ngSwitch"] }, { kind: "directive", type: NgSwitchCase, selector: "[ngSwitchCase]", inputs: ["ngSwitchCase"] }, { kind: "directive", type: NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { kind: "directive", type: ImgRecognizer, selector: "img[galleryImage]", inputs: ["galleryImage"] }], animations: [
            trigger('fadeIn', [
                transition('* => success', [
                    style({ opacity: 0 }),
                    animate('300ms ease-in', style({ opacity: 1 }))
                ])
            ])
        ], changeDetection: i0.ChangeDetectionStrategy.OnPush }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.2.1", ngImport: i0, type: GalleryImageComponent, decorators: [{
            type: Component,
            args: [{ selector: 'gallery-image', changeDetection: ChangeDetectionStrategy.OnPush, animations: [
                        trigger('fadeIn', [
                            transition('* => success', [
                                style({ opacity: 0 }),
                                animate('300ms ease-in', style({ opacity: 1 }))
                            ])
                        ])
                    ], template: `
    <ng-container [ngSwitch]="state">

      <ng-container *ngIf="isThumbnail; else main">
        <img [@fadeIn]="state"
             [src]="src"
             [attr.alt]="alt"
             [attr.loading]="loadingAttr"
             [style.visibility]="state === 'success' ? 'visible' : 'hidden'"
             class="g-image-item"
             (load)="state = 'success'"
             (error)="state = 'failed'; error.emit($event)"/>
      </ng-container>
      <ng-template #main>
        <img [galleryImage]="index"
             [@fadeIn]="state"
             [src]="src"
             [attr.alt]="alt"
             [attr.loading]="loadingAttr"
             [style.visibility]="state === 'success' ? 'visible' : 'hidden'"
             class="g-image-item"
             (load)="state = 'success'"
             (error)="state = 'failed'; error.emit($event)"/>
      </ng-template>

      <div *ngSwitchCase="'failed'"
           class="g-image-error-message">
        <div *ngIf="errorTemplate; else defaultError"
             [innerHTML]="errorTemplate"></div>
        <ng-template #defaultError>
          <ng-container *ngIf="isThumbnail; else isLarge">
            <h4>
              <div class="gallery-thumb-error" [innerHTML]="errorSvg"></div>
            </h4>
          </ng-container>
          <ng-template #isLarge>
            <h2>
              <div class="gallery-image-error" [innerHTML]="errorSvg"></div>
            </h2>
            <p>Unable to load the image!</p>
          </ng-template>
        </ng-template>
      </div>

      <ng-container *ngSwitchCase="'loading'">
        <div *ngIf="loaderTemplate; else defaultLoader"
             class="g-loading"
             [innerHTML]="loaderTemplate">
        </div>
        <ng-template #defaultLoader>
          <div *ngIf="isThumbnail" class="g-thumb-loading"></div>
        </ng-template>
      </ng-container>
    </ng-container>
  `, standalone: true, imports: [NgSwitch, NgSwitchCase, NgIf, ImgRecognizer], styles: [":host{display:flex;width:100%;height:100%;max-height:100%;max-width:100%;transition:opacity .3s cubic-bezier(.5,0,.5,1);opacity:var(--g-thumb-opacity)}:host[imageState=success]{align-self:center}:host ::ng-deep svg{width:100%;height:100%}.gallery-image-error{width:100px;height:100px}.gallery-thumb-error{width:40px;height:40px}img.g-image-item{object-fit:var(--image-object-fit);width:100%;height:100%;pointer-events:none;max-height:100%;max-width:100%}.g-image-error-message{position:absolute;z-index:10;inset:0;color:#fff;display:flex;align-items:center;justify-content:center;flex-direction:column}h2,h4{color:coral;margin:0}h2{font-size:3.5em;margin-bottom:.3em}h4{font-size:1.6em}.g-loading{position:absolute;transform:translate3d(-50%,-50%,0);left:50%;top:50%;width:80px;height:80px}.g-active-thumb .g-thumb-loading{background-color:#464646}.g-thumb-loading{position:relative;overflow:hidden;width:100%;height:100%;background-color:#262626}.g-thumb-loading:before{content:\"\";position:absolute;inset:0 0 0 50%;z-index:1;width:500%;margin-left:-250%;animation:phAnimation .8s linear infinite;background:linear-gradient(to right,#fff0 46%,#ffffff59,#fff0 54%) 50% 50%}@keyframes phAnimation{0%{transform:translate3d(-30%,0,0)}to{transform:translate3d(30%,0,0)}}\n"] }]
        }], ctorParameters: () => [{ type: i1.DomSanitizer }], propDecorators: { isThumbnail: [{
                type: Input
            }], index: [{
                type: Input
            }], loadingAttr: [{
                type: Input
            }], alt: [{
                type: Input
            }], src: [{
                type: Input
            }], loadingIcon: [{
                type: Input
            }], loadingError: [{
                type: Input
            }], errorIcon: [{
                type: Input
            }], error: [{
                type: Output
            }], imageState: [{
                type: HostBinding,
                args: ['attr.imageState']
            }] } });
//# sourceMappingURL=data:application/json;base64,