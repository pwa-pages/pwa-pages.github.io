{"ast":null,"code":"import _asyncToGenerator from \"/home/pebblerye/pwa/pwa-pages.github.io/rosen-watcher-pwa/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { of, throwError, concat, EMPTY } from 'rxjs';\nimport { catchError, map } from 'rxjs/operators';\nimport { firstValueFrom } from 'rxjs';\nimport { EventType } from './event.service';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"./event.service\";\nexport let DownloadService = /*#__PURE__*/(() => {\n  class DownloadService {\n    constructor(http, eventService) {\n      this.http = http;\n      this.eventService = eventService;\n      this.activeDownloads = {};\n    }\n    downloadPermitInfo(watcherUrl) {\n      return this.download(watcherUrl + '/api/info');\n    }\n    download(url) {\n      var _this = this;\n      return _asyncToGenerator(function* () {\n        console.log('Downloading from:', url);\n        return firstValueFrom(_this.downloadStream(url));\n      })();\n    }\n    initiateDownload() {\n      var _this2 = this;\n      return _asyncToGenerator(function* () {\n        const numActive = Object.values(_this2.activeDownloads).filter(value => value === true).length;\n        if (numActive == 0) {\n          _this2.eventService.sendEvent(EventType.StartFullDownload);\n        }\n      })();\n    }\n    endDownload(url) {\n      var _this3 = this;\n      return _asyncToGenerator(function* () {\n        if (_this3.activeDownloads[url]) {\n          _this3.activeDownloads[url] = false;\n          const numActive = Object.values(_this3.activeDownloads).filter(value => value === true).length;\n          if (numActive == 0) {\n            _this3.eventService.sendEvent(EventType.EndFullDownload);\n          }\n        }\n      })();\n    }\n    downloadStream(url) {\n      this.initiateDownload();\n      console.log('Attempting to load from cache:', url);\n      this.activeDownloads[url] = true;\n      // Check if the data exists in the cache\n      const cachedData = localStorage.getItem(url);\n      let cacheObservable;\n      if (cachedData) {\n        console.log('Loaded from cache:', url);\n        cacheObservable = of(JSON.parse(cachedData));\n      } else {\n        console.log('No cache available:', url);\n        cacheObservable = EMPTY; // Observable that completes immediately\n      }\n      const downloadObservable = this.http.get(url).pipe(map(results => {\n        console.log('Downloaded from server:', url);\n        localStorage.setItem(url, JSON.stringify(results));\n        this.endDownload(url);\n        return results;\n      }), catchError(error => {\n        console.log('Download failed:', url);\n        this.endDownload(url);\n        return throwError(error);\n      }));\n      // First emit cached data if available, then try to download and emit the new data\n      return concat(cacheObservable, downloadObservable);\n    }\n    static {\n      this.ɵfac = function DownloadService_Factory(__ngFactoryType__) {\n        return new (__ngFactoryType__ || DownloadService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.EventService));\n      };\n    }\n    static {\n      this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n        token: DownloadService,\n        factory: DownloadService.ɵfac,\n        providedIn: 'root'\n      });\n    }\n  }\n  return DownloadService;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}