import { EventEmitter, AfterViewInit, OnChanges, SimpleChanges, ElementRef, QueryList } from '@angular/core';
import { Observable, Subject } from 'rxjs';
import { Gallery } from '../services/gallery.service';
import { GalleryState, GalleryError } from '../models/gallery.model';
import { GalleryConfig } from '../models/config.model';
import { SliderAdapter } from './adapters';
import { SmoothScrollOptions } from '../smooth-scroll';
import { GalleryItemComponent } from './gallery-item.component';
import * as i0 from "@angular/core";
export declare class GallerySliderComponent implements AfterViewInit, OnChanges {
    private _gallery;
    /** Stream that emits the slider position */
    readonly position$: Subject<SmoothScrollOptions>;
    /** Slider adapter */
    adapter: SliderAdapter;
    /** Stream that emits the item components once they're initialized */
    items$: Observable<GalleryItemComponent[]>;
    isScrolling: boolean;
    isSliding: boolean;
    isResizing: boolean;
    /** Gallery ID */
    galleryId: string;
    /** Gallery state */
    state: GalleryState;
    /** Gallery config */
    config: GalleryConfig;
    /** Stream that emits when item is clicked */
    itemClick: EventEmitter<number>;
    /** Stream that emits when an error occurs */
    error: EventEmitter<GalleryError>;
    /** Slider ElementRef */
    sliderEl: ElementRef<HTMLElement>;
    items: QueryList<GalleryItemComponent>;
    get slider(): HTMLElement;
    constructor(_gallery: Gallery);
    ngOnChanges(changes: SimpleChanges): void;
    ngAfterViewInit(): void;
    trackByFn(index: number, item: any): any;
    onActiveIndexChange(index: number): void;
    private scrollToIndex;
    static ɵfac: i0.ɵɵFactoryDeclaration<GallerySliderComponent, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<GallerySliderComponent, "gallery-slider", never, { "galleryId": { "alias": "galleryId"; "required": false; }; "state": { "alias": "state"; "required": false; }; "config": { "alias": "config"; "required": false; }; }, { "itemClick": "itemClick"; "error": "error"; }, never, ["*"], true, never>;
}
