import { Injectable } from '@angular/core';
import { BehaviorSubject, filter, map, switchMap, EMPTY } from 'rxjs';
import * as i0 from "@angular/core";
export class ImgManager {
    constructor() {
        this.trigger$ = new BehaviorSubject(null);
        this.images = new Map();
    }
    getActiveItem(state$) {
        return this.trigger$.pipe(switchMap(() => state$.pipe(switchMap((state) => {
            const img = this.images.get(state.currIndex);
            if (img) {
                return img.state.pipe(filter((state) => state !== 'loading'), map(() => img.target));
            }
            return EMPTY;
        }))));
    }
    addItem(index, payload) {
        this.images.set(index, payload);
        this.trigger$.next();
    }
    deleteItem(index) {
        if (this.images.has(index)) {
            this.images.delete(index);
            this.trigger$.next();
        }
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.2.1", ngImport: i0, type: ImgManager, deps: [], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "18.2.1", ngImport: i0, type: ImgManager }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.2.1", ngImport: i0, type: ImgManager, decorators: [{
            type: Injectable
        }] });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW1nLW1hbmFnZXIuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9wcm9qZWN0cy9uZy1nYWxsZXJ5L3NyYy9saWIvdXRpbHMvaW1nLW1hbmFnZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUMzQyxPQUFPLEVBQWMsZUFBZSxFQUFFLE1BQU0sRUFBRSxHQUFHLEVBQUUsU0FBUyxFQUFFLEtBQUssRUFBRSxNQUFNLE1BQU0sQ0FBQzs7QUFVbEYsTUFBTSxPQUFPLFVBQVU7SUFEdkI7UUFHbUIsYUFBUSxHQUEwQixJQUFJLGVBQWUsQ0FBTyxJQUFJLENBQUMsQ0FBQztRQUVsRSxXQUFNLEdBQStCLElBQUksR0FBRyxFQUF5QixDQUFDO0tBOEJ4RjtJQTVCQyxhQUFhLENBQUMsTUFBZ0M7UUFDNUMsT0FBTyxJQUFJLENBQUMsUUFBUSxDQUFDLElBQUksQ0FDdkIsU0FBUyxDQUFDLEdBQUcsRUFBRSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQ3pCLFNBQVMsQ0FBQyxDQUFDLEtBQW1CLEVBQUUsRUFBRTtZQUNoQyxNQUFNLEdBQUcsR0FBa0IsSUFBSSxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLFNBQVMsQ0FBQyxDQUFDO1lBQzVELElBQUksR0FBRyxFQUFFLENBQUM7Z0JBQ1IsT0FBTyxHQUFHLENBQUMsS0FBSyxDQUFDLElBQUksQ0FDbkIsTUFBTSxDQUFDLENBQUMsS0FBZ0IsRUFBRSxFQUFFLENBQUMsS0FBSyxLQUFLLFNBQVMsQ0FBQyxFQUNqRCxHQUFHLENBQUMsR0FBRyxFQUFFLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxDQUN0QixDQUFBO1lBQ0gsQ0FBQztZQUNELE9BQU8sS0FBSyxDQUFDO1FBQ2YsQ0FBQyxDQUFDLENBQ0gsQ0FBQyxDQUNILENBQUM7SUFDSixDQUFDO0lBRUQsT0FBTyxDQUFDLEtBQWEsRUFBRSxPQUFzQjtRQUMzQyxJQUFJLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxLQUFLLEVBQUUsT0FBTyxDQUFDLENBQUM7UUFDaEMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxJQUFJLEVBQUUsQ0FBQztJQUN2QixDQUFDO0lBRUQsVUFBVSxDQUFDLEtBQWE7UUFDdEIsSUFBSSxJQUFJLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDO1lBQzNCLElBQUksQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQyxDQUFDO1lBQzFCLElBQUksQ0FBQyxRQUFRLENBQUMsSUFBSSxFQUFFLENBQUM7UUFDdkIsQ0FBQztJQUNILENBQUM7OEdBakNVLFVBQVU7a0hBQVYsVUFBVTs7MkZBQVYsVUFBVTtrQkFEdEIsVUFBVSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdGFibGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuaW1wb3J0IHsgT2JzZXJ2YWJsZSwgQmVoYXZpb3JTdWJqZWN0LCBmaWx0ZXIsIG1hcCwgc3dpdGNoTWFwLCBFTVBUWSB9IGZyb20gJ3J4anMnO1xyXG5pbXBvcnQgeyBHYWxsZXJ5U3RhdGUgfSBmcm9tICcuLi9tb2RlbHMvZ2FsbGVyeS5tb2RlbCc7XHJcbmltcG9ydCB7IEl0ZW1TdGF0ZSB9IGZyb20gJy4uL2NvbXBvbmVudHMvdGVtcGxhdGVzL2l0ZW1zLm1vZGVsJztcclxuXHJcbmludGVyZmFjZSBJbWFnZVJlZ2lzdHJ5IHtcclxuICBzdGF0ZTogT2JzZXJ2YWJsZTxJdGVtU3RhdGU+O1xyXG4gIHRhcmdldDogSFRNTEltYWdlRWxlbWVudDtcclxufVxyXG5cclxuQEluamVjdGFibGUoKVxyXG5leHBvcnQgY2xhc3MgSW1nTWFuYWdlciB7XHJcblxyXG4gIHByaXZhdGUgcmVhZG9ubHkgdHJpZ2dlciQ6IEJlaGF2aW9yU3ViamVjdDx2b2lkPiA9IG5ldyBCZWhhdmlvclN1YmplY3Q8dm9pZD4obnVsbCk7XHJcblxyXG4gIHByaXZhdGUgcmVhZG9ubHkgaW1hZ2VzOiBNYXA8bnVtYmVyLCBJbWFnZVJlZ2lzdHJ5PiA9IG5ldyBNYXA8bnVtYmVyLCBJbWFnZVJlZ2lzdHJ5PigpO1xyXG5cclxuICBnZXRBY3RpdmVJdGVtKHN0YXRlJDogT2JzZXJ2YWJsZTxHYWxsZXJ5U3RhdGU+KTogT2JzZXJ2YWJsZTxIVE1MSW1hZ2VFbGVtZW50PiB7XHJcbiAgICByZXR1cm4gdGhpcy50cmlnZ2VyJC5waXBlKFxyXG4gICAgICBzd2l0Y2hNYXAoKCkgPT4gc3RhdGUkLnBpcGUoXHJcbiAgICAgICAgc3dpdGNoTWFwKChzdGF0ZTogR2FsbGVyeVN0YXRlKSA9PiB7XHJcbiAgICAgICAgICBjb25zdCBpbWc6IEltYWdlUmVnaXN0cnkgPSB0aGlzLmltYWdlcy5nZXQoc3RhdGUuY3VyckluZGV4KTtcclxuICAgICAgICAgIGlmIChpbWcpIHtcclxuICAgICAgICAgICAgcmV0dXJuIGltZy5zdGF0ZS5waXBlKFxyXG4gICAgICAgICAgICAgIGZpbHRlcigoc3RhdGU6IEl0ZW1TdGF0ZSkgPT4gc3RhdGUgIT09ICdsb2FkaW5nJyksXHJcbiAgICAgICAgICAgICAgbWFwKCgpID0+IGltZy50YXJnZXQpXHJcbiAgICAgICAgICAgIClcclxuICAgICAgICAgIH1cclxuICAgICAgICAgIHJldHVybiBFTVBUWTtcclxuICAgICAgICB9KVxyXG4gICAgICApKVxyXG4gICAgKTtcclxuICB9XHJcblxyXG4gIGFkZEl0ZW0oaW5kZXg6IG51bWJlciwgcGF5bG9hZDogSW1hZ2VSZWdpc3RyeSk6IHZvaWQge1xyXG4gICAgdGhpcy5pbWFnZXMuc2V0KGluZGV4LCBwYXlsb2FkKTtcclxuICAgIHRoaXMudHJpZ2dlciQubmV4dCgpO1xyXG4gIH1cclxuXHJcbiAgZGVsZXRlSXRlbShpbmRleDogbnVtYmVyKTogdm9pZCB7XHJcbiAgICBpZiAodGhpcy5pbWFnZXMuaGFzKGluZGV4KSkge1xyXG4gICAgICB0aGlzLmltYWdlcy5kZWxldGUoaW5kZXgpO1xyXG4gICAgICB0aGlzLnRyaWdnZXIkLm5leHQoKTtcclxuICAgIH1cclxuICB9XHJcbn1cclxuIl19