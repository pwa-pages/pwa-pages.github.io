{"ast":null,"code":"import { NavigationEnd } from '@angular/router';\nimport '../../shared/ts/constants';\nimport { filter } from 'rxjs/operators';\nimport { EventType } from './event.service';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/router\";\nimport * as i2 from \"./event.service\";\nexport let NavigationService = /*#__PURE__*/(() => {\n  class NavigationService {\n    constructor(router, eventService) {\n      this.router = router;\n      this.eventService = eventService;\n      this.currentNavigationIndex = 0;\n      this.navigationItems = [];\n      this.latestVersionUpdate = null;\n      this.navigationItems.push({\n        route: '/statistics'\n      });\n      this.navigationItems.push({\n        route: '/performance'\n      });\n      this.navigationItems.push({\n        route: '/watchers'\n      });\n      this.navigationItems.push({\n        route: '/chainperformance'\n      });\n      this.router.events.pipe(filter(event => event instanceof NavigationEnd)).subscribe(event => {\n        const url = event.urlAfterRedirects;\n        this.updateCurrentNavigationIndex(url);\n      });\n      this.eventService.subscribeToEvent(EventType.VersionUpdated, v => {\n        this.latestVersionUpdate = v;\n        //this.checkForReload();\n      });\n      const performanceItem = localStorage.getItem('performanceScreen');\n      if (performanceItem?.startsWith('/chainperformance')) {\n        this.swapPerformanceItems();\n      }\n    }\n    /*\n    private checkForReload() {\n      if (\n        this.latestVersionUpdate &&\n        localStorage.getItem('versionReload') != this.latestVersionUpdate\n      ) {\n        localStorage.setItem('versionReload', this.latestVersionUpdate);\n        this.latestVersionUpdate = null;\n        console.log('Application has been updated, reloading screen.');\n        setTimeout(() => {\n          console.log('Doing the reload...');\n          window.location.reload();\n        }, 1000);\n      }\n    }*/\n    updateCurrentNavigationIndex(url) {\n      if (url.startsWith('/chainperformance')) {\n        this.currentNavigationIndex = 1;\n        return;\n      }\n      let index = this.navigationItems.findIndex(item => url.startsWith(item.route));\n      if (index == -1) {\n        index = 0;\n      }\n      this.currentNavigationIndex = index;\n      //this.checkForReload();\n    }\n    getCurrentNavigationItem() {\n      return this.navigationItems[this.currentNavigationIndex];\n    }\n    getNavigationItems() {\n      return this.navigationItems;\n    }\n    getLeftItem() {\n      return this.navigationItems[(this.currentNavigationIndex - 1 + this.navigationItems.length) % 3];\n    }\n    getRightItem() {\n      return this.navigationItems[(this.currentNavigationIndex + 1) % 3];\n    }\n    navigate(to) {\n      if (to.startsWith('/performance') && !this.router.url.startsWith('/performance')) {\n        this.swapPerformanceItems();\n      } else if (to.startsWith('/chainperformance') && !this.router.url.startsWith('/chainperformance')) {\n        this.swapPerformanceItems();\n      }\n      localStorage.setItem('performanceScreen', this.navigationItems[1].route);\n      this.router.navigate([to]);\n    }\n    swapPerformanceItems() {\n      const t = this.navigationItems[1];\n      this.navigationItems[1] = this.navigationItems[3];\n      this.navigationItems[3] = t;\n    }\n    navigateTo(to) {\n      this.currentNavigationIndex = to;\n      return this.getCurrentNavigationItem();\n    }\n    navigateRight() {\n      const l = 3;\n      this.currentNavigationIndex = (this.currentNavigationIndex + 1) % l;\n      return this.getCurrentNavigationItem();\n    }\n    navigateLeft() {\n      const l = 3;\n      this.currentNavigationIndex = (this.currentNavigationIndex - 1 + l) % l;\n      return this.getCurrentNavigationItem();\n    }\n    static {\n      this.ɵfac = function NavigationService_Factory(__ngFactoryType__) {\n        return new (__ngFactoryType__ || NavigationService)(i0.ɵɵinject(i1.Router), i0.ɵɵinject(i2.EventService));\n      };\n    }\n    static {\n      this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n        token: NavigationService,\n        factory: NavigationService.ɵfac,\n        providedIn: 'root'\n      });\n    }\n  }\n  return NavigationService;\n})();\nexport class NavigationItem {}","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}