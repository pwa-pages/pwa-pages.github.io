{"ast":null,"code":"import { signal } from '@angular/core';\nimport { map } from 'rxjs/operators';\nimport { ChainType } from '../../service/ts/models/chaintype';\nimport '../../shared/ts/chain.service';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"./download.service\";\nimport * as i2 from \"./price.service\";\nexport function createChainNumber() {\n  return Object.fromEntries(Object.values(ChainType).map(key => [key, undefined]));\n}\nexport class WatchersAmounts {}\nexport class WatchersStats {\n  constructor() {\n    this.activePermitCount = createChainNumber();\n    this.bulkPermitCount = createChainNumber();\n    this.chainLockedERG = createChainNumber();\n    this.chainLockedRSN = createChainNumber();\n    this.chainPermitCount = createChainNumber();\n    this.chainWatcherCount = createChainNumber();\n    this.permitCost = rs_PermitCost;\n    this.triggerPermitCount = createChainNumber();\n    this.watcherCollateralERG = rs_WatcherCollateralERG;\n    this.watcherCollateralRSN = rs_WatcherCollateralRSN;\n    this.watchersAmountsPerCurrency = Object.fromEntries(Object.values(Currency).map(currency => [currency, new WatchersAmounts()]));\n  }\n}\nexport let WatchersDataService = /*#__PURE__*/(() => {\n  class WatchersDataService {\n    constructor(downloadService, priceService) {\n      this.downloadService = downloadService;\n      this.priceService = priceService;\n      this.watcherUrl = 'https://api.ergoplatform.com/api/v1/addresses/ChTbcUHgBNqNMVjzV1dvCb2UDrX9nh6rGGcURCFEYXuH5ykKh7Ea3FvpFhHb9AnxXJkgAZ6WASN7Rdn7VMgkFaqP5Z5RWp84cDTmsZkhYrgAVGN7mjeLs8UxqUvRi2ArZbm35Xqk8Y88Uq2MJzmDVHLHzCYRGym8XPxFM4YEVxqzHSKYYDvaMLgKvoskFXKrvceAqEiyih26hjpekCmefiF1VmrPwwShrYYxgHLFCZdigw5JWKV4DmewuR1FH3oNtGoFok859SXeuRbpQfrTjHhGVfDsbXEo3GYP2imAh1APKyLEsG9LcE5WZnJV8eseQnYA8sACLDKZ8Tbpp9KUE7QZNFpnwGnkYx7eybbrCeFDFjTGpsBzaS6fRKrWj2J4Wy3TTyTU1F8iMCrHBF8inZPw9Kg9YEZuJMdXDFNtuaK15u86mF2s2Z5B1vdL5MtZfWThFLnixKds8ABEmGbe8n75Dym5Wv3pkEXQ6XPpaMjUxHfRJB3EfcoFM5nsZHWSTfbFBcHxSRnEiiU67cgJsBUpQn7FvEvqNLiKM4fL3yyykMtQ6RjAS8rhycszphvQa5qFrDHie4vPuTq8/balance/confirmed';\n      this.rsnToken = '8b08cdd5449a9592a9e79711d7d79249d7a03c535d17efaee83e216e80a44c4b';\n      this.watchersStatsSignal = signal(new WatchersStats());\n      this.watchersStats = new WatchersStats();\n      this.busyCounter = 0;\n    }\n    getWatcherStats() {\n      return this.watchersStatsSignal;\n    }\n    getWatchersInfo() {\n      const result = this.downloadService.downloadStream(this.watcherUrl);\n      return result;\n    }\n    getPermitsInfo(chainType) {\n      const address = permitAddresses[chainType];\n      return this.downloadPermitInfo(address, this.rsnToken, null);\n    }\n    updateTotal(map) {\n      return Object.values(map).reduce((acc, val) => (acc ?? 0) + (val ?? 0), 0);\n    }\n    convertCurrencies() {\n      Object.values(Currency).forEach(currency => {\n        const conversions = [{\n          amount: rs_WatcherCollateralRSN,\n          from: 'RSN',\n          callback: c => this.watchersStats.watchersAmountsPerCurrency[currency].rsnCollateral = c\n        }, {\n          amount: rs_WatcherCollateralERG,\n          from: 'ERG',\n          callback: c => this.watchersStats.watchersAmountsPerCurrency[currency].ergCollateral = c\n        }, {\n          amount: rs_PermitCost,\n          from: 'RSN',\n          callback: c => this.watchersStats.watchersAmountsPerCurrency[currency].permitValue = c\n        }, {\n          amount: this.watchersStats.totalLockedERG ?? 0,\n          from: 'ERG',\n          callback: l => this.watchersStats.watchersAmountsPerCurrency[currency].totalLockedERG = l\n        }, {\n          amount: (this.watchersStats.totalLockedRSN ?? 0) + rs_PermitCost * (this.watchersStats.totalPermitCount ?? 0),\n          from: 'RSN',\n          callback: l => this.watchersStats.watchersAmountsPerCurrency[currency].totalLockedRSN = l\n        }];\n        conversions.forEach(({\n          amount,\n          from,\n          callback\n        }) => {\n          this.priceService.convert(amount, from, currency ?? '').subscribe(callback);\n        });\n      });\n    }\n    updateTotalLocked() {\n      Object.values(Currency).forEach(currency => {\n        this.watchersStats.watchersAmountsPerCurrency[currency].totalLocked = (this.watchersStats.watchersAmountsPerCurrency[currency].totalLockedERG ?? 0) + (this.watchersStats.watchersAmountsPerCurrency[currency].totalLockedRSN ?? 0);\n      });\n    }\n    getValue(map, chainType, multiplier) {\n      return (map[chainType] ?? 0) * multiplier;\n    }\n    setLockedAmounts(chainType) {\n      this.watchersStats.chainLockedRSN[chainType] = this.getValue(this.watchersStats.chainPermitCount, chainType, rs_PermitCost) + this.getValue(this.watchersStats.chainWatcherCount, chainType, rs_WatcherCollateralRSN);\n      this.watchersStats.chainLockedERG[chainType] = this.getValue(this.watchersStats.chainWatcherCount, chainType, rs_WatcherCollateralERG);\n      Object.values(ChainType).forEach(c => {\n        this.watchersStats.activePermitCount[c] = (this.watchersStats.bulkPermitCount[c] ?? 0) + (this.watchersStats.triggerPermitCount[c] ?? 0);\n      });\n      this.watchersStats.totalWatcherCount = this.updateTotal(this.watchersStats.chainWatcherCount);\n      this.watchersStats.totalPermitCount = this.updateTotal(this.watchersStats.chainPermitCount);\n      this.watchersStats.totalActivePermitCount = this.updateTotal(this.watchersStats.activePermitCount);\n      this.watchersStats.totalLockedRSN = this.updateTotal(this.watchersStats.chainLockedRSN);\n      this.watchersStats.totalLockedERG = this.updateTotal(this.watchersStats.chainLockedERG);\n      this.currencyUpdate();\n    }\n    currencyUpdate() {\n      Object.values(Currency).forEach(currency => {\n        this.watchersStats.watchersAmountsPerCurrency[currency].watcherValue = 0;\n        this.watchersStats.watchersAmountsPerCurrency[currency].permitValue = 0;\n      });\n      this.convertCurrencies();\n      this.updateTotalLocked();\n      Object.values(Currency).forEach(currency => {\n        this.watchersStats.watchersAmountsPerCurrency[currency].watcherValue = (this.watchersStats.watchersAmountsPerCurrency[currency].rsnCollateral ?? 0) + (this.watchersStats.watchersAmountsPerCurrency[currency].ergCollateral ?? 0);\n      });\n      const newStats = JSON.stringify(this.watchersStats);\n      if (JSON.stringify(this.watchersStatsSignal()) !== newStats) {\n        this.watchersStatsSignal.set(JSON.parse(newStats));\n      }\n    }\n    downloadPermitInfo(address, tokenId, tokenName) {\n      const permitsUrl = `https://api.ergoplatform.com/api/v1/addresses/${address}/balance/confirmed`;\n      return this.downloadService.downloadStream(permitsUrl).pipe(map(data => {\n        if (data.tokens) {\n          const tokenData = data.tokens.find(token => tokenId && token.tokenId === tokenId || tokenName && token.name === tokenName);\n          console.log(permitsUrl);\n          if (tokenData) {\n            tokenData.amount /= rs_PermitCost * Math.pow(10, tokenData.decimals);\n            tokenData.amount = Math.floor(tokenData.amount);\n          }\n        }\n        return data;\n      })).pipe(map(result => {\n        return result.tokens.find(token => tokenId && token.tokenId === tokenId || tokenName && token.name === tokenName);\n      }));\n    }\n    getTriggerPermitsInfo(chainType) {\n      const address = permitTriggerAddresses[chainType];\n      return this.downloadPermitInfo(address, null, 'rspv2' + chainType + 'RWT');\n    }\n    getBulkPermitsInfo(chainType) {\n      const address = permitBulkAddresses[chainType];\n      return this.downloadPermitInfo(address, null, 'rspv2' + chainType + 'RWT');\n    }\n    download() {\n      Object.values(ChainType).forEach(c => {\n        this.getTriggerPermitsInfo(c).pipe(map(permitsInfo => permitsInfo?.amount)).subscribe(amount => {\n          this.watchersStats.triggerPermitCount[c] = amount;\n          this.setLockedAmounts(c);\n        });\n        this.getBulkPermitsInfo(c).pipe(map(permitsInfo => permitsInfo?.amount)).subscribe(amount => {\n          this.watchersStats.bulkPermitCount[c] = amount;\n          this.setLockedAmounts(c);\n        });\n      });\n      const watcherInfo$ = this.getWatchersInfo();\n      Object.values(ChainType).forEach(c => {\n        watcherInfo$.pipe(map(watcherInfo => watcherInfo.tokens.find(token => token.name === 'rspv2' + c + 'AWC')?.amount ?? 0)).subscribe(amount => {\n          this.watchersStats.chainWatcherCount[c] = amount;\n          this.setLockedAmounts(c);\n        });\n        this.getPermitsInfo(c).pipe(map(permitsInfo => permitsInfo?.amount)).subscribe(amount => {\n          this.watchersStats.chainPermitCount[c] = amount;\n          this.setLockedAmounts(c);\n        });\n      });\n    }\n    static {\n      this.ɵfac = function WatchersDataService_Factory(__ngFactoryType__) {\n        return new (__ngFactoryType__ || WatchersDataService)(i0.ɵɵinject(i1.DownloadService), i0.ɵɵinject(i2.PriceService));\n      };\n    }\n    static {\n      this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n        token: WatchersDataService,\n        factory: WatchersDataService.ɵfac,\n        providedIn: 'root'\n      });\n    }\n  }\n  return WatchersDataService;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}