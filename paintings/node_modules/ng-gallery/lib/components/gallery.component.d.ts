import { EventEmitter, OnInit, AfterContentInit, OnChanges, OnDestroy, SimpleChanges } from '@angular/core';
import { Gallery } from '../services/gallery.service';
import { GalleryRef } from '../services/gallery-ref';
import { GalleryError, GalleryItem, GalleryState } from '../models/gallery.model';
import { IframeItemData, ImageItemData, VideoItemData, VimeoItemData, YoutubeItemData } from './templates/items.model';
import { BezierEasingOptions } from '../smooth-scroll';
import * as i0 from "@angular/core";
/**
 * Gallery component
 */
export declare class GalleryComponent implements OnInit, AfterContentInit, OnChanges, OnDestroy {
    private _gallery;
    /**
     * The gallery reference instance
     */
    galleryRef: GalleryRef;
    /**
     * The gallery instance unique id, required if more multiple gallery instances
     */
    id: string;
    /**
     * Loads the items array into the gallery
     */
    items: GalleryItem[];
    /**
     * Displays the navigation buttons
     */
    nav: boolean;
    /**
     * Displays the navigation bullets
     */
    bullets: boolean;
    /**
     * Enables loop cycling
     */
    loop: boolean;
    /**
     * Show visuals that helps debugging the component
     */
    debug: boolean;
    /**
     * Displays the thumbnails
     */
    thumbs: boolean;
    /**
     * Displays the counter or pagination
     */
    counter: boolean;
    /**
     * De-attaching the thumbnails from the main slider
     * If enabled - thumbnails won't automatically scroll to the active thumbnails
     */
    detachThumbs: boolean;
    /**
     * Fits each thumbnail size to its content
     */
    thumbAutosize: boolean;
    /**
     * Fits each item size to its content, This option should be used with:
     * - Does not work if `autoHeight` is turned on
     * - Does not work properly unless `loadingAttr="eager"`
     * - Does not work properly unless `loadingStrategy="preload"`
     */
    itemAutosize: boolean;
    /**
     * Automatically adjusts the gallery's height to fit the content
     */
    autoHeight: boolean;
    /**
     * Automatically cycle through items at time interval
     */
    autoplay: boolean;
    /**
     * Disables thumbnails' clicks
     */
    disableThumbs: boolean;
    /**
     * Disables bullets' clicks
     */
    disableBullets: boolean;
    /**
     * Disables sliding using mousewheel, touchpad, scroll and gestures on touch devices
     */
    disableScroll: boolean;
    /**
     * Disables sliding of thumbnails using touchpad, scroll and gestures on touch devices
     */
    disableThumbScroll: boolean;
    /**
     * Force centralizing the active thumbnail
     */
    thumbCentralized: boolean;
    /**
     * Disables sliding using the mouse
     */
    disableMouseScroll: boolean;
    /**
     * Disables sliding of thumbnails using the mouse
     */
    disableThumbMouseScroll: boolean;
    /**
     * Sets the size of the bullets navigation
     */
    bulletSize: number;
    /**
     * Sets the thumbnail's width
     */
    thumbWidth: number;
    /**
     * Sets the thumbnail's height
     */
    thumbHeight: number;
    /**
     * Sets the interval used for the autoplay feature
     */
    autoplayInterval: number;
    /**
     * Sets the duration used for smooth navigation between the items
     */
    scrollDuration: number;
    /**
     * Sets the debounce time used to throttle the gallery update after it is resized
     */
    resizeDebounceTime: number;
    /**
     * Sets the scroll behavior when the active item is changed
     */
    scrollBehavior: ScrollBehavior;
    /**
     * Sets the ease function used for smooth navigation between the items
     */
    scrollEase: BezierEasingOptions;
    /**
     * Sets the object-fit style applied on items' images
     */
    imageSize: 'cover' | 'contain';
    /**
     * Sets the object-fit style applied on thumbnails' images
     */
    thumbImageSize: 'cover' | 'contain';
    /**
     * Sets the bullets navigation position
     */
    bulletPosition: 'top' | 'bottom';
    /**
     * Sets the counter navigation position
     */
    counterPosition: 'top' | 'bottom';
    /**
     * Sets the sliding direction
     */
    orientation: 'horizontal' | 'vertical';
    /**
     * Sets the loading attribute applied on the items' images
     */
    loadingAttr: 'eager' | 'lazy';
    /**
     * Sets the loading strategy used for displaying the items
     * - `lazy` renders only the active item
     * - `default` renders only the active item, the previous item and the next item
     * - `preload` renders all the items, this option is required for `thumbAutoSize` is enabled
     */
    loadingStrategy: 'preload' | 'lazy' | 'default';
    /**
     * Sets the thumbnails position, it also sets the sliding direction of the thumbnails accordingly
     */
    thumbPosition: 'top' | 'left' | 'right' | 'bottom';
    /**
     * Destroy gallery ref on component destroy event
     * This intended to be used and disabled from the lightbox component
     * @ignore
     * */
    destroyRef: boolean;
    /**
     * Skip initializing the config with components inputs (Lightbox mode)
     * This intended to be used and enabled from the lightbox component
     * @ignore
     */
    skipInitConfig: boolean;
    /**
     * Stream that emits when an item is clicked
     */
    itemClick: EventEmitter<number>;
    /**
     * Stream that emits when a thumbnail is clicked
     */
    thumbClick: EventEmitter<number>;
    /**
     * Stream that emits when player state is changed
     */
    playingChange: EventEmitter<GalleryState>;
    /**
     * Stream that emits when index is changed
     */
    indexChange: EventEmitter<GalleryState>;
    /**
     * Stream that emits when items array is changed
     */
    itemsChange: EventEmitter<GalleryState>;
    /**
     * Stream that emits when an error occurs, this would emit for loading errors of image and video items only
     */
    error: EventEmitter<GalleryError>;
    /** @ignore */
    private _galleryItemDef;
    /** @ignore */
    private _galleryImageDef;
    /** @ignore */
    private _galleryThumbDef;
    /** @ignore */
    private _galleryBoxDef;
    /** @ignore */
    private _itemClick$;
    /** @ignore */
    private _thumbClick$;
    /** @ignore */
    private _itemChange$;
    /** @ignore */
    private _indexChange$;
    /** @ignore */
    private _playingChange$;
    constructor(_gallery: Gallery);
    /** @ignore */
    private getConfig;
    /** @ignore */
    ngOnChanges(changes: SimpleChanges): void;
    /** @ignore */
    ngOnInit(): void;
    /** @ignore */
    ngAfterContentInit(): void;
    /** @ignore */
    ngOnDestroy(): void;
    /** @ignore */
    onItemClick(i: number): void;
    /** @ignore */
    onThumbClick(i: number): void;
    /** @ignore */
    onError(err: GalleryError): void;
    /**
     * Load items and reset the state
     */
    load(items: GalleryItem[]): void;
    /**
     * Add gallery item, it can be any item, suitable to add item with a custom template
     */
    add(item: GalleryItem, active?: boolean): void;
    /**
     * Add image item
     */
    addImage(data: ImageItemData, active?: boolean): void;
    /**
     * Add video item
     */
    addVideo(data: VideoItemData, active?: boolean): void;
    /**
     * Add iframe item
     */
    addIframe(data: IframeItemData, active?: boolean): void;
    /**
     * Add Youtube item
     */
    addYoutube(data: YoutubeItemData, active?: boolean): void;
    /**
     * Add Vimeo item
     */
    addVimeo(data: VimeoItemData, active?: boolean): void;
    /**
     * Remove gallery item by index
     */
    remove(i: number): void;
    /**
     * Go to next item
     */
    next(behavior?: ScrollBehavior, loop?: boolean): void;
    /**
     * Go to prev item
     */
    prev(behavior?: ScrollBehavior, loop?: boolean): void;
    /**
     * Set active item
     */
    set(i: number, behavior?: ScrollBehavior): void;
    /**
     * Reset to initial state
     */
    reset(): void;
    /**
     * Start the player
     */
    play(interval?: number): void;
    /**
     * Stop the player
     */
    stop(): void;
    static ɵfac: i0.ɵɵFactoryDeclaration<GalleryComponent, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<GalleryComponent, "gallery", never, { "id": { "alias": "id"; "required": false; }; "items": { "alias": "items"; "required": false; }; "nav": { "alias": "nav"; "required": false; }; "bullets": { "alias": "bullets"; "required": false; }; "loop": { "alias": "loop"; "required": false; }; "debug": { "alias": "debug"; "required": false; }; "thumbs": { "alias": "thumbs"; "required": false; }; "counter": { "alias": "counter"; "required": false; }; "detachThumbs": { "alias": "detachThumbs"; "required": false; }; "thumbAutosize": { "alias": "thumbAutosize"; "required": false; }; "itemAutosize": { "alias": "itemAutosize"; "required": false; }; "autoHeight": { "alias": "autoHeight"; "required": false; }; "autoplay": { "alias": "autoplay"; "required": false; }; "disableThumbs": { "alias": "disableThumbs"; "required": false; }; "disableBullets": { "alias": "disableBullets"; "required": false; }; "disableScroll": { "alias": "disableScroll"; "required": false; }; "disableThumbScroll": { "alias": "disableThumbScroll"; "required": false; }; "thumbCentralized": { "alias": "thumbCentralized"; "required": false; }; "disableMouseScroll": { "alias": "disableMouseScroll"; "required": false; }; "disableThumbMouseScroll": { "alias": "disableThumbMouseScroll"; "required": false; }; "bulletSize": { "alias": "bulletSize"; "required": false; }; "thumbWidth": { "alias": "thumbWidth"; "required": false; }; "thumbHeight": { "alias": "thumbHeight"; "required": false; }; "autoplayInterval": { "alias": "autoplayInterval"; "required": false; }; "scrollDuration": { "alias": "scrollDuration"; "required": false; }; "resizeDebounceTime": { "alias": "resizeDebounceTime"; "required": false; }; "scrollBehavior": { "alias": "scrollBehavior"; "required": false; }; "scrollEase": { "alias": "scrollEase"; "required": false; }; "imageSize": { "alias": "imageSize"; "required": false; }; "thumbImageSize": { "alias": "thumbImageSize"; "required": false; }; "bulletPosition": { "alias": "bulletPosition"; "required": false; }; "counterPosition": { "alias": "counterPosition"; "required": false; }; "orientation": { "alias": "orientation"; "required": false; }; "loadingAttr": { "alias": "loadingAttr"; "required": false; }; "loadingStrategy": { "alias": "loadingStrategy"; "required": false; }; "thumbPosition": { "alias": "thumbPosition"; "required": false; }; "destroyRef": { "alias": "destroyRef"; "required": false; }; "skipInitConfig": { "alias": "skipInitConfig"; "required": false; }; }, { "itemClick": "itemClick"; "thumbClick": "thumbClick"; "playingChange": "playingChange"; "indexChange": "indexChange"; "itemsChange": "itemsChange"; "error": "error"; }, ["_galleryItemDef", "_galleryImageDef", "_galleryThumbDef", "_galleryBoxDef"], never, true, never>;
    static ngAcceptInputType_nav: unknown;
    static ngAcceptInputType_bullets: unknown;
    static ngAcceptInputType_loop: unknown;
    static ngAcceptInputType_debug: unknown;
    static ngAcceptInputType_thumbs: unknown;
    static ngAcceptInputType_counter: unknown;
    static ngAcceptInputType_detachThumbs: unknown;
    static ngAcceptInputType_thumbAutosize: unknown;
    static ngAcceptInputType_itemAutosize: unknown;
    static ngAcceptInputType_autoHeight: unknown;
    static ngAcceptInputType_autoplay: unknown;
    static ngAcceptInputType_disableThumbs: unknown;
    static ngAcceptInputType_disableBullets: unknown;
    static ngAcceptInputType_disableScroll: unknown;
    static ngAcceptInputType_disableThumbScroll: unknown;
    static ngAcceptInputType_thumbCentralized: unknown;
    static ngAcceptInputType_disableMouseScroll: unknown;
    static ngAcceptInputType_disableThumbMouseScroll: unknown;
    static ngAcceptInputType_bulletSize: unknown;
    static ngAcceptInputType_thumbWidth: unknown;
    static ngAcceptInputType_thumbHeight: unknown;
    static ngAcceptInputType_autoplayInterval: unknown;
    static ngAcceptInputType_scrollDuration: unknown;
    static ngAcceptInputType_resizeDebounceTime: unknown;
}
