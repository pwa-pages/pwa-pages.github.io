/**
 * A clone of HammerJs constants
 */
export const DIRECTION_LEFT = 2;
export const DIRECTION_RIGHT = 4;
export const DIRECTION_UP = 8;
export const DIRECTION_DOWN = 16;
export class HorizontalAdapter {
    get scrollValue() {
        return this.slider.scrollLeft;
    }
    get clientSize() {
        return this.slider.clientWidth;
    }
    get isContentLessThanContainer() {
        return this.clientSize >= this.slider.firstElementChild.clientWidth;
    }
    constructor(slider, config) {
        this.slider = slider;
        this.config = config;
        this.hammerDirection = DIRECTION_LEFT | DIRECTION_RIGHT;
        this.scrollSnapType = 'x mandatory';
    }
    getScrollToValue(el, behavior) {
        const position = el.offsetLeft - ((this.clientSize - el.clientWidth) / 2);
        return {
            behavior,
            start: position
        };
    }
    getRootMargin() {
        return `1000px 1px 1000px 1px`;
    }
    getElementRootMargin(viewport, el) {
        const rootMargin = -1 * ((viewport.clientWidth - el.clientWidth) / 2) + 1;
        return `0px ${rootMargin}px 0px ${rootMargin}px`;
    }
    getCentralizerStartSize() {
        if (this.isContentLessThanContainer) {
            const size = this.clientSize - this.slider.firstElementChild.clientWidth;
            return size / 2;
        }
        return (this.clientSize / 2) - (this.slider.firstElementChild.firstElementChild?.clientWidth / 2);
    }
    getCentralizerEndSize() {
        if (this.isContentLessThanContainer) {
            const size = this.clientSize - this.slider.firstElementChild.clientWidth;
            return size / 2;
        }
        return (this.clientSize / 2) - (this.slider.firstElementChild.lastElementChild?.clientWidth / 2);
    }
    getHammerVelocity(e) {
        return e.velocityX;
    }
    getHammerValue(value, e, behavior) {
        return {
            behavior,
            left: value - e.deltaX
        };
    }
}
export class VerticalAdapter {
    get scrollValue() {
        return this.slider.scrollTop;
    }
    get clientSize() {
        return this.slider.clientHeight;
    }
    get isContentLessThanContainer() {
        return this.clientSize >= this.slider.firstElementChild.clientHeight;
    }
    constructor(slider, config) {
        this.slider = slider;
        this.config = config;
        this.hammerDirection = DIRECTION_UP | DIRECTION_DOWN;
        this.scrollSnapType = 'y mandatory';
    }
    getScrollToValue(el, behavior) {
        const position = el.offsetTop - ((this.clientSize - el.clientHeight) / 2);
        return {
            behavior,
            top: position
        };
    }
    getRootMargin() {
        return `1px 1000px 1px 1000px`;
    }
    getElementRootMargin(viewport, el) {
        const rootMargin = -1 * ((viewport.clientHeight - el.clientHeight) / 2) + 1;
        return `${rootMargin}px 0px ${rootMargin}px 0px`;
    }
    getCentralizerStartSize() {
        if (this.isContentLessThanContainer) {
            const size = this.clientSize - this.slider.firstElementChild.clientHeight;
            return size / 2;
        }
        return (this.clientSize / 2) - (this.slider.firstElementChild.firstElementChild?.clientHeight / 2);
    }
    getCentralizerEndSize() {
        if (this.isContentLessThanContainer) {
            const size = this.clientSize - this.slider.firstElementChild.clientHeight;
            return size / 2;
        }
        return (this.clientSize / 2) - (this.slider.firstElementChild.lastElementChild?.clientHeight / 2);
    }
    getHammerVelocity(e) {
        return e.velocityY;
    }
    getHammerValue(value, e, behavior) {
        return {
            behavior,
            top: value - e.deltaY
        };
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWFpbi1hZGFwdGVycy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uL3Byb2plY3RzL25nLWdhbGxlcnkvc3JjL2xpYi9jb21wb25lbnRzL2FkYXB0ZXJzL21haW4tYWRhcHRlcnMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBSUE7O0dBRUc7QUFDSCxNQUFNLENBQUMsTUFBTSxjQUFjLEdBQVcsQ0FBQyxDQUFDO0FBQ3hDLE1BQU0sQ0FBQyxNQUFNLGVBQWUsR0FBVyxDQUFDLENBQUM7QUFDekMsTUFBTSxDQUFDLE1BQU0sWUFBWSxHQUFXLENBQUMsQ0FBQztBQUN0QyxNQUFNLENBQUMsTUFBTSxjQUFjLEdBQVcsRUFBRSxDQUFDO0FBRXpDLE1BQU0sT0FBTyxpQkFBaUI7SUFNNUIsSUFBSSxXQUFXO1FBQ2IsT0FBTyxJQUFJLENBQUMsTUFBTSxDQUFDLFVBQVUsQ0FBQztJQUNoQyxDQUFDO0lBRUQsSUFBSSxVQUFVO1FBQ1osT0FBTyxJQUFJLENBQUMsTUFBTSxDQUFDLFdBQVcsQ0FBQztJQUNqQyxDQUFDO0lBRUQsSUFBSSwwQkFBMEI7UUFDNUIsT0FBTyxJQUFJLENBQUMsVUFBVSxJQUFJLElBQUksQ0FBQyxNQUFNLENBQUMsaUJBQWlCLENBQUMsV0FBVyxDQUFDO0lBQ3RFLENBQUM7SUFFRCxZQUFtQixNQUFtQixFQUFTLE1BQXFCO1FBQWpELFdBQU0sR0FBTixNQUFNLENBQWE7UUFBUyxXQUFNLEdBQU4sTUFBTSxDQUFlO1FBaEIzRCxvQkFBZSxHQUFXLGNBQWMsR0FBRyxlQUFlLENBQUM7UUFFM0QsbUJBQWMsR0FBVyxhQUFhLENBQUM7SUFlaEQsQ0FBQztJQUVELGdCQUFnQixDQUFDLEVBQWUsRUFBRSxRQUF3QjtRQUN4RCxNQUFNLFFBQVEsR0FBVyxFQUFFLENBQUMsVUFBVSxHQUFHLENBQUMsQ0FBQyxJQUFJLENBQUMsVUFBVSxHQUFHLEVBQUUsQ0FBQyxXQUFXLENBQUMsR0FBRyxDQUFDLENBQUMs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UUFBd0I7UUFDNUQsT0FBTztZQUNMLFFBQVE7WUFDUixHQUFHLEVBQUUsS0FBSyxHQUFHLENBQUMsQ0FBQyxNQUFNO1NBQ3RCLENBQUM7SUFDSixDQUFDO0NBWUYiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBHYWxsZXJ5Q29uZmlnIH0gZnJvbSAnLi4vLi4vbW9kZWxzL2NvbmZpZy5tb2RlbCc7XHJcbmltcG9ydCB7IFNsaWRlckFkYXB0ZXIgfSBmcm9tICcuL2Jhc2UtYWRhcHRlcic7XHJcbmltcG9ydCB7IFNtb290aFNjcm9sbE9wdGlvbnMgfSBmcm9tICcuLi8uLi9zbW9vdGgtc2Nyb2xsJztcclxuXHJcbi8qKlxyXG4gKiBBIGNsb25lIG9mIEhhbW1lckpzIGNvbnN0YW50c1xyXG4gKi9cclxuZXhwb3J0IGNvbnN0IERJUkVDVElPTl9MRUZUOiBudW1iZXIgPSAyO1xyXG5leHBvcnQgY29uc3QgRElSRUNUSU9OX1JJR0hUOiBudW1iZXIgPSA0O1xyXG5leHBvcnQgY29uc3QgRElSRUNUSU9OX1VQOiBudW1iZXIgPSA4O1xyXG5leHBvcnQgY29uc3QgRElSRUNUSU9OX0RPV046IG51bWJlciA9IDE2O1xyXG5cclxuZXhwb3J0IGNsYXNzIEhvcml6b250YWxBZGFwdGVyIGltcGxlbWVudHMgU2xpZGVyQWRhcHRlciB7XHJcblxyXG4gIHJlYWRvbmx5IGhhbW1lckRpcmVjdGlvbjogbnVtYmVyID0gRElSRUNUSU9OX0xFRlQgfCBESVJFQ1RJT05fUklHSFQ7XHJcblxyXG4gIHJlYWRvbmx5IHNjcm9sbFNuYXBUeXBlOiBzdHJpbmcgPSAneCBtYW5kYXRvcnknO1xyXG5cclxuICBnZXQgc2Nyb2xsVmFsdWUoKTogbnVtYmVyIHtcclxuICAgIHJldHVybiB0aGlzLnNsaWRlci5zY3JvbGxMZWZ0O1xyXG4gIH1cclxuXHJcbiAgZ2V0IGNsaWVudFNpemUoKTogbnVtYmVyIHtcclxuICAgIHJldHVybiB0aGlzLnNsaWRlci5jbGllbnRXaWR0aDtcclxuICB9XHJcblxyXG4gIGdldCBpc0NvbnRlbnRMZXNzVGhhbkNvbnRhaW5lcigpOiBib29sZWFuIHtcclxuICAgIHJldHVybiB0aGlzLmNsaWVudFNpemUgPj0gdGhpcy5zbGlkZXIuZmlyc3RFbGVtZW50Q2hpbGQuY2xpZW50V2lkdGg7XHJcbiAgfVxyXG5cclxuICBjb25zdHJ1Y3RvcihwdWJsaWMgc2xpZGVyOiBIVE1MRWxlbWVudCwgcHVibGljIGNvbmZpZzogR2FsbGVyeUNvbmZpZykge1xyXG4gIH1cclxuXHJcbiAgZ2V0U2Nyb2xsVG9WYWx1ZShlbDogSFRNTEVsZW1lbnQsIGJlaGF2aW9yOiBTY3JvbGxCZWhhdmlvcik6IFNtb290aFNjcm9sbE9wdGlvbnMge1xyXG4gICAgY29uc3QgcG9zaXRpb246IG51bWJlciA9IGVsLm9mZnNldExlZnQgLSAoKHRoaXMuY2xpZW50U2l6ZSAtIGVsLmNsaWVudFdpZHRoKSAvIDIpO1xyXG4gICAgcmV0dXJuIHtcclxuICAgICAgYmVoYXZpb3IsXHJcbiAgICAgIHN0YXJ0OiBwb3NpdGlvblxyXG4gICAgfTtcclxuICB9XHJcblxyXG4gIGdldFJvb3RNYXJnaW4oKTogc3RyaW5nIHtcclxuICAgIHJldHVybiBgMTAwMHB4IDFweCAxMDAwcHggMXB4YDtcclxuICB9XHJcblxyXG4gIGdldEVsZW1lbnRSb290TWFyZ2luKHZpZXdwb3J0OiBIVE1MRWxlbWVudCwgZWw6IEhUTUxFbGVtZW50KTogc3RyaW5nIHtcclxuICAgIGNvbnN0IHJvb3RNYXJnaW46IG51bWJlciA9IC0xICogKCh2aWV3cG9ydC5jbGllbnRXaWR0aCAtIGVsLmNsaWVudFdpZHRoKSAvIDIpICsgMTtcclxuICAgIHJldHVybiBgMHB4ICR7IHJvb3RNYXJnaW4gfXB4IDBweCAkeyByb290TWFyZ2luIH1weGA7XHJcbiAgfVxyXG5cclxuICBnZXRDZW50cmFsaXplclN0YXJ0U2l6ZSgpOiBudW1iZXIge1xyXG4gICAgaWYgKHRoaXMuaXNDb250ZW50TGVzc1RoYW5Db250YWluZXIpIHtcclxuICAgICAgY29uc3Qgc2l6ZTogbnVtYmVyID0gdGhpcy5jbGllbnRTaXplIC0gdGhpcy5zbGlkZXIuZmlyc3RFbGVtZW50Q2hpbGQuY2xpZW50V2lkdGg7XHJcbiAgICAgIHJldHVybiBzaXplIC8gMjtcclxuICAgIH1cclxuICAgIHJldHVybiAodGhpcy5jbGllbnRTaXplIC8gMikgLSAodGhpcy5zbGlkZXIuZmlyc3RFbGVtZW50Q2hpbGQuZmlyc3RFbGVtZW50Q2hpbGQ/LmNsaWVudFdpZHRoIC8gMik7XHJcbiAgfVxyXG5cclxuICBnZXRDZW50cmFsaXplckVuZFNpemUoKTogbnVtYmVyIHtcclxuICAgIGlmICh0aGlzLmlzQ29udGVudExlc3NUaGFuQ29udGFpbmVyKSB7XHJcbiAgICAgIGNvbnN0IHNpemU6IG51bWJlciA9IHRoaXMuY2xpZW50U2l6ZSAtIHRoaXMuc2xpZGVyLmZpcnN0RWxlbWVudENoaWxkLmNsaWVudFdpZHRoO1xyXG4gICAgICByZXR1cm4gc2l6ZSAvIDI7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gKHRoaXMuY2xpZW50U2l6ZSAvIDIpIC0gKHRoaXMuc2xpZGVyLmZpcnN0RWxlbWVudENoaWxkLmxhc3RFbGVtZW50Q2hpbGQ/LmNsaWVudFdpZHRoIC8gMik7XHJcbiAgfVxyXG5cclxuICBnZXRIYW1tZXJWZWxvY2l0eShlOiBhbnkpOiBudW1iZXIge1xyXG4gICAgcmV0dXJuIGUudmVsb2NpdHlYO1xyXG4gIH1cclxuXHJcbiAgZ2V0SGFtbWVyVmFsdWUodmFsdWU6IG51bWJlciwgZTogYW55LCBiZWhhdmlvcjogU2Nyb2xsQmVoYXZpb3IpOiBTY3JvbGxUb09wdGlvbnMge1xyXG4gICAgcmV0dXJuIHtcclxuICAgICAgYmVoYXZpb3IsXHJcbiAgICAgIGxlZnQ6IHZhbHVlIC0gZS5kZWx0YVhcclxuICAgIH07XHJcbiAgfVxyXG5cclxuICAvLyBnZXREcmFnZ2luZ1Byb3BlcnR5KGU6IE1vdXNlRXZlbnQpOiBudW1iZXIge1xyXG4gIC8vICAgcmV0dXJuIGUuY2xpZW50WDtcclxuICAvLyB9XHJcblxyXG4gIC8vIGdldERyYWdnaW5nVmFsdWUodmFsdWU6IG51bWJlciwgZGVsdGE6IG51bWJlciwgYmVoYXZpb3I6IFNjcm9sbEJlaGF2aW9yKTogU2Nyb2xsVG9PcHRpb25zIHtcclxuICAvLyAgIHJldHVybiB7XHJcbiAgLy8gICAgIGJlaGF2aW9yLFxyXG4gIC8vICAgICBsZWZ0OiB2YWx1ZSAtIGRlbHRhXHJcbiAgLy8gICB9O1xyXG4gIC8vIH1cclxufVxyXG5cclxuZXhwb3J0IGNsYXNzIFZlcnRpY2FsQWRhcHRlciBpbXBsZW1lbnRzIFNsaWRlckFkYXB0ZXIge1xyXG5cclxuICByZWFkb25seSBoYW1tZXJEaXJlY3Rpb246IG51bWJlciA9IERJUkVDVElPTl9VUCB8IERJUkVDVElPTl9ET1dOO1xyXG5cclxuICByZWFkb25seSBzY3JvbGxTbmFwVHlwZTogc3RyaW5nID0gJ3kgbWFuZGF0b3J5JztcclxuXHJcbiAgZ2V0IHNjcm9sbFZhbHVlKCk6IG51bWJlciB7XHJcbiAgICByZXR1cm4gdGhpcy5zbGlkZXIuc2Nyb2xsVG9wO1xyXG4gIH1cclxuXHJcbiAgZ2V0IGNsaWVudFNpemUoKTogbnVtYmVyIHtcclxuICAgIHJldHVybiB0aGlzLnNsaWRlci5jbGllbnRIZWlnaHQ7XHJcbiAgfVxyXG5cclxuICBnZXQgaXNDb250ZW50TGVzc1RoYW5Db250YWluZXIoKTogYm9vbGVhbiB7XHJcbiAgICByZXR1cm4gdGhpcy5jbGllbnRTaXplID49IHRoaXMuc2xpZGVyLmZpcnN0RWxlbWVudENoaWxkLmNsaWVudEhlaWdodDtcclxuICB9XHJcblxyXG4gIGNvbnN0cnVjdG9yKHB1YmxpYyBzbGlkZXI6IEhUTUxFbGVtZW50LCBwdWJsaWMgY29uZmlnOiBHYWxsZXJ5Q29uZmlnKSB7XHJcbiAgfVxyXG5cclxuICBnZXRTY3JvbGxUb1ZhbHVlKGVsOiBIVE1MRWxlbWVudCwgYmVoYXZpb3I6IFNjcm9sbEJlaGF2aW9yKTogU21vb3RoU2Nyb2xsT3B0aW9ucyB7XHJcbiAgICBjb25zdCBwb3NpdGlvbjogbnVtYmVyID0gZWwub2Zmc2V0VG9wIC0gKCh0aGlzLmNsaWVudFNpemUgLSBlbC5jbGllbnRIZWlnaHQpIC8gMik7XHJcbiAgICByZXR1cm4ge1xyXG4gICAgICBiZWhhdmlvcixcclxuICAgICAgdG9wOiBwb3NpdGlvblxyXG4gICAgfTtcclxuICB9XHJcblxyXG4gIGdldFJvb3RNYXJnaW4oKTogc3RyaW5nIHtcclxuICAgIHJldHVybiBgMXB4IDEwMDBweCAxcHggMTAwMHB4YDtcclxuICB9XHJcblxyXG4gIGdldEVsZW1lbnRSb290TWFyZ2luKHZpZXdwb3J0OiBIVE1MRWxlbWVudCwgZWw6IEhUTUxFbGVtZW50KTogc3RyaW5nIHtcclxuICAgIGNvbnN0IHJvb3RNYXJnaW46IG51bWJlciA9IC0xICogKCh2aWV3cG9ydC5jbGllbnRIZWlnaHQgLSBlbC5jbGllbnRIZWlnaHQpIC8gMikgKyAxO1xyXG4gICAgcmV0dXJuIGAkeyByb290TWFyZ2luIH1weCAwcHggJHsgcm9vdE1hcmdpbiB9cHggMHB4YDtcclxuICB9XHJcblxyXG4gIGdldENlbnRyYWxpemVyU3RhcnRTaXplKCk6IG51bWJlciB7XHJcbiAgICBpZiAodGhpcy5pc0NvbnRlbnRMZXNzVGhhbkNvbnRhaW5lcikge1xyXG4gICAgICBjb25zdCBzaXplID0gdGhpcy5jbGllbnRTaXplIC0gdGhpcy5zbGlkZXIuZmlyc3RFbGVtZW50Q2hpbGQuY2xpZW50SGVpZ2h0O1xyXG4gICAgICByZXR1cm4gc2l6ZSAvIDI7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gKHRoaXMuY2xpZW50U2l6ZSAvIDIpIC0gKHRoaXMuc2xpZGVyLmZpcnN0RWxlbWVudENoaWxkLmZpcnN0RWxlbWVudENoaWxkPy5jbGllbnRIZWlnaHQgLyAyKTtcclxuICB9XHJcblxyXG4gIGdldENlbnRyYWxpemVyRW5kU2l6ZSgpOiBudW1iZXIge1xyXG4gICAgaWYgKHRoaXMuaXNDb250ZW50TGVzc1RoYW5Db250YWluZXIpIHtcclxuICAgICAgY29uc3Qgc2l6ZSA9IHRoaXMuY2xpZW50U2l6ZSAtIHRoaXMuc2xpZGVyLmZpcnN0RWxlbWVudENoaWxkLmNsaWVudEhlaWdodDtcclxuICAgICAgcmV0dXJuIHNpemUgLyAyO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuICh0aGlzLmNsaWVudFNpemUgLyAyKSAtICh0aGlzLnNsaWRlci5maXJzdEVsZW1lbnRDaGlsZC5sYXN0RWxlbWVudENoaWxkPy5jbGllbnRIZWlnaHQgLyAyKTtcclxuICB9XHJcblxyXG4gIGdldEhhbW1lclZlbG9jaXR5KGU6IGFueSk6IG51bWJlciB7XHJcbiAgICByZXR1cm4gZS52ZWxvY2l0eVk7XHJcbiAgfVxyXG5cclxuICBnZXRIYW1tZXJWYWx1ZSh2YWx1ZTogbnVtYmVyLCBlOiBhbnksIGJlaGF2aW9yOiBTY3JvbGxCZWhhdmlvcik6IFNjcm9sbFRvT3B0aW9ucyB7XHJcbiAgICByZXR1cm4ge1xyXG4gICAgICBiZWhhdmlvcixcclxuICAgICAgdG9wOiB2YWx1ZSAtIGUuZGVsdGFZXHJcbiAgICB9O1xyXG4gIH1cclxuXHJcbiAgLy8gZ2V0RHJhZ2dpbmdQcm9wZXJ0eShlOiBNb3VzZUV2ZW50KTogbnVtYmVyIHtcclxuICAvLyAgIHJldHVybiBlLmNsaWVudFk7XHJcbiAgLy8gfVxyXG5cclxuICAvLyBnZXREcmFnZ2luZ1ZhbHVlKHZhbHVlOiBudW1iZXIsIGRlbHRhOiBudW1iZXIsIGJlaGF2aW9yOiBTY3JvbGxCZWhhdmlvcik6IFNjcm9sbFRvT3B0aW9ucyB7XHJcbiAgLy8gICByZXR1cm4ge1xyXG4gIC8vICAgICBiZWhhdmlvcixcclxuICAvLyAgICAgdG9wOiB2YWx1ZSAtIGRlbHRhXHJcbiAgLy8gICB9O1xyXG4gIC8vIH1cclxufVxyXG4iXX0=