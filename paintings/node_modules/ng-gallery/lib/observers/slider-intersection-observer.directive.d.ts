import { OnChanges, OnDestroy, NgZone, ElementRef, EventEmitter } from '@angular/core';
import { GalleryConfig } from '../models/config.model';
import { SliderAdapter } from '../components/adapters';
import { GalleryItemComponent } from '../components/gallery-item.component';
import * as i0 from "@angular/core";
export declare class SliderIntersectionObserver implements OnChanges, OnDestroy {
    private _zone;
    private _el;
    private _currentSubscription;
    private _sensor;
    private get _viewport();
    adapter: SliderAdapter;
    items: GalleryItemComponent[];
    config: GalleryConfig;
    disabled: boolean;
    activeIndexChange: EventEmitter<number>;
    constructor(_zone: NgZone, _el: ElementRef<HTMLElement>);
    ngOnChanges(): void;
    ngOnDestroy(): void;
    private _subscribe;
    private _unsubscribe;
    static ɵfac: i0.ɵɵFactoryDeclaration<SliderIntersectionObserver, never>;
    static ɵdir: i0.ɵɵDirectiveDeclaration<SliderIntersectionObserver, "[sliderIntersectionObserver]", never, { "adapter": { "alias": "adapter"; "required": false; }; "items": { "alias": "items"; "required": false; }; "config": { "alias": "config"; "required": false; }; "disabled": { "alias": "sliderIntersectionObserverDisabled"; "required": false; }; }, { "activeIndexChange": "activeIndexChange"; }, never, never, true, never>;
}
