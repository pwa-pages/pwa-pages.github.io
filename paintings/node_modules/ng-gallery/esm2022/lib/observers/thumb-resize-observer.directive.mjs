import { Directive, Input, Output, EventEmitter } from '@angular/core';
import { tap, animationFrameScheduler, debounceTime } from 'rxjs';
import { resizeObservable } from '../utils/resize-observer';
import * as i0 from "@angular/core";
export class ThumbResizeObserver {
    get _viewport() {
        return this._el.nativeElement;
    }
    constructor(_el, _zone) {
        this._el = _el;
        this._zone = _zone;
        this.resized = new EventEmitter();
    }
    ngOnInit() {
        this._zone.runOutsideAngular(() => {
            this._resizeSubscription = resizeObservable(this._viewport).pipe(debounceTime(this.config.resizeDebounceTime, animationFrameScheduler), tap(() => {
                this.updateSliderSize();
                this.resized.emit();
            })).subscribe();
        });
    }
    ngOnChanges(changes) {
        if (!changes.config.firstChange) {
            this.updateSliderSize();
        }
    }
    ngOnDestroy() {
        this._resizeSubscription?.unsubscribe();
    }
    updateSliderSize() {
        this._viewport.style.setProperty('--thumb-centralize-start-size', this.adapter.getCentralizerStartSize() + 'px');
        this._viewport.style.setProperty('--thumb-centralize-end-size', this.adapter.getCentralizerEndSize() + 'px');
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.2.1", ngImport: i0, type: ThumbResizeObserver, deps: [{ token: i0.ElementRef }, { token: i0.NgZone }], target: i0.ɵɵFactoryTarget.Directive }); }
    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "14.0.0", version: "18.2.1", type: ThumbResizeObserver, isStandalone: true, selector: "[thumbResizeObserver]", inputs: { config: "config", adapter: "adapter" }, outputs: { resized: "thumbResizeObserver" }, usesOnChanges: true, ngImport: i0 }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.2.1", ngImport: i0, type: ThumbResizeObserver, decorators: [{
            type: Directive,
            args: [{
                    selector: '[thumbResizeObserver]',
                    standalone: true
                }]
        }], ctorParameters: () => [{ type: i0.ElementRef }, { type: i0.NgZone }], propDecorators: { config: [{
                type: Input
            }], adapter: [{
                type: Input
            }], resized: [{
                type: Output,
                args: ['thumbResizeObserver']
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGh1bWItcmVzaXplLW9ic2VydmVyLmRpcmVjdGl2ZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL3Byb2plY3RzL25nLWdhbGxlcnkvc3JjL2xpYi9vYnNlcnZlcnMvdGh1bWItcmVzaXplLW9ic2VydmVyLmRpcmVjdGl2ZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQ0wsU0FBUyxFQUNULEtBQUssRUFDTCxNQUFNLEVBT04sWUFBWSxFQUNiLE1BQU0sZUFBZSxDQUFDO0FBQ3ZCLE9BQU8sRUFBZ0IsR0FBRyxFQUFhLHVCQUF1QixFQUFFLFlBQVksRUFBRSxNQUFNLE1BQU0sQ0FBQztBQUMzRixPQUFPLEVBQUUsZ0JBQWdCLEVBQUUsTUFBTSwwQkFBMEIsQ0FBQzs7QUFRNUQsTUFBTSxPQUFPLG1CQUFtQjtJQUk5QixJQUFZLFNBQVM7UUFDbkIsT0FBTyxJQUFJLENBQUMsR0FBRyxDQUFDLGFBQWEsQ0FBQztJQUNoQyxDQUFDO0lBUUQsWUFBb0IsR0FBNEIsRUFBVSxLQUFhO1FBQW5ELFFBQUcsR0FBSCxHQUFHLENBQXlCO1FBQVUsVUFBSyxHQUFMLEtBQUssQ0FBUTtRQUZ4QyxZQUFPLEdBQXVCLElBQUksWUFBWSxFQUFFLENBQUM7SUFHaEYsQ0FBQztJQUVELFFBQVE7UUFDTixJQUFJLENBQUMsS0FBSyxDQUFDLGlCQUFpQixDQUFDLEdBQUcsRUFBRTtZQUNoQyxJQUFJLENBQUMsbUJBQW1CLEdBQUcsZ0JBQWdCLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxDQUFDLElBQUksQ0FDOUQsWUFBWSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsa0JBQWtCLEVBQUUsdUJBQXVCLENBQUMsRUFDckUsR0FBRyxDQUFDLEdBQUcsRUFBRTtnQkFDUCxJQUFJLENBQUMsZ0JBQWdCLEVBQUUsQ0FBQztnQkFDeEIsSUFBSSxDQUFDLE9BQU8sQ0FBQyxJQUFJLEVBQUUsQ0FBQztZQUN0QixDQUFDLENBQUMsQ0FDSCxDQUFDLFNBQVMsRUFBRSxDQUFDO1FBQ2hCLENBQUMsQ0FBQyxDQUFDO0lBQ0wsQ0FBQztJQUVELFdBQVcsQ0FBQyxPQUFzQjtRQUNoQyxJQUFJLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxXQUFXLEVBQUUsQ0FBQztZQUNoQyxJQUFJLENBQUMsZ0JBQWdCLEVBQUUsQ0FBQztRQUMxQixDQUFDO0lBQ0gsQ0FBQztJQUVELFdBQVc7UUFDVCxJQUFJLENBQUMsbUJBQW1CLEVBQUUsV0FBVyxFQUFFLENBQUM7SUFDMUMsQ0FBQztJQUVPLGdCQUFnQjtRQUN0QixJQUFJLENBQUMsU0FBUyxDQUFDLEtBQUssQ0FBQyxXQUFXLENBQUMsK0JBQStCLEVBQUUsSUFBSSxDQUFDLE9BQU8sQ0FBQyx1QkFBdUIsRUFBRSxHQUFHLElBQUksQ0FBQyxDQUFDO1FBQ2pILElBQUksQ0FBQyxTQUFTLENBQUMsS0FBSyxDQUFDLFdBQVcsQ0FBQyw2QkFBNkIsRUFBRSxJQUFJLENBQUMsT0FBTyxDQUFDLHFCQUFxQixFQUFFLEdBQUcsSUFBSSxDQUFDLENBQUM7SUFDL0csQ0FBQzs4R0ExQ1UsbUJBQW1CO2tHQUFuQixtQkFBbUI7OzJGQUFuQixtQkFBbUI7a0JBSi9CLFNBQVM7bUJBQUM7b0JBQ1QsUUFBUSxFQUFFLHVCQUF1QjtvQkFDakMsVUFBVSxFQUFFLElBQUk7aUJBQ2pCO29HQVNVLE1BQU07c0JBQWQsS0FBSztnQkFFRyxPQUFPO3NCQUFmLEtBQUs7Z0JBRXlCLE9BQU87c0JBQXJDLE1BQU07dUJBQUMscUJBQXFCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtcclxuICBEaXJlY3RpdmUsXHJcbiAgSW5wdXQsXHJcbiAgT3V0cHV0LFxyXG4gIE9uSW5pdCxcclxuICBPbkNoYW5nZXMsXHJcbiAgT25EZXN0cm95LFxyXG4gIE5nWm9uZSxcclxuICBFbGVtZW50UmVmLFxyXG4gIFNpbXBsZUNoYW5nZXMsXHJcbiAgRXZlbnRFbWl0dGVyXHJcbn0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcbmltcG9ydCB7IFN1YnNjcmlwdGlvbiwgdGFwLCBhdWRpdFRpbWUsIGFuaW1hdGlvbkZyYW1lU2NoZWR1bGVyLCBkZWJvdW5jZVRpbWUgfSBmcm9tICdyeGpzJztcclxuaW1wb3J0IHsgcmVzaXplT2JzZXJ2YWJsZSB9IGZyb20gJy4uL3V0aWxzL3Jlc2l6ZS1vYnNlcnZlcic7XHJcbmltcG9ydCB7IEdhbGxlcnlDb25maWcgfSBmcm9tICcuLi9tb2RlbHMvY29uZmlnLm1vZGVsJztcclxuaW1wb3J0IHsgU2xpZGVyQWRhcHRlciB9IGZyb20gJy4uL2NvbXBvbmVudHMvYWRhcHRlcnMnO1xyXG5cclxuQERpcmVjdGl2ZSh7XHJcbiAgc2VsZWN0b3I6ICdbdGh1bWJSZXNpemVPYnNlcnZlcl0nLFxyXG4gIHN0YW5kYWxvbmU6IHRydWVcclxufSlcclxuZXhwb3J0IGNsYXNzIFRodW1iUmVzaXplT2JzZXJ2ZXIgaW1wbGVtZW50cyBPbkNoYW5nZXMsIE9uSW5pdCwgT25EZXN0cm95IHtcclxuXHJcbiAgcHJpdmF0ZSBfcmVzaXplU3Vic2NyaXB0aW9uOiBTdWJzY3JpcHRpb247XHJcblxyXG4gIHByaXZhdGUgZ2V0IF92aWV3cG9ydCgpOiBIVE1MRWxlbWVudCB7XHJcbiAgICByZXR1cm4gdGhpcy5fZWwubmF0aXZlRWxlbWVudDtcclxuICB9XHJcblxyXG4gIEBJbnB1dCgpIGNvbmZpZzogR2FsbGVyeUNvbmZpZztcclxuXHJcbiAgQElucHV0KCkgYWRhcHRlcjogU2xpZGVyQWRhcHRlcjtcclxuXHJcbiAgQE91dHB1dCgndGh1bWJSZXNpemVPYnNlcnZlcicpIHJlc2l6ZWQ6IEV2ZW50RW1pdHRlcjx2b2lkPiA9IG5ldyBFdmVudEVtaXR0ZXIoKTtcclxuXHJcbiAgY29uc3RydWN0b3IocHJpdmF0ZSBfZWw6IEVsZW1lbnRSZWY8SFRNTEVsZW1lbnQ+LCBwcml2YXRlIF96b25lOiBOZ1pvbmUpIHtcclxuICB9XHJcblxyXG4gIG5nT25Jbml0KCk6IHZvaWQge1xyXG4gICAgdGhpcy5fem9uZS5ydW5PdXRzaWRlQW5ndWxhcigoKSA9PiB7XHJcbiAgICAgIHRoaXMuX3Jlc2l6ZVN1YnNjcmlwdGlvbiA9IHJlc2l6ZU9ic2VydmFibGUodGhpcy5fdmlld3BvcnQpLnBpcGUoXHJcbiAgICAgICAgZGVib3VuY2VUaW1lKHRoaXMuY29uZmlnLnJlc2l6ZURlYm91bmNlVGltZSwgYW5pbWF0aW9uRnJhbWVTY2hlZHVsZXIpLFxyXG4gICAgICAgIHRhcCgoKSA9PiB7XHJcbiAgICAgICAgICB0aGlzLnVwZGF0ZVNsaWRlclNpemUoKTtcclxuICAgICAgICAgIHRoaXMucmVzaXplZC5lbWl0KCk7XHJcbiAgICAgICAgfSlcclxuICAgICAgKS5zdWJzY3JpYmUoKTtcclxuICAgIH0pO1xyXG4gIH1cclxuXHJcbiAgbmdPbkNoYW5nZXMoY2hhbmdlczogU2ltcGxlQ2hhbmdlcyk6IHZvaWQge1xyXG4gICAgaWYgKCFjaGFuZ2VzLmNvbmZpZy5maXJzdENoYW5nZSkge1xyXG4gICAgICB0aGlzLnVwZGF0ZVNsaWRlclNpemUoKTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIG5nT25EZXN0cm95KCk6IHZvaWQge1xyXG4gICAgdGhpcy5fcmVzaXplU3Vic2NyaXB0aW9uPy51bnN1YnNjcmliZSgpO1xyXG4gIH1cclxuXHJcbiAgcHJpdmF0ZSB1cGRhdGVTbGlkZXJTaXplKCk6IHZvaWQge1xyXG4gICAgdGhpcy5fdmlld3BvcnQuc3R5bGUuc2V0UHJvcGVydHkoJy0tdGh1bWItY2VudHJhbGl6ZS1zdGFydC1zaXplJywgdGhpcy5hZGFwdGVyLmdldENlbnRyYWxpemVyU3RhcnRTaXplKCkgKyAncHgnKTtcclxuICAgIHRoaXMuX3ZpZXdwb3J0LnN0eWxlLnNldFByb3BlcnR5KCctLXRodW1iLWNlbnRyYWxpemUtZW5kLXNpemUnLCB0aGlzLmFkYXB0ZXIuZ2V0Q2VudHJhbGl6ZXJFbmRTaXplKCkgKyAncHgnKTtcclxuICB9XHJcbn1cclxuIl19