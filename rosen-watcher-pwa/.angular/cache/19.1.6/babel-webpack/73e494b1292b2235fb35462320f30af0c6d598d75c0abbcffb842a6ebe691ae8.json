{"ast":null,"code":"import _asyncToGenerator from \"/home/pebblerye/pwa/pwa-pages.github.io/rosen-watcher-pwa/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { EventType } from '../service/event.service';\nimport { BaseWatcherComponent } from '../basewatchercomponent';\nimport { NgFor, NgIf } from '@angular/common';\nimport { createChainNumber } from '../service/watchers.data.service';\nimport { map } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../service/chart.service\";\nimport * as i2 from \"../service/navigation.service\";\nimport * as i3 from \"../service/watchers.data.service\";\nfunction ChainPerformanceComponent_div_14_span_4_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"span\");\n    i0.ɵɵtext(1, \"\\u00A0\\u00A0\\u00A0\\u00A0\\u00A0\\u00A0\");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction ChainPerformanceComponent_div_14_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 13);\n    i0.ɵɵelement(1, \"div\", 14);\n    i0.ɵɵelementStart(2, \"div\");\n    i0.ɵɵtext(3);\n    i0.ɵɵelementEnd();\n    i0.ɵɵtemplate(4, ChainPerformanceComponent_div_14_span_4_Template, 2, 0, \"span\", 15);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const address_r1 = ctx.$implicit;\n    const isLast_r2 = ctx.last;\n    i0.ɵɵadvance();\n    i0.ɵɵstyleProp(\"background-color\", address_r1.color);\n    i0.ɵɵadvance();\n    i0.ɵɵclassMapInterpolate1(\"performance-chart-address mainaddressdispl \", address_r1.chainType, \"\");\n    i0.ɵɵadvance();\n    i0.ɵɵtextInterpolate1(\" - \", address_r1.chainType, \" \");\n    i0.ɵɵadvance();\n    i0.ɵɵproperty(\"ngIf\", !isLast_r2);\n  }\n}\nexport let ChainPerformanceComponent = /*#__PURE__*/(() => {\n  class ChainPerformanceComponent extends BaseWatcherComponent {\n    constructor(injector, chartService, navigationService, watchersDataService) {\n      super(injector);\n      this.chartService = chartService;\n      this.navigationService = navigationService;\n      this.watchersDataService = watchersDataService;\n      this.performanceCharts = [];\n      this.chainWatcherCount = createChainNumber();\n      this.title = 'rosen-watcher-pwa';\n    }\n    selectTab() {\n      this.navigationService.navigate('/performance');\n    }\n    retrieveData() {\n      var _this = this;\n      return _asyncToGenerator(function* () {\n        _this.performanceCharts = yield _this.getPerformanceChart();\n      })();\n    }\n    ngOnInit() {\n      var _superprop_getNgOnInit = () => super.ngOnInit,\n        _this2 = this;\n      return _asyncToGenerator(function* () {\n        _superprop_getNgOnInit().call(_this2);\n        _this2.getWatchers();\n        window.addEventListener('beforeinstallprompt', event => {\n          event.preventDefault();\n        });\n        yield _this2.retrieveData();\n        _this2.updateChart();\n        _this2.eventService.sendEventWithData(EventType.PerformanceScreenLoaded, _this2.storageService.getProfile());\n        yield _this2.subscribeToEvent(EventType.RefreshInputs, /*#__PURE__*/_asyncToGenerator(function* () {\n          yield _this2.retrieveData();\n          _this2.updateChart();\n        }));\n        _this2.eventService.sendEventWithData(EventType.RequestInputsDownload, _this2.storageService.getProfile());\n      })();\n    }\n    getWatchers() {\n      const watcherInfo$ = this.watchersDataService.getWatchersInfo();\n      Object.values(ChainType).forEach(c => {\n        watcherInfo$.pipe(map(watcherInfo => watcherInfo.tokens.find(token => token.name === 'rspv2' + c + 'AWC')?.amount ?? 0)).subscribe(amount => {\n          this.chainWatcherCount[c] = amount;\n          this.updateChart();\n        });\n      });\n    }\n    getPerformanceChart() {\n      var _this3 = this;\n      return _asyncToGenerator(function* () {\n        console.log('start retrieving chart from database');\n        const chainChart = _this3.dataService.getChainChart();\n        console.log('done retrieving chart from database');\n        return Object.entries(chainChart).map(([chainType, value], index) => ({\n          color: _this3.chartService.chartColors[index % _this3.chartService.chartColors.length],\n          chainType: chainType,\n          chart: value.chart,\n          index: index,\n          address: '',\n          addressForDisplay: ''\n        }));\n      })();\n    }\n    createDataSet(i) {\n      const chartColor = this.chartService.chartColors[i % 10];\n      return {\n        label: '',\n        data: [],\n        backgroundColor: chartColor,\n        pointBackgroundColor: chartColor,\n        borderColor: chartColor,\n        borderWidth: 0,\n        borderSkipped: false\n      };\n    }\n    updateChart() {\n      const dataSet = this.createDataSet(0);\n      //const cnt = this.performanceCharts.length;\n      dataSet.data = this.performanceCharts.map(p => {\n        if (p.chainType && this.chainWatcherCount[p.chainType]) {\n          return {\n            x: p.chainType,\n            y: p.chart / (this.chainWatcherCount[p.chainType] ?? 1)\n          };\n        } else {\n          return {\n            x: p.chainType,\n            y: 0\n          };\n        }\n      });\n      //dataSet.label = this.performanceCharts.map(p => p.chainType);\n      if (!this.performanceChart) {\n        this.performanceChart = this.chartService.createChainPerformanceChart(dataSet);\n      } else {\n        this.performanceChart.data.datasets[0].data = dataSet.data;\n        this.performanceChart.data.datasets[0].backgroundColor = this.chartService.chartColors;\n        this.performanceChart.update();\n      }\n    }\n    static {\n      this.ɵfac = function ChainPerformanceComponent_Factory(__ngFactoryType__) {\n        return new (__ngFactoryType__ || ChainPerformanceComponent)(i0.ɵɵdirectiveInject(i0.Injector), i0.ɵɵdirectiveInject(i1.ChartService), i0.ɵɵdirectiveInject(i2.NavigationService), i0.ɵɵdirectiveInject(i3.WatchersDataService));\n      };\n    }\n    static {\n      this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n        type: ChainPerformanceComponent,\n        selectors: [[\"app-chain-performance\"]],\n        features: [i0.ɵɵInheritDefinitionFeature],\n        decls: 18,\n        vars: 5,\n        consts: [[1, \"headercontainer\"], [1, \"headerblock\"], [1, \"header\"], [1, \"performancecontainer\", \"main-content\"], [1, \"performancetab\"], [\"tabindex\", \"0\", 1, \"tab\", 3, \"click\", \"keypress\"], [\"tabindex\", \"0\", 1, \"tab\"], [1, \"info-description\"], [1, \"addressescontainer\"], [\"class\", \"performancelegend\", 4, \"ngFor\", \"ngForOf\"], [1, \"chartcontainer\"], [1, \"chart-container\"], [\"id\", \"PerformanceChart\"], [1, \"performancelegend\"], [1, \"chart-legend\"], [4, \"ngIf\"]],\n        template: function ChainPerformanceComponent_Template(rf, ctx) {\n          if (rf & 1) {\n            i0.ɵɵelementStart(0, \"div\", 0)(1, \"div\", 1);\n            i0.ɵɵtext(2, \" Performance\\u00A0 \");\n            i0.ɵɵelementStart(3, \"div\", 2);\n            i0.ɵɵtext(4, \"Compare chains\");\n            i0.ɵɵelementEnd()()();\n            i0.ɵɵelementStart(5, \"div\", 3)(6, \"div\", 4)(7, \"a\", 5);\n            i0.ɵɵlistener(\"click\", function ChainPerformanceComponent_Template_a_click_7_listener() {\n              return ctx.selectTab();\n            })(\"keypress\", function ChainPerformanceComponent_Template_a_keypress_7_listener() {\n              return ctx.selectTab();\n            });\n            i0.ɵɵtext(8, \" My watchers \");\n            i0.ɵɵelementEnd();\n            i0.ɵɵelementStart(9, \"a\", 6);\n            i0.ɵɵtext(10, \"Compare chains\");\n            i0.ɵɵelementEnd()();\n            i0.ɵɵelementStart(11, \"div\", 7);\n            i0.ɵɵtext(12, \" Avarage earnings in RSN per chain type over the last week for a single watcher. \");\n            i0.ɵɵelementEnd();\n            i0.ɵɵelementStart(13, \"div\", 8);\n            i0.ɵɵtemplate(14, ChainPerformanceComponent_div_14_Template, 5, 7, \"div\", 9);\n            i0.ɵɵelementEnd();\n            i0.ɵɵelementStart(15, \"div\", 10)(16, \"div\", 11);\n            i0.ɵɵelement(17, \"canvas\", 12);\n            i0.ɵɵelementEnd()()();\n          }\n          if (rf & 2) {\n            i0.ɵɵadvance(7);\n            i0.ɵɵclassProp(\"active\", false);\n            i0.ɵɵadvance(2);\n            i0.ɵɵclassProp(\"active\", true);\n            i0.ɵɵadvance(5);\n            i0.ɵɵproperty(\"ngForOf\", ctx.performanceCharts);\n          }\n        },\n        dependencies: [NgFor, NgIf],\n        encapsulation: 2\n      });\n    }\n  }\n  return ChainPerformanceComponent;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}