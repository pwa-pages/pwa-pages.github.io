{
  "version": 3,
  "sources": ["angular:script/global:scripts.js"],
  "sourcesContent": ["// Define the singleton at module scope\nconst processEventServiceSingleton = (() => {\n    console.log('Initializing ProcessEventService singleton factory');\n    let instance = null;\n    return () => {\n        if (!instance) {\n            console.log('Creating new ProcessEventService instance');\n            instance = new ProcessEventService(new ServiceWorkerEventSender());\n        }\n        return instance;\n    };\n})();\nself.addEventListener('message', async (event) => {\n    const processEventService = processEventServiceSingleton();\n    const data = event.data;\n    console.log(`Rosen service worker received event of type ${data.type}`);\n    processEventService.processEvent({\n        data: data.data,\n        type: data.type,\n    });\n});\n\nself.addEventListener('message', async (event) => {\n    const data = event.data;\n    console.log(`Rosen service worker received event of type ${data.type}`);\n});\n\n/* eslint-disable @typescript-eslint/no-explicit-any */\n// chainService.ts\n// Define the ChainType enum if it's not already available\nvar ChainType;\n(function (ChainType) {\n    ChainType[\"Bitcoin\"] = \"Bitcoin\";\n    ChainType[\"Cardano\"] = \"Cardano\";\n    ChainType[\"Ergo\"] = \"Ergo\";\n    ChainType[\"Ethereum\"] = \"Ethereum\";\n    ChainType[\"Binance\"] = \"Binance\";\n    ChainType[\"Doge\"] = \"Doge\";\n})(ChainType || (ChainType = {}));\nconst chainTypeTokens = Object.fromEntries(Object.values(ChainType).map((chain) => [chain, `rspv2${chain}RWT`]));\nconsole.log(chainTypeTokens);\nconst rewardsCardanoAddress = '2Eit2LFRqu2Mo33z3pYTJRHNCPYS33MrU9QgeNcRsF9359pYMahqnLvKsHwwH72C6WDSZRj7G7WC5heVyUEawcSLSx821iJXT4xWf2F5fjVWDUskGdVdyYY5RBJnp3dfYC7iPoRNeopAFQWFwEbTieow347UhRyqvo2LntFpXzomvGwVTfq9YXS8Z1GGW5mUEioD5xC17Sz72NLbQrskSx7QZAxQTbMGh6vwM9J4q7NzRmQeHmWaHLpUHMU4Jdd5ccKumMvAY8d5C8RxB4iATySLY2N1wY84qNsWNaqkNofbUebf6LgmU9HTKAmU3nDoBfX7mhCjH8kXDhZeYdRsuLVFEYu83TkpwgHAYGmUoemxWAeA2BKMx8CBAy9jxbCyUjdnk9i7sLxuejrwLLh8W4tP81YkESjZ8BV65BhzPdvCaiX8vBSorgFfnvGKVzwfhhsSDwLY1GUwLTMLwTUTjSzEjsMX9hzsEEEmhxLsekabLmK3HZ1jssLrFryNuE59uS51hazJsi3gsT8SBk1J9YV6Dq6xto28nLqrMqK6raqLcAm2iU8hBtqdoSXqWzsrZHpqc2uLGhY52ee4k9TpFBvN1RovYUtY6KS4FncT4UgnbEFkzsnWYKX3CDn16tJs5CyZ97gKcvUonZ5EqTwabzni14CcQsTtKtEAqj1odvSyfJ94NnEjuiVPC3VmZbQvveN3bQ';\nconst rewardsBitcoinAddress = '2Eit2LFRqu2Mo33z3pYTJRHNCPYS33MrU9QgeNcRsF9359pYMahqnLvKsHwwH72C6WDSZRj7G7WC5heVyUEawcSLSx821iJXT4xWf2F5fjVWDUpyGNdkxhFwQMhPKpx85Uu16put68V837wxDx19LRJ5uqi7xBa7EDFRU79Grzk8HDrfpUF3qct4xrQUvDofDroRQTuKueAbwybAfGDhNqG3jzKQchgjedBkbPAuDuNunehW4ZXUBLRSfqy3xofV76bxT5zpZjZcKud4XaRQvXUAVGunJzAs7RNZD5WZxenhmKzhiyuzWiq5QkWqxFw2h9vQ6Dd5PdYsWP3dPtaDC8WUjGz8tQ1tU9LuhqZ8QThQA5zBfoPFrk2iJ1repUuwZPjWnDRHLfWppqDQJGm2GEWHmYTQAfCJQFChUtSNstSATxw37xXjziKkPQRRVPr3VPapbHtGSoQyygzTHgcjxv3HSzwXkD7DScyA2iGDsd4B4WeXo4a6nM4CYpxa9f9FvabbNByhKsgq3ZoCsbUVXN99Pet93MFdxVmBBEsGYEYvtmMEDZEGb5z3JZDtVSdudFcm3bij82bdFzKSmmxxWZhscmLYpGGq1J5geqTiyTCgsmksAHumPFBmLkz8v843Jc3z5b6dwFgyXuBmQPTq6Nf8t95y1UYe8UYx3qNVfrHSGbToSgvCQyLKVv5ns8T2SZRWWr';\nconst rewardsErgoAddress = '2Eit2LFRqu2Mo33z3pYTJRHNCPYS33MrU9QgeNcRsF9359pYMahqnLvKsHwwH72C6WDSZRj7G7WC5heVyUEawcSLSx821iJXT4xWf2F5fjVWDUmvtxr3QSv1aLwThLXxeqYCCc34xjxZDPqPyNGYvWLNeBZxATvBeDuQ6pSiiRFknqmvYVsm9eH4Et3eRHCyxDJEoqZsAahwfVSya34dZNHmjaPQkwWo3Coc17pxiEnWuWmG38wSJz1awE6cymzhojnjxDTbbXgjR1yfYU3AU2v9zttnT8Gz3gUzZNSwjiXSPu3G9zkDaFZVKqb5QwTWY3Pp6SFJgBQfx3C3sp4a9d3n9c98pfWFWAGQN5EfkoHosF8BQTDuzXG3NU8gVCNeNPXYA8iWCbvY3XpxQMvQUxqkjDv9VQfUNvAKVHLW43chi2rdBrQ7Teu6NnesLRWUKXpzSxpByWftkCCdBppjZtYmhhCHqpQGkQyTcMRoP2krFKe7xKbfnFkdkhaYH9TTdKuTuKtGb265RXxiqrc34KvkZpaBBQB5UvoCU4iLSDngNTjqkNPnWekDahzNHLd6CtcdC1B19jdGEXWeNADemDtdK4zrMNg7U8iVpyGYhLDnkeLVrcbhoxkHxrFwfrN19XvitDosQqmt9dseR6SWHBCDZJdmJecCiEwd2wBiwN5N5umEy3Dd4Hznv7kDr6eX7KtYxp';\nconst rewardsEthereumAddress = '2Eit2LFRqu2Mo33z3pYTJRHNCPYS33MrU9QgeNcRsF9359pYMahqnLvKsHwwH72C6WDSZRj7G7WC5heVyUEawcSLSx821iJXT4xWf2F5fjVWDUpPyXf9D8PFkALkfhCu47xSApej3a8VHFCfLuQoMFV2LgTs6hEqRf2XQkDHzn3KYbGJ9b6gs2XcYf3ZQA2gJaWJXFErT11uifohMFFRJV7cb1eECubCbHCib3A434SJVrZee18QTRECrDirtC2GdZK6fiKGbGcKFTZWK4f3ChgnuZFCjRoCX2UquL25b2zkev34shFCspbYwYcyKmc5xxrvssUHgQmUZy7yu3RKJPXYuwH7SiittGsJ946spWJEp3cuBiMcpRvwbiCyrQqM1FtK3wZJKqy95bVDfj9zXwFfR1rE9wZADPs6xcJxi9P1z2iBXqPXGQHnKVaHJWEwNZfP2KAZeUi8etKnYSib68e5cuif3YNRVFdNtKAT2SJEsJCDmnUecmdCwvzMeH2EtNYsRBWVeTV4RBypRPi243qkFrct41bz6WZ8FhLFXU1tnExucXvQ48ZoQ4RQpNorEcGNDY8MC52yhkofS5b9wy6AYYjpQyTMmhD1QZF3VcQgPNT6x4yxPXYsjohYZh96h6M8T7m9gfVV3w8xowtVQVAB1kvJHMuZXxBkBNLwFbhxKuMwC2Dje3LZmuH9mhg94f7Uoe';\nconst rewardsBinanceAddress = '2Eit2LFRqu2Mo33z3pYTJRHNCPYS33MrU9QgeNcRsF9359pYMahqnLvKsHwwH72C6WDSZRj7G7WC5heVyUEawcSLSx821iJXT4xWf2F5fjVWDUmAMWiE8WncsqsSRhckGHa5xwdGj7fCkypvX2Q9ypun1tUfQ8YwoXYgYCSF1M2t7WaUb2ZZzY9yETrdm8ywS3VzDFpirFEiLLgjE5vhsLkcW2PtiChF5npL3SFsxnSY92ZMmSw2U9GzhwDwTKXpPUD17dydf4CTbLATnCdiTkEYxCzVqh3XnBebDhEFSHWhCWVtqRniJJRqpRaAsv64qtBPabPG8HNRHT9TXFR4a58wH8VqdNuUSKHx1NQahaXTPYHfQX7H4mAzYU6fbH5uryhxqSh5HTBmCB8XrJcXCR41FeqjwrkwTiEHJkkyHVTeLdpyaUcHJ9M9nEsTbGbxMBLEc6CLtzRA5bDwFAKXN3i2mo86wUghaPMd72nd3pLDbhGYRntgYMrVWuVDzMhdJamVvFPbiEWiCs1BJ9NgJzasvJpJQxm1uBYskrWnULHQaJf8Kfoixaqcz6mcp2aAEAkoAmd3CcAddM4X1vCuapWeyaxLD7kXrHaafMsatugqJP4JQGFKEkXXBhthKScGLq5wcbYb2cVv6HuzyxyMg92UiLzTyFDB8QG2NwKgTfLGJ5iLDzzsFkPGtkxECDMVmiw21E';\nconst permitAddresses = {\n    [ChainType.Bitcoin]: 'NY4PEzZ7VfjtnTN697R7my9uAVkCYb6N71J2RSmJCFSdDqVf9aPvFQqKXujYDBtSA8hxYVUgkGgU9SP2Ss7JDUkHkdGLBqZwH4yDcPyVvbVbcre3o7nR59wiFDVtjzCjfZmVvMVJD9HiW4GKqVuZGTQCKns8tDe3sJoDNTL3VmhzRUPZf9JCN4TNji1ruXf5CxqWtDrCfoxE4xfbRWGmtBMdLMoRdL85V7z1fP5KxroWX5YgZQo28nTCU3WjPuY2YrjqYYGNHXvFZ9G8E85kCcseNtRWqViXGFzmwqHWKaYe4AdJzBbMKzJWYszsbiemNvisPtT2Yj3FjAmAErpW3gMeWyH3WtbipaAu9D31ggpLeLkLTGscJ9HB2oExpGWvv6u9mGdkTJMHYUuZJUGrcJPE3m7ZTEFxwkbeR9oD8nHHgW4SB46kHFbxzNoUksGPZQnxf95J3e5PUnhYgg7mrQLNpq6pphgGukFcHDgAN2rgFmUSDVsuzomhP735SMiveXSPzx6PZeP7CmrEHyXN6mFbBJuY17kvzzix1w9eFwryZDuZqnAANkYhF3TLkLyGZfSC4o9iAGynpivuNMUgbKAuj6D116tKoCq9PHELL8eTefmXNLFuhauQuKRjmWQKj9zYSd7qi6Zf49KX25PnWHkC3REc4abYpjtiQFefT2HkWRwneTCkJ8uMvoHs6kJzLg8NVzH8XwEZhTM2tNSDhBKZaURpYiQcHwLDgv5uFiwhasLAdZi2EJywBYX51NKc6m4MEsTiAJC9jkEydWcwyDzSHN18yEr4rvEgMNkUhLHJokgV2v3BNFhUTJqe58e2QXAmx9MytUDqzg3vwexEpMhueC2roYA27P1mmb85HKEz15a8LnuUT8ZjmG8kDbHuPYFyxcATytVuDrFDzqKBt9X36bocip4ZU4RRY8JcWjJvMcrBCjV3EhDVQ4it8bhoZnn79PsXazvDteua1NEYEJniPnNrRaiKTUWrseEUQ2vVjWy134jMxRbeiARhoj7MDxug2kFP8jRGSsxWt3Qqbv2SezT3xZ8jYxTyQ2CiyJ61CvUQwPtmoY3XKjrgrJKwnSzJRs4egKPYZKoSiSy6UdHMKuNDmys8wYo3Gi2EgVdUYRLLWcHh5Z2H91odSbTW2h5e6pZeY4a45TgihE6ZnZBhHGc75zJjukhPgP1wEp8GrreHA7ejvTEmpwNgj571x5JrvRD5TxWaFuZKBonGexovAK2L5v',\n    [ChainType.Cardano]: 'NY4PEzZ7VfjqPk9gZSNS6ERoYyYBEBebyeXUPs1sjEfdenV3Kq1QKWBSQ1Gfem47fPVRw5UXcYNXtgXNGqsD4DedukcYv5c5kviu94yWpyrh2tbXHea1tyfuEcb8njgvXkAxrXkjvgcPEQqy7BsR3KQPe8vzSaBG5V8WFHQqvHmpMXXYMvKDZzRbNjZUgYvVinGq6qx9hct1fFG15nFdcWZkzhBcu8ytydt3MmnkYEyL4L2rLD8Jp2Q16DfeaBBqmuyxpMoVxPrQzbPjq5GKTKrqnpisWVrubpAy5dg1oQ6tVZompLpwTWvX1xWspA9tWPmc3MCV2e6y313KzSosGLi2Sdv2ptDgJpKamQv6fNKmj3TWkNbPCDfjp2KXYcfYE1vQ5prRZCPCDhVgWP7bqpF3SeUTMJmvBaXjd1tBavjanquQDkYU4n5XBwJPvUa5kCAP1USTgP4cgPA6SzB8hg2RXmB4PmEWM2RWv2mrirYeTdZrzXCbpGCd9B9GK7bNknnYz1X8wVqyYxxQMZ7Rort4BVRNPNKzEMtdGKSmQpiWitfoAfphXL3SGMfwMT3sspgDcD93Ftiq9gf6kgawpFBKWJmV5jXmfiSCWkPW5x56L5hcc3NwJLYYjcMh81aXQBP4HguyudttZcF8QiDa6Ae3idS1BTegArbhZBFn1TQJGgWtuCubLC5Ja71FadEN1G1s4Uz4BapDu3WpNH4NJn3UeWavLd1EytGjevyJu8XjziAMYr6cPZsyhb95aj7LAHgwJ8YT42zWYoDxqhEzbuderVtfauVJxEo2Rt7p83hMtkFS8Dy3vNbdmGEhWEFfDEyquEHTLsYkehRMWTeTeoDpRhKpeXoDxTNriR6Fz6y3Koxwzg281gYhxxvew7TpvSa3cLvjBpNxuoUfhyT645u51cBsQzden3RB5LjJeToSctrx74nNGCm9sR7fQgzno2pETeit1mykq4eocy93EoTcypKitcbfhgAYwXrGcGUQyhsupFgPZMnms5VnWhCsGKkK93uy7z4BRgi9y2aU7zMUxPJN6q3kYhjcdgYhcgqLLmWo5pBRSxcuq3p3NhPnd2Tps5RztjtUS5ZkbRVsTri8Sy2J5xPLir6VB7uxcPCSYYGJaaVfENJ8tYLYH3m3TUoxRipyjNDDBmsRdujqFQvFoYiCyaPFgu9iqzMvuPDM7FDPAKV8V7A895N9SMMZkG7uAzVvLgrU8Wrxdby2CAX9ttmPJn',\n    [ChainType.Ergo]: 'NY4PEzZ7Vfjvo3AYu7dBh4ziatarsMAVPnwtHZL6BfoKeaots7P629HvVAmDZNdiVNUitWMqVJhgphUregwCXnhVNRddztP93qbtSWCMzVk1UQmCVUpvQyb25nyH1PrpRSjpFewJWeN3bjiVF6bTAm2t11X4d2fKGnAo3PX2BFVeyAUre7T5CZs2uikxZisyrJ1djE4UY1uwpTFkJv3RzZ3JMugNDeicf7qWqtCtNH8E9uG56VD2dMvmsr5YHQbrKgxa5foyA4K8cD59o2ub9ezbhjSgfXbc6VLaXmp5SzdP6n61MaePNexedifBWwAsHFcaaVXf7oUkePp5dDpc5mBbaAuidBAwH4SaxnUNjPw2bHVSXEk3ZJwwBrZRG7CYBCvEN6wFuPyzuhGsJQwdCtvUqxViGhxWrhRYKwixLhScVdGwCFCF9HjuCXt92FkEZKRk1kJuNzMUuc9AUbafbwhi8RC96TVQrtnsajhomptLKFmQXg4nZQao3jwHV8kfZeyF9BX5kiWUnC83Wa7X7seGUcECHRPLAapk7Lr1kUQ6Q62RpBKeGUsfmPcyNhaZ2bmdxMxxHAhdZdKVr78R5ch2BvG7ZtV6wkHB1hcVJGJmU4dskPPR5EFd8gED72eeUnNAsTknW7ePfNMj4DYWGqf2QhPHDZXsyRN2Mczv4tgyRsNA2HR3U9oZikejcuYhha9yNsXEdNn23B8wa5aDZwR6hwZ9hQ74yv29sbfBAfe9XWT2UZAVaeZeazQSSrvAhicEKnwmCAvfwcZNS57SHJ1EfZf1oEt66S6mGFdBzcKPLZzmJmCgMiBmMThqMemT1XS1ovES76LVcpXSkyiEdA17htR5HuPWdDVfWNQAK2jAM8BjKGtvsh93oMFGvMaBVBAvj1QcfTr17LdeeT7h78bKzyF5SQWuyu46xtDbmTZVrR1ZSpnffiD8TbWnae85Bw1VfttScQ8yfa26dsc9pwLrHhYhC4XKEVPWYUxLHZd959tLA2kGNkJBJR8PPThR8PugaUTq1sQpLg4ezPPUjYyWFvhFf6Rcw5rcJAwj99AUwoEhPaUnxT3TxiEJBbD3Zsna33mQD9Zg69Zzr9xiLA7GzhhA998dwkpbbgqFxyASwH6yav5qDbXPZH7GPtt3nTjUfRs87SGYgVGHoGhqaVUAfQKW4TtvFicdpvQws5kg1nZthd7WkWcR7HqLc1R4wBPFynFVGc457vhQwaP78yQsQDHq86',\n    [ChainType.Ethereum]: 'NY4PEzZ7Vfju59RSazdQK92s7PaLrnCh5D9yZBZx7fptQjQZ7Ra2Xiz1PFusrkij3YamVoqXNqoUzazpjnzwmX4zKvPwWGLdqk1RXvp82m7Km2nwtvL2d6tVVCfgiVzA392JszEtNDh9hNXn6wk8eXjXwUg1q1w4UJi6XzmscSH6iZ1BR6ghCp5fyrZBeUfnvbPsfgHmmoVQzmDJ5E9KjmCg53detrDH29gyZUKyqjC5ddnCKG5cvVmoZ7D2ix9KFa9RuLcpVTxnVnuoJnHL1yoGog11TB3eT5hRyiUzeBU688pMb1xyUaCw8bjh5wSsBRAWQnDiAaGuj6zsJEnKeMW94XLeaTASw4K2bwyWHr4BVN9XNSeopFoj6mXPrD2ZhGgPV4HeQp1qEQ2pemMiSecXYkghfnk1t8hnfDNMfXoyKXxEmN8Cf1p7M8pqtgo7H9uUi6xsfotsB2uHVSoT21nzERYMaej9YuYwgC2iUzrzeZNFu7LbMqBErDgHn4wfgppRnF6axDca7QJGNv3q7E2q1DGRpzmTXPfr9FeFxki9geAwsTAy1KTqU2u6TY2wcRC3GzQz83x6LatZLhf9HZnVWZ3SRWQ5AmKUfxhHVxVC9Hwiraqb7ciZBsrnXHWmFaHHHYxafZwoLUBqxeWnHNM211MUwJ2rD9pvrqREfYs4CKYJNDxe5nezL11TnsLyt6p6XkKgHXvvqnk9HQ27pMbpNVX33Y8iQpznFvL2YBCn6Dw9hBDgb8thcYkkAXyLRZskEmhXQFL9evXTstNoeJVJp7NAo7dejZRaKHzTvZnZpkybJGks44qFbGSuSXGegN1V1HWyYGnGSgEJm3yrapNC5tdTvHWXVDxjw1G2TwqKL8D4HZVsyWsu8PEErsaf593jscXKTRn2uqvdhp29rJKGV4v2Cfd8DDXzwhmVxcVFyUiXg9JDe8fCi2rxmFai7a6P6vTJrUkJRtKYBt5RUY3uzKXpX4J4fBWMHmnM2yTSgdaXb9MYULmsbWitqpxiTWh1iMQdXNHxU1A2hHvsqogqEhrG9bGmMU1m1EFSFAPocv3KUf5bPYUWmVUFaxa2MLmE4fs1EC3kCJz8434NrxD1YVA1iosiv5f2tDM8E3w15VRik2a3R1Y6C1D9uHAAT1XK1A27dnx6e586eghm5BuvCY9Di89bdYH5KX3sg4NzWAAJYd5DLZbtdXxzRrKiKwMcPjskhwyQRcv3qstVzPDfJdE8Ej',\n    [ChainType.Binance]: 'NY4PEzZ7VfjvyhUfALrnVnmbCo79cESCRMoD4m6TNTRdUnGR3B7EM3KRKxPh6BmdAsdArGV8DgAanEjs4QLYzYTBPGexkgMBPaRwAMSuVAG5rtzuN5qNmyAZsfdrR3cnBuspTqRkBQFp1oczXkCVNFdjpPwAFYLZgnnJFJVnZbp5TQSECTioxM1oJSKm7LBnEbPNrVWFqcShvqAjoyie7Bd471mNEq8y3mEeV7FH3AQCm4fKQgyfwYkRBC4jvFjWDaMshpFbV325g7n5rcyRsbXJ8EGMC2pKVGEbkx2JCgX4ba5dxx1uGibiHnuHiTNXLmrbEJ6BFtBFZB69Ye7U1C23uBEEvTRLteSbKzKAaGv7UbhVtvcgX91muR3sy7jXTW5FszKWej7knHLWJhbUf47fCVvmbXWEx6rHu3fj5hEqQyfVuER3J54yQAtP9ertP9hQX6GQ7mXfyUwmxTYiJS4GxLzeWZGwfSfRUDe6GN7qurja8kVeMrTwdo835yt4XUcemLK53TCkTLe61Bev6NtiUCSuNrhddXcdfMzqk1DWZCXhkcm51pnGmbmAntwC6AF7rL2LHtHi4et2edKAJHkYUp6t9a8Q57eL6fX3Q4JSfDrjfgn4x2fJaF1APdwbBVKoJyhDUkmV6xAaANYZifq54eFg1qBh54F6mu61U3Df5sZqsepzQJNYp6Y95afLuHGmG97mxhmmRsecKbamu4p6P3TPZEs5eYfHspVf85GNh2BztxxYn5hSsR9c8VRJjBhHR1qGHzX4mbRKWn2D41L7AHPnapSQyHCAPdhSbaAV3b6eLqLvc9QrFBAdnsHqN4NauYDPZc6sSrFuLEwNKFbjefc7pBDnA2pfTUUVqCTFuuaM8VmLKFxG2oVsi1k8GD5moSzQbEphVfWTjE9kTZR35oArptsctXGXRT6MXToom6m4cj465Xs9nsRY8t7FgSHsxetJafgogRjo8NRpgFkBpRgf69QuZbqYkrFMTsoDRkLYCLTF4XZwYzu3tqrzLkSZPKDzK1x7pySFdB56vAstU8HPHLqtzduvHt8Gvrkh1mAYQ1cEphCF1jfs5vZUDifLQYnZ2JiJeMdFZu8RhssWvwU2oL6wqx4Ey2iRaSrLSadYnWx47QvGZeZ8M5gupYMNiL7tTkpCjMjbuetqGcpQrtiwuBJ25DqfnWeLN2K6LS49Fb7GjW6Y3fMgdDYVhh7MFpLiyHMcC7wzdBJSMEcE1VNvo2',\n    [ChainType.Doge]: 'NY4PEzZ7VfjpDKVcQkzdi4CLcgbMvUX53reQKShv8wRAJ8cRsEi4zV8VwevNM5JPxi5UA77685CKHAQAEkE5HUX2jv5HoMoaZFqcYNBQmHxLA86pS3fHDhg6GvJ8SHssoUZX4uGcgEcRt118Bz8bR8sVAGC23UcafXEwmhfCRfrijjPxDx9ZLHN14uuCU9Gv8Upta65PkzbE3oTD3XDuq7RicN59bz8o6eHef9MfxZetNXrgGTkCJJVJrQ5ahqPLmCzkwv5iXLvRjebbPcen8FxPJ7RDE9rG5BW4uuyroqH6nsNcQKRDnvvnrt5PjghRfss4EswpEJXoxxf7VxYUxx2KgHy8W865bjV5Gvmd9nLPnRStwDV7t7HP2U98fMH3Qdp8PS2Vew5edCjjZTiu2k5kB8frNwSdhGvu91TpAhen474RoxWeoZErNRPpkBH3MN4vHo7EZYiJPjsYtLctVEDWZkvFuaFCYQbuF73JqT7673erYxjRu5o3bCHMgNLYPYuriHLyWtpAJvkFa2Xir54tNfMFyEcvPEWYWaB7J8JsBa8E1b6v9x3VsDyNrU3bGXz52Ax7dG5ziTX1DG2bZuRvGSejjeP8GVgUXTBvRARs8t4wKwdicHkZVie2zGBR5w6Ajo1wK8hNHi2ANYSX5VEFEAFgjwo8DNMUTXbyreeKTcJgcntoc1CbNaiDUvJEyRYaAS7mncPsAiuMjTiFUAzRU5gWdtgRTrkVfi638QrvsvKQgKNPxvGBQpEWtSnmDfRhFifDT716wZ22rca55i9V2ArmDRVZG966MSTYNewX96iwndT8PDhhR4xfysMrTdQMPBzFXGoaAyV54rZ37G1JHQjKQLdMXLP67wjqFMNDRjBUsUYpBYVgj4XpvA1nik8UDqGW5zHoEszpjFJNCSzoexM1zLk8q5vk73dfQ3zaME7tTjp7rdAH3tPtWVkrFSWyDe3rw4zZpSHE2iqH8dDvTVuS1QYsJ6G3iqE8nQbg9FipofqTEjihP9ojvcXgKa9ASce5JNsRKHUSeYkAtDs561sZyf5uY626GcsvMYKGHjEjxCYJUYfrDTFz8v14dNAzVAiYQS7M32otTzKeXhB6ZNSRsErvMfrjgW6Rc7joCL1umHo8c3n3nqxLjZqxnzTgBAXnUNDY2g6LLdVRbj41hxTmvVkwV8MV5N1tvTAALAiagxDKu5bWsfTYFHbiiA7tLxqhsUvATorTzU7nrN1hjpQT3i',\n};\nconst permitTriggerAddresses = {\n    [ChainType.Bitcoin]: '5ivrmzxYZZfH2wJRvogecZo1YYXm32CoKnSZdtwxbjNoogRakUFe56VrrcULZtCkvAzM2MNRMxPYSfZc2rB6tkLKLCirG14JPDMfqBoWMhyzzQLVsDukZupema1i8SvYUuoaiPL5rTyQmqgF3ftPbvM2dHY623B3KsKRTNDhkoMoRmKLzenNWqjXpkANpyc3TCkDuvBypXfbWVN55F2ZZUs8L3XkvaJKcb74GY7whJB8Zg31VgpmVW4uVEuqpcvPk5FYNiTdRakyYTUVFnAdCR6ZDjagBYMr3ks2uHMhQdjmoKmmwCocVm4SGZsA8rU8zj6zrEgpepLT5UPD9sZQWtvSi6C82fPEW9pvNXr4T3sFx2xNRv8meyNUhopUfiRzVoWfx6Q4ArqU3dnmRtN8pxkDfTZr7oGrzAFAb3DRhBUPhhfWY2USAw7LMqMAuW65pdUFcGnczQH3B6V4kALNaoGMD7ixKtkdMkrAPHkJmxKzeMEd6Y49PnHWxFkQbXwqGELjDppqmdbKceyrtjUp3JwcZ5qN7YcLg1yXhFUiWAHhnAwGkHsTHivXADhV81sDBVqM1GUB3piyt6gkJ5My3SaRRTsokrnJLoGL23GwjEfTzDsvXCoXww3MQcwUUCXehQConnMxYsK7HHGV4wf8kbctrFd2ekPkeHm5ksjagEVzKMraZJgrRSRWEHdYmUGkU6tLGZTUF4Xe4MkdzXC3sRtif4iUnZg6Tnt3DEx2i5fmPD4xasYkusc6thd77x5x7MZXMdkxuo9BWTG9iiYAaE4aLQ5yEbrYeVY85DCVFAKXTsiwUH1De3rDhRZfFfQRuDqiYomDFumxofAa9k89yLeCSRyQpAH55BXLqvppusJyDwYJKd5itao8z3Qi2Fsvt7oL77fDnbotPwp7EkFbQZdGi7aUU1SdyfhxNwx6dYcFe2zpj6Spj7zb98FR2HahXwXnqqZjuym7RjN55bqPt2FufJ7CwdgQmiBMid7E1sAVMxBZyAeNbhHEqRJCajpUyGXswJjQJ9S1u9c4rRHzdntMtr2RXDtdgrt6b69GpZgZNeAX3QG9W9kQK4SAHE2BULEmNSBZHHitrRYdx97AsDLFfLpzfsPa82ew9oBy3PacMAF2WP48yxQrAzSA2p5idB5QFbYoECBBLsCyApG37AMuPrr24JrWmZLqR5XEPYnKojYrMcciwkn3L6jRpC5c1D9KrsTGk5dGtqBji1FE9XAVxuVpdddJjBSjphPx2UWtvJnwcxB8CoRSsVDF8RoyPcVwMmSfL5arDGJxBUzVu',\n    [ChainType.Cardano]: '5ivrmzxYZc1s5aYrsy9uMd3wphLaHx4Kqrw7wVDwQdtj967D3qYpAw15uAr1CK4RbXKFW7kersNNe9tXu22iut2zG7tCmAP9TzSNgHMSJFBzR9y7vmqpmTGyFmn6poS81E8MzwaJ2MxkULFoS2nj7CwVsCMGweg84sJShZkGm81jxw6N65GHddQ4sJsBJb6MYFcVXeLxrgnEMPd3eFH7XoVj5uM97P6rsUAztZmeaA9hdUkc9Bz497j5BKQaiXyrFj8ghEtL1cemwfnGrsybkuq132QT9qsW7dNaG95D5wSYNUoAP7mVcziPas1PvEa5xRgMKnvE4ByYPT6BfkAMijYfXSDLzi1EbksurZGfC6jX7jfSgwuugXMNbjrUwhzj6657H9MsytUxRW8kNUKN7mwUphQGFS3nWLG4hzyas5BF8MnK7usWD7MJko7FaUWwNPVrRdatwB5uu6rUrY8UeAW9DPQMrL6VZWMKMWFmoY722pVYHdMdCsehR3CnsRDGDpZtvdqJnGgn2czeZ4AfK8o6aykw3HMTvNP2e6pxNt6FYgr2WZhbXsmeqA6bG7t9JNCw6H7tA8KJPAN1X6CYeZMitX5RWCrMtrSy2NEDepNvMgH3n4GD3tvS5Rs94gFVWHfLu4JM5BaTwfRTcdfirnwPQhYhtH6SEc8b5SgGkraojn4JgkKGp2ftszDUNyaKrY8XJQusuMG64Aoe96wr2AaRKKtUhAKfk7kUXHtGoV3h4MhDy5Wnbgb6hXcmQoMQ8HnT7JMAFWUUeWyveNn3hdNucDf2WtmXBsRpwUidapBJPD9Xukw6uEsWdkzsCNcdhZM4EqnkadRKziCubVx52TYoxDYqupyLssPc6JdaLUWny1Nh2vsEdnuNYXj82iX7AeJRaHJeyn8wytA7G8NwQXp2THTniwF6hPCWTub5khfdJ2g4VDTv14GRL88NA6w49N5FaG2ZWxqgRKYxbEJqgBE91KWHoXfsB4qvo6cGfMwpeJU5g6FTiexmXZqrNpRwmnnx1NTGK4TdqnksfaXZPMfPBbdJnQu1vfGwLuMkP5f5EvyfQ4KzazA67AxoabFYkKJk4pvVkRqaWUps9b3nkZhErUMAgxYR4raNtKHSUT13c9RMaGQmtV8viR4b7Z2JoKjqiEP9xGVoZBANhDpJ3EpihvRmDuy7MAZfy1qEm59spvdgdPPEiffw8GBv9MyDfsAGNSzsMhiP1f8WKXduWy7AdEJZTrBJkLZFPTaRHHyU9XvbRyzrxhV87thVrfRhv88hN6Viw2CyRdMJUPmVt',\n    [ChainType.Ergo]: '5ivrmzxYZTDDDoKD1urVYrXZG96ijTUYXQJzE6SCRJ2RR6Kj1UPWL1iN1xeHgYJEQjnQ7m3Ld9tBRRYqjzrAVAqHyGbZB3otUWZW4sUxN4E11fNUZEMQ3kVwnZxFmeSaxcXhQiTFH1cvBYWuFMRRFfaA2UMfpEgm2WoqeiJxPCojp9D7h6yMV4br5EtWTQJKRtcopBRoUgDg9mrKPAXGPZZKTZbYotgLKQ4nzD8QB5hjYJswhLmePaY3zK5eJq7NTcdoAgbNPK9nQ9UpBUgrc8RB76P8evPHMXg6HrVdQ2z3rkvYFVZqH9SmCkE8KGiLYGX7hwaXYGvPExdoVDp7qsSctsPjwgt9Vts2G76dzJzfBhEunJ33vdTEkEXX3wkjK4ZE8g5YKCwGpcED5PhtRQQtJZaZMYTZV3TpbPWy57U49cD3HVeUGR7efxUHZxYybWJ7q8i6NDm3PUwKFN63HmPYQn7TMYGkvSoizTuTAUJomiKgSnvoz2DSUzukRSRmUFA1cLqdR6s7FbeJfpbaKWX4kUGM2Xh38FdqNE94SjkQMY9bv3H5N8MgwGL2La12e1GXAdMCKJCWKRe27vjdaHJWmsKrBLuXQegGN8BaqNuvJbhrmreHAjR9tVwVkxcTUsr8u8TGUzkzN7coV8HiQV9KBMVgQ24NXPYyoCuedwfCiNwYX7PSSbvve7Dgyy5e1S6qbVpEpVtjy9NzWfRaqr5CyGDqhkfjizNG71NZu543vkacjXrrfPWqtNoXMtTRyM1pzwW9ze9aoRX6e92mVaCUB8hTnfH3Q8EstRLDJygLmp63y45tKwBVBDjog7Z6pWhTfBapMBz8Q28pMfPAR8ywfz8qvtkyQcv9SuEZWfvpZREaS5PGhBuqU79eR9bwNwS6TLu9BZV5Y1ahVFA1fMUxhXTvX69hKnNHFgZ35fZdrVrSeU4U5yGvYX7ViTqL2oFk16HLoTXgNs6KQz7PPZr373gDeRh7PfXpX5jWyxw6SRreE3jB5SUiQnZxmAbpJNVkPzFbZXcrsrS3JHSfiVeqp1tk5uNaZcX39tQTXtu4bGrpv6EiMvYPkiDhCiKd5oAVeZ8VxEGN7SP94vF9WhS2oWUMCVLU1XW2DDHejZ36Zo1Ho8fHbUEaKNbRBozY3HYnkYyJuF4wer8xJ6q4KcPppDrS5jqfAaZF6YWsdtqgse7qMeWVUPj23Vr5XG2S9sYmWA7femKuZki71S6BqZGNfit7F4vrzqNZd1L5oyLSVCtuiv3DybRnu2YEaUtrmCphsmrpAFSEwJWtFKqcC',\n    [ChainType.Ethereum]: '5ivrmzxYZsMEcMTZnZnsQm6jutdmSRzVW7WZoqN2c82khPoBUwF6GRVZdd6XhnNf9gbi3fsoZRM3cHmvz3sgJEJmy61cRxTKrM4q9ZfxYKBtyfNXLwD4CCeMedd6pxYDbgT6h3W5Qce2DZX51sw7aP6hu73HxJvcAirXLCYdZxi1nnGUbZYd8WNkU9zZ5ZGLVasrL49hVLNoJsP3ZYLpqzXchCL8RKv42qnLJ2kHc9BZJyv3QAYqMZTZSHQyRnYj4GAbdB3aYP71ge2HXCb6Arc6upjU4cWJPrPY4f8QcMdhXTrUtWp9u443Ekqdd3S2y2jfWLjDLsd7S9y7ASHPqx3GnCcPK4i9YnCQhdM8i5f59nA5ENgo24BTJvyQiRssDrCPpHxeTUp5ae2E5D4vyAnFfWCFfD6f5Z6DEDQvFnu1JLjjLcunp3rehGTSNgjyNNzGkjf6GF2y6enPuNcfpyNWsY2QJot4r1yZWqzeHvMgjbhnjpcManj1ikT1FFeg1oKZCCNBUbed4jYnmM1qFFmTYaovRUuEFXKFU2fhpz3EfEB79PUd5g5YMu1MTkKdUzLrEnoTxz9GKNpXCsoFvwC82hEuwXPcPFuMHdBFa4jtqSueVFgCPHHiXMz2koe6FGmCzY67q8215taocoiEC8NjGNTJ6Bzz3apbT5JP2hLVi6z11kNDQgtTA4gNRoftjZBBNVaFFj1DwURqEBzdawony7FvSpQYzgFEz5PKN7rAAr8Dsd4phbesmeASSph4aQLzB7iuibFSZXxyBm1w8GUEodaWEhh2UeTCJx2XtocU9aLYrUSgA6PgBF5NWzWwXDihESwyboSKnDb2mfHeGyjkjKSfQP2oP8Las1CeMXPdnwXUggckB44f82qjE5ENnqYhah4s5WkgPzzSvx42uhxc8VTbySPgiDefVGuFCEATX6fgAs5ikKh38TYWzLbUi9qM5Ncz9G7Z7Mc8RTdKtRLSxLUoPpiabXtyfdBkNr5PYhznMd3TPy9EHKinSzPV3GiJHGEkfYAbGmf2imbG2LrGtCEnyft3vBXYVocEnAXZsVKSRMPvkWsA7J2LRuQHrZCbVwY4LBDpfrHriEGUnAd168HB7DKPqRtCsVLgd2h6JgSHS4xXvfSwhG371VfTxJgAAtHUgKttcZfpZGXffLCwP7zmQGNVz6FJLsTEN3VXaQMQ7ooCeGHFdL7nbB7ejitfnWzWqgwqi5kv3nZEcmx4YfcnyvAjBosChtBMNfkMSVqa42Mx1xat4eJvHD5Jm1AwYijVqQjcXYh1ZzHqD',\n    [ChainType.Binance]: '5ivrmzxYZw1LAT2rQQY7Gkiuo36J5uzCTyMRoqee9QDzT4Wa1NnZaQ6zVLw3yw4ksfRCdfKiCYfjyiaJuAvdwi8WfVd2VJZo5VfoX7qNEELk34ZdvjCGsSdA3AWVfqSPy8NxPqm41xeccezcgRCVmyTHJa4pu38vtBvTZsnV4jzGTZsSstTQPGZMUUTys6VSBRUGqQjFpjVty3jTFudfJ4rRgyuGhyA1A3jgzY6wPSBXHniAi3c9rQLVEGNzpuyjXD1bFVemGdEmZp5tYLKb5BMsasJr6fa3P4xdyWryg6uUrxGiPZCRT4Z9DMmSyJdfVBFtnLaL7abqN3evRuHrGMn3KVVSFocUM9dLGZpU3XzzvWkgjwxB99FVJ4TzCSKphSgh3gPuCnwQWFhpuRuJJzV8je2jtYguEMNzcygK8WkvkuTsniW3zqJdGpHEqSKcQwnR7a5nP8yVyRRi26aYrNDjuJ2XoqnpLSSNAPmFZNApWcXGRqsqdaJBLsKPkkFXNYfcpwPNcpuExuFaeLhUaCbxdjWKBWMHPxqEhvK2dcs6uXhPjp4QX9XoMSiRqBGC7YAxhZkChKaxmBM3y2sTsyfW69LFM2VKs84FF7tXCGKPomVABQCgVbt5p9BKyPcL8ERa2LJrzfKJwfoXSAPrrK2QEd5zaDi7g6tSVy5QBFzrYARnncF2ZCuGR9Nmh6VAWumXpHfVq83iVVBWHKjSvKJuBEFUzg3G1dWmtwxqRZYFgdgd5FAZp5M6Nj6x4VMi4qcJe9S1exhMHKTDmKnmsJ7AX4YA4MdRGYXGJHRSUb842gqEYbqjjTSu8xRghbuxg9ghnr8NVx4uxwE56zJUMzhP4bVftTH6XhS1MDoRUPi451LcAbRr7QLR7gq8FS4H73FtJN4cni5mURRpNAnzEYFWcjmqaUuC9VSfkuD3Aqk7vSKpbJoSkcaZMXdqb9G4x6SGxjphx8kvxQDTJkmjkxNB5bADpRA7rfkSjRX9zekM8rb7NKu5doxYovb1qPgDuPPbD2eA279btntL8xzqTW2JWQdTPqdHG1ezxBsSWqWdFzzJYFh2VWuYB59A38EB9Mcihj995Y1DGfLt9vHMaw92ERCeqtk4MqX6WSBYc9QzTEA7wUtdYGXLydyRRxbLpYTfTX4sUvhCvg2YGix1L1G4nFaNRq28jiZjfKTCLr2TWDzFvX4jVWhFjFsBVRSCQhiKfDRpsUXm9CYXuk9tvnoVj2NN3e3SLyiWjCEUap84EhdyZn1zHHQSXnsSoSynR1kiWSDCuJCBcyM2MQ8wR',\n    [ChainType.Doge]: '5ivrmzxYa3qBuYZ3teFTEJP1ziojbVZAYdZF528CNfT5tiycZoiqXfZEqgud81sBrXGyGoanY95RS1xwRSzc4nSGhvhg9Awr23q8vde4k7PWrErq42DeCwborsxAwKm1YrWJEwD8KZiKmSMR9jCD3pTxfsvoq4yMJeh4bscJKRj9iuy79tzWT3NU4L1vrVNjQd9ksz8V2mUeU7EXouDTHxAM5Vci3HgeC2CBqY23J3mpXryfb3UPha7a4zf2eF7Tv5viA7ayrGgu582W2ZttnLFHQTRn3gnTU715qzjk7NMer98y528FxXNZsjSFs72tZm4kL6zMthigXX1yNBtr5vXmYKcHUyAeRWuX2CK8jAFWYF4cJeceCN5E2KjoTK47Ge7q8B9MNZBVU83HPGzjVkqjvFDQsDZyt7hyCRhguwKibwyw1Y76ceNXrhzwPgukP6PsCWyipqSMVTAxB3QNR46mGi1v2S3MNKR9bThJU98yQntABweyLuqHVmALaU5s971p9SPi25gVnLsFD2FQnczLpHR2g8iJ2PcUZageyVyCxKbX3EvUoyQTymeaQuSwNgySKAs67YgUPFGcmXD33Fbs7vQvkrDbqUVprE2igGNZvCmStypiqZA6ijDzbaTX1XwFAehFT39WyGQ9NXzCtYn35fj95NLkDWugvEmqL5to8JFbCcHbV13WCJaVgvcerLKU922nuM54QXYNoSQHYdCypp3PXwaWBbsemt1cbH9mGM5JnYuhAm2gKctu7rUwCQ9P6qx7k4nC6ycUWLPsYeaYt23RXxF9cx31A9nUqSW4n4j46j3fVTkBX47C7X2TFF2VgHFJky4d3etKp5EQodYs2caNLgmmACErMCtJ1GuamHCfSEg3iLyLaPAmtRM9HFUVCsMEL3GwLzqEasH3fy9dpUrAh8FqAHPT16gAx7ePEPU8k9obwUyYqkxMBuyaMonoy37GejLXzpzM9DTacEuNCBKw9hVHnDCB5Zxkhuj5kkaH3794qur5GCF3XKFnWNuKf35DBwVeEq3SMMsWmcBB6ZqfJJxa4vCLS6aEhtDxnSxw1TS8T9bvu91dXLH6HoAfK5vnoGHKP387yTuJmcbacFtvBoT6EWDS6DvXQx9FptRgojeF9T1ZjCChE6igPL9WhWPvvCEm6BMR2Jtsxw16JJzqMW33W5CBJstoi8oSKE2yrw7i2hxsyY6UPDWZUe4Cex2tSfWSzSS3tXo5ahVMfoVHxUmmKJoE6St16U58ETVipwqU6WLJT6BGYboueetYfbzL37FPgQEruWWNT',\n};\nconst permitBulkAddresses = {\n    [ChainType.Bitcoin]: 'ZsPNMsGz8D8y11MAneZTVjJndCjgTUrBWezH77jKWr2KXMVRgs4gRkDdTLoUQq8xqtGoESTa7r3zr5E3SxQkE5CM2PaPDSHb5bQWeRtaL9eikJWw95bx4DSjCDcsECpjLxbEfahCHy2sDuXQg6potLhwVVADP5TNUxEDgWPR27x658qcHA54TPRhybb6z67cdmkPrQNXwumoGvoPNnqVcXsdXS71KpQViuk4wXBT156Nd7Tt9b3Dvx827QiLbjJXuajydCDFC6yp2sj5dk7uA5ArNfViybrVQaf71GNGwyh6USgVKBpTurrRBtxeGWNzXi4krd7XbseaU5Crnauk9fj5jEbVH88sPzuD6o4XReNW3odcKDkvqgUh9Vu6b2uGLJsV5wY44Kk3bf8PJmkTc6vQE7Mprkdi2jBfZrzffqoKC6hWLfSZNcUWFV821L43VkJbsaYLukMq1SBJ7y7rsnWcct1U8owQbDpboysHrxfeE84JMTterx8E8sxJqwQRRTxT7M',\n    [ChainType.Cardano]: 'ZsPNMsGz8D8y11MAneZTVjJndCjgTUnjAi7MBVhohaELkSWjyWJLdqw9DFRK5XJ5mS3TnP1cxLsjn38fsQ1FKDfXpczKLF38JVqUcTgTz4vWuQ3moQtya1Yb85tJXVnq2NgvDcuWJsRXQWyqBABL93WEFwT6TWiZeXVAQ7x3EhJGmFvUkbZqbtkHvbYACQ7PZVwVNXn44saome9v7QrCMqvxHHrdqaSc13dHXx2MGVut22sVvMsNXT5ody7hoAqmhfioxM6Yw238jUyturCgtbWdVr42Qv5t2aZ8YCdz6ifvqSbKmnNUBSiccfxr2G9Y4eceJ5jv7iJEaf3RAoYH9vTP1yiacpmFZLjtT38FUz5n95ubWfNg5kZAiefzyaFRpV8sRH147FoaQKFRUQRACivsVvXRBhZWYeA57VZ65E7E6d5RU4JJewNiQ5de5daAQXnC9aV2diVXw9obFC2aBYqHz3U14gHss9xvcVPuqFsJdQRLsejtnYxuoZcJF18vohmNKb',\n    [ChainType.Ergo]: 'ZsPNMsGz8D8y11MAneZTVjJndCjgTUjPFBh5wF6ZNmMySHVDcBmMx2VxGFNCcMxCKDPkdPEzZp4bt5pgwrpZyKV6nmzCAh6SaX5ZnN2fL2X2UTuLvmuk6t8BqrxoiKHmqASttYk6xJPNabuF9ZNMYQBikFWDmq2jrxZS1MG6gQQ2Mx1MgXVvPs9ZkDTe8TykK4MuvQwtjaatjugK3FC5gsB4e4KiTcMPzreUkHvC8mZQGTtGkmHSbq8hkUDfa8MUMAka4oV3unyhgvx9MHjSDNaKWtqrWJpHCsQqPxvzPKohoYSNQt6H3V6ddw1dzGbBz8eKSbno5tEaLSryLDeMAbXhivALPZ3uCyWvx9BKFxSpuqCuQs9aXH7zKedvxzE6XRrrC2TZcWn5UinvbMNu3S4i5oTK2Y8WeVfoy5XHRbK7AL9w9pimJBp5Dx2UnhhHrWbeg9XyVZP7uCEqcUK3iVFmdG2euUa84Jbr7XVaE8v3sBa8LvYdxc6wAVfgPNNbQNxK7Y',\n    [ChainType.Ethereum]: 'ZsPNMsGz8D8y11MAneZTVjJndCjgTUoSPbApCbagsfJ9WvbzbsgAbzHGNF5aNaoR2AyxnrCBH68d5TDEc8aBhVRBT4Q5UC5tdqi9JpMqC8CYFja9PYqMj7KZDjPyMHPxbqUSrq8pGVwe7f8dCV5brNYBCrNqcrC5TmYvp2HpoEUXVb7JsxCuPWQFJgXqYhzEbySQyZQGCdVX6XtjU7aQZK5bzijsXDJhuntTM7ntmdSBJjEhtkMrvrBH8RtTW2JHZw5ZW5QamM3MJbfYDExepJQeJtACiz5n36piDgebfWgjAgibjz6oXsky3mJk2rAETx25AMQSAkHz3cYnH5Gs6BorBka9qXK3U47Dk4tobZGbEZqVeFvuaoRb7VcGUvX8L4rQf72gXzVVCVvY9YEzVoFEfFGe392S5e7X6QpdBuap8maYY4RygToFx6fLeUggDP1gEQ2ptDXZoCcthQPR6ey1GtEju8jqujt2VvJ6A8VjCbU3JYvozB6kqGxLCLKHaN1zm1',\n    [ChainType.Binance]: 'ZsPNMsGz8D8y11MAneZTVjJndCjgTUmenzfjjRBRRAo2DZVkwmBZxuHGoNTFLLrmFhsvuagJbFxBVLFW2nnoSuDHhNckxkJhBKNVhfPghWoKTuCHsEdJcJ1RD6XTT2aWbGPwHkja29mj2RibYNyCqjkPWEmbRJhVvfN2DUZ9pExxBPTmghNa6tFQyLkkfHdmuXEXLdpmWndfdknawDuojQPGjx3p42ewB4eeV8Zs7dDCDLdUUghTcczqJAadPMroUpmifMTw1FrpU3jC3kMaSzYpcpPu4e44xEni3E9hrenfQePbFVe9Jq9bVyjsQBF8vC8UxqefzEFmMoHT9xkdRNsFmfLMAximM3nyNhTMgLimWvLcNddW11jK1FFPumgKRUUeRivjtnXiRsNedXpmHKhvSVvpS8wAJbuySw3bHqkrpgQHqAr6vUiXj5McjsYzVh7PZxrUgEGNe8uLk4UpxJGhW3TVLNcPHdEbq2AoyabVkK2ChbE9KZ2JJBdHah93VgZSVG',\n    [ChainType.Doge]: 'ZsPNMsGz8D8y11MAneZTVjJndCjgTUn38JxZpW4EiZgEoHt1Juw2od5nVwwx23kjav2ZzWjZAYrjAQnGwskZjCxmVagr3o3d8AfdQZySQigfqzTFjekNSHeQBuQPQ1y3ry6fN4w5ECxn9jrmho9pZFkBddZ2QLbAhvZVt8WrpduXniFkG27KsYo6ikCtgRsJyvzjE7kubBpsYfRf7tV8ZT2RyZaSGJp8Lo6SbrAMdDA1mke93sDDkP6B1cXi1UdSSg8nAi68b2HLJEdnw52KES4Xnh3Dg3s3n9Ur1mGf6WJ44oVVxwsBHoXWLhoAXJ6v6XSnX1rxBcqT344WHLrezqdGwzYAbKYqGtUiEZq6fcHVhL3Wu3pxkv2WbupVFpVAeFPxYzcwwf7vtibL7KG5RDuZ3rziqCgLC5jL9ckTS4KkZXH6YEJktNnUmULpcBdpGUHWzeea2SLMeiNYw1aoZ1k9QfmVK7TjxKJ5g8gSrSTwmfZHMPD5v6EBYyu4gBe31WXWVz',\n};\nconst rewardAddresses = {\n    [ChainType.Bitcoin]: '2Eit2LFRqu2Mo33z3pYTJRHNCPYS33MrU9QgeNcRsF9359pYMahqnLvKsHwwH72C6WDSZRj7G7WC5heVyUEawcSLSx821iJXT4xWf2F5fjVWDUpyGNdkxhFwQMhPKpx85Uu16put68V837wxDx19LRJ5uqi7xBa7EDFRU79Grzk8HDrfpUF3qct4xrQUvDofDroRQTuKueAbwybAfGDhNqG3jzKQchgjedBkbPAuDuNunehW4ZXUBLRSfqy3xofV76bxT5zpZjZcKud4XaRQvXUAVGunJzAs7RNZD5WZxenhmKzhiyuzWiq5QkWqxFw2h9vQ6Dd5PdYsWP3dPtaDC8WUjGz8tQ1tU9LuhqZ8QThQA5zBfoPFrk2iJ1repUuwZPjWnDRHLfWppqDQJGm2GEWHmYTQAfCJQFChUtSNstSATxw37xXjziKkPQRRVPr3VPapbHtGSoQyygzTHgcjxv3HSzwXkD7DScyA2iGDsd4B4WeXo4a6nM4CYpxa9f9FvabbNByhKsgq3ZoCsbUVXN99Pet93MFdxVmBBEsGYEYvtmMEDZEGb5z3JZDtVSdudFcm3bij82bdFzKSmmxxWZhscmLYpGGq1J5geqTiyTCgsmksAHumPFBmLkz8v843Jc3z5b6dwFgyXuBmQPTq6Nf8t95y1UYe8UYx3qNVfrHSGbToSgvCQyLKVv5ns8T2SZRWWr',\n    [ChainType.Cardano]: '2Eit2LFRqu2Mo33z3pYTJRHNCPYS33MrU9QgeNcRsF9359pYMahqnLvKsHwwH72C6WDSZRj7G7WC5heVyUEawcSLSx821iJXT4xWf2F5fjVWDUskGdVdyYY5RBJnp3dfYC7iPoRNeopAFQWFwEbTieow347UhRyqvo2LntFpXzomvGwVTfq9YXS8Z1GGW5mUEioD5xC17Sz72NLbQrskSx7QZAxQTbMGh6vwM9J4q7NzRmQeHmWaHLpUHMU4Jdd5ccKumMvAY8d5C8RxB4iATySLY2N1wY84qNsWNaqkNofbUebf6LgmU9HTKAmU3nDoBfX7mhCjH8kXDhZeYdRsuLVFEYu83TkpwgHAYGmUoemxWAeA2BKMx8CBAy9jxbCyUjdnk9i7sLxuejrwLLh8W4tP81YkESjZ8BV65BhzPdvCaiX8vBSorgFfnvGKVzwfhhsSDwLY1GUwLTMLwTUTjSzEjsMX9hzsEEEmhxLsekabLmK3HZ1jssLrFryNuE59uS51hazJsi3gsT8SBk1J9YV6Dq6xto28nLqrMqK6raqLcAm2iU8hBtqdoSXqWzsrZHpqc2uLGhY52ee4k9TpFBvN1RovYUtY6KS4FncT4UgnbEFkzsnWYKX3CDn16tJs5CyZ97gKcvUonZ5EqTwabzni14CcQsTtKtEAqj1odvSyfJ94NnEjuiVPC3VmZbQvveN3bQ',\n    [ChainType.Ergo]: '2Eit2LFRqu2Mo33z3pYTJRHNCPYS33MrU9QgeNcRsF9359pYMahqnLvKsHwwH72C6WDSZRj7G7WC5heVyUEawcSLSx821iJXT4xWf2F5fjVWDUmvtxr3QSv1aLwThLXxeqYCCc34xjxZDPqPyNGYvWLNeBZxATvBeDuQ6pSiiRFknqmvYVsm9eH4Et3eRHCyxDJEoqZsAahwfVSya34dZNHmjaPQkwWo3Coc17pxiEnWuWmG38wSJz1awE6cymzhojnjxDTbbXgjR1yfYU3AU2v9zttnT8Gz3gUzZNSwjiXSPu3G9zkDaFZVKqb5QwTWY3Pp6SFJgBQfx3C3sp4a9d3n9c98pfWFWAGQN5EfkoHosF8BQTDuzXG3NU8gVCNeNPXYA8iWCbvY3XpxQMvQUxqkjDv9VQfUNvAKVHLW43chi2rdBrQ7Teu6NnesLRWUKXpzSxpByWftkCCdBppjZtYmhhCHqpQGkQyTcMRoP2krFKe7xKbfnFkdkhaYH9TTdKuTuKtGb265RXxiqrc34KvkZpaBBQB5UvoCU4iLSDngNTjqkNPnWekDahzNHLd6CtcdC1B19jdGEXWeNADemDtdK4zrMNg7U8iVpyGYhLDnkeLVrcbhoxkHxrFwfrN19XvitDosQqmt9dseR6SWHBCDZJdmJecCiEwd2wBiwN5N5umEy3Dd4Hznv7kDr6eX7KtYxp',\n    [ChainType.Ethereum]: '2Eit2LFRqu2Mo33z3pYTJRHNCPYS33MrU9QgeNcRsF9359pYMahqnLvKsHwwH72C6WDSZRj7G7WC5heVyUEawcSLSx821iJXT4xWf2F5fjVWDUpPyXf9D8PFkALkfhCu47xSApej3a8VHFCfLuQoMFV2LgTs6hEqRf2XQkDHzn3KYbGJ9b6gs2XcYf3ZQA2gJaWJXFErT11uifohMFFRJV7cb1eECubCbHCib3A434SJVrZee18QTRECrDirtC2GdZK6fiKGbGcKFTZWK4f3ChgnuZFCjRoCX2UquL25b2zkev34shFCspbYwYcyKmc5xxrvssUHgQmUZy7yu3RKJPXYuwH7SiittGsJ946spWJEp3cuBiMcpRvwbiCyrQqM1FtK3wZJKqy95bVDfj9zXwFfR1rE9wZADPs6xcJxi9P1z2iBXqPXGQHnKVaHJWEwNZfP2KAZeUi8etKnYSib68e5cuif3YNRVFdNtKAT2SJEsJCDmnUecmdCwvzMeH2EtNYsRBWVeTV4RBypRPi243qkFrct41bz6WZ8FhLFXU1tnExucXvQ48ZoQ4RQpNorEcGNDY8MC52yhkofS5b9wy6AYYjpQyTMmhD1QZF3VcQgPNT6x4yxPXYsjohYZh96h6M8T7m9gfVV3w8xowtVQVAB1kvJHMuZXxBkBNLwFbhxKuMwC2Dje3LZmuH9mhg94f7Uoe',\n    [ChainType.Binance]: '2Eit2LFRqu2Mo33z3pYTJRHNCPYS33MrU9QgeNcRsF9359pYMahqnLvKsHwwH72C6WDSZRj7G7WC5heVyUEawcSLSx821iJXT4xWf2F5fjVWDUmAMWiE8WncsqsSRhckGHa5xwdGj7fCkypvX2Q9ypun1tUfQ8YwoXYgYCSF1M2t7WaUb2ZZzY9yETrdm8ywS3VzDFpirFEiLLgjE5vhsLkcW2PtiChF5npL3SFsxnSY92ZMmSw2U9GzhwDwTKXpPUD17dydf4CTbLATnCdiTkEYxCzVqh3XnBebDhEFSHWhCWVtqRniJJRqpRaAsv64qtBPabPG8HNRHT9TXFR4a58wH8VqdNuUSKHx1NQahaXTPYHfQX7H4mAzYU6fbH5uryhxqSh5HTBmCB8XrJcXCR41FeqjwrkwTiEHJkkyHVTeLdpyaUcHJ9M9nEsTbGbxMBLEc6CLtzRA5bDwFAKXN3i2mo86wUghaPMd72nd3pLDbhGYRntgYMrVWuVDzMhdJamVvFPbiEWiCs1BJ9NgJzasvJpJQxm1uBYskrWnULHQaJf8Kfoixaqcz6mcp2aAEAkoAmd3CcAddM4X1vCuapWeyaxLD7kXrHaafMsatugqJP4JQGFKEkXXBhthKScGLq5wcbYb2cVv6HuzyxyMg92UiLzTyFDB8QG2NwKgTfLGJ5iLDzzsFkPGtkxECDMVmiw21E',\n    [ChainType.Doge]: '2Eit2LFRqu2Mo33z3pYTJRHNCPYS33MrU9QgeNcRsF9359pYMahqnLvKsHwwH72C6WDSZRj7G7WC5heVyUEawcSLSx821iJXT4xWf2F5fjVWDUkje1kCt7DSEufp9kN95BRzhkMTmgY2jmZ3gPH7hjfNkbPBkjLNifx5iH8wZ1EmiMFiWKozc1ZeT3QdnRhCtLZwHo5sBTek83753eK8YZNVgtykvcdLDbsgGyfCXZtJ2zxbNK7522JRormkeNkhLFBxC9u2tQ11EHyvcg8qHUhPA1GCXALUdtB1FkV2chfgewbDmtrpn7tqC7o3eaxQs3Ted3mo3TKmckYVWca7TqHnBCYGE1GRH2X3ZuWuSJXyi1AxKCyRi9JucVAGwpBhQPNR4viEZe5fo6kBiChWriCKmr7pti8685xoAz1ycFnLPKhbgdkwXmZtoLbYYrirEifkMJ1QXtaJStb86NQLQU2ThhqTzEkP22D8sRZ3Ud2b83KcxVvzzCvGeDRK7SkfjbmfhTCazJwwXiFTHBgT2tzfJvQTazwP6czcVC4taS55Ts2uKB4Z9Eu5MeWEvbBLBis8KxnkZkdMecxcBjRdAojCwyMBJUz8EPYo6x659TzbSJhjJiFaQ9f4kanVBV7nC9gK1rq5oY7bFH9MUcwGeu38HQk62kUbv7Q2dYx56CBVw6cHzdRJu6AXHY8dAy3BLqvHCV',\n};\nconst hotWalletAddress = 'nB3L2PD3J4rMmyGk7nnNdESpPXxhPRQ4t1chF8LTXtceMQjKCEgL2pFjPY6cehGjyEFZyHEomBTFXZyqfonvxDozrTtK5JzatD8SdmcPeJNWPvdRb5UxEMXE4WQtpAFzt2veT8Z6bmoWN';\n/**\n * Determines the ChainType based on the provided address.\n * @param address The address to evaluate.\n * @returns The corresponding ChainType or null if not found.\n */\nfunction getChainType(address) {\n    switch (address) {\n        case rewardsCardanoAddress:\n            return ChainType.Cardano;\n        case rewardsBitcoinAddress:\n            return ChainType.Bitcoin;\n        case rewardsErgoAddress:\n            return ChainType.Ergo;\n        case rewardsEthereumAddress:\n            return ChainType.Ethereum;\n        case rewardsBinanceAddress:\n            return ChainType.Binance;\n        default:\n            return null;\n    }\n}\nif (typeof window !== 'undefined') {\n    window.ChainType = ChainType;\n    window.getChainType = getChainType;\n    window.permitAddresses = permitAddresses;\n    window.rewardAddresses = rewardAddresses;\n    window.permitTriggerAddresses = permitTriggerAddresses;\n    window.permitBulkAddresses = permitBulkAddresses;\n    window.hotWalletAddress = hotWalletAddress;\n}\n\n/* eslint-disable @typescript-eslint/no-explicit-any */\nconst rs_DbName = 'rosenDatabase_1.1.5';\nconst rs_DbVersion = 28;\nconst rs_InputsStoreName = 'inputBoxes';\nconst rs_PerfTxStoreName = 'perfTxs';\nconst rs_DownloadStatusStoreName = 'downloadStatusStore';\nconst rs_AddressDataStoreName = 'addressData';\nconst rs_InitialNDownloads = 20;\nconst rs_FullDownloadsBatchSize = 400;\nconst rs_PerfInitialNDownloads = 10;\nconst rs_PerfFullDownloadsBatchSize = 40;\nconst rs_StartFrom = new Date('2024-01-01');\nconst rs_Input_Key = ['boxId', 'outputAddress'];\nconst rs_PerfTx_Key = 'id';\nconst rs_Address_Key = 'address';\nconst rs_PermitCost = 3000;\nconst rs_WatcherCollateralRSN = 30000;\nconst rs_WatcherCollateralERG = 800;\nconst rs_ErgoExplorerHost = 'api.ergoplatform.com';\nvar Period;\n(function (Period) {\n    Period[\"Day\"] = \"Day\";\n    Period[\"Week\"] = \"Week\";\n    Period[\"Month\"] = \"Month\";\n    Period[\"Year\"] = \"year\";\n    Period[\"All\"] = \"All\";\n})(Period || (Period = {}));\nvar Currency;\n(function (Currency) {\n    Currency[\"EUR\"] = \"EUR\";\n    Currency[\"USD\"] = \"USD\";\n    Currency[\"ERG\"] = \"ERG\";\n    Currency[\"RSN\"] = \"RSN\";\n})(Currency || (Currency = {}));\nif (typeof window !== 'undefined') {\n    window.rs_DbName = rs_DbName;\n    window.rs_DbVersion = rs_DbVersion;\n    window.rs_InputsStoreName = rs_InputsStoreName;\n    window.rs_PerfTxStoreName = rs_PerfTxStoreName;\n    window.rs_DownloadStatusStoreName = rs_DownloadStatusStoreName;\n    window.rs_AddressDataStoreName = rs_AddressDataStoreName;\n    window.rs_InitialNDownloads = rs_InitialNDownloads;\n    window.rs_FullDownloadsBatchSize = rs_FullDownloadsBatchSize;\n    window.rs_StartFrom = rs_StartFrom;\n    window.rs_Input_Key = rs_Input_Key;\n    window.rs_PerfTx_Key = rs_PerfTx_Key;\n    window.rs_Address_Key = rs_Address_Key;\n    window.rs_PermitCost = rs_PermitCost;\n    window.rs_WatcherCollateralRSN = rs_WatcherCollateralRSN;\n    window.rs_WatcherCollateralERG = rs_WatcherCollateralERG;\n    window.Period = Period;\n    window.Currency = Currency;\n    window.rs_PerfInitialNDownloads = rs_PerfInitialNDownloads;\n    window.rs_PerfFullDownloadsBatchSize = rs_PerfFullDownloadsBatchSize;\n    window.rs_ErgoExplorerHost = rs_ErgoExplorerHost;\n}\n\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nclass DataService {\n    db;\n    constructor(db) {\n        this.db = db;\n    }\n    getMaxDownloadDateDifference() {\n        return 3155760000000;\n    }\n    async getData(storeName) {\n        return new Promise((resolve, reject) => {\n            const transaction = this.db.transaction([storeName], 'readonly');\n            const objectStore = transaction.objectStore(storeName);\n            const request = objectStore.getAll();\n            request.onsuccess = () => resolve(request.result);\n            request.onerror = (event) => reject(event.target.error);\n        });\n    }\n}\n\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nclass ChainPerformanceDataService extends DataService {\n    db;\n    eventSender;\n    async getExistingData(transaction) {\n        return new Promise((resolve, reject) => {\n            const dbTtransaction = this.db.transaction([rs_PerfTxStoreName], 'readonly');\n            const objectStore = dbTtransaction.objectStore(rs_PerfTxStoreName);\n            const request = objectStore.get(transaction.id);\n            request.onsuccess = () => {\n                const result = request.result;\n                resolve(result);\n            };\n            request.onerror = (event) => reject(event.target.error);\n        });\n    }\n    async addData(_address, transactions, db) {\n        return new Promise((resolve, reject) => {\n            const tempData = [];\n            transactions.forEach((item) => {\n                const chainTokensCount = {};\n                const eRSNTotal = item.outputs.reduce((total, output) => {\n                    output.assets.forEach((asset) => {\n                        if (Object.values(chainTypeTokens).includes(asset.name)) {\n                            if (!chainTokensCount[asset.name]) {\n                                chainTokensCount[asset.name] = 1;\n                            }\n                            else {\n                                chainTokensCount[asset.name]++;\n                            }\n                        }\n                    });\n                    const assets = output.assets.filter((a) => a.name === 'eRSN' && Object.values(rewardAddresses).includes(output.address));\n                    return (total +\n                        assets.reduce((acc, asset) => acc + asset.amount / Math.pow(10, asset.decimals), 0));\n                }, 0);\n                const maxKey = Object.entries(chainTokensCount).reduce((max, [key, value]) => (value > chainTokensCount[max] ? key : max), Object.keys(chainTokensCount)[0]);\n                const chainType = Object.entries(chainTypeTokens).find(([, value]) => value === maxKey)?.[0];\n                const dbPerfTx = {\n                    id: item.id,\n                    timestamp: item.timestamp,\n                    amount: eRSNTotal,\n                    chainType: chainType,\n                };\n                tempData.push(dbPerfTx);\n            });\n            const transaction = db.transaction([rs_PerfTxStoreName], 'readwrite');\n            const objectStore = transaction.objectStore(rs_PerfTxStoreName);\n            const putPromises = tempData.map((dbPerfTx) => {\n                return new Promise((putResolve, putReject) => {\n                    console.log('Trying to add dbPerfTx to db with id ' + dbPerfTx.id);\n                    const request = objectStore.put(dbPerfTx);\n                    request.onsuccess = () => putResolve();\n                    request.onerror = (event) => putReject(event.target.error);\n                });\n            });\n            Promise.all(putPromises)\n                .then(async () => {\n                const perfTxs = await this.getPerfTxs();\n                this.eventSender.sendEvent({\n                    type: 'PerfChartChanged',\n                    data: perfTxs,\n                });\n                resolve();\n            })\n                .catch(reject);\n        });\n    }\n    async getPerfTxs() {\n        const perfTxsPromise = this.getData(rs_PerfTxStoreName);\n        console.log('Retrieving PerfTxs');\n        try {\n            let perfTxs = await perfTxsPromise;\n            perfTxs = perfTxs.filter((p) => this.getMaxDownloadDateDifference() >\n                new Date().getTime() - new Date(p.timestamp).getTime());\n            const result = perfTxs.reduce((acc, tx) => {\n                if (tx.chainType !== undefined && tx.chainType !== null) {\n                    const chainKey = tx.chainType;\n                    if (!acc[chainKey]) {\n                        acc[chainKey] = { chart: 0 };\n                    }\n                    acc[chainKey].chart += tx.amount ?? 0;\n                }\n                return acc;\n            }, {});\n            return Object.fromEntries(Object.values(ChainType).map((chain) => [chain, result[chain] || { chart: 0 }]));\n        }\n        catch (error) {\n            console.error(error);\n            return {};\n        }\n    }\n    constructor(db, eventSender) {\n        super(db);\n        this.db = db;\n        this.eventSender = eventSender;\n    }\n    getMaxDownloadDateDifference() {\n        return 604800000;\n    }\n    getDataType() {\n        return 'performance_chart';\n    }\n}\n\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nclass RewardDataService extends DataService {\n    db;\n    chartService;\n    eventSender;\n    async getExistingData(transaction, address) {\n        for (const input of transaction.inputs) {\n            if (input.boxId && getChainType(input.address)) {\n                const data = await this.getDataByBoxId(input.boxId, address, this.db);\n                if (data) {\n                    return data;\n                }\n            }\n        }\n        return null;\n    }\n    constructor(db, chartService, eventSender) {\n        super(db);\n        this.db = db;\n        this.chartService = chartService;\n        this.eventSender = eventSender;\n    }\n    getDataType() {\n        return 'reward';\n    }\n    async getWatcherInputs() {\n        const inputsPromise = this.getData(rs_InputsStoreName);\n        console.log('Retrieving watcher inputs and such');\n        try {\n            const inputs = await inputsPromise;\n            const filteredInputs = inputs.filter((i) => i.chainType != null || getChainType(i.address) != null);\n            filteredInputs.forEach((input) => {\n                input.assets = input.assets\n                    .filter((asset) => asset.name === 'RSN' || asset.name === 'eRSN')\n                    .map((asset_1) => {\n                    return asset_1;\n                });\n            });\n            filteredInputs.sort((a, b) => a.inputDate.getTime() - b.inputDate.getTime());\n            return await new Promise((resolve) => {\n                resolve(filteredInputs);\n            });\n        }\n        catch (error) {\n            console.error(error);\n            return [];\n        }\n    }\n    /*\n    async compressInputs(): Promise<void> {\n      const existingInputs = await this.getWatcherInputs(this.db);\n      const transaction: IDBTransaction = this.db.transaction([rs_InputsStoreName], 'readwrite');\n      const objectStore: IDBObjectStore = transaction.objectStore(rs_InputsStoreName);\n      objectStore.clear();\n  \n      const addresses = Array.from(new Set(existingInputs.map((e) => e.outputAddress)));\n  \n      addresses.forEach((a) => {\n        this.compressChainInputs(\n          existingInputs.filter((e) => e.outputAddress == a),\n          objectStore,\n        );\n      });\n    }\n  \n    private compressChainInputs(existingInputs: DbInput[], objectStore: IDBObjectStore) {\n      const compressedInputs = new Map<number, DbInput>();\n  \n      let notCompressabeInputs = [];\n  \n      if (existingInputs.length > rs_InitialNDownloads) {\n        notCompressabeInputs = existingInputs.slice(\n          existingInputs.length - rs_InitialNDownloads,\n          existingInputs.length,\n        );\n        existingInputs = existingInputs.slice(0, existingInputs.length - rs_InitialNDownloads);\n      } else {\n        existingInputs.forEach((dbInput: DbInput) => {\n          objectStore.put(dbInput);\n        });\n        return;\n      }\n  \n      existingInputs.forEach((existingInput: DbInput) => {\n        const currentDate = new Date();\n        const twoMonthsAgo = new Date();\n        twoMonthsAgo.setMonth(currentDate.getMonth() - 2);\n  \n        const input = {\n          outputAddress: existingInput.outputAddress,\n          inputDate: existingInput.inputDate,\n          boxId: existingInput.boxId,\n          address: existingInput.address,\n          chainType: existingInput.chainType ?? getChainType(existingInput.address),\n        } as DbInput;\n  \n        if (input.inputDate >= twoMonthsAgo) {\n          input.assets = existingInput.assets;\n          objectStore.put(input);\n        } else {\n          input.inputDate = this.convertDbInputDateForCompression(input.inputDate);\n  \n          let compressedInput = compressedInputs.get(input.inputDate.getTime());\n  \n          if (!compressedInput) {\n            compressedInput = input;\n          }\n  \n          if (!compressedInput.assets) {\n            compressedInput.assets = [];\n          }\n  \n          existingInput.assets.forEach((a) => {\n            if (compressedInput.assets.length == 0) {\n              compressedInput.assets.push({\n                amount: a.amount,\n                decimals: a.decimals,\n                tokenId: a.tokenId,\n                quantity: a.quantity,\n                name: a.name,\n              } as Asset);\n            } else {\n              compressedInput.assets[0].amount += a.amount;\n            }\n          });\n  \n          compressedInputs.set(input.inputDate.getTime(), compressedInput);\n        }\n      });\n  \n      compressedInputs.forEach((dbInput: DbInput) => {\n        objectStore.put(dbInput);\n      });\n  \n      notCompressabeInputs.forEach((dbInput: DbInput) => {\n        objectStore.put(dbInput);\n      });\n    }\n  \n    convertDbInputDateForCompression(dt: Date) {\n      const currentDate = new Date();\n      const twoMonthsAgo = new Date();\n      twoMonthsAgo.setMonth(currentDate.getMonth() - 2);\n  \n      if (dt < twoMonthsAgo) {\n        const day = dt.getDate() - dt.getDay();\n        dt.setDate(day);\n      }\n      dt.setHours(0, 0, 0, 0);\n      return dt;\n    }*/\n    async addData(address, transactions, db) {\n        return new Promise((resolve, reject) => {\n            // Create a temporary array to hold DbInput items before bulk insertion\n            const tempData = [];\n            // Populate tempData with processed inputs\n            transactions.forEach((item) => {\n                item.inputs.forEach((input) => {\n                    input.outputAddress = address;\n                    input.inputDate = new Date(item.timestamp);\n                    input.assets = input.assets.filter((a) => a.name === 'eRSN' || a.name === 'RSN');\n                    input.assets.forEach((a) => {\n                        a.tokenId = null;\n                    });\n                    const dbInput = {\n                        outputAddress: input.outputAddress,\n                        inputDate: input.inputDate,\n                        boxId: input.boxId,\n                        assets: input.assets || [],\n                        chainType: getChainType(input.address),\n                    };\n                    if (dbInput.chainType && dbInput.assets.length > 0) {\n                        tempData.push(dbInput);\n                    }\n                });\n            });\n            const transaction = db.transaction([rs_InputsStoreName], 'readwrite');\n            const objectStore = transaction.objectStore(rs_InputsStoreName);\n            const putPromises = tempData.map((dbInput) => {\n                return new Promise((putResolve, putReject) => {\n                    const request = objectStore.put(dbInput);\n                    request.onsuccess = () => putResolve();\n                    request.onerror = (event) => putReject(event.target.error);\n                });\n            });\n            Promise.all(putPromises)\n                .then(async () => {\n                const inputs = await this.getSortedInputs();\n                this.eventSender.sendEvent({\n                    type: 'InputsChanged',\n                    data: inputs,\n                });\n                this.eventSender.sendEvent({\n                    type: 'AddressChartChanged',\n                    data: await this.chartService.getAddressCharts(inputs),\n                });\n                resolve();\n            })\n                .catch(reject);\n        });\n    }\n    // Get Data by BoxId from IndexedDB\n    async getDataByBoxId(boxId, addressId, db) {\n        return new Promise((resolve, reject) => {\n            const transaction = db.transaction([rs_InputsStoreName], 'readonly');\n            const objectStore = transaction.objectStore(rs_InputsStoreName);\n            const request = objectStore.get([\n                boxId,\n                addressId,\n            ]); /* ?? objectStore.get([boxId.slice(0, 12), addressId])*/\n            request.onsuccess = () => {\n                const result = request.result;\n                if (!result || result.outputAddress !== addressId) {\n                    resolve(null);\n                }\n                else {\n                    resolve(result);\n                }\n            };\n            request.onerror = (event) => reject(event.target.error);\n        });\n    }\n    async getSortedInputs() {\n        const inputsPromise = await this.getWatcherInputs();\n        let amount = 0;\n        const sortedInputs = [];\n        console.log('start retrieving chart from database');\n        try {\n            const inputs = await inputsPromise;\n            inputs.forEach((input) => {\n                input.assets.forEach((asset) => {\n                    amount += asset.amount;\n                    sortedInputs.push({\n                        inputDate: input.inputDate,\n                        address: input.address ?? '',\n                        assets: input.assets,\n                        outputAddress: input.outputAddress,\n                        boxId: input.boxId,\n                        accumulatedAmount: amount,\n                        amount: asset.amount / Math.pow(10, asset.decimals),\n                        chainType: input.chainType ?? getChainType(input.address),\n                    });\n                });\n            });\n            console.log('done retrieving chart from database ' + inputs.length + ' inputs');\n            return await new Promise((resolve) => {\n                resolve(sortedInputs);\n            });\n        }\n        catch (error) {\n            console.error(error);\n            return sortedInputs;\n        }\n    }\n}\n\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nclass ChartService {\n    async getAddressCharts(inputs) {\n        const addressCharts = {};\n        inputs.forEach((input) => {\n            input.assets.forEach((asset) => {\n                if (!addressCharts[input.outputAddress]) {\n                    addressCharts[input.outputAddress] = { charts: {}, chainType: null };\n                }\n                const currentDate = new Date();\n                const halfYearAgo = new Date(currentDate.getFullYear(), currentDate.getMonth() - 6, currentDate.getDate());\n                if (input.inputDate > halfYearAgo) {\n                    const dt = new Date(input.inputDate.getFullYear(), input.inputDate.getMonth(), input.inputDate.getDate() - input.inputDate.getDay()).getTime();\n                    if (!addressCharts[input.outputAddress].charts[dt]) {\n                        addressCharts[input.outputAddress].charts[dt] = 0;\n                    }\n                    addressCharts[input.outputAddress].charts[dt] +=\n                        asset.amount / Math.pow(10, asset.decimals);\n                    addressCharts[input.outputAddress].chainType =\n                        input.chainType ?? getChainType(input.address);\n                }\n            });\n        });\n        return addressCharts;\n    }\n    async getAmountsByDate(inputs, period) {\n        const reducedInputs = this.reduceData(inputs, period);\n        const amounts = reducedInputs.map((s) => {\n            return { x: s.inputDate, y: s.amount };\n        });\n        return amounts;\n    }\n    reduceData(inputs, period) {\n        const date = new Date();\n        switch (period) {\n            case Period.Day:\n                date.setDate(date.getDate() - 1);\n                break;\n            case Period.Week:\n                date.setDate(date.getDate() - 7);\n                break;\n            case Period.Month:\n                date.setMonth(date.getMonth() - 1);\n                break;\n            case Period.Year:\n                date.setFullYear(date.getFullYear() - 1);\n                break;\n            default:\n                date.setFullYear(date.getFullYear() - 100);\n        }\n        inputs = inputs.filter((r) => r.inputDate >= date);\n        return inputs;\n    }\n}\n\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nclass DownloadService {\n    dataService;\n    eventSender;\n    db;\n    busyCounter = 0;\n    downloadFullSize = rs_FullDownloadsBatchSize;\n    downloadInitialSize = rs_InitialNDownloads;\n    //private static addressDownloadDateMap = new Map<string, Date>();\n    constructor(downloadFullSize, downloadInitialSize, dataService, eventSender, db) {\n        this.dataService = dataService;\n        this.eventSender = eventSender;\n        this.db = db;\n        this.downloadFullSize = downloadFullSize;\n        this.downloadInitialSize = downloadInitialSize;\n    }\n    async fetchTransactions(url) {\n        try {\n            const response = await fetch(url);\n            if (!response.ok)\n                throw new Error(`Server returned code: ${response.status}`);\n            return (await response.json());\n        }\n        catch (error) {\n            console.error(`An error occurred: ${error}`);\n            throw error;\n        }\n    }\n    async downloadTransactions(address, offset = 0, limit = 500) {\n        const url = `https://${rs_ErgoExplorerHost}/api/v1/addresses/${address}/transactions?offset=${offset}&limit=${limit}`;\n        console.log(`Downloading from: ${url}`);\n        const response = await this.fetchTransactions(url);\n        const result = {\n            transactions: response.items,\n            total: response.total,\n            items: [],\n        };\n        for (const item of response.items) {\n            const inputDate = new Date(item.timestamp);\n            if (inputDate < rs_StartFrom) {\n                return result;\n            }\n        }\n        return result;\n    }\n    async downloadForAddresses() {\n        try {\n            const addresses = await this.dataService.getData(rs_AddressDataStoreName);\n            const downloadPromises = addresses.map(async (addressObj) => {\n                await this.downloadForAddress(addressObj.address);\n            });\n            await Promise.all(downloadPromises);\n        }\n        catch (e) {\n            console.error('Error downloading for addresses:', e);\n        }\n    }\n    // Busy Counter\n    increaseBusyCounter(address) {\n        if (this.busyCounter === 0) {\n            this.eventSender.sendEvent({\n                type: 'StartFullDownload',\n                data: address,\n            });\n        }\n        this.busyCounter++;\n    }\n    decreaseBusyCounter(address) {\n        this.busyCounter--;\n        if (this.busyCounter === 0) {\n            this.eventSender.sendEvent({\n                type: 'EndFullDownload',\n                data: address,\n            });\n        }\n    }\n    // Download All for Address (recursive)\n    async downloadAllForAddress(address, offset, db) {\n        this.increaseBusyCounter(address);\n        console.log(this.busyCounter);\n        try {\n            const result = await this.downloadTransactions(address, offset, this.downloadFullSize + 10);\n            console.log(`Processing full download(offset = ${offset}, size = ${this.downloadFullSize}) for: ${address}`);\n            //const t = this.processItems(result.transactions);\n            //console.log('permit amount ' + t);\n            if (!result.transactions || result.transactions.length === 0 || offset > 100000) {\n                await this.setDownloadStatus(address, 'true', db);\n                console.log(this.busyCounter);\n                return;\n            }\n            await this.dataService.addData(address, result.transactions, db);\n            //await this.dataService.compressInputs();\n            if (this.dataService.getMaxDownloadDateDifference() >\n                new Date().getTime() -\n                    new Date(result.transactions[result.transactions.length - 1].timestamp).getTime()) {\n                await this.downloadAllForAddress(address, offset + this.downloadFullSize, db);\n            }\n            else {\n                await this.setDownloadStatus(address, 'true', db);\n            }\n        }\n        catch (e) {\n            console.error(e);\n        }\n        finally {\n            this.decreaseBusyCounter(address);\n            console.log(this.busyCounter);\n        }\n    }\n    /*\n    processItems(items: TransactionItem[]): number {\n      let r = 0;\n      items.forEach((item) => {\n        \n        item.inputs.forEach((i) => {\n          i.assets.forEach((a) => {\n            if (a.name == 'rspv2CardanoRWT') {\n              r -= a.amount;\n            }\n          });\n        });\n        \n  \n        item.outputs.forEach((o) => {\n          if (!getChainType(o.address)) {\n            o.assets.forEach((a) => {\n              if (a.name == 'rspv2CardanoRWT') {\n                r += a.amount;\n                if (a.amount > 30000000) {\n                  console.log('wtfffffffffffffff ' + a.amount);\n                }\n              }\n            });\n          }\n        });\n      });\n  \n      return r / 3000000;\n    }\n    */\n    // Get Download Status for Address from IndexedDB\n    async getDownloadStatus(address, db) {\n        return new Promise((resolve, reject) => {\n            const transaction = db.transaction([rs_DownloadStatusStoreName], 'readonly');\n            const objectStore = transaction.objectStore(rs_DownloadStatusStoreName);\n            const request = objectStore.get(address + '_' + this.dataService.getDataType());\n            request.onsuccess = () => resolve(request.result);\n            request.onerror = (event) => reject(event.target.error);\n        });\n    }\n    // Set Download Status for Address in IndexedDB\n    async setDownloadStatus(address, status, db) {\n        let dbStatus = await this.getDownloadStatus(address, db);\n        if (!dbStatus) {\n            dbStatus = {\n                address: address + '_' + this.dataService.getDataType(),\n                Address: address,\n                status: status,\n                lastDownloadDate: undefined,\n            };\n        }\n        else {\n            dbStatus.status = status;\n            dbStatus.address = address + '_' + this.dataService.getDataType();\n            dbStatus.Address = address;\n        }\n        await this.saveDownloadStatus(dbStatus, db);\n    }\n    async saveDownloadStatus(downloadStatus, db) {\n        return new Promise((resolve, reject) => {\n            const transaction = db.transaction([rs_DownloadStatusStoreName], 'readwrite');\n            const objectStore = transaction.objectStore(rs_DownloadStatusStoreName);\n            const request = objectStore.put(downloadStatus);\n            request.onsuccess = () => resolve();\n            request.onerror = (event) => reject(event.target.error);\n        });\n    }\n    async downloadForAddress(address) {\n        /*const downloadStatus = await this.getDownloadStatus(address, this.db);\n    \n        \n        if (downloadStatus?.lastDownloadDate) {\n          const lastDownloadDate: Date | undefined = downloadStatus.lastDownloadDate;\n          if (lastDownloadDate && lastDownloadDate.getTime() > new Date().getTime() - 1000 * 120) {\n            return;\n          }\n        }\n    \n        if (downloadStatus) {\n          downloadStatus.lastDownloadDate = new Date();\n          await this.saveDownloadStatus(downloadStatus, this.db);\n        }\n    */\n        this.increaseBusyCounter(address);\n        console.log(this.busyCounter);\n        try {\n            const result = await this.downloadTransactions(address, 0, this.downloadInitialSize);\n            console.log(`Processing initial download(size = ${this.downloadInitialSize}) for: ${address}`);\n            const itemsz = result.transactions.length;\n            let existingData = null;\n            if (itemsz > this.downloadInitialSize / 4) {\n                for (let i = Math.floor(itemsz / 4); i < itemsz - Math.floor(itemsz / 4); i++) {\n                    const item = result.transactions[i];\n                    existingData = await this.dataService.getExistingData(item, address);\n                    if (existingData) {\n                        break;\n                    }\n                }\n            }\n            console.log('Add bunch of data');\n            await this.dataService.addData(address, result.transactions, this.db);\n            const downloadStatus = (await this.getDownloadStatus(address, this.db))?.status || 'false';\n            if (existingData && downloadStatus === 'true') {\n                console.log(`Found existing boxId in db for ${address}, no need to download more.`);\n            }\n            else if (itemsz >= this.downloadInitialSize) {\n                await this.setDownloadStatus(address, 'false', this.db);\n                console.log(`Downloading all tx's for : ${address}`);\n                await this.downloadAllForAddress(address, 0, this.db);\n            }\n        }\n        catch (e) {\n            console.error(e);\n        }\n        finally {\n            this.decreaseBusyCounter(address);\n            console.log(this.busyCounter);\n        }\n    }\n}\n\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nclass ServiceWorkerEventSender {\n    async sendEvent(event) {\n        const clientsList = await self.clients.matchAll({\n            type: 'window',\n            includeUncontrolled: true,\n        });\n        for (const client of clientsList) {\n            client.postMessage(event);\n        }\n    }\n}\nclass ProcessEventService {\n    eventSender;\n    constructor(eventSender) {\n        this.eventSender = eventSender;\n    }\n    async initServices() {\n        const db = await this.initIndexedDB();\n        const chartService = new ChartService();\n        const rewardDataService = new RewardDataService(db, chartService, this.eventSender);\n        const chainPerformanceDataService = new ChainPerformanceDataService(db, this.eventSender);\n        const downloadService = new DownloadService(rs_FullDownloadsBatchSize, rs_InitialNDownloads, rewardDataService, this.eventSender, db);\n        const downloadPerfService = new DownloadService(rs_PerfFullDownloadsBatchSize, rs_PerfInitialNDownloads, chainPerformanceDataService, this.eventSender, db);\n        return {\n            dataService: rewardDataService,\n            chainPerformanceDataService: chainPerformanceDataService,\n            downloadService,\n            chartService,\n            downloadPerfService: downloadPerfService,\n        };\n    }\n    async processEvent(event) {\n        if (event.type === 'StatisticsScreenLoaded' ||\n            event.type === 'PerformanceScreenLoaded' ||\n            event.type === 'RequestInputsDownload') {\n            const { dataService, downloadService, downloadPerfService, chartService, chainPerformanceDataService, } = await this.initServices();\n            if (event.type === 'RequestInputsDownload') {\n                console.log('Rosen service worker received RequestInputsDownload initiating syncing of data by downloading from blockchain, event.data: ' +\n                    event.data);\n                try {\n                    const addressCharts = await chartService.getAddressCharts(await dataService.getSortedInputs());\n                    this.eventSender.sendEvent({\n                        type: 'AddressChartChanged',\n                        data: addressCharts,\n                    });\n                    if (event.data && typeof event.data === 'string') {\n                        await downloadService.downloadForAddress(event.data);\n                    }\n                    else {\n                        await downloadService.downloadForAddresses();\n                    }\n                }\n                catch (error) {\n                    console.error('Error initializing IndexedDB or downloading addresses:', error);\n                }\n            }\n            else if (event.type === 'StatisticsScreenLoaded') {\n                console.log('Rosen service worker received StatisticsScreenLoaded initiating syncing of data by downloading from blockchain');\n                try {\n                    const inputs = await dataService.getSortedInputs();\n                    this.eventSender.sendEvent({\n                        type: 'InputsChanged',\n                        data: inputs,\n                    });\n                    await downloadService.downloadForAddresses();\n                }\n                catch (error) {\n                    console.error('Error initializing IndexedDB or downloading addresses:', error);\n                }\n            }\n            else if (event.type === 'PerformanceScreenLoaded') {\n                console.log('Rosen service worker received PerformanceScreenLoaded');\n                try {\n                    console.log('Downloading perftxs.');\n                    const perfTxs = await chainPerformanceDataService.getPerfTxs();\n                    this.eventSender.sendEvent({\n                        type: 'PerfChartChanged',\n                        data: perfTxs,\n                    });\n                    downloadPerfService.downloadForAddress(hotWalletAddress);\n                }\n                catch (error) {\n                    console.error('Error initializing IndexedDB or downloading addresses:', error);\n                }\n            }\n        }\n    }\n    // IndexedDB Initialization\n    async initIndexedDB() {\n        return new Promise((resolve, reject) => {\n            let dbName = rs_DbName;\n            const request = indexedDB.open(dbName);\n            request.onsuccess = (event) => {\n                const db = event.target.result;\n                resolve(db);\n            };\n            request.onerror = (event) => {\n                console.error('Error opening IndexedDB:', event.target.error);\n                reject(event.target.error);\n            };\n        });\n    }\n}\n/* eslint-disable @typescript-eslint/no-explicit-any */\nif (typeof window !== 'undefined') {\n    window.ProcessEventService = ProcessEventService;\n}\n"],
  "mappings": "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",
  "names": ["ChainType", "Period", "Currency"]
}
