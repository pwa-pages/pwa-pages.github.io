import { Component, Input, Output, ContentChild, booleanAttribute, numberAttribute, EventEmitter, ChangeDetectionStrategy } from '@angular/core';
import { CommonModule } from '@angular/common';
import { GalleryCoreComponent } from './gallery-core.component';
import { GalleryImageDef } from '../directives/gallery-image-def.directive';
import { GalleryThumbDef } from '../directives/gallery-thumb-def.directive';
import { GalleryItemDef } from '../directives/gallery-item-def.directive';
import { GalleryBoxDef } from '../directives/gallery-box-def.directive';
import { ImgManager } from '../utils/img-manager';
import { AutoplayDirective } from '../autoplay/autoplay.directive';
import * as i0 from "@angular/core";
import * as i1 from "../services/gallery.service";
import * as i2 from "@angular/common";
/**
 * Gallery component
 */
export class GalleryComponent {
    constructor(_gallery) {
        this._gallery = _gallery;
        /**
         * The gallery instance unique id, required if more multiple gallery instances
         */
        this.id = 'root';
        /**
         * Displays the navigation buttons
         */
        this.nav = this._gallery.config.nav;
        /**
         * Displays the navigation bullets
         */
        this.bullets = this._gallery.config.bullets;
        /**
         * Enables loop cycling
         */
        this.loop = this._gallery.config.loop;
        /**
         * Show visuals that helps debugging the component
         */
        this.debug = this._gallery.config.debug;
        /**
         * Displays the thumbnails
         */
        this.thumbs = this._gallery.config.thumbs;
        /**
         * Displays the counter or pagination
         */
        this.counter = this._gallery.config.counter;
        /**
         * De-attaching the thumbnails from the main slider
         * If enabled - thumbnails won't automatically scroll to the active thumbnails
         */
        this.detachThumbs = this._gallery.config.detachThumbs;
        /**
         * Fits each thumbnail size to its content
         */
        this.thumbAutosize = this._gallery.config.thumbAutosize;
        /**
         * Fits each item size to its content, This option should be used with:
         * - Does not work if `autoHeight` is turned on
         * - Does not work properly unless `loadingAttr="eager"`
         * - Does not work properly unless `loadingStrategy="preload"`
         */
        this.itemAutosize = this._gallery.config.itemAutosize;
        /**
         * Automatically adjusts the gallery's height to fit the content
         */
        this.autoHeight = this._gallery.config.autoHeight;
        /**
         * Automatically cycle through items at time interval
         */
        this.autoplay = this._gallery.config.autoplay;
        /**
         * Disables thumbnails' clicks
         */
        this.disableThumbs = this._gallery.config.disableThumbs;
        /**
         * Disables bullets' clicks
         */
        this.disableBullets = this._gallery.config.disableBullets;
        /**
         * Disables sliding using mousewheel, touchpad, scroll and gestures on touch devices
         */
        this.disableScroll = this._gallery.config.disableScroll;
        /**
         * Disables sliding of thumbnails using touchpad, scroll and gestures on touch devices
         */
        this.disableThumbScroll = this._gallery.config.disableThumbScroll;
        /**
         * Force centralizing the active thumbnail
         */
        this.thumbCentralized = this._gallery.config.thumbCentralized;
        /**
         * Disables sliding using the mouse
         */
        this.disableMouseScroll = this._gallery.config.disableMouseScroll;
        /**
         * Disables sliding of thumbnails using the mouse
         */
        this.disableThumbMouseScroll = this._gallery.config.disableThumbMouseScroll;
        /**
         * Sets the size of the bullets navigation
         */
        this.bulletSize = this._gallery.config.bulletSize;
        /**
         * Sets the thumbnail's width
         */
        this.thumbWidth = this._gallery.config.thumbWidth;
        /**
         * Sets the thumbnail's height
         */
        this.thumbHeight = this._gallery.config.thumbHeight;
        /**
         * Sets the interval used for the autoplay feature
         */
        this.autoplayInterval = this._gallery.config.autoplayInterval;
        /**
         * Sets the duration used for smooth navigation between the items
         */
        this.scrollDuration = this._gallery.config.scrollDuration;
        /**
         * Sets the debounce time used to throttle the gallery update after it is resized
         */
        this.resizeDebounceTime = this._gallery.config.resizeDebounceTime;
        /**
         * Sets the scroll behavior when the active item is changed
         */
        this.scrollBehavior = this._gallery.config.scrollBehavior;
        /**
         * Sets the ease function used for smooth navigation between the items
         */
        this.scrollEase = this._gallery.config.scrollEase;
        /**
         * Sets the object-fit style applied on items' images
         */
        this.imageSize = this._gallery.config.imageSize;
        /**
         * Sets the object-fit style applied on thumbnails' images
         */
        this.thumbImageSize = this._gallery.config.thumbImageSize;
        /**
         * Sets the bullets navigation position
         */
        this.bulletPosition = this._gallery.config.bulletPosition;
        /**
         * Sets the counter navigation position
         */
        this.counterPosition = this._gallery.config.counterPosition;
        /**
         * Sets the sliding direction
         */
        this.orientation = this._gallery.config.orientation;
        /**
         * Sets the loading attribute applied on the items' images
         */
        this.loadingAttr = this._gallery.config.loadingAttr;
        /**
         * Sets the loading strategy used for displaying the items
         * - `lazy` renders only the active item
         * - `default` renders only the active item, the previous item and the next item
         * - `preload` renders all the items, this option is required for `thumbAutoSize` is enabled
         */
        this.loadingStrategy = this._gallery.config.loadingStrategy;
        /**
         * Sets the thumbnails position, it also sets the sliding direction of the thumbnails accordingly
         */
        this.thumbPosition = this._gallery.config.thumbPosition;
        /**
         * Destroy gallery ref on component destroy event
         * This intended to be used and disabled from the lightbox component
         * @ignore
         * */
        this.destroyRef = true;
        /**
         * Skip initializing the config with components inputs (Lightbox mode)
         * This intended to be used and enabled from the lightbox component
         * @ignore
         */
        this.skipInitConfig = false;
        /**
         * Stream that emits when an item is clicked
         */
        this.itemClick = new EventEmitter();
        /**
         * Stream that emits when a thumbnail is clicked
         */
        this.thumbClick = new EventEmitter();
        /**
         * Stream that emits when player state is changed
         */
        this.playingChange = new EventEmitter();
        /**
         * Stream that emits when index is changed
         */
        this.indexChange = new EventEmitter();
        /**
         * Stream that emits when items array is changed
         */
        this.itemsChange = new EventEmitter();
        /**
         * Stream that emits when an error occurs, this would emit for loading errors of image and video items only
         */
        this.error = new EventEmitter();
    }
    /** @ignore */
    getConfig() {
        return {
            nav: this.nav,
            bullets: this.bullets,
            loop: this.loop,
            debug: this.debug,
            thumbs: this.thumbs,
            counter: this.counter,
            autoplay: this.autoplay,
            bulletSize: this.bulletSize,
            imageSize: this.imageSize,
            thumbImageSize: this.thumbImageSize,
            scrollBehavior: this.scrollBehavior,
            thumbCentralized: this.thumbCentralized,
            thumbWidth: this.thumbWidth,
            thumbHeight: this.thumbHeight,
            scrollEase: this.scrollEase,
            bulletPosition: this.bulletPosition,
            loadingAttr: this.loadingAttr,
            detachThumbs: this.detachThumbs,
            thumbPosition: this.thumbPosition,
            autoplayInterval: this.autoplayInterval,
            counterPosition: this.counterPosition,
            loadingStrategy: this.loadingStrategy,
            scrollDuration: this.scrollDuration,
            orientation: this.orientation,
            resizeDebounceTime: this.resizeDebounceTime,
            disableBullets: this.disableBullets,
            disableThumbs: this.disableThumbs,
            disableScroll: this.disableScroll,
            disableThumbScroll: this.disableThumbScroll,
            disableMouseScroll: this.disableMouseScroll,
            disableThumbMouseScroll: this.disableThumbMouseScroll,
            thumbAutosize: this.thumbAutosize,
            itemAutosize: this.itemAutosize,
            autoHeight: this.autoHeight
        };
    }
    /** @ignore */
    ngOnChanges(changes) {
        if (this.galleryRef) {
            this.galleryRef.setConfig(this.getConfig());
            if (changes.items && changes.items.currentValue !== changes.items.previousValue) {
                this.load(this.items);
            }
        }
    }
    /** @ignore */
    ngOnInit() {
        // Get gallery instance by id
        if (this.skipInitConfig) {
            this.galleryRef = this._gallery.ref(this.id);
        }
        else {
            this.galleryRef = this._gallery.ref(this.id, this.getConfig());
        }
        // Load gallery items
        this.load(this.items);
        // Subscribes to events on demand
        if (this.indexChange.observed) {
            this._indexChange$ = this.galleryRef.indexChanged.subscribe((state) => this.indexChange.emit(state));
        }
        if (this.itemsChange.observed) {
            this._itemChange$ = this.galleryRef.itemsChanged.subscribe((state) => this.itemsChange.emit(state));
        }
        if (this.playingChange.observed) {
            this._playingChange$ = this.galleryRef.playingChanged.subscribe((state) => this.playingChange.emit(state));
        }
    }
    /** @ignore */
    ngAfterContentInit() {
        const templateConfig = {};
        if (this._galleryItemDef) {
            templateConfig.itemTemplate = this._galleryItemDef.templateRef;
        }
        if (this._galleryImageDef) {
            templateConfig.imageTemplate = this._galleryImageDef.templateRef;
        }
        if (this._galleryThumbDef) {
            templateConfig.thumbTemplate = this._galleryThumbDef.templateRef;
        }
        if (this._galleryBoxDef) {
            templateConfig.boxTemplate = this._galleryBoxDef.templateRef;
        }
        if (Object.keys(templateConfig).length) {
            this.galleryRef.setConfig(templateConfig);
        }
    }
    /** @ignore */
    ngOnDestroy() {
        this._itemClick$?.unsubscribe();
        this._thumbClick$?.unsubscribe();
        this._itemChange$?.unsubscribe();
        this._indexChange$?.unsubscribe();
        this._playingChange$?.unsubscribe();
        if (this.destroyRef) {
            this.galleryRef?.destroy();
        }
    }
    /** @ignore */
    onItemClick(i) {
        this.itemClick.emit(i);
        this.galleryRef.itemClick.next(i);
    }
    /** @ignore */
    onThumbClick(i) {
        this.galleryRef.set(i);
        this.thumbClick.emit(i);
        this.galleryRef.thumbClick.next(i);
    }
    /** @ignore */
    onError(err) {
        this.error.emit(err);
        this.galleryRef.error.next(err);
    }
    /**
     * Load items and reset the state
     */
    load(items) {
        this.galleryRef.load(items);
    }
    /**
     * Add gallery item, it can be any item, suitable to add item with a custom template
     */
    add(item, active) {
        this.galleryRef.add(item, active);
    }
    /**
     * Add image item
     */
    addImage(data, active) {
        this.galleryRef.addImage(data, active);
    }
    /**
     * Add video item
     */
    addVideo(data, active) {
        this.galleryRef.addVideo(data, active);
    }
    /**
     * Add iframe item
     */
    addIframe(data, active) {
        this.galleryRef.addIframe(data, active);
    }
    /**
     * Add Youtube item
     */
    addYoutube(data, active) {
        this.galleryRef.addYoutube(data, active);
    }
    /**
     * Add Vimeo item
     */
    addVimeo(data, active) {
        this.galleryRef.addVimeo(data, active);
    }
    /**
     * Remove gallery item by index
     */
    remove(i) {
        this.galleryRef.remove(i);
    }
    /**
     * Go to next item
     */
    next(behavior, loop) {
        this.galleryRef.next(behavior, loop);
    }
    /**
     * Go to prev item
     */
    prev(behavior, loop) {
        this.galleryRef.prev(behavior, loop);
    }
    /**
     * Set active item
     */
    set(i, behavior) {
        this.galleryRef.set(i, behavior);
    }
    /**
     * Reset to initial state
     */
    reset() {
        this.galleryRef.reset();
    }
    /**
     * Start the player
     */
    play(interval) {
        this.galleryRef.play(interval);
    }
    /**
     * Stop the player
     */
    stop() {
        this.galleryRef.stop();
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.2.1", ngImport: i0, type: GalleryComponent, deps: [{ token: i1.Gallery }], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "16.1.0", version: "18.2.1", type: GalleryComponent, isStandalone: true, selector: "gallery", inputs: { id: "id", items: "items", nav: ["nav", "nav", booleanAttribute], bullets: ["bullets", "bullets", booleanAttribute], loop: ["loop", "loop", booleanAttribute], debug: ["debug", "debug", booleanAttribute], thumbs: ["thumbs", "thumbs", booleanAttribute], counter: ["counter", "counter", booleanAttribute], detachThumbs: ["detachThumbs", "detachThumbs", booleanAttribute], thumbAutosize: ["thumbAutosize", "thumbAutosize", booleanAttribute], itemAutosize: ["itemAutosize", "itemAutosize", booleanAttribute], autoHeight: ["autoHeight", "autoHeight", booleanAttribute], autoplay: ["autoplay", "autoplay", booleanAttribute], disableThumbs: ["disableThumbs", "disableThumbs", booleanAttribute], disableBullets: ["disableBullets", "disableBullets", booleanAttribute], disableScroll: ["disableScroll", "disableScroll", booleanAttribute], disableThumbScroll: ["disableThumbScroll", "disableThumbScroll", booleanAttribute], thumbCentralized: ["thumbCentralized", "thumbCentralized", booleanAttribute], disableMouseScroll: ["disableMouseScroll", "disableMouseScroll", booleanAttribute], disableThumbMouseScroll: ["disableThumbMouseScroll", "disableThumbMouseScroll", booleanAttribute], bulletSize: ["bulletSize", "bulletSize", numberAttribute], thumbWidth: ["thumbWidth", "thumbWidth", numberAttribute], thumbHeight: ["thumbHeight", "thumbHeight", numberAttribute], autoplayInterval: ["autoplayInterval", "autoplayInterval", numberAttribute], scrollDuration: ["scrollDuration", "scrollDuration", numberAttribute], resizeDebounceTime: ["resizeDebounceTime", "resizeDebounceTime", numberAttribute], scrollBehavior: "scrollBehavior", scrollEase: "scrollEase", imageSize: "imageSize", thumbImageSize: "thumbImageSize", bulletPosition: "bulletPosition", counterPosition: "counterPosition", orientation: "orientation", loadingAttr: "loadingAttr", loadingStrategy: "loadingStrategy", thumbPosition: "thumbPosition", destroyRef: "destroyRef", skipInitConfig: "skipInitConfig" }, outputs: { itemClick: "itemClick", thumbClick: "thumbClick", playingChange: "playingChange", indexChange: "indexChange", itemsChange: "itemsChange", error: "error" }, providers: [ImgManager], queries: [{ propertyName: "_galleryItemDef", first: true, predicate: GalleryItemDef, descendants: true }, { propertyName: "_galleryImageDef", first: true, predicate: GalleryImageDef, descendants: true }, { propertyName: "_galleryThumbDef", first: true, predicate: GalleryThumbDef, descendants: true }, { propertyName: "_galleryBoxDef", first: true, predicate: GalleryBoxDef, descendants: true }], usesOnChanges: true, ngImport: i0, template: `
    <gallery-core autoplay
                  [galleryId]="id"
                  [state]="galleryRef.state | async"
                  [config]="galleryRef.config | async"
                  (itemClick)="onItemClick($event)"
                  (thumbClick)="onThumbClick($event)"
                  (error)="onError($event)"/>
  `, isInline: true, styles: [":host{position:relative;overflow:hidden;z-index:1;display:flex;justify-content:center;align-items:center;background-color:#000;--g-height-transition: height 468ms cubic-bezier(.42, 0, .58, 1);--g-nav-drop-shadow: drop-shadow(0 0 2px rgba(0, 0, 0, .6));--g-box-shadow: 0 0 3px rgba(0, 0, 0, .6);--g-font-color: #000;--g-overlay-color: #fff;--g-gutter-size: 1px}:host[gallerize]{--g-item-cursor: pointer}\n"], dependencies: [{ kind: "ngmodule", type: CommonModule }, { kind: "pipe", type: i2.AsyncPipe, name: "async" }, { kind: "component", type: GalleryCoreComponent, selector: "gallery-core", inputs: ["galleryId", "state", "config"], outputs: ["itemClick", "thumbClick", "error"] }, { kind: "directive", type: AutoplayDirective, selector: "gallery-core[autoplay]", inputs: ["config", "galleryId"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.2.1", ngImport: i0, type: GalleryComponent, decorators: [{
            type: Component,
            args: [{ selector: 'gallery', changeDetection: ChangeDetectionStrategy.OnPush, template: `
    <gallery-core autoplay
                  [galleryId]="id"
                  [state]="galleryRef.state | async"
                  [config]="galleryRef.config | async"
                  (itemClick)="onItemClick($event)"
                  (thumbClick)="onThumbClick($event)"
                  (error)="onError($event)"/>
  `, standalone: true, imports: [CommonModule, GalleryCoreComponent, AutoplayDirective], providers: [ImgManager], styles: [":host{position:relative;overflow:hidden;z-index:1;display:flex;justify-content:center;align-items:center;background-color:#000;--g-height-transition: height 468ms cubic-bezier(.42, 0, .58, 1);--g-nav-drop-shadow: drop-shadow(0 0 2px rgba(0, 0, 0, .6));--g-box-shadow: 0 0 3px rgba(0, 0, 0, .6);--g-font-color: #000;--g-overlay-color: #fff;--g-gutter-size: 1px}:host[gallerize]{--g-item-cursor: pointer}\n"] }]
        }], ctorParameters: () => [{ type: i1.Gallery }], propDecorators: { id: [{
                type: Input
            }], items: [{
                type: Input
            }], nav: [{
                type: Input,
                args: [{ transform: booleanAttribute }]
            }], bullets: [{
                type: Input,
                args: [{ transform: booleanAttribute }]
            }], loop: [{
                type: Input,
                args: [{ transform: booleanAttribute }]
            }], debug: [{
                type: Input,
                args: [{ transform: booleanAttribute }]
            }], thumbs: [{
                type: Input,
                args: [{ transform: booleanAttribute }]
            }], counter: [{
                type: Input,
                args: [{ transform: booleanAttribute }]
            }], detachThumbs: [{
                type: Input,
                args: [{ transform: booleanAttribute }]
            }], thumbAutosize: [{
                type: Input,
                args: [{ transform: booleanAttribute }]
            }], itemAutosize: [{
                type: Input,
                args: [{ transform: booleanAttribute }]
            }], autoHeight: [{
                type: Input,
                args: [{ transform: booleanAttribute }]
            }], autoplay: [{
                type: Input,
                args: [{ transform: booleanAttribute }]
            }], disableThumbs: [{
                type: Input,
                args: [{ transform: booleanAttribute }]
            }], disableBullets: [{
                type: Input,
                args: [{ transform: booleanAttribute }]
            }], disableScroll: [{
                type: Input,
                args: [{ transform: booleanAttribute }]
            }], disableThumbScroll: [{
                type: Input,
                args: [{ transform: booleanAttribute }]
            }], thumbCentralized: [{
                type: Input,
                args: [{ transform: booleanAttribute }]
            }], disableMouseScroll: [{
                type: Input,
                args: [{ transform: booleanAttribute }]
            }], disableThumbMouseScroll: [{
                type: Input,
                args: [{ transform: booleanAttribute }]
            }], bulletSize: [{
                type: Input,
                args: [{ transform: numberAttribute }]
            }], thumbWidth: [{
                type: Input,
                args: [{ transform: numberAttribute }]
            }], thumbHeight: [{
                type: Input,
                args: [{ transform: numberAttribute }]
            }], autoplayInterval: [{
                type: Input,
                args: [{ transform: numberAttribute }]
            }], scrollDuration: [{
                type: Input,
                args: [{ transform: numberAttribute }]
            }], resizeDebounceTime: [{
                type: Input,
                args: [{ transform: numberAttribute }]
            }], scrollBehavior: [{
                type: Input
            }], scrollEase: [{
                type: Input
            }], imageSize: [{
                type: Input
            }], thumbImageSize: [{
                type: Input
            }], bulletPosition: [{
                type: Input
            }], counterPosition: [{
                type: Input
            }], orientation: [{
                type: Input
            }], loadingAttr: [{
                type: Input
            }], loadingStrategy: [{
                type: Input
            }], thumbPosition: [{
                type: Input
            }], destroyRef: [{
                type: Input
            }], skipInitConfig: [{
                type: Input
            }], itemClick: [{
                type: Output
            }], thumbClick: [{
                type: Output
            }], playingChange: [{
                type: Output
            }], indexChange: [{
                type: Output
            }], itemsChange: [{
                type: Output
            }], error: [{
                type: Output
            }], _galleryItemDef: [{
                type: ContentChild,
                args: [GalleryItemDef]
            }], _galleryImageDef: [{
                type: ContentChild,
                args: [GalleryImageDef]
            }], _galleryThumbDef: [{
                type: ContentChild,
                args: [GalleryThumbDef]
            }], _galleryBoxDef: [{
                type: ContentChild,
                args: [GalleryBoxDef]
            }] } });
//# sourceMappingURL=data:application/json;base64,