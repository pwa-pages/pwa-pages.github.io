{"ast":null,"code":"export class DateUtils {\n  static formatDate(utcDate) {\n    const day = utcDate.getUTCDate().toString().padStart(2, '0');\n    const monthNames = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];\n    const month = monthNames[utcDate.getUTCMonth()];\n    const year = utcDate.getUTCFullYear();\n    return `${day} ${month} ${year}`;\n  }\n  static formatTime(utcDate) {\n    const hours = utcDate.getUTCHours().toString().padStart(2, '0');\n    const minutes = utcDate.getUTCMinutes().toString().padStart(2, '0');\n    const seconds = utcDate.getUTCSeconds().toString().padStart(2, '0');\n    return `${hours}:${minutes}:${seconds}`;\n  }\n  static convertToUTCWithSameFields(date) {\n    if (!date) {\n      return null;\n    }\n    return new Date(Date.UTC(date.getFullYear(), date.getMonth(), date.getDate(), date.getHours(), date.getMinutes(), date.getSeconds(), date.getMilliseconds()));\n  }\n  static filterByPeriod(inputs, period) {\n    const date = new Date();\n    switch (period) {\n      case Period.Day:\n        date.setDate(date.getDate() - 1);\n        break;\n      case Period.Week:\n        date.setDate(date.getDate() - 7);\n        break;\n      case Period.Month:\n        date.setMonth(date.getMonth() - 1);\n        break;\n      case Period.Year:\n        date.setFullYear(date.getFullYear() - 1);\n        break;\n      default:\n        date.setFullYear(date.getFullYear() - 100);\n    }\n    inputs = inputs.filter(r => r.inputDate >= date);\n    return inputs;\n  }\n  static StripTimeUTC() {\n    return date => {\n      if (!date) return null;\n      return new Date(Date.UTC(date.getUTCFullYear(), date.getUTCMonth(), date.getUTCDate()));\n    };\n  }\n}","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}