import { NgZone, OnInit, OnDestroy, ElementRef, EventEmitter } from '@angular/core';
import { Dir } from '@angular/cdk/bidi';
import { GalleryConfig } from '../models/config.model';
import { SmoothScrollOptions } from './index';
import { SliderAdapter } from '../components/adapters';
import * as i0 from "@angular/core";
export declare class SmoothScroll implements OnInit, OnDestroy {
    private _document;
    private _zone;
    private _dir;
    /** HammerJS instance */
    private _hammer;
    private readonly _scrollController;
    private readonly _finished;
    private readonly _el;
    private _isInterruptedByMouse;
    private _subscription;
    private get _w();
    /**
     * Timing method
     */
    private get _now();
    set smoothScroll(value: SmoothScrollOptions);
    adapter: SliderAdapter;
    config: GalleryConfig;
    interruptOnMousemove: boolean;
    isScrollingChange: EventEmitter<boolean>;
    constructor(_document: Document, _zone: NgZone, _dir: Dir, _el: ElementRef<HTMLElement>);
    ngOnInit(): void;
    ngOnDestroy(): void;
    /**
     * changes scroll position inside an element
     */
    private _scrollElement;
    private resetElement;
    /**
     * Checks if smooth scroll has reached, cleans up the smooth scroll stream and resolves its promise
     */
    private _isFinished;
    /**
     * Terminates an ongoing smooth scroll
     */
    private _interrupted;
    /**
     * A function called recursively that, given a context, steps through scrolling
     */
    private _step;
    private _applyScrollToOptions;
    /**
     * Scrolls to the specified offsets. This is a normalized version of the browser's native scrollTo
     * method, since browsers are not consistent about what scrollLeft means in RTL. For this method
     * left and right always refer to the left and right side of the scrolling container irrespective
     * of the layout direction. start and end refer to left and right in an LTR context and vice-versa
     * in an RTL context.
     * @param params specified the offsets to scroll to.
     */
    scrollTo(params: SmoothScrollOptions): void;
    static ɵfac: i0.ɵɵFactoryDeclaration<SmoothScroll, never>;
    static ɵdir: i0.ɵɵDirectiveDeclaration<SmoothScroll, "[smoothScroll]", never, { "smoothScroll": { "alias": "smoothScroll"; "required": false; }; "adapter": { "alias": "adapter"; "required": false; }; "config": { "alias": "config"; "required": false; }; "interruptOnMousemove": { "alias": "smoothScrollInterruptOnMousemove"; "required": false; }; }, { "isScrollingChange": "isScrollingChange"; }, never, never, true, never>;
}
