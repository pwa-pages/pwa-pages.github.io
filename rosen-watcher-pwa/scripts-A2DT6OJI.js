typeof importScripts=="function"&&(importScripts("./shared/js/ngsw-worker.js"),self.addEventListener("install",u=>{console.log("[Service Worker] Installing new version...calling skipWaiting()"),self.skipWaiting(),console.log("[Service Worker] Installing new version...done skipWaiting()")}),self.addEventListener("activate",u=>{console.log("[Service Worker] Activated new version!")}));const processEventServiceSingleton=(()=>{console.log("Initializing ProcessEventService singleton factory");let u=null;return()=>(u||(console.log("Creating new ProcessEventService instance"),u=new ProcessEventService(new ServiceWorkerEventSender)),u)})();self.addEventListener("message",async u=>{const e=processEventServiceSingleton(),t=u.data;console.log(`Rosen service worker received event of type ${t.type}`),e.processEvent({data:t.data,type:t.type})}),self.addEventListener("message",async u=>{const e=u.data;console.log(`Rosen service worker received event of type ${e.type}`)});var ChainType;(function(u){u.Ergo="Ergo",u.Cardano="Cardano",u.Bitcoin="Bitcoin",u.Ethereum="Ethereum",u.Binance="Binance",u.Doge="Doge",u.Runes="Runes",u.Nervos="Nervos",u.Handshake="Handshake",u.Monero="Monero"})(ChainType||(ChainType={}));function getActiveChainTypes(){const u=new Set,e=t=>{for(const[s,r]of Object.entries(t))r&&u.add(s)};e(permitAddresses),e(permitTriggerAddresses),e(permitBulkAddresses),e(rewardAddresses);for(const t of Object.values(rwtTokenIds))t&&u.add(t);return Array.from(u)}const chainTypeTokens=Object.fromEntries(Object.values(ChainType).map(u=>[u,`rspv2${u}RWT`])),chainTypeWatcherIdentifier=Object.fromEntries(Object.values(ChainType).map(u=>[u,`rspv2${u}AWC`])),rwtTokenIds={"8a94d71b4a08058327fa8372aa69d95c337536c6577c31c8d994169a041e5fc0":ChainType.Ergo,ddb335d2b4f3764ddeae8411a14bec97f94d0057628bb96f98da9d95e74d02bc:ChainType.Cardano,"30e4392fc439fce9948da124efddb8779fe179eef5a5d6196e249b75ee64defc":ChainType.Bitcoin,f5985c64c1aa8f08569dc77a046f65f92947abaa9ccd530aead033eece23496e:ChainType.Ethereum,"33477693d6be5bbd3a4cd786fbff5e6444449c191ab08e681aaaa87fc192772c":ChainType.Binance,"5d727b722fb72aa02257d987970c68aeda41614518bab9f0d8a21bbc75b7a3b0":ChainType.Doge},permitAddresses={[ChainType.Bitcoin]:"NY4PEzZ7VfjtnTN697R7my9uAVkCYb6N71J2RSmJCFSdDqVf9aPvFQqKXujYDBtSA8hxYVUgkGgU9SP2Ss7JDUkHkdGLBqZwH4yDcPyVvbVbcre3o7nR59wiFDVtjzCjfZmVvMVJD9HiW4GKqVuZGTQCKns8tDe3sJoDNTL3VmhzRUPZf9JCN4TNji1ruXf5CxqWtDrCfoxE4xfbRWGmtBMdLMoRdL85V7z1fP5KxroWX5YgZQo28nTCU3WjPuY2YrjqYYGNHXvFZ9G8E85kCcseNtRWqViXGFzmwqHWKaYe4AdJzBbMKzJWYszsbiemNvisPtT2Yj3FjAmAErpW3gMeWyH3WtbipaAu9D31ggpLeLkLTGscJ9HB2oExpGWvv6u9mGdkTJMHYUuZJUGrcJPE3m7ZTEFxwkbeR9oD8nHHgW4SB46kHFbxzNoUksGPZQnxf95J3e5PUnhYgg7mrQLNpq6pphgGukFcHDgAN2rgFmUSDVsuzomhP735SMiveXSPzx6PZeP7CmrEHyXN6mFbBJuY17kvzzix1w9eFwryZDuZqnAANkYhF3TLkLyGZfSC4o9iAGynpivuNMUgbKAuj6D116tKoCq9PHELL8eTefmXNLFuhauQuKRjmWQKj9zYSd7qi6Zf49KX25PnWHkC3REc4abYpjtiQFefT2HkWRwneTCkJ8uMvoHs6kJzLg8NVzH8XwEZhTM2tNSDhBKZaURpYiQcHwLDgv5uFiwhasLAdZi2EJywBYX51NKc6m4MEsTiAJC9jkEydWcwyDzSHN18yEr4rvEgMNkUhLHJokgV2v3BNFhUTJqe58e2QXAmx9MytUDqzg3vwexEpMhueC2roYA27P1mmb85HKEz15a8LnuUT8ZjmG8kDbHuPYFyxcATytVuDrFDzqKBt9X36bocip4ZU4RRY8JcWjJvMcrBCjV3EhDVQ4it8bhoZnn79PsXazvDteua1NEYEJniPnNrRaiKTUWrseEUQ2vVjWy134jMxRbeiARhoj7MDxug2kFP8jRGSsxWt3Qqbv2SezT3xZ8jYxTyQ2CiyJ61CvUQwPtmoY3XKjrgrJKwnSzJRs4egKPYZKoSiSy6UdHMKuNDmys8wYo3Gi2EgVdUYRLLWcHh5Z2H91odSbTW2h5e6pZeY4a45TgihE6ZnZBhHGc75zJjukhPgP1wEp8GrreHA7ejvTEmpwNgj571x5JrvRD5TxWaFuZKBonGexovAK2L5v",[ChainType.Cardano]:"NY4PEzZ7VfjqPk9gZSNS6ERoYyYBEBebyeXUPs1sjEfdenV3Kq1QKWBSQ1Gfem47fPVRw5UXcYNXtgXNGqsD4DedukcYv5c5kviu94yWpyrh2tbXHea1tyfuEcb8njgvXkAxrXkjvgcPEQqy7BsR3KQPe8vzSaBG5V8WFHQqvHmpMXXYMvKDZzRbNjZUgYvVinGq6qx9hct1fFG15nFdcWZkzhBcu8ytydt3MmnkYEyL4L2rLD8Jp2Q16DfeaBBqmuyxpMoVxPrQzbPjq5GKTKrqnpisWVrubpAy5dg1oQ6tVZompLpwTWvX1xWspA9tWPmc3MCV2e6y313KzSosGLi2Sdv2ptDgJpKamQv6fNKmj3TWkNbPCDfjp2KXYcfYE1vQ5prRZCPCDhVgWP7bqpF3SeUTMJmvBaXjd1tBavjanquQDkYU4n5XBwJPvUa5kCAP1USTgP4cgPA6SzB8hg2RXmB4PmEWM2RWv2mrirYeTdZrzXCbpGCd9B9GK7bNknnYz1X8wVqyYxxQMZ7Rort4BVRNPNKzEMtdGKSmQpiWitfoAfphXL3SGMfwMT3sspgDcD93Ftiq9gf6kgawpFBKWJmV5jXmfiSCWkPW5x56L5hcc3NwJLYYjcMh81aXQBP4HguyudttZcF8QiDa6Ae3idS1BTegArbhZBFn1TQJGgWtuCubLC5Ja71FadEN1G1s4Uz4BapDu3WpNH4NJn3UeWavLd1EytGjevyJu8XjziAMYr6cPZsyhb95aj7LAHgwJ8YT42zWYoDxqhEzbuderVtfauVJxEo2Rt7p83hMtkFS8Dy3vNbdmGEhWEFfDEyquEHTLsYkehRMWTeTeoDpRhKpeXoDxTNriR6Fz6y3Koxwzg281gYhxxvew7TpvSa3cLvjBpNxuoUfhyT645u51cBsQzden3RB5LjJeToSctrx74nNGCm9sR7fQgzno2pETeit1mykq4eocy93EoTcypKitcbfhgAYwXrGcGUQyhsupFgPZMnms5VnWhCsGKkK93uy7z4BRgi9y2aU7zMUxPJN6q3kYhjcdgYhcgqLLmWo5pBRSxcuq3p3NhPnd2Tps5RztjtUS5ZkbRVsTri8Sy2J5xPLir6VB7uxcPCSYYGJaaVfENJ8tYLYH3m3TUoxRipyjNDDBmsRdujqFQvFoYiCyaPFgu9iqzMvuPDM7FDPAKV8V7A895N9SMMZkG7uAzVvLgrU8Wrxdby2CAX9ttmPJn",[ChainType.Ergo]:"NY4PEzZ7Vfjvo3AYu7dBh4ziatarsMAVPnwtHZL6BfoKeaots7P629HvVAmDZNdiVNUitWMqVJhgphUregwCXnhVNRddztP93qbtSWCMzVk1UQmCVUpvQyb25nyH1PrpRSjpFewJWeN3bjiVF6bTAm2t11X4d2fKGnAo3PX2BFVeyAUre7T5CZs2uikxZisyrJ1djE4UY1uwpTFkJv3RzZ3JMugNDeicf7qWqtCtNH8E9uG56VD2dMvmsr5YHQbrKgxa5foyA4K8cD59o2ub9ezbhjSgfXbc6VLaXmp5SzdP6n61MaePNexedifBWwAsHFcaaVXf7oUkePp5dDpc5mBbaAuidBAwH4SaxnUNjPw2bHVSXEk3ZJwwBrZRG7CYBCvEN6wFuPyzuhGsJQwdCtvUqxViGhxWrhRYKwixLhScVdGwCFCF9HjuCXt92FkEZKRk1kJuNzMUuc9AUbafbwhi8RC96TVQrtnsajhomptLKFmQXg4nZQao3jwHV8kfZeyF9BX5kiWUnC83Wa7X7seGUcECHRPLAapk7Lr1kUQ6Q62RpBKeGUsfmPcyNhaZ2bmdxMxxHAhdZdKVr78R5ch2BvG7ZtV6wkHB1hcVJGJmU4dskPPR5EFd8gED72eeUnNAsTknW7ePfNMj4DYWGqf2QhPHDZXsyRN2Mczv4tgyRsNA2HR3U9oZikejcuYhha9yNsXEdNn23B8wa5aDZwR6hwZ9hQ74yv29sbfBAfe9XWT2UZAVaeZeazQSSrvAhicEKnwmCAvfwcZNS57SHJ1EfZf1oEt66S6mGFdBzcKPLZzmJmCgMiBmMThqMemT1XS1ovES76LVcpXSkyiEdA17htR5HuPWdDVfWNQAK2jAM8BjKGtvsh93oMFGvMaBVBAvj1QcfTr17LdeeT7h78bKzyF5SQWuyu46xtDbmTZVrR1ZSpnffiD8TbWnae85Bw1VfttScQ8yfa26dsc9pwLrHhYhC4XKEVPWYUxLHZd959tLA2kGNkJBJR8PPThR8PugaUTq1sQpLg4ezPPUjYyWFvhFf6Rcw5rcJAwj99AUwoEhPaUnxT3TxiEJBbD3Zsna33mQD9Zg69Zzr9xiLA7GzhhA998dwkpbbgqFxyASwH6yav5qDbXPZH7GPtt3nTjUfRs87SGYgVGHoGhqaVUAfQKW4TtvFicdpvQws5kg1nZthd7WkWcR7HqLc1R4wBPFynFVGc457vhQwaP78yQsQDHq86",[ChainType.Ethereum]:"NY4PEzZ7Vfju59RSazdQK92s7PaLrnCh5D9yZBZx7fptQjQZ7Ra2Xiz1PFusrkij3YamVoqXNqoUzazpjnzwmX4zKvPwWGLdqk1RXvp82m7Km2nwtvL2d6tVVCfgiVzA392JszEtNDh9hNXn6wk8eXjXwUg1q1w4UJi6XzmscSH6iZ1BR6ghCp5fyrZBeUfnvbPsfgHmmoVQzmDJ5E9KjmCg53detrDH29gyZUKyqjC5ddnCKG5cvVmoZ7D2ix9KFa9RuLcpVTxnVnuoJnHL1yoGog11TB3eT5hRyiUzeBU688pMb1xyUaCw8bjh5wSsBRAWQnDiAaGuj6zsJEnKeMW94XLeaTASw4K2bwyWHr4BVN9XNSeopFoj6mXPrD2ZhGgPV4HeQp1qEQ2pemMiSecXYkghfnk1t8hnfDNMfXoyKXxEmN8Cf1p7M8pqtgo7H9uUi6xsfotsB2uHVSoT21nzERYMaej9YuYwgC2iUzrzeZNFu7LbMqBErDgHn4wfgppRnF6axDca7QJGNv3q7E2q1DGRpzmTXPfr9FeFxki9geAwsTAy1KTqU2u6TY2wcRC3GzQz83x6LatZLhf9HZnVWZ3SRWQ5AmKUfxhHVxVC9Hwiraqb7ciZBsrnXHWmFaHHHYxafZwoLUBqxeWnHNM211MUwJ2rD9pvrqREfYs4CKYJNDxe5nezL11TnsLyt6p6XkKgHXvvqnk9HQ27pMbpNVX33Y8iQpznFvL2YBCn6Dw9hBDgb8thcYkkAXyLRZskEmhXQFL9evXTstNoeJVJp7NAo7dejZRaKHzTvZnZpkybJGks44qFbGSuSXGegN1V1HWyYGnGSgEJm3yrapNC5tdTvHWXVDxjw1G2TwqKL8D4HZVsyWsu8PEErsaf593jscXKTRn2uqvdhp29rJKGV4v2Cfd8DDXzwhmVxcVFyUiXg9JDe8fCi2rxmFai7a6P6vTJrUkJRtKYBt5RUY3uzKXpX4J4fBWMHmnM2yTSgdaXb9MYULmsbWitqpxiTWh1iMQdXNHxU1A2hHvsqogqEhrG9bGmMU1m1EFSFAPocv3KUf5bPYUWmVUFaxa2MLmE4fs1EC3kCJz8434NrxD1YVA1iosiv5f2tDM8E3w15VRik2a3R1Y6C1D9uHAAT1XK1A27dnx6e586eghm5BuvCY9Di89bdYH5KX3sg4NzWAAJYd5DLZbtdXxzRrKiKwMcPjskhwyQRcv3qstVzPDfJdE8Ej",[ChainType.Binance]:"NY4PEzZ7VfjvyhUfALrnVnmbCo79cESCRMoD4m6TNTRdUnGR3B7EM3KRKxPh6BmdAsdArGV8DgAanEjs4QLYzYTBPGexkgMBPaRwAMSuVAG5rtzuN5qNmyAZsfdrR3cnBuspTqRkBQFp1oczXkCVNFdjpPwAFYLZgnnJFJVnZbp5TQSECTioxM1oJSKm7LBnEbPNrVWFqcShvqAjoyie7Bd471mNEq8y3mEeV7FH3AQCm4fKQgyfwYkRBC4jvFjWDaMshpFbV325g7n5rcyRsbXJ8EGMC2pKVGEbkx2JCgX4ba5dxx1uGibiHnuHiTNXLmrbEJ6BFtBFZB69Ye7U1C23uBEEvTRLteSbKzKAaGv7UbhVtvcgX91muR3sy7jXTW5FszKWej7knHLWJhbUf47fCVvmbXWEx6rHu3fj5hEqQyfVuER3J54yQAtP9ertP9hQX6GQ7mXfyUwmxTYiJS4GxLzeWZGwfSfRUDe6GN7qurja8kVeMrTwdo835yt4XUcemLK53TCkTLe61Bev6NtiUCSuNrhddXcdfMzqk1DWZCXhkcm51pnGmbmAntwC6AF7rL2LHtHi4et2edKAJHkYUp6t9a8Q57eL6fX3Q4JSfDrjfgn4x2fJaF1APdwbBVKoJyhDUkmV6xAaANYZifq54eFg1qBh54F6mu61U3Df5sZqsepzQJNYp6Y95afLuHGmG97mxhmmRsecKbamu4p6P3TPZEs5eYfHspVf85GNh2BztxxYn5hSsR9c8VRJjBhHR1qGHzX4mbRKWn2D41L7AHPnapSQyHCAPdhSbaAV3b6eLqLvc9QrFBAdnsHqN4NauYDPZc6sSrFuLEwNKFbjefc7pBDnA2pfTUUVqCTFuuaM8VmLKFxG2oVsi1k8GD5moSzQbEphVfWTjE9kTZR35oArptsctXGXRT6MXToom6m4cj465Xs9nsRY8t7FgSHsxetJafgogRjo8NRpgFkBpRgf69QuZbqYkrFMTsoDRkLYCLTF4XZwYzu3tqrzLkSZPKDzK1x7pySFdB56vAstU8HPHLqtzduvHt8Gvrkh1mAYQ1cEphCF1jfs5vZUDifLQYnZ2JiJeMdFZu8RhssWvwU2oL6wqx4Ey2iRaSrLSadYnWx47QvGZeZ8M5gupYMNiL7tTkpCjMjbuetqGcpQrtiwuBJ25DqfnWeLN2K6LS49Fb7GjW6Y3fMgdDYVhh7MFpLiyHMcC7wzdBJSMEcE1VNvo2",[ChainType.Doge]:"NY4PEzZ7VfjpDKVcQkzdi4CLcgbMvUX53reQKShv8wRAJ8cRsEi4zV8VwevNM5JPxi5UA77685CKHAQAEkE5HUX2jv5HoMoaZFqcYNBQmHxLA86pS3fHDhg6GvJ8SHssoUZX4uGcgEcRt118Bz8bR8sVAGC23UcafXEwmhfCRfrijjPxDx9ZLHN14uuCU9Gv8Upta65PkzbE3oTD3XDuq7RicN59bz8o6eHef9MfxZetNXrgGTkCJJVJrQ5ahqPLmCzkwv5iXLvRjebbPcen8FxPJ7RDE9rG5BW4uuyroqH6nsNcQKRDnvvnrt5PjghRfss4EswpEJXoxxf7VxYUxx2KgHy8W865bjV5Gvmd9nLPnRStwDV7t7HP2U98fMH3Qdp8PS2Vew5edCjjZTiu2k5kB8frNwSdhGvu91TpAhen474RoxWeoZErNRPpkBH3MN4vHo7EZYiJPjsYtLctVEDWZkvFuaFCYQbuF73JqT7673erYxjRu5o3bCHMgNLYPYuriHLyWtpAJvkFa2Xir54tNfMFyEcvPEWYWaB7J8JsBa8E1b6v9x3VsDyNrU3bGXz52Ax7dG5ziTX1DG2bZuRvGSejjeP8GVgUXTBvRARs8t4wKwdicHkZVie2zGBR5w6Ajo1wK8hNHi2ANYSX5VEFEAFgjwo8DNMUTXbyreeKTcJgcntoc1CbNaiDUvJEyRYaAS7mncPsAiuMjTiFUAzRU5gWdtgRTrkVfi638QrvsvKQgKNPxvGBQpEWtSnmDfRhFifDT716wZ22rca55i9V2ArmDRVZG966MSTYNewX96iwndT8PDhhR4xfysMrTdQMPBzFXGoaAyV54rZ37G1JHQjKQLdMXLP67wjqFMNDRjBUsUYpBYVgj4XpvA1nik8UDqGW5zHoEszpjFJNCSzoexM1zLk8q5vk73dfQ3zaME7tTjp7rdAH3tPtWVkrFSWyDe3rw4zZpSHE2iqH8dDvTVuS1QYsJ6G3iqE8nQbg9FipofqTEjihP9ojvcXgKa9ASce5JNsRKHUSeYkAtDs561sZyf5uY626GcsvMYKGHjEjxCYJUYfrDTFz8v14dNAzVAiYQS7M32otTzKeXhB6ZNSRsErvMfrjgW6Rc7joCL1umHo8c3n3nqxLjZqxnzTgBAXnUNDY2g6LLdVRbj41hxTmvVkwV8MV5N1tvTAALAiagxDKu5bWsfTYFHbiiA7tLxqhsUvATorTzU7nrN1hjpQT3i",[ChainType.Runes]:null,[ChainType.Nervos]:null,[ChainType.Handshake]:null,[ChainType.Monero]:null},permitTriggerAddresses={[ChainType.Bitcoin]:"5ivrmzxYZZfH2wJRvogecZo1YYXm32CoKnSZdtwxbjNoogRakUFe56VrrcULZtCkvAzM2MNRMxPYSfZc2rB6tkLKLCirG14JPDMfqBoWMhyzzQLVsDukZupema1i8SvYUuoaiPL5rTyQmqgF3ftPbvM2dHY623B3KsKRTNDhkoMoRmKLzenNWqjXpkANpyc3TCkDuvBypXfbWVN55F2ZZUs8L3XkvaJKcb74GY7whJB8Zg31VgpmVW4uVEuqpcvPk5FYNiTdRakyYTUVFnAdCR6ZDjagBYMr3ks2uHMhQdjmoKmmwCocVm4SGZsA8rU8zj6zrEgpepLT5UPD9sZQWtvSi6C82fPEW9pvNXr4T3sFx2xNRv8meyNUhopUfiRzVoWfx6Q4ArqU3dnmRtN8pxkDfTZr7oGrzAFAb3DRhBUPhhfWY2USAw7LMqMAuW65pdUFcGnczQH3B6V4kALNaoGMD7ixKtkdMkrAPHkJmxKzeMEd6Y49PnHWxFkQbXwqGELjDppqmdbKceyrtjUp3JwcZ5qN7YcLg1yXhFUiWAHhnAwGkHsTHivXADhV81sDBVqM1GUB3piyt6gkJ5My3SaRRTsokrnJLoGL23GwjEfTzDsvXCoXww3MQcwUUCXehQConnMxYsK7HHGV4wf8kbctrFd2ekPkeHm5ksjagEVzKMraZJgrRSRWEHdYmUGkU6tLGZTUF4Xe4MkdzXC3sRtif4iUnZg6Tnt3DEx2i5fmPD4xasYkusc6thd77x5x7MZXMdkxuo9BWTG9iiYAaE4aLQ5yEbrYeVY85DCVFAKXTsiwUH1De3rDhRZfFfQRuDqiYomDFumxofAa9k89yLeCSRyQpAH55BXLqvppusJyDwYJKd5itao8z3Qi2Fsvt7oL77fDnbotPwp7EkFbQZdGi7aUU1SdyfhxNwx6dYcFe2zpj6Spj7zb98FR2HahXwXnqqZjuym7RjN55bqPt2FufJ7CwdgQmiBMid7E1sAVMxBZyAeNbhHEqRJCajpUyGXswJjQJ9S1u9c4rRHzdntMtr2RXDtdgrt6b69GpZgZNeAX3QG9W9kQK4SAHE2BULEmNSBZHHitrRYdx97AsDLFfLpzfsPa82ew9oBy3PacMAF2WP48yxQrAzSA2p5idB5QFbYoECBBLsCyApG37AMuPrr24JrWmZLqR5XEPYnKojYrMcciwkn3L6jRpC5c1D9KrsTGk5dGtqBji1FE9XAVxuVpdddJjBSjphPx2UWtvJnwcxB8CoRSsVDF8RoyPcVwMmSfL5arDGJxBUzVu",[ChainType.Cardano]:"5ivrmzxYZc1s5aYrsy9uMd3wphLaHx4Kqrw7wVDwQdtj967D3qYpAw15uAr1CK4RbXKFW7kersNNe9tXu22iut2zG7tCmAP9TzSNgHMSJFBzR9y7vmqpmTGyFmn6poS81E8MzwaJ2MxkULFoS2nj7CwVsCMGweg84sJShZkGm81jxw6N65GHddQ4sJsBJb6MYFcVXeLxrgnEMPd3eFH7XoVj5uM97P6rsUAztZmeaA9hdUkc9Bz497j5BKQaiXyrFj8ghEtL1cemwfnGrsybkuq132QT9qsW7dNaG95D5wSYNUoAP7mVcziPas1PvEa5xRgMKnvE4ByYPT6BfkAMijYfXSDLzi1EbksurZGfC6jX7jfSgwuugXMNbjrUwhzj6657H9MsytUxRW8kNUKN7mwUphQGFS3nWLG4hzyas5BF8MnK7usWD7MJko7FaUWwNPVrRdatwB5uu6rUrY8UeAW9DPQMrL6VZWMKMWFmoY722pVYHdMdCsehR3CnsRDGDpZtvdqJnGgn2czeZ4AfK8o6aykw3HMTvNP2e6pxNt6FYgr2WZhbXsmeqA6bG7t9JNCw6H7tA8KJPAN1X6CYeZMitX5RWCrMtrSy2NEDepNvMgH3n4GD3tvS5Rs94gFVWHfLu4JM5BaTwfRTcdfirnwPQhYhtH6SEc8b5SgGkraojn4JgkKGp2ftszDUNyaKrY8XJQusuMG64Aoe96wr2AaRKKtUhAKfk7kUXHtGoV3h4MhDy5Wnbgb6hXcmQoMQ8HnT7JMAFWUUeWyveNn3hdNucDf2WtmXBsRpwUidapBJPD9Xukw6uEsWdkzsCNcdhZM4EqnkadRKziCubVx52TYoxDYqupyLssPc6JdaLUWny1Nh2vsEdnuNYXj82iX7AeJRaHJeyn8wytA7G8NwQXp2THTniwF6hPCWTub5khfdJ2g4VDTv14GRL88NA6w49N5FaG2ZWxqgRKYxbEJqgBE91KWHoXfsB4qvo6cGfMwpeJU5g6FTiexmXZqrNpRwmnnx1NTGK4TdqnksfaXZPMfPBbdJnQu1vfGwLuMkP5f5EvyfQ4KzazA67AxoabFYkKJk4pvVkRqaWUps9b3nkZhErUMAgxYR4raNtKHSUT13c9RMaGQmtV8viR4b7Z2JoKjqiEP9xGVoZBANhDpJ3EpihvRmDuy7MAZfy1qEm59spvdgdPPEiffw8GBv9MyDfsAGNSzsMhiP1f8WKXduWy7AdEJZTrBJkLZFPTaRHHyU9XvbRyzrxhV87thVrfRhv88hN6Viw2CyRdMJUPmVt",[ChainType.Ergo]:"5ivrmzxYZTDDDoKD1urVYrXZG96ijTUYXQJzE6SCRJ2RR6Kj1UPWL1iN1xeHgYJEQjnQ7m3Ld9tBRRYqjzrAVAqHyGbZB3otUWZW4sUxN4E11fNUZEMQ3kVwnZxFmeSaxcXhQiTFH1cvBYWuFMRRFfaA2UMfpEgm2WoqeiJxPCojp9D7h6yMV4br5EtWTQJKRtcopBRoUgDg9mrKPAXGPZZKTZbYotgLKQ4nzD8QB5hjYJswhLmePaY3zK5eJq7NTcdoAgbNPK9nQ9UpBUgrc8RB76P8evPHMXg6HrVdQ2z3rkvYFVZqH9SmCkE8KGiLYGX7hwaXYGvPExdoVDp7qsSctsPjwgt9Vts2G76dzJzfBhEunJ33vdTEkEXX3wkjK4ZE8g5YKCwGpcED5PhtRQQtJZaZMYTZV3TpbPWy57U49cD3HVeUGR7efxUHZxYybWJ7q8i6NDm3PUwKFN63HmPYQn7TMYGkvSoizTuTAUJomiKgSnvoz2DSUzukRSRmUFA1cLqdR6s7FbeJfpbaKWX4kUGM2Xh38FdqNE94SjkQMY9bv3H5N8MgwGL2La12e1GXAdMCKJCWKRe27vjdaHJWmsKrBLuXQegGN8BaqNuvJbhrmreHAjR9tVwVkxcTUsr8u8TGUzkzN7coV8HiQV9KBMVgQ24NXPYyoCuedwfCiNwYX7PSSbvve7Dgyy5e1S6qbVpEpVtjy9NzWfRaqr5CyGDqhkfjizNG71NZu543vkacjXrrfPWqtNoXMtTRyM1pzwW9ze9aoRX6e92mVaCUB8hTnfH3Q8EstRLDJygLmp63y45tKwBVBDjog7Z6pWhTfBapMBz8Q28pMfPAR8ywfz8qvtkyQcv9SuEZWfvpZREaS5PGhBuqU79eR9bwNwS6TLu9BZV5Y1ahVFA1fMUxhXTvX69hKnNHFgZ35fZdrVrSeU4U5yGvYX7ViTqL2oFk16HLoTXgNs6KQz7PPZr373gDeRh7PfXpX5jWyxw6SRreE3jB5SUiQnZxmAbpJNVkPzFbZXcrsrS3JHSfiVeqp1tk5uNaZcX39tQTXtu4bGrpv6EiMvYPkiDhCiKd5oAVeZ8VxEGN7SP94vF9WhS2oWUMCVLU1XW2DDHejZ36Zo1Ho8fHbUEaKNbRBozY3HYnkYyJuF4wer8xJ6q4KcPppDrS5jqfAaZF6YWsdtqgse7qMeWVUPj23Vr5XG2S9sYmWA7femKuZki71S6BqZGNfit7F4vrzqNZd1L5oyLSVCtuiv3DybRnu2YEaUtrmCphsmrpAFSEwJWtFKqcC",[ChainType.Ethereum]:"5ivrmzxYZsMEcMTZnZnsQm6jutdmSRzVW7WZoqN2c82khPoBUwF6GRVZdd6XhnNf9gbi3fsoZRM3cHmvz3sgJEJmy61cRxTKrM4q9ZfxYKBtyfNXLwD4CCeMedd6pxYDbgT6h3W5Qce2DZX51sw7aP6hu73HxJvcAirXLCYdZxi1nnGUbZYd8WNkU9zZ5ZGLVasrL49hVLNoJsP3ZYLpqzXchCL8RKv42qnLJ2kHc9BZJyv3QAYqMZTZSHQyRnYj4GAbdB3aYP71ge2HXCb6Arc6upjU4cWJPrPY4f8QcMdhXTrUtWp9u443Ekqdd3S2y2jfWLjDLsd7S9y7ASHPqx3GnCcPK4i9YnCQhdM8i5f59nA5ENgo24BTJvyQiRssDrCPpHxeTUp5ae2E5D4vyAnFfWCFfD6f5Z6DEDQvFnu1JLjjLcunp3rehGTSNgjyNNzGkjf6GF2y6enPuNcfpyNWsY2QJot4r1yZWqzeHvMgjbhnjpcManj1ikT1FFeg1oKZCCNBUbed4jYnmM1qFFmTYaovRUuEFXKFU2fhpz3EfEB79PUd5g5YMu1MTkKdUzLrEnoTxz9GKNpXCsoFvwC82hEuwXPcPFuMHdBFa4jtqSueVFgCPHHiXMz2koe6FGmCzY67q8215taocoiEC8NjGNTJ6Bzz3apbT5JP2hLVi6z11kNDQgtTA4gNRoftjZBBNVaFFj1DwURqEBzdawony7FvSpQYzgFEz5PKN7rAAr8Dsd4phbesmeASSph4aQLzB7iuibFSZXxyBm1w8GUEodaWEhh2UeTCJx2XtocU9aLYrUSgA6PgBF5NWzWwXDihESwyboSKnDb2mfHeGyjkjKSfQP2oP8Las1CeMXPdnwXUggckB44f82qjE5ENnqYhah4s5WkgPzzSvx42uhxc8VTbySPgiDefVGuFCEATX6fgAs5ikKh38TYWzLbUi9qM5Ncz9G7Z7Mc8RTdKtRLSxLUoPpiabXtyfdBkNr5PYhznMd3TPy9EHKinSzPV3GiJHGEkfYAbGmf2imbG2LrGtCEnyft3vBXYVocEnAXZsVKSRMPvkWsA7J2LRuQHrZCbVwY4LBDpfrHriEGUnAd168HB7DKPqRtCsVLgd2h6JgSHS4xXvfSwhG371VfTxJgAAtHUgKttcZfpZGXffLCwP7zmQGNVz6FJLsTEN3VXaQMQ7ooCeGHFdL7nbB7ejitfnWzWqgwqi5kv3nZEcmx4YfcnyvAjBosChtBMNfkMSVqa42Mx1xat4eJvHD5Jm1AwYijVqQjcXYh1ZzHqD",[ChainType.Binance]:"5ivrmzxYZw1LAT2rQQY7Gkiuo36J5uzCTyMRoqee9QDzT4Wa1NnZaQ6zVLw3yw4ksfRCdfKiCYfjyiaJuAvdwi8WfVd2VJZo5VfoX7qNEELk34ZdvjCGsSdA3AWVfqSPy8NxPqm41xeccezcgRCVmyTHJa4pu38vtBvTZsnV4jzGTZsSstTQPGZMUUTys6VSBRUGqQjFpjVty3jTFudfJ4rRgyuGhyA1A3jgzY6wPSBXHniAi3c9rQLVEGNzpuyjXD1bFVemGdEmZp5tYLKb5BMsasJr6fa3P4xdyWryg6uUrxGiPZCRT4Z9DMmSyJdfVBFtnLaL7abqN3evRuHrGMn3KVVSFocUM9dLGZpU3XzzvWkgjwxB99FVJ4TzCSKphSgh3gPuCnwQWFhpuRuJJzV8je2jtYguEMNzcygK8WkvkuTsniW3zqJdGpHEqSKcQwnR7a5nP8yVyRRi26aYrNDjuJ2XoqnpLSSNAPmFZNApWcXGRqsqdaJBLsKPkkFXNYfcpwPNcpuExuFaeLhUaCbxdjWKBWMHPxqEhvK2dcs6uXhPjp4QX9XoMSiRqBGC7YAxhZkChKaxmBM3y2sTsyfW69LFM2VKs84FF7tXCGKPomVABQCgVbt5p9BKyPcL8ERa2LJrzfKJwfoXSAPrrK2QEd5zaDi7g6tSVy5QBFzrYARnncF2ZCuGR9Nmh6VAWumXpHfVq83iVVBWHKjSvKJuBEFUzg3G1dWmtwxqRZYFgdgd5FAZp5M6Nj6x4VMi4qcJe9S1exhMHKTDmKnmsJ7AX4YA4MdRGYXGJHRSUb842gqEYbqjjTSu8xRghbuxg9ghnr8NVx4uxwE56zJUMzhP4bVftTH6XhS1MDoRUPi451LcAbRr7QLR7gq8FS4H73FtJN4cni5mURRpNAnzEYFWcjmqaUuC9VSfkuD3Aqk7vSKpbJoSkcaZMXdqb9G4x6SGxjphx8kvxQDTJkmjkxNB5bADpRA7rfkSjRX9zekM8rb7NKu5doxYovb1qPgDuPPbD2eA279btntL8xzqTW2JWQdTPqdHG1ezxBsSWqWdFzzJYFh2VWuYB59A38EB9Mcihj995Y1DGfLt9vHMaw92ERCeqtk4MqX6WSBYc9QzTEA7wUtdYGXLydyRRxbLpYTfTX4sUvhCvg2YGix1L1G4nFaNRq28jiZjfKTCLr2TWDzFvX4jVWhFjFsBVRSCQhiKfDRpsUXm9CYXuk9tvnoVj2NN3e3SLyiWjCEUap84EhdyZn1zHHQSXnsSoSynR1kiWSDCuJCBcyM2MQ8wR",[ChainType.Doge]:"5ivrmzxYa3qBuYZ3teFTEJP1ziojbVZAYdZF528CNfT5tiycZoiqXfZEqgud81sBrXGyGoanY95RS1xwRSzc4nSGhvhg9Awr23q8vde4k7PWrErq42DeCwborsxAwKm1YrWJEwD8KZiKmSMR9jCD3pTxfsvoq4yMJeh4bscJKRj9iuy79tzWT3NU4L1vrVNjQd9ksz8V2mUeU7EXouDTHxAM5Vci3HgeC2CBqY23J3mpXryfb3UPha7a4zf2eF7Tv5viA7ayrGgu582W2ZttnLFHQTRn3gnTU715qzjk7NMer98y528FxXNZsjSFs72tZm4kL6zMthigXX1yNBtr5vXmYKcHUyAeRWuX2CK8jAFWYF4cJeceCN5E2KjoTK47Ge7q8B9MNZBVU83HPGzjVkqjvFDQsDZyt7hyCRhguwKibwyw1Y76ceNXrhzwPgukP6PsCWyipqSMVTAxB3QNR46mGi1v2S3MNKR9bThJU98yQntABweyLuqHVmALaU5s971p9SPi25gVnLsFD2FQnczLpHR2g8iJ2PcUZageyVyCxKbX3EvUoyQTymeaQuSwNgySKAs67YgUPFGcmXD33Fbs7vQvkrDbqUVprE2igGNZvCmStypiqZA6ijDzbaTX1XwFAehFT39WyGQ9NXzCtYn35fj95NLkDWugvEmqL5to8JFbCcHbV13WCJaVgvcerLKU922nuM54QXYNoSQHYdCypp3PXwaWBbsemt1cbH9mGM5JnYuhAm2gKctu7rUwCQ9P6qx7k4nC6ycUWLPsYeaYt23RXxF9cx31A9nUqSW4n4j46j3fVTkBX47C7X2TFF2VgHFJky4d3etKp5EQodYs2caNLgmmACErMCtJ1GuamHCfSEg3iLyLaPAmtRM9HFUVCsMEL3GwLzqEasH3fy9dpUrAh8FqAHPT16gAx7ePEPU8k9obwUyYqkxMBuyaMonoy37GejLXzpzM9DTacEuNCBKw9hVHnDCB5Zxkhuj5kkaH3794qur5GCF3XKFnWNuKf35DBwVeEq3SMMsWmcBB6ZqfJJxa4vCLS6aEhtDxnSxw1TS8T9bvu91dXLH6HoAfK5vnoGHKP387yTuJmcbacFtvBoT6EWDS6DvXQx9FptRgojeF9T1ZjCChE6igPL9WhWPvvCEm6BMR2Jtsxw16JJzqMW33W5CBJstoi8oSKE2yrw7i2hxsyY6UPDWZUe4Cex2tSfWSzSS3tXo5ahVMfoVHxUmmKJoE6St16U58ETVipwqU6WLJT6BGYboueetYfbzL37FPgQEruWWNT",[ChainType.Runes]:null,[ChainType.Nervos]:null,[ChainType.Handshake]:null,[ChainType.Monero]:null},permitBulkAddresses={[ChainType.Bitcoin]:"ZsPNMsGz8D8y11MAneZTVjJndCjgTUrBWezH77jKWr2KXMVRgs4gRkDdTLoUQq8xqtGoESTa7r3zr5E3SxQkE5CM2PaPDSHb5bQWeRtaL9eikJWw95bx4DSjCDcsECpjLxbEfahCHy2sDuXQg6potLhwVVADP5TNUxEDgWPR27x658qcHA54TPRhybb6z67cdmkPrQNXwumoGvoPNnqVcXsdXS71KpQViuk4wXBT156Nd7Tt9b3Dvx827QiLbjJXuajydCDFC6yp2sj5dk7uA5ArNfViybrVQaf71GNGwyh6USgVKBpTurrRBtxeGWNzXi4krd7XbseaU5Crnauk9fj5jEbVH88sPzuD6o4XReNW3odcKDkvqgUh9Vu6b2uGLJsV5wY44Kk3bf8PJmkTc6vQE7Mprkdi2jBfZrzffqoKC6hWLfSZNcUWFV821L43VkJbsaYLukMq1SBJ7y7rsnWcct1U8owQbDpboysHrxfeE84JMTterx8E8sxJqwQRRTxT7M",[ChainType.Cardano]:"ZsPNMsGz8D8y11MAneZTVjJndCjgTUnjAi7MBVhohaELkSWjyWJLdqw9DFRK5XJ5mS3TnP1cxLsjn38fsQ1FKDfXpczKLF38JVqUcTgTz4vWuQ3moQtya1Yb85tJXVnq2NgvDcuWJsRXQWyqBABL93WEFwT6TWiZeXVAQ7x3EhJGmFvUkbZqbtkHvbYACQ7PZVwVNXn44saome9v7QrCMqvxHHrdqaSc13dHXx2MGVut22sVvMsNXT5ody7hoAqmhfioxM6Yw238jUyturCgtbWdVr42Qv5t2aZ8YCdz6ifvqSbKmnNUBSiccfxr2G9Y4eceJ5jv7iJEaf3RAoYH9vTP1yiacpmFZLjtT38FUz5n95ubWfNg5kZAiefzyaFRpV8sRH147FoaQKFRUQRACivsVvXRBhZWYeA57VZ65E7E6d5RU4JJewNiQ5de5daAQXnC9aV2diVXw9obFC2aBYqHz3U14gHss9xvcVPuqFsJdQRLsejtnYxuoZcJF18vohmNKb",[ChainType.Ergo]:"ZsPNMsGz8D8y11MAneZTVjJndCjgTUjPFBh5wF6ZNmMySHVDcBmMx2VxGFNCcMxCKDPkdPEzZp4bt5pgwrpZyKV6nmzCAh6SaX5ZnN2fL2X2UTuLvmuk6t8BqrxoiKHmqASttYk6xJPNabuF9ZNMYQBikFWDmq2jrxZS1MG6gQQ2Mx1MgXVvPs9ZkDTe8TykK4MuvQwtjaatjugK3FC5gsB4e4KiTcMPzreUkHvC8mZQGTtGkmHSbq8hkUDfa8MUMAka4oV3unyhgvx9MHjSDNaKWtqrWJpHCsQqPxvzPKohoYSNQt6H3V6ddw1dzGbBz8eKSbno5tEaLSryLDeMAbXhivALPZ3uCyWvx9BKFxSpuqCuQs9aXH7zKedvxzE6XRrrC2TZcWn5UinvbMNu3S4i5oTK2Y8WeVfoy5XHRbK7AL9w9pimJBp5Dx2UnhhHrWbeg9XyVZP7uCEqcUK3iVFmdG2euUa84Jbr7XVaE8v3sBa8LvYdxc6wAVfgPNNbQNxK7Y",[ChainType.Ethereum]:"ZsPNMsGz8D8y11MAneZTVjJndCjgTUoSPbApCbagsfJ9WvbzbsgAbzHGNF5aNaoR2AyxnrCBH68d5TDEc8aBhVRBT4Q5UC5tdqi9JpMqC8CYFja9PYqMj7KZDjPyMHPxbqUSrq8pGVwe7f8dCV5brNYBCrNqcrC5TmYvp2HpoEUXVb7JsxCuPWQFJgXqYhzEbySQyZQGCdVX6XtjU7aQZK5bzijsXDJhuntTM7ntmdSBJjEhtkMrvrBH8RtTW2JHZw5ZW5QamM3MJbfYDExepJQeJtACiz5n36piDgebfWgjAgibjz6oXsky3mJk2rAETx25AMQSAkHz3cYnH5Gs6BorBka9qXK3U47Dk4tobZGbEZqVeFvuaoRb7VcGUvX8L4rQf72gXzVVCVvY9YEzVoFEfFGe392S5e7X6QpdBuap8maYY4RygToFx6fLeUggDP1gEQ2ptDXZoCcthQPR6ey1GtEju8jqujt2VvJ6A8VjCbU3JYvozB6kqGxLCLKHaN1zm1",[ChainType.Binance]:"ZsPNMsGz8D8y11MAneZTVjJndCjgTUmenzfjjRBRRAo2DZVkwmBZxuHGoNTFLLrmFhsvuagJbFxBVLFW2nnoSuDHhNckxkJhBKNVhfPghWoKTuCHsEdJcJ1RD6XTT2aWbGPwHkja29mj2RibYNyCqjkPWEmbRJhVvfN2DUZ9pExxBPTmghNa6tFQyLkkfHdmuXEXLdpmWndfdknawDuojQPGjx3p42ewB4eeV8Zs7dDCDLdUUghTcczqJAadPMroUpmifMTw1FrpU3jC3kMaSzYpcpPu4e44xEni3E9hrenfQePbFVe9Jq9bVyjsQBF8vC8UxqefzEFmMoHT9xkdRNsFmfLMAximM3nyNhTMgLimWvLcNddW11jK1FFPumgKRUUeRivjtnXiRsNedXpmHKhvSVvpS8wAJbuySw3bHqkrpgQHqAr6vUiXj5McjsYzVh7PZxrUgEGNe8uLk4UpxJGhW3TVLNcPHdEbq2AoyabVkK2ChbE9KZ2JJBdHah93VgZSVG",[ChainType.Doge]:"ZsPNMsGz8D8y11MAneZTVjJndCjgTUn38JxZpW4EiZgEoHt1Juw2od5nVwwx23kjav2ZzWjZAYrjAQnGwskZjCxmVagr3o3d8AfdQZySQigfqzTFjekNSHeQBuQPQ1y3ry6fN4w5ECxn9jrmho9pZFkBddZ2QLbAhvZVt8WrpduXniFkG27KsYo6ikCtgRsJyvzjE7kubBpsYfRf7tV8ZT2RyZaSGJp8Lo6SbrAMdDA1mke93sDDkP6B1cXi1UdSSg8nAi68b2HLJEdnw52KES4Xnh3Dg3s3n9Ur1mGf6WJ44oVVxwsBHoXWLhoAXJ6v6XSnX1rxBcqT344WHLrezqdGwzYAbKYqGtUiEZq6fcHVhL3Wu3pxkv2WbupVFpVAeFPxYzcwwf7vtibL7KG5RDuZ3rziqCgLC5jL9ckTS4KkZXH6YEJktNnUmULpcBdpGUHWzeea2SLMeiNYw1aoZ1k9QfmVK7TjxKJ5g8gSrSTwmfZHMPD5v6EBYyu4gBe31WXWVz",[ChainType.Runes]:null,[ChainType.Nervos]:null,[ChainType.Handshake]:null,[ChainType.Monero]:null},rewardAddresses={[ChainType.Bitcoin]:"2Eit2LFRqu2Mo33z3pYTJRHNCPYS33MrU9QgeNcRsF9359pYMahqnLvKsHwwH72C6WDSZRj7G7WC5heVyUEawcSLSx821iJXT4xWf2F5fjVWDUpyGNdkxhFwQMhPKpx85Uu16put68V837wxDx19LRJ5uqi7xBa7EDFRU79Grzk8HDrfpUF3qct4xrQUvDofDroRQTuKueAbwybAfGDhNqG3jzKQchgjedBkbPAuDuNunehW4ZXUBLRSfqy3xofV76bxT5zpZjZcKud4XaRQvXUAVGunJzAs7RNZD5WZxenhmKzhiyuzWiq5QkWqxFw2h9vQ6Dd5PdYsWP3dPtaDC8WUjGz8tQ1tU9LuhqZ8QThQA5zBfoPFrk2iJ1repUuwZPjWnDRHLfWppqDQJGm2GEWHmYTQAfCJQFChUtSNstSATxw37xXjziKkPQRRVPr3VPapbHtGSoQyygzTHgcjxv3HSzwXkD7DScyA2iGDsd4B4WeXo4a6nM4CYpxa9f9FvabbNByhKsgq3ZoCsbUVXN99Pet93MFdxVmBBEsGYEYvtmMEDZEGb5z3JZDtVSdudFcm3bij82bdFzKSmmxxWZhscmLYpGGq1J5geqTiyTCgsmksAHumPFBmLkz8v843Jc3z5b6dwFgyXuBmQPTq6Nf8t95y1UYe8UYx3qNVfrHSGbToSgvCQyLKVv5ns8T2SZRWWr",[ChainType.Cardano]:"2Eit2LFRqu2Mo33z3pYTJRHNCPYS33MrU9QgeNcRsF9359pYMahqnLvKsHwwH72C6WDSZRj7G7WC5heVyUEawcSLSx821iJXT4xWf2F5fjVWDUskGdVdyYY5RBJnp3dfYC7iPoRNeopAFQWFwEbTieow347UhRyqvo2LntFpXzomvGwVTfq9YXS8Z1GGW5mUEioD5xC17Sz72NLbQrskSx7QZAxQTbMGh6vwM9J4q7NzRmQeHmWaHLpUHMU4Jdd5ccKumMvAY8d5C8RxB4iATySLY2N1wY84qNsWNaqkNofbUebf6LgmU9HTKAmU3nDoBfX7mhCjH8kXDhZeYdRsuLVFEYu83TkpwgHAYGmUoemxWAeA2BKMx8CBAy9jxbCyUjdnk9i7sLxuejrwLLh8W4tP81YkESjZ8BV65BhzPdvCaiX8vBSorgFfnvGKVzwfhhsSDwLY1GUwLTMLwTUTjSzEjsMX9hzsEEEmhxLsekabLmK3HZ1jssLrFryNuE59uS51hazJsi3gsT8SBk1J9YV6Dq6xto28nLqrMqK6raqLcAm2iU8hBtqdoSXqWzsrZHpqc2uLGhY52ee4k9TpFBvN1RovYUtY6KS4FncT4UgnbEFkzsnWYKX3CDn16tJs5CyZ97gKcvUonZ5EqTwabzni14CcQsTtKtEAqj1odvSyfJ94NnEjuiVPC3VmZbQvveN3bQ",[ChainType.Ergo]:"2Eit2LFRqu2Mo33z3pYTJRHNCPYS33MrU9QgeNcRsF9359pYMahqnLvKsHwwH72C6WDSZRj7G7WC5heVyUEawcSLSx821iJXT4xWf2F5fjVWDUmvtxr3QSv1aLwThLXxeqYCCc34xjxZDPqPyNGYvWLNeBZxATvBeDuQ6pSiiRFknqmvYVsm9eH4Et3eRHCyxDJEoqZsAahwfVSya34dZNHmjaPQkwWo3Coc17pxiEnWuWmG38wSJz1awE6cymzhojnjxDTbbXgjR1yfYU3AU2v9zttnT8Gz3gUzZNSwjiXSPu3G9zkDaFZVKqb5QwTWY3Pp6SFJgBQfx3C3sp4a9d3n9c98pfWFWAGQN5EfkoHosF8BQTDuzXG3NU8gVCNeNPXYA8iWCbvY3XpxQMvQUxqkjDv9VQfUNvAKVHLW43chi2rdBrQ7Teu6NnesLRWUKXpzSxpByWftkCCdBppjZtYmhhCHqpQGkQyTcMRoP2krFKe7xKbfnFkdkhaYH9TTdKuTuKtGb265RXxiqrc34KvkZpaBBQB5UvoCU4iLSDngNTjqkNPnWekDahzNHLd6CtcdC1B19jdGEXWeNADemDtdK4zrMNg7U8iVpyGYhLDnkeLVrcbhoxkHxrFwfrN19XvitDosQqmt9dseR6SWHBCDZJdmJecCiEwd2wBiwN5N5umEy3Dd4Hznv7kDr6eX7KtYxp",[ChainType.Ethereum]:"2Eit2LFRqu2Mo33z3pYTJRHNCPYS33MrU9QgeNcRsF9359pYMahqnLvKsHwwH72C6WDSZRj7G7WC5heVyUEawcSLSx821iJXT4xWf2F5fjVWDUpPyXf9D8PFkALkfhCu47xSApej3a8VHFCfLuQoMFV2LgTs6hEqRf2XQkDHzn3KYbGJ9b6gs2XcYf3ZQA2gJaWJXFErT11uifohMFFRJV7cb1eECubCbHCib3A434SJVrZee18QTRECrDirtC2GdZK6fiKGbGcKFTZWK4f3ChgnuZFCjRoCX2UquL25b2zkev34shFCspbYwYcyKmc5xxrvssUHgQmUZy7yu3RKJPXYuwH7SiittGsJ946spWJEp3cuBiMcpRvwbiCyrQqM1FtK3wZJKqy95bVDfj9zXwFfR1rE9wZADPs6xcJxi9P1z2iBXqPXGQHnKVaHJWEwNZfP2KAZeUi8etKnYSib68e5cuif3YNRVFdNtKAT2SJEsJCDmnUecmdCwvzMeH2EtNYsRBWVeTV4RBypRPi243qkFrct41bz6WZ8FhLFXU1tnExucXvQ48ZoQ4RQpNorEcGNDY8MC52yhkofS5b9wy6AYYjpQyTMmhD1QZF3VcQgPNT6x4yxPXYsjohYZh96h6M8T7m9gfVV3w8xowtVQVAB1kvJHMuZXxBkBNLwFbhxKuMwC2Dje3LZmuH9mhg94f7Uoe",[ChainType.Binance]:"2Eit2LFRqu2Mo33z3pYTJRHNCPYS33MrU9QgeNcRsF9359pYMahqnLvKsHwwH72C6WDSZRj7G7WC5heVyUEawcSLSx821iJXT4xWf2F5fjVWDUmAMWiE8WncsqsSRhckGHa5xwdGj7fCkypvX2Q9ypun1tUfQ8YwoXYgYCSF1M2t7WaUb2ZZzY9yETrdm8ywS3VzDFpirFEiLLgjE5vhsLkcW2PtiChF5npL3SFsxnSY92ZMmSw2U9GzhwDwTKXpPUD17dydf4CTbLATnCdiTkEYxCzVqh3XnBebDhEFSHWhCWVtqRniJJRqpRaAsv64qtBPabPG8HNRHT9TXFR4a58wH8VqdNuUSKHx1NQahaXTPYHfQX7H4mAzYU6fbH5uryhxqSh5HTBmCB8XrJcXCR41FeqjwrkwTiEHJkkyHVTeLdpyaUcHJ9M9nEsTbGbxMBLEc6CLtzRA5bDwFAKXN3i2mo86wUghaPMd72nd3pLDbhGYRntgYMrVWuVDzMhdJamVvFPbiEWiCs1BJ9NgJzasvJpJQxm1uBYskrWnULHQaJf8Kfoixaqcz6mcp2aAEAkoAmd3CcAddM4X1vCuapWeyaxLD7kXrHaafMsatugqJP4JQGFKEkXXBhthKScGLq5wcbYb2cVv6HuzyxyMg92UiLzTyFDB8QG2NwKgTfLGJ5iLDzzsFkPGtkxECDMVmiw21E",[ChainType.Doge]:"2Eit2LFRqu2Mo33z3pYTJRHNCPYS33MrU9QgeNcRsF9359pYMahqnLvKsHwwH72C6WDSZRj7G7WC5heVyUEawcSLSx821iJXT4xWf2F5fjVWDUkje1kCt7DSEufp9kN95BRzhkMTmgY2jmZ3gPH7hjfNkbPBkjLNifx5iH8wZ1EmiMFiWKozc1ZeT3QdnRhCtLZwHo5sBTek83753eK8YZNVgtykvcdLDbsgGyfCXZtJ2zxbNK7522JRormkeNkhLFBxC9u2tQ11EHyvcg8qHUhPA1GCXALUdtB1FkV2chfgewbDmtrpn7tqC7o3eaxQs3Ted3mo3TKmckYVWca7TqHnBCYGE1GRH2X3ZuWuSJXyi1AxKCyRi9JucVAGwpBhQPNR4viEZe5fo6kBiChWriCKmr7pti8685xoAz1ycFnLPKhbgdkwXmZtoLbYYrirEifkMJ1QXtaJStb86NQLQU2ThhqTzEkP22D8sRZ3Ud2b83KcxVvzzCvGeDRK7SkfjbmfhTCazJwwXiFTHBgT2tzfJvQTazwP6czcVC4taS55Ts2uKB4Z9Eu5MeWEvbBLBis8KxnkZkdMecxcBjRdAojCwyMBJUz8EPYo6x659TzbSJhjJiFaQ9f4kanVBV7nC9gK1rq5oY7bFH9MUcwGeu38HQk62kUbv7Q2dYx56CBVw6cHzdRJu6AXHY8dAy3BLqvHCV",[ChainType.Runes]:null,[ChainType.Nervos]:null,[ChainType.Handshake]:null,[ChainType.Monero]:null},hotWalletAddress="nB3L2PD3J4rMmyGk7nnNdESpPXxhPRQ4t1chF8LTXtceMQjKCEgL2pFjPY6cehGjyEFZyHEomBTFXZyqfonvxDozrTtK5JzatD8SdmcPeJNWPvdRb5UxEMXE4WQtpAFzt2veT8Z6bmoWN";function getChainType(u){if(u){for(const[e,t]of Object.entries(rewardAddresses))if(t===u)return e;return null}}function getChainTypeForPermitAddress(u){if(u){for(const[e,t]of Object.entries(permitAddresses))if(t===u)return e;return null}}typeof window<"u"&&(window.ChainType=ChainType,window.getChainType=getChainType,window.getChainTypeForPermitAddress=getChainTypeForPermitAddress,window.permitAddresses=permitAddresses,window.rewardAddresses=rewardAddresses,window.permitTriggerAddresses=permitTriggerAddresses,window.permitBulkAddresses=permitBulkAddresses,window.hotWalletAddress=hotWalletAddress,window.rwtTokenIds=rwtTokenIds,window.getActiveChainTypes=getActiveChainTypes);const rs_DbName="rosenDatabase_1.1.5",rs_DbVersion=38,rs_InputsStoreName="inputBoxes",rs_PerfTxStoreName="perfTxs",rs_PermitTxStoreName="permitTxs",rs_ActivePermitTxStoreName="activePermitTxs",rs_DownloadStatusStoreName="downloadStatusStore",rs_OpenBoxesStoreName="openBoxesStore",rs_AddressDataStoreName="addressData",rs_InitialNDownloads=30,rs_FullDownloadsBatchSize=400,rs_PerfInitialNDownloads=10,rs_PerfFullDownloadsBatchSize=40,rs_StartFrom=new Date("2024-01-01"),rs_Input_Key=["boxId","outputAddress"],rs_Permit_Key="id",rs_ActivePermit_Key="id",rs_PerfTx_Key="id",rs_Address_Key="address",rs_PermitCost=3e3,rs_WatcherCollateralRSN=3e4,rs_WatcherCollateralERG=800,rs_ErgoExplorerHost="api.ergoplatform.com",rs_ErgoNodeHost="node-p2p.ergoplatform.com",rs_RSNTokenId="8b08cdd5449a9592a9e79711d7d79249d7a03c535d17efaee83e216e80a44c4b",rs_eRSNTokenId="dede2cf5c1a2966453ffec198a9b97b53d281e548903a905519b3525d59cdc3c",rs_TokenIdMap={[rs_RSNTokenId]:"RSN",[rs_eRSNTokenId]:"eRSN"},rs_RSNDecimals=3;var Period;(function(u){u.Day="Day",u.Week="Week",u.Month="Month",u.Year="year",u.All="All"})(Period||(Period={}));var Currency;(function(u){u.EUR="EUR",u.USD="USD",u.ERG="ERG",u.RSN="RSN"})(Currency||(Currency={})),typeof window<"u"&&(window.rs_DbName=rs_DbName,window.rs_DbVersion=rs_DbVersion,window.rs_InputsStoreName=rs_InputsStoreName,window.rs_PerfTxStoreName=rs_PerfTxStoreName,window.rs_PermitTxStoreName=rs_PermitTxStoreName,window.rs_ActivePermitTxStoreName=rs_ActivePermitTxStoreName,window.rs_DownloadStatusStoreName=rs_DownloadStatusStoreName,window.rs_OpenBoxesStoreName=rs_OpenBoxesStoreName,window.rs_AddressDataStoreName=rs_AddressDataStoreName,window.rs_InitialNDownloads=rs_InitialNDownloads,window.rs_FullDownloadsBatchSize=rs_FullDownloadsBatchSize,window.rs_StartFrom=rs_StartFrom,window.rs_Input_Key=rs_Input_Key,window.rs_PerfTx_Key=rs_PerfTx_Key,window.rs_Permit_Key=rs_Permit_Key,window.rs_ActivePermit_Key=rs_ActivePermit_Key,window.rs_Address_Key=rs_Address_Key,window.rs_PermitCost=rs_PermitCost,window.rs_WatcherCollateralRSN=rs_WatcherCollateralRSN,window.rs_WatcherCollateralERG=rs_WatcherCollateralERG,window.Period=Period,window.Currency=Currency,window.rs_PerfInitialNDownloads=rs_PerfInitialNDownloads,window.rs_PerfFullDownloadsBatchSize=rs_PerfFullDownloadsBatchSize,window.rs_ErgoExplorerHost=rs_ErgoExplorerHost,window.rs_ErgoNodeHost=rs_ErgoNodeHost,window.rs_RSNTokenId=rs_RSNTokenId,window.rs_eRSNTokenId=rs_eRSNTokenId,window.rs_TokenIdMap=rs_TokenIdMap,window.rs_RSNDecimals=rs_RSNDecimals);class DataService{db;constructor(e){this.db=e}async purgeData(e){}getMaxDownloadDateDifference(){return 315576e7}async getData(e){return new Promise((t,s)=>{const o=this.db.transaction([e],"readonly").objectStore(e).getAll();o.onsuccess=()=>t(o.result),o.onerror=a=>s(a.target.error)})}async getDataWithCursor(e,t){return new Promise((s,r)=>{const n=[],i=this.db.transaction([e],"readonly").objectStore(e).openCursor();i.onsuccess=w=>{const c=w.target.result;if(c){const d=c.value;(!t||t(d))&&n.push(d),c.continue()}else s(n)},i.onerror=w=>r(w.target.error)})}}class ChainPerformanceDataService extends DataService{db;eventSender;async getExistingData(e){return new Promise((t,s)=>{const o=this.db.transaction([rs_PerfTxStoreName],"readonly").objectStore(rs_PerfTxStoreName).get(e.id);o.onsuccess=()=>{const a=o.result;t(a)},o.onerror=a=>s(a.target.error)})}async addData(e,t,s){return new Promise((r,n)=>{const o=[];t.forEach(c=>{const d={},m=c.outputs.reduce((p,l)=>{l.assets.forEach(y=>{y.tokenId!=null&&y.tokenId in rwtTokenIds&&(d[y.tokenId]?d[y.tokenId]++:d[y.tokenId]=1)});const S=l.assets.filter(y=>y.tokenId===rs_eRSNTokenId&&Object.values(rewardAddresses).includes(l.address));return p+S.reduce((y,D)=>y+D.amount/Math.pow(10,rs_RSNDecimals),0)},0),f=Object.entries(d).reduce((p,[l,S])=>S>d[p]?l:p,Object.keys(d)[0]),h=Object.entries(rwtTokenIds).find(([p])=>p===f)?.[1],g={id:c.id,timestamp:c.timestamp,amount:m,chainType:h};o.push(g)});const i=s.transaction([rs_PerfTxStoreName],"readwrite").objectStore(rs_PerfTxStoreName),w=o.map(c=>new Promise((d,m)=>{console.log("Trying to add dbPerfTx to db with id "+c.id);const f=i.put(c);f.onsuccess=()=>d(),f.onerror=h=>m(h.target.error)}));Promise.all(w).then(async()=>{const c=await this.getPerfTxs();this.eventSender.sendEvent({type:"PerfChartChanged",data:c}),r()}).catch(n)})}async getPerfTxs(){const e=this.getData(rs_PerfTxStoreName);console.log("Retrieving PerfTxs");try{let t=await e;t=t.filter(r=>this.getMaxDownloadDateDifference()>new Date().getTime()-new Date(r.timestamp).getTime());const s=t.reduce((r,n)=>{if(n.chainType!==void 0&&n.chainType!==null){const o=n.chainType;r[o]||(r[o]={chart:0}),r[o].chart+=n.amount??0}return r},{});return Object.fromEntries(Object.values(ChainType).map(r=>[r,s[r]||{chart:0}]))}catch(t){return console.error(t),{}}}constructor(e,t){super(e),this.db=e,this.eventSender=t}getMaxDownloadDateDifference(){return 6048e5}getDataType(){return"performance_chart"}}class RewardDataService extends DataService{db;chartService;eventSender;async getExistingData(e,t){for(const s of e.inputs)if(s.boxId&&getChainType(s.address)){const r=await this.getDataByBoxId(s.boxId,t,this.db);if(r)return r}return null}constructor(e,t,s){super(e),this.db=e,this.chartService=t,this.eventSender=s}getDataType(){return"reward"}async getWatcherInputs(){const e=this.getData(rs_InputsStoreName);console.log("Retrieving watcher inputs and such");try{const s=(await e).filter(r=>r.chainType!=null||getChainType(r.address)!=null);return s.forEach(r=>{r.assets=r.assets.filter(n=>n.tokenId==rs_RSNTokenId||n.tokenId==rs_eRSNTokenId).map(n=>n)}),s.sort((r,n)=>r.inputDate.getTime()-n.inputDate.getTime()),await new Promise(r=>{r(s)})}catch(t){return console.error(t),[]}}async addData(e,t,s){return new Promise((r,n)=>{const o=[];t.forEach(c=>{c.inputs.forEach(d=>{d.outputAddress=e,d.inputDate=new Date(c.timestamp),d.assets=d.assets.filter(f=>f.tokenId==rs_RSNTokenId||f.tokenId==rs_eRSNTokenId),d.assets.forEach(f=>{f.tokenId&&rs_TokenIdMap[f.tokenId]&&(f.name=rs_TokenIdMap[f.tokenId],f.decimals=rs_RSNDecimals)});const m={outputAddress:d.outputAddress,inputDate:d.inputDate,boxId:d.boxId,assets:d.assets||[],chainType:getChainType(d.address)};m.chainType&&m.assets.length>0&&o.push(m)})});const i=s.transaction([rs_InputsStoreName],"readwrite").objectStore(rs_InputsStoreName),w=o.map(c=>new Promise((d,m)=>{const f=i.put(c);f.onsuccess=()=>d(),f.onerror=h=>m(h.target.error)}));Promise.all(w).then(async()=>{const c=await this.getSortedInputs();this.eventSender.sendEvent({type:"InputsChanged",data:c}),this.eventSender.sendEvent({type:"AddressChartChanged",data:await this.chartService.getAddressCharts(c)}),r()}).catch(n)})}async getDataByBoxId(e,t,s){return new Promise((r,n)=>{const i=s.transaction([rs_InputsStoreName],"readonly").objectStore(rs_InputsStoreName).get([e,t]);i.onsuccess=()=>{const w=i.result;!w||w.outputAddress!==t?r(null):r(w)},i.onerror=w=>n(w.target.error)})}async getSortedInputs(){const e=await this.getWatcherInputs();let t=0;const s=[];console.log("start retrieving chart from database");try{const r=await e;return r.forEach(n=>{n.assets.forEach(o=>{t+=o.amount,s.push({inputDate:n.inputDate,address:n.address??"",assets:n.assets,outputAddress:n.outputAddress,boxId:n.boxId,accumulatedAmount:t,amount:o.amount/Math.pow(10,o.decimals),chainType:n.chainType??getChainType(n.address)})})}),console.log("done retrieving chart from database "+r.length+" inputs"),await new Promise(n=>{n(s)})}catch(r){return console.error(r),s}}}class ChartService{async getAddressCharts(e){const t={};return e.forEach(s=>{s.assets.forEach(r=>{t[s.outputAddress]||(t[s.outputAddress]={charts:{},chainType:null});const n=new Date,o=new Date(n.getFullYear(),n.getMonth()-6,n.getDate());if(s.inputDate>o){const a=new Date(s.inputDate.getFullYear(),s.inputDate.getMonth(),s.inputDate.getDate()-s.inputDate.getDay()).getTime();t[s.outputAddress].charts[a]||(t[s.outputAddress].charts[a]=0),t[s.outputAddress].charts[a]+=r.amount/Math.pow(10,r.decimals),t[s.outputAddress].chainType=s.chainType??getChainType(s.address)}})}),t}async getAmountsByDate(e,t){return this.reduceData(e,t).map(n=>({x:n.inputDate,y:n.amount}))}reduceData(e,t){const s=new Date;switch(t){case Period.Day:s.setDate(s.getDate()-1);break;case Period.Week:s.setDate(s.getDate()-7);break;case Period.Month:s.setMonth(s.getMonth()-1);break;case Period.Year:s.setFullYear(s.getFullYear()-1);break;default:s.setFullYear(s.getFullYear()-100)}return e=e.filter(r=>r.inputDate>=s),e}}class DownloadService{dataService;myWatcherDataService;eventSender;db;busyCounter=0;downloadFullSize=rs_FullDownloadsBatchSize;downloadInitialSize=rs_InitialNDownloads;constructor(e,t,s,r,n,o){this.dataService=s,this.myWatcherDataService=r,this.eventSender=n,this.db=o,this.downloadFullSize=e,this.downloadInitialSize=t}async fetchTransactions(e){try{const t=await fetch(e);if(!t.ok)throw new Error(`Server returned code: ${t.status}`);return await t.json()}catch(t){throw console.error(`An error occurred: ${t}`),t}}async downloadTransactions(e,t=0,s=500,r){if(r){const n=`https://${rs_ErgoNodeHost}/blockchain/transaction/byAddress?offset=${t}&limit=${s}`;console.log(`Downloading from: ${n}`);const o=await fetch(n,{method:"POST",headers:{"Content-Type":"text/plain"},body:e});if(!o.ok)throw new Error(`Server returned code: ${o.status}`);const a=await o.json(),i={transactions:a.items,total:a.total,items:[]};for(const w of a.items)if(new Date(w.timestamp)<rs_StartFrom)return i;return i}else{const n=`https://${rs_ErgoExplorerHost}/api/v1/addresses/${e}/transactions?offset=${t}&limit=${s}`;console.log(`Downloading from: ${n}`);const o=await this.fetchTransactions(n),a={transactions:o.items,total:o.total,items:[]};for(const i of o.items)if(new Date(i.timestamp)<rs_StartFrom)return a;return a}}async downloadForAddresses(){console.log("Start downloading for all addresses");try{const t=(await this.dataService.getData(rs_AddressDataStoreName)).map(async s=>{await this.downloadForAddress(s.address,!0)});await Promise.all(t)}catch(e){console.error("Error downloading for addresses:",e)}finally{console.log("End downloading for all addresses")}}async downloadForChainPermitAddresses(e){try{const t=Object.entries(permitAddresses).filter(([,s])=>s!=null).map(async([s,r])=>{await this.downloadForAddress(r,!0);const n=await this.myWatcherDataService.getAdressPermits(e);await this.eventSender.sendEvent({type:"PermitsChanged",data:n}),await this.eventSender.sendEvent({type:"AddressPermitsDownloaded",data:s})});await Promise.all(t)}catch(t){console.error("Error downloading for addresses:",t)}}async downloadForActivePermitAddresses(e,t){try{let s=[];Object.entries(permitTriggerAddresses).forEach(([n,o])=>{n===t&&o!=null&&s.push(o)});const r=s.map(async n=>{await this.downloadForAddress(n,!0,async()=>{try{const o=await this.myWatcherDataService.getAdressPermits(e);await this.eventSender.sendEvent({type:"PermitsChanged",data:o})}catch(o){console.error("Error in permits callback:",o)}})});await Promise.all(r)}catch(s){console.error("Error downloading for addresses:",s)}}increaseBusyCounter(e){this.busyCounter===0&&this.eventSender.sendEvent({type:"StartFullDownload",data:e}),this.busyCounter++}decreaseBusyCounter(e){this.busyCounter--,this.busyCounter===0&&this.eventSender.sendEvent({type:"EndFullDownload",data:e})}async downloadAllForAddress(e,t,s,r,n){this.increaseBusyCounter(e),console.log(this.busyCounter);try{const o=await this.downloadTransactions(e,t,this.downloadFullSize+10,r);if(console.log(`Processing full download(offset = ${t}, size = ${this.downloadFullSize}) for: ${e}`),!o.transactions||o.transactions.length===0||t>1e5){await this.setDownloadStatus(e,"true",s),console.log(this.busyCounter);return}await this.dataService.addData(e,o.transactions,s),n&&await n?.(),this.dataService.getMaxDownloadDateDifference()>new Date().getTime()-new Date(o.transactions[o.transactions.length-1].timestamp).getTime()?await this.downloadAllForAddress(e,t+this.downloadFullSize,s,r):await this.setDownloadStatus(e,"true",s)}catch(o){console.error(o)}finally{this.decreaseBusyCounter(e),console.log(this.busyCounter)}}async getDownloadStatus(e,t){return new Promise((s,r)=>{const a=t.transaction([rs_DownloadStatusStoreName],"readonly").objectStore(rs_DownloadStatusStoreName).get(e+"_"+this.dataService.getDataType());a.onsuccess=()=>s(a.result),a.onerror=i=>r(i.target.error)})}async setDownloadStatus(e,t,s){let r=await this.getDownloadStatus(e,s);r?(r.status=t,r.address=e+"_"+this.dataService.getDataType(),r.Address=e):r={address:e+"_"+this.dataService.getDataType(),Address:e,status:t,lastDownloadDate:void 0},await this.saveDownloadStatus(r,s)}async saveDownloadStatus(e,t){return new Promise((s,r)=>{const a=t.transaction([rs_DownloadStatusStoreName],"readwrite").objectStore(rs_DownloadStatusStoreName).put(e);a.onsuccess=()=>s(),a.onerror=i=>r(i.target.error)})}async downloadForAddress(e,t,s){this.increaseBusyCounter(e),console.log(this.busyCounter);try{const r=await this.downloadTransactions(e,0,this.downloadInitialSize,t);console.log(`Processing initial download(size = ${this.downloadInitialSize}) for: ${e}`);const n=r.transactions.length;let o=null;if(n>this.downloadInitialSize/4)for(let i=Math.floor(n/4);i<n-Math.floor(n/4);i++){const w=r.transactions[i];if(o=await this.dataService.getExistingData(w,e),o)break}console.log("Add bunch of data"),await this.dataService.addData(e,r.transactions,this.db),s&&await s?.();const a=(await this.getDownloadStatus(e,this.db))?.status||"false";o&&a==="true"?console.log(`Found existing boxId in db for ${e}, no need to download more.`):n>=this.downloadInitialSize&&(await this.setDownloadStatus(e,"false",this.db),console.log(`Downloading all tx's for : ${e}`),await this.downloadAllForAddress(e,0,this.db,t,s))}catch(r){console.error(r)}finally{this.decreaseBusyCounter(e),this.dataService.purgeData(this.db),console.log(this.busyCounter)}}}class ServiceWorkerEventSender{async sendEvent(e){const t=await self.clients.matchAll({type:"window",includeUncontrolled:!0});for(const s of t)s.postMessage(e)}}class ProcessEventService{eventSender;services=null;constructor(e){this.eventSender=e}async initServices(){const e=await this.initIndexedDB(),t=new ChartService,s=new RewardDataService(e,t,this.eventSender),r=new ActivePermitsDataService(e),n=new MyWatcherDataService(e,r),o=new ChainPerformanceDataService(e,this.eventSender),a=new DownloadService(rs_FullDownloadsBatchSize,rs_InitialNDownloads,s,n,this.eventSender,e),i=new DownloadService(rs_FullDownloadsBatchSize,rs_InitialNDownloads,n,n,this.eventSender,e),w=new DownloadService(rs_FullDownloadsBatchSize,rs_InitialNDownloads,r,n,this.eventSender,e),c=new DownloadService(rs_PerfFullDownloadsBatchSize,rs_PerfInitialNDownloads,o,n,this.eventSender,e);return this.services={dataService:s,chainPerformanceDataService:o,myWatcherDataService:n,downloadService:a,chartService:t,downloadPerfService:c,downloadMyWatchersService:i,downloadActivePermitsService:w,activePermitsDataService:r},this.services}async processEvent(e){if(e.type==="StatisticsScreenLoaded"||e.type==="PerformanceScreenLoaded"||e.type==="MyWatchersScreenLoaded"||e.type==="RequestInputsDownload"){const{dataService:t,downloadService:s,downloadPerfService:r,downloadMyWatchersService:n,downloadActivePermitsService:o,chartService:a,chainPerformanceDataService:i,myWatcherDataService:w,activePermitsDataService:c}=await this.initServices();e.type==="RequestInputsDownload"?await this.processRequestInputsDownload(e,a,t,s):e.type==="StatisticsScreenLoaded"?await this.processStatisticsScreenLoaded(t,s):e.type==="MyWatchersScreenLoaded"?await this.processMyWatchersScreenLoaded(e,w,n,c,o):e.type==="PerformanceScreenLoaded"&&await this.processPerformanceScreenLoaded(i,r)}}async processPerformanceScreenLoaded(e,t){console.log("Rosen service worker received PerformanceScreenLoaded");try{console.log("Downloading perftxs.");const s=await e.getPerfTxs();this.eventSender.sendEvent({type:"PerfChartChanged",data:s}),t.downloadForAddress(hotWalletAddress,!0)}catch(s){console.error("Error initializing IndexedDB or downloading addresses:",s)}}async processMyWatchersScreenLoaded(e,t,s,r,n){const o=e.data.addresses;console.log("Rosen service worker received MyWatchersScreenLoaded initiating syncing of data by downloading from blockchain");try{let a=await t.getAdressPermits(o),i=this.extractChaintTypes(a,o);if(this.sendPermitsChangedEvent(a),i.size===0){await s.downloadForChainPermitAddresses(o),a=await this.sendPermitChangedEvent(t,o);let w=this.extractChaintTypes(a,o);await this.processActivePermits(w,r,t,o,n)}else{await this.processActivePermits(i,r,t,o,n),await s.downloadForChainPermitAddresses(o),await this.sendPermitChangedEvent(t,o);let w=this.extractChaintTypes(await t.getAdressPermits(o),o);(w.size!==i.size||[...w].some(c=>!i.has(c)))&&await this.processActivePermits(w,r,t,o,n)}}catch(a){console.error("Error initializing IndexedDB or downloading addresses:",a)}}extractChaintTypes(e,t){let s=new Set;for(const r of Object.values(e))r&&r.chainType&&t.includes(r.address)&&s.add(r.chainType);return s}async processActivePermits(e,t,s,r,n){await Promise.all(Array.from(e).map(async o=>{await t.downloadOpenBoxes(o)})),await this.sendPermitChangedEvent(s,r),await Promise.all(Array.from(e).map(async o=>{await n.downloadForActivePermitAddresses(r,o)}))}async sendPermitChangedEvent(e,t){let s=await e.getAdressPermits(t);return this.eventSender.sendEvent({type:"PermitsChanged",data:s}),s}sendPermitsChangedEvent(e){this.eventSender.sendEvent({type:"PermitsChanged",data:e})}async processStatisticsScreenLoaded(e,t){console.log("Rosen service worker received StatisticsScreenLoaded initiating syncing of data by downloading from blockchain");try{const s=await e.getSortedInputs();this.eventSender.sendEvent({type:"InputsChanged",data:s}),await t.downloadForAddresses()}catch(s){console.error("Error initializing IndexedDB or downloading addresses:",s)}}async processRequestInputsDownload(e,t,s,r){console.log("Rosen service worker received RequestInputsDownload initiating syncing of data by downloading from blockchain, event.data: "+e.data);try{const n=await t.getAddressCharts(await s.getSortedInputs());this.eventSender.sendEvent({type:"AddressChartChanged",data:n}),e.data&&typeof e.data=="string"?await r.downloadForAddress(e.data,!0):await r.downloadForAddresses()}catch(n){console.error("Error initializing IndexedDB or downloading addresses:",n)}}async initIndexedDB(){return new Promise((e,t)=>{let s=rs_DbName;const r=indexedDB.open(s);r.onsuccess=n=>{const o=n.target.result;e(o)},r.onerror=n=>{console.error("Error opening IndexedDB:",n.target.error),t(n.target.error)}})}}typeof window<"u"&&(window.ProcessEventService=ProcessEventService);class MyWatcherDataService extends DataService{db;activePermitsDataService;async getExistingData(e,t){for(const s of e.inputs)if(s.boxId){const r=await this.getDataById(this.createUniqueId(s.boxId,e.id,t),this.db);if(r)return r}for(const s of e.outputs)if(s.boxId){const r=await this.getDataById(this.createUniqueId(s.boxId,e.id,t),this.db);if(r)return r}return null}constructor(e,t){super(e),this.db=e,this.activePermitsDataService=t}createUniqueId(e,t,s){const r=`${t}_${e}_${s}`;let n=0,o,a;for(o=0;o<r.length;o++)a=r.charCodeAt(o),n=(n<<5)-n+a,n|=0;return n.toString()}getDataType(){return"permit"}async getWatcherPermits(){const e=this.getData(rs_PermitTxStoreName);console.log("Retrieving watcher permits and such");try{const t=await e;return t.forEach(s=>{s.assets=s.assets.filter(r=>r.tokenId==rs_RSNTokenId).map(r=>r)}),t.sort((s,r)=>r.date.getTime()-s.date.getTime()),await new Promise(s=>{s(t)})}catch(t){return console.error(t),[]}}shouldAddToDb(e,t){return e!=null&&e.length>0&&e.length<=100&&t.some(s=>s.tokenId==rs_RSNTokenId)}async getAdressPermits(e){const t=await this.getWatcherPermits(),s={},r=[];for(const o of t){const a=o.assets.reduce((i,w)=>w.tokenId==rs_RSNTokenId?i+w.amount/Math.pow(10,rs_RSNDecimals):i,0);s[o.wid]?s[o.wid]+=a:s[o.wid]=a}for(const o of t)r.some(a=>a.address==o.address)||r.push({address:o.address,wid:o.wid,lockedRSN:s[o.wid]||0,activeLockedRSN:0,chainType:o.chainType});let n=await this.activePermitsDataService.getAdressActivePermits(e);for(const o of n){const a=r.find(i=>i.address===o.address);a&&(a.activeLockedRSN+=rs_PermitCost)}return r}async addData(e,t,s){return new Promise((r,n)=>{const o=[];t.forEach(c=>{let d=c.inputs.flatMap(h=>h.assets).filter(h=>h.amount==2||h.amount==3).flatMap(h=>h.tokenId),m=c.outputs.flatMap(h=>h.assets).filter(h=>h.amount==2||h.amount==3).flatMap(h=>h.tokenId);const f=Array.from(new Set([...d,...m]));c.inputs.forEach(h=>{if(this.shouldAddToDb(h.address,h.assets)===!1)return;h.inputDate=new Date(c.timestamp),h.assets=h.assets.filter(p=>p.tokenId==rs_RSNTokenId||p.amount==2||p.amount==3);let g;for(g of f){const p={id:this.createUniqueId(h.boxId,c.id,e),address:h.address,date:h.inputDate,boxId:h.boxId,assets:h.assets||[],wid:g??"",chainType:getChainTypeForPermitAddress(e),transactionId:c.id};p.assets.length>0&&o.push(p)}}),c.outputs.forEach(h=>{if(this.shouldAddToDb(h.address,h.assets)===!1)return;h.outputDate=new Date(c.timestamp),h.assets=h.assets.filter(p=>p.tokenId==rs_RSNTokenId||p.amount==2||p.amount==3),h.assets.forEach(p=>{p.amount=-p.amount});let g;for(g of f){const p={id:this.createUniqueId(h.boxId,c.id,e),address:h.address,date:h.outputDate,boxId:h.boxId,assets:h.assets||[],wid:g??"",chainType:getChainTypeForPermitAddress(e),transactionId:c.id};p.assets.length>0&&o.push(p)}})});const i=s.transaction([rs_PermitTxStoreName],"readwrite").objectStore(rs_PermitTxStoreName),w=o.map(c=>new Promise((d,m)=>{const f=i.put(c);f.onsuccess=()=>d(),f.onerror=h=>m(h.target.error)}));Promise.all(w).then(async()=>{r()}).catch(n)})}async getDataById(e,t){return new Promise((s,r)=>{const a=t.transaction([rs_PermitTxStoreName],"readonly").objectStore(rs_PermitTxStoreName).get(e);a.onsuccess=()=>{const i=a.result;!i||i.id!==e?s(null):s(i)},a.onerror=i=>r(i.target.error)})}async getSortedPermits(){const e=await this.getWatcherPermits(),t=[];console.log("start retrieving permits from database");try{const s=await e;return s.forEach(r=>{t.push({id:r.id,date:r.date,address:r.address,assets:r.assets,wid:r.wid,boxId:r.boxId,chainType:r.chainType??getChainTypeForPermitAddress(r.address),transactionId:r.transactionId})}),console.log("done retrieving permits from database "+s.length+" permits"),await new Promise(r=>{r(t)})}catch(s){return console.error(s),t}}}class ActivePermitsDataService extends DataService{db;async getExistingData(e,t){const r=this.db.transaction([rs_ActivePermitTxStoreName],"readonly").objectStore(rs_ActivePermitTxStoreName);for(const n of e.inputs)if(n.boxId){const o=await this.getDataById(this.createUniqueId(n.boxId,e.id,t),r);if(o)return o}for(const n of e.outputs)if(n.boxId){const o=await this.getDataById(this.createUniqueId(n.boxId,e.id,t),r);if(o)return o}return null}constructor(e){super(e),this.db=e}createUniqueId(e,t,s){const r=`${t}_${e}_${s}`;let n=0,o,a;for(o=0;o<r.length;o++)a=r.charCodeAt(o),n=(n<<5)-n+a,n|=0;return n.toString()}getDataType(){return"activepermit"}getMaxDownloadDateDifference(){return 2048e5}async getWatcherPermits(){const e=this.getData(rs_ActivePermitTxStoreName);console.log("Retrieving watcher active permits");try{const t=await e;return t.forEach(s=>{s.assets=s.assets.filter(r=>r.tokenId!=null&&r.tokenId in rwtTokenIds).map(r=>r)}),t.sort((s,r)=>r.date.getTime()-s.date.getTime()),await new Promise(s=>{s(t)})}catch(t){return console.error(t),[]}}async downloadOpenBoxes(e){let t=[];Object.entries(permitBulkAddresses).forEach(([r,n])=>{r===e&&n!=null&&t.push(n)});const s=t.map(async r=>{let n="https://api.ergoplatform.com/api/v1/boxes/unspent/byAddress/"+r;const o=await fetch(n);if(!o.ok)throw new Error(`Server returned code: ${o.status}`);await this.saveOpenBoxes(r,await o.json(),this.db)});await Promise.all(s)}async saveOpenBoxes(e,t,s){return new Promise((r,n)=>{const a=s.transaction([rs_OpenBoxesStoreName],"readwrite").objectStore(rs_OpenBoxesStoreName),i={address:e,openBoxesJson:t},w=a.put(i);w.onsuccess=()=>r(),w.onerror=c=>n(c.target.error)})}async getOpenBoxesMap(e){const t={},r=e.transaction([rs_OpenBoxesStoreName],"readonly").objectStore(rs_OpenBoxesStoreName);for(const[,n]of Object.entries(permitBulkAddresses))n&&(t[n]=await new Promise((o,a)=>{const i=r.get(n);i.onsuccess=()=>{const w=i.result;o(JSON.stringify(w?.openBoxesJson??null))},i.onerror=w=>a(w.target.error)}));return t}shouldAddInputToDb(e){return e!=null&&e.length<=100||Object.values(permitTriggerAddresses).includes(e)}shouldAddOutputToDb(e){return Object.values(permitBulkAddresses).includes(e)||Object.values(permitTriggerAddresses).includes(e)||Object.values(rewardAddresses).includes(e)}async getAdressActivePermits(e=null){const t=await this.getWatcherPermits(),s=await this.getOpenBoxesMap(this.db);let r=new Array;e!=null&&e.length>0&&(r=t.filter(i=>e.some(w=>w===i.address)));let n=new Array;const o={};for(const i of t)o[i.transactionId]||(o[i.transactionId]=[]),o[i.transactionId].push(i);const a={};for(const i of t)a[i.boxId]||(a[i.boxId]=[]),a[i.boxId].push(i);for(const i of r){let w=(o[i.transactionId]??[]).filter(d=>Object.values(permitTriggerAddresses).some(m=>m===d.address)),c=!1;for(const d of w){let m=a[d.boxId]??[];if(m.length>=2){c=!0;for(const f of m){let h=o[f.transactionId]?.filter(g=>Object.values(permitBulkAddresses).includes(g.address))??[];await Promise.all(h.map(async g=>{let p=s[g.address];p&&p.indexOf(g.boxId)!==-1&&(n.some(l=>l.boxId===g.boxId)||n.push(i))}))}}}c===!1&&n.push(i)}return n}async addData(e,t,s){return new Promise((r,n)=>{const o=[];t.forEach(c=>{c.inputs.forEach(d=>{if(this.shouldAddInputToDb(d.address)===!1)return;d.inputDate=new Date(c.timestamp),d.assets=d.assets.filter(f=>f.tokenId!=null&&f.tokenId in rwtTokenIds);const m={id:this.createUniqueId(d.boxId,c.id,e),address:d.address,date:d.inputDate,boxId:d.boxId,assets:d.assets||[],wid:"",chainType:getChainTypeForPermitAddress(e),transactionId:c.id};o.push(m)}),c.outputs.forEach(d=>{if(this.shouldAddOutputToDb(d.address)===!1)return;d.outputDate=new Date(c.timestamp),d.assets=d.assets.filter(f=>f.tokenId!=null&&f.tokenId in rwtTokenIds),d.assets.forEach(f=>{f.amount=-f.amount});const m={id:this.createUniqueId(d.boxId,c.id,e),address:d.address,date:d.outputDate,boxId:d.boxId,assets:d.assets||[],wid:"",chainType:getChainTypeForPermitAddress(e),transactionId:c.id};o.push(m)})});const i=s.transaction([rs_ActivePermitTxStoreName],"readwrite").objectStore(rs_ActivePermitTxStoreName),w=o.map(c=>new Promise((d,m)=>{const f=i.put(c);f.onsuccess=()=>d(),f.onerror=h=>m(h.target.error)}));Promise.all(w).then(async()=>{r()}).catch(n)})}async purgeData(e){let t=await this.getData(rs_ActivePermitTxStoreName);t=(await t).sort((o,a)=>new Date(o.date).getTime()-new Date(a.date).getTime());let s=null;t.length>=rs_FullDownloadsBatchSize?s=t[rs_FullDownloadsBatchSize-1]:s=t[t.length-1];let r=this.getMaxDownloadDateDifference();const n=Date.now();return s!=null&&n-s.date.getTime()>r&&(r=n-s.date.getTime()),new Promise((o,a)=>{const c=e.transaction([rs_ActivePermitTxStoreName],"readwrite").objectStore(rs_ActivePermitTxStoreName).openCursor();c.onsuccess=d=>{const m=d.target.result;if(m){const f=m.value;f.date&&n-new Date(f.date).getTime()>r&&m.delete(),m.continue()}else o()},c.onerror=d=>a(d.target.error)})}async getDataById(e,t){return new Promise((s,r)=>{const n=t.get(e);n.onsuccess=()=>{const o=n.result;!o||o.id!==e?s(null):s(o)},n.onerror=o=>r(o.target.error)})}async getSortedPermits(){const e=await this.getWatcherPermits(),t=[];console.log("start retrieving permits from database");try{const s=await e;return s.forEach(r=>{t.push({id:r.id,date:r.date,address:r.address,assets:r.assets,wid:r.wid,boxId:r.boxId,transactionId:r.transactionId,chainType:r.chainType??getChainTypeForPermitAddress(r.address)})}),console.log("done retrieving permits from database "+s.length+" permits"),await new Promise(r=>{r(t)})}catch(s){return console.error(s),t}}}
