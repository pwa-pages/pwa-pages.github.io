{
  "version": 3,
  "sources": ["angular:script/global:scripts.js"],
  "sourcesContent": ["// Define the singleton at module scope\nconst processEventServiceSingleton = (() => {\n    console.log('Initializing ProcessEventService singleton factory');\n    let instance = null;\n    return () => {\n        if (!instance) {\n            console.log('Creating new ProcessEventService instance');\n            instance = new ProcessEventService(new ServiceWorkerEventSender());\n        }\n        return instance;\n    };\n})();\nself.addEventListener('message', async (event) => {\n    const processEventService = processEventServiceSingleton();\n    const data = event.data;\n    console.log(`Rosen service worker received event of type ${data.type}`);\n    processEventService.processEvent({\n        data: data.data,\n        type: data.type,\n    });\n});\n\nself.addEventListener('message', async (event) => {\n    const data = event.data;\n    console.log(`Rosen service worker received event of type ${data.type}`);\n});\n\n/* eslint-disable @typescript-eslint/no-explicit-any */\n// chainService.ts\n// Define the ChainType enum if it's not already available\nvar ChainType;\n(function (ChainType) {\n    ChainType[\"Ergo\"] = \"Ergo\";\n    ChainType[\"Cardano\"] = \"Cardano\";\n    ChainType[\"Bitcoin\"] = \"Bitcoin\";\n    ChainType[\"Ethereum\"] = \"Ethereum\";\n    ChainType[\"Binance\"] = \"Binance\";\n    ChainType[\"Doge\"] = \"Doge\";\n    ChainType[\"Runes\"] = \"Runes\";\n    ChainType[\"Nervos\"] = \"Nervos\";\n    ChainType[\"Handshake\"] = \"Handshake\";\n    ChainType[\"Monero\"] = \"Monero\";\n})(ChainType || (ChainType = {}));\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nconst chainTypeTokens = Object.fromEntries(Object.values(ChainType).map((chain) => [chain, `rspv2${chain}RWT`]));\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nconst chainTypeWatcherIdentifier = Object.fromEntries(Object.values(ChainType).map((chain) => [chain, `rspv2${chain}AWC`]));\nconst rwtTokenIds = {\n    '8a94d71b4a08058327fa8372aa69d95c337536c6577c31c8d994169a041e5fc0': ChainType.Ergo,\n    ddb335d2b4f3764ddeae8411a14bec97f94d0057628bb96f98da9d95e74d02bc: ChainType.Cardano,\n    '30e4392fc439fce9948da124efddb8779fe179eef5a5d6196e249b75ee64defc': ChainType.Bitcoin,\n    f5985c64c1aa8f08569dc77a046f65f92947abaa9ccd530aead033eece23496e: ChainType.Ethereum,\n    '33477693d6be5bbd3a4cd786fbff5e6444449c191ab08e681aaaa87fc192772c': ChainType.Binance,\n    '5d727b722fb72aa02257d987970c68aeda41614518bab9f0d8a21bbc75b7a3b0': ChainType.Doge,\n};\nconst permitAddresses = {\n    [ChainType.Bitcoin]: 'NY4PEzZ7VfjtnTN697R7my9uAVkCYb6N71J2RSmJCFSdDqVf9aPvFQqKXujYDBtSA8hxYVUgkGgU9SP2Ss7JDUkHkdGLBqZwH4yDcPyVvbVbcre3o7nR59wiFDVtjzCjfZmVvMVJD9HiW4GKqVuZGTQCKns8tDe3sJoDNTL3VmhzRUPZf9JCN4TNji1ruXf5CxqWtDrCfoxE4xfbRWGmtBMdLMoRdL85V7z1fP5KxroWX5YgZQo28nTCU3WjPuY2YrjqYYGNHXvFZ9G8E85kCcseNtRWqViXGFzmwqHWKaYe4AdJzBbMKzJWYszsbiemNvisPtT2Yj3FjAmAErpW3gMeWyH3WtbipaAu9D31ggpLeLkLTGscJ9HB2oExpGWvv6u9mGdkTJMHYUuZJUGrcJPE3m7ZTEFxwkbeR9oD8nHHgW4SB46kHFbxzNoUksGPZQnxf95J3e5PUnhYgg7mrQLNpq6pphgGukFcHDgAN2rgFmUSDVsuzomhP735SMiveXSPzx6PZeP7CmrEHyXN6mFbBJuY17kvzzix1w9eFwryZDuZqnAANkYhF3TLkLyGZfSC4o9iAGynpivuNMUgbKAuj6D116tKoCq9PHELL8eTefmXNLFuhauQuKRjmWQKj9zYSd7qi6Zf49KX25PnWHkC3REc4abYpjtiQFefT2HkWRwneTCkJ8uMvoHs6kJzLg8NVzH8XwEZhTM2tNSDhBKZaURpYiQcHwLDgv5uFiwhasLAdZi2EJywBYX51NKc6m4MEsTiAJC9jkEydWcwyDzSHN18yEr4rvEgMNkUhLHJokgV2v3BNFhUTJqe58e2QXAmx9MytUDqzg3vwexEpMhueC2roYA27P1mmb85HKEz15a8LnuUT8ZjmG8kDbHuPYFyxcATytVuDrFDzqKBt9X36bocip4ZU4RRY8JcWjJvMcrBCjV3EhDVQ4it8bhoZnn79PsXazvDteua1NEYEJniPnNrRaiKTUWrseEUQ2vVjWy134jMxRbeiARhoj7MDxug2kFP8jRGSsxWt3Qqbv2SezT3xZ8jYxTyQ2CiyJ61CvUQwPtmoY3XKjrgrJKwnSzJRs4egKPYZKoSiSy6UdHMKuNDmys8wYo3Gi2EgVdUYRLLWcHh5Z2H91odSbTW2h5e6pZeY4a45TgihE6ZnZBhHGc75zJjukhPgP1wEp8GrreHA7ejvTEmpwNgj571x5JrvRD5TxWaFuZKBonGexovAK2L5v',\n    [ChainType.Cardano]: 'NY4PEzZ7VfjqPk9gZSNS6ERoYyYBEBebyeXUPs1sjEfdenV3Kq1QKWBSQ1Gfem47fPVRw5UXcYNXtgXNGqsD4DedukcYv5c5kviu94yWpyrh2tbXHea1tyfuEcb8njgvXkAxrXkjvgcPEQqy7BsR3KQPe8vzSaBG5V8WFHQqvHmpMXXYMvKDZzRbNjZUgYvVinGq6qx9hct1fFG15nFdcWZkzhBcu8ytydt3MmnkYEyL4L2rLD8Jp2Q16DfeaBBqmuyxpMoVxPrQzbPjq5GKTKrqnpisWVrubpAy5dg1oQ6tVZompLpwTWvX1xWspA9tWPmc3MCV2e6y313KzSosGLi2Sdv2ptDgJpKamQv6fNKmj3TWkNbPCDfjp2KXYcfYE1vQ5prRZCPCDhVgWP7bqpF3SeUTMJmvBaXjd1tBavjanquQDkYU4n5XBwJPvUa5kCAP1USTgP4cgPA6SzB8hg2RXmB4PmEWM2RWv2mrirYeTdZrzXCbpGCd9B9GK7bNknnYz1X8wVqyYxxQMZ7Rort4BVRNPNKzEMtdGKSmQpiWitfoAfphXL3SGMfwMT3sspgDcD93Ftiq9gf6kgawpFBKWJmV5jXmfiSCWkPW5x56L5hcc3NwJLYYjcMh81aXQBP4HguyudttZcF8QiDa6Ae3idS1BTegArbhZBFn1TQJGgWtuCubLC5Ja71FadEN1G1s4Uz4BapDu3WpNH4NJn3UeWavLd1EytGjevyJu8XjziAMYr6cPZsyhb95aj7LAHgwJ8YT42zWYoDxqhEzbuderVtfauVJxEo2Rt7p83hMtkFS8Dy3vNbdmGEhWEFfDEyquEHTLsYkehRMWTeTeoDpRhKpeXoDxTNriR6Fz6y3Koxwzg281gYhxxvew7TpvSa3cLvjBpNxuoUfhyT645u51cBsQzden3RB5LjJeToSctrx74nNGCm9sR7fQgzno2pETeit1mykq4eocy93EoTcypKitcbfhgAYwXrGcGUQyhsupFgPZMnms5VnWhCsGKkK93uy7z4BRgi9y2aU7zMUxPJN6q3kYhjcdgYhcgqLLmWo5pBRSxcuq3p3NhPnd2Tps5RztjtUS5ZkbRVsTri8Sy2J5xPLir6VB7uxcPCSYYGJaaVfENJ8tYLYH3m3TUoxRipyjNDDBmsRdujqFQvFoYiCyaPFgu9iqzMvuPDM7FDPAKV8V7A895N9SMMZkG7uAzVvLgrU8Wrxdby2CAX9ttmPJn',\n    [ChainType.Ergo]: 'NY4PEzZ7Vfjvo3AYu7dBh4ziatarsMAVPnwtHZL6BfoKeaots7P629HvVAmDZNdiVNUitWMqVJhgphUregwCXnhVNRddztP93qbtSWCMzVk1UQmCVUpvQyb25nyH1PrpRSjpFewJWeN3bjiVF6bTAm2t11X4d2fKGnAo3PX2BFVeyAUre7T5CZs2uikxZisyrJ1djE4UY1uwpTFkJv3RzZ3JMugNDeicf7qWqtCtNH8E9uG56VD2dMvmsr5YHQbrKgxa5foyA4K8cD59o2ub9ezbhjSgfXbc6VLaXmp5SzdP6n61MaePNexedifBWwAsHFcaaVXf7oUkePp5dDpc5mBbaAuidBAwH4SaxnUNjPw2bHVSXEk3ZJwwBrZRG7CYBCvEN6wFuPyzuhGsJQwdCtvUqxViGhxWrhRYKwixLhScVdGwCFCF9HjuCXt92FkEZKRk1kJuNzMUuc9AUbafbwhi8RC96TVQrtnsajhomptLKFmQXg4nZQao3jwHV8kfZeyF9BX5kiWUnC83Wa7X7seGUcECHRPLAapk7Lr1kUQ6Q62RpBKeGUsfmPcyNhaZ2bmdxMxxHAhdZdKVr78R5ch2BvG7ZtV6wkHB1hcVJGJmU4dskPPR5EFd8gED72eeUnNAsTknW7ePfNMj4DYWGqf2QhPHDZXsyRN2Mczv4tgyRsNA2HR3U9oZikejcuYhha9yNsXEdNn23B8wa5aDZwR6hwZ9hQ74yv29sbfBAfe9XWT2UZAVaeZeazQSSrvAhicEKnwmCAvfwcZNS57SHJ1EfZf1oEt66S6mGFdBzcKPLZzmJmCgMiBmMThqMemT1XS1ovES76LVcpXSkyiEdA17htR5HuPWdDVfWNQAK2jAM8BjKGtvsh93oMFGvMaBVBAvj1QcfTr17LdeeT7h78bKzyF5SQWuyu46xtDbmTZVrR1ZSpnffiD8TbWnae85Bw1VfttScQ8yfa26dsc9pwLrHhYhC4XKEVPWYUxLHZd959tLA2kGNkJBJR8PPThR8PugaUTq1sQpLg4ezPPUjYyWFvhFf6Rcw5rcJAwj99AUwoEhPaUnxT3TxiEJBbD3Zsna33mQD9Zg69Zzr9xiLA7GzhhA998dwkpbbgqFxyASwH6yav5qDbXPZH7GPtt3nTjUfRs87SGYgVGHoGhqaVUAfQKW4TtvFicdpvQws5kg1nZthd7WkWcR7HqLc1R4wBPFynFVGc457vhQwaP78yQsQDHq86',\n    [ChainType.Ethereum]: 'NY4PEzZ7Vfju59RSazdQK92s7PaLrnCh5D9yZBZx7fptQjQZ7Ra2Xiz1PFusrkij3YamVoqXNqoUzazpjnzwmX4zKvPwWGLdqk1RXvp82m7Km2nwtvL2d6tVVCfgiVzA392JszEtNDh9hNXn6wk8eXjXwUg1q1w4UJi6XzmscSH6iZ1BR6ghCp5fyrZBeUfnvbPsfgHmmoVQzmDJ5E9KjmCg53detrDH29gyZUKyqjC5ddnCKG5cvVmoZ7D2ix9KFa9RuLcpVTxnVnuoJnHL1yoGog11TB3eT5hRyiUzeBU688pMb1xyUaCw8bjh5wSsBRAWQnDiAaGuj6zsJEnKeMW94XLeaTASw4K2bwyWHr4BVN9XNSeopFoj6mXPrD2ZhGgPV4HeQp1qEQ2pemMiSecXYkghfnk1t8hnfDNMfXoyKXxEmN8Cf1p7M8pqtgo7H9uUi6xsfotsB2uHVSoT21nzERYMaej9YuYwgC2iUzrzeZNFu7LbMqBErDgHn4wfgppRnF6axDca7QJGNv3q7E2q1DGRpzmTXPfr9FeFxki9geAwsTAy1KTqU2u6TY2wcRC3GzQz83x6LatZLhf9HZnVWZ3SRWQ5AmKUfxhHVxVC9Hwiraqb7ciZBsrnXHWmFaHHHYxafZwoLUBqxeWnHNM211MUwJ2rD9pvrqREfYs4CKYJNDxe5nezL11TnsLyt6p6XkKgHXvvqnk9HQ27pMbpNVX33Y8iQpznFvL2YBCn6Dw9hBDgb8thcYkkAXyLRZskEmhXQFL9evXTstNoeJVJp7NAo7dejZRaKHzTvZnZpkybJGks44qFbGSuSXGegN1V1HWyYGnGSgEJm3yrapNC5tdTvHWXVDxjw1G2TwqKL8D4HZVsyWsu8PEErsaf593jscXKTRn2uqvdhp29rJKGV4v2Cfd8DDXzwhmVxcVFyUiXg9JDe8fCi2rxmFai7a6P6vTJrUkJRtKYBt5RUY3uzKXpX4J4fBWMHmnM2yTSgdaXb9MYULmsbWitqpxiTWh1iMQdXNHxU1A2hHvsqogqEhrG9bGmMU1m1EFSFAPocv3KUf5bPYUWmVUFaxa2MLmE4fs1EC3kCJz8434NrxD1YVA1iosiv5f2tDM8E3w15VRik2a3R1Y6C1D9uHAAT1XK1A27dnx6e586eghm5BuvCY9Di89bdYH5KX3sg4NzWAAJYd5DLZbtdXxzRrKiKwMcPjskhwyQRcv3qstVzPDfJdE8Ej',\n    [ChainType.Binance]: 'NY4PEzZ7VfjvyhUfALrnVnmbCo79cESCRMoD4m6TNTRdUnGR3B7EM3KRKxPh6BmdAsdArGV8DgAanEjs4QLYzYTBPGexkgMBPaRwAMSuVAG5rtzuN5qNmyAZsfdrR3cnBuspTqRkBQFp1oczXkCVNFdjpPwAFYLZgnnJFJVnZbp5TQSECTioxM1oJSKm7LBnEbPNrVWFqcShvqAjoyie7Bd471mNEq8y3mEeV7FH3AQCm4fKQgyfwYkRBC4jvFjWDaMshpFbV325g7n5rcyRsbXJ8EGMC2pKVGEbkx2JCgX4ba5dxx1uGibiHnuHiTNXLmrbEJ6BFtBFZB69Ye7U1C23uBEEvTRLteSbKzKAaGv7UbhVtvcgX91muR3sy7jXTW5FszKWej7knHLWJhbUf47fCVvmbXWEx6rHu3fj5hEqQyfVuER3J54yQAtP9ertP9hQX6GQ7mXfyUwmxTYiJS4GxLzeWZGwfSfRUDe6GN7qurja8kVeMrTwdo835yt4XUcemLK53TCkTLe61Bev6NtiUCSuNrhddXcdfMzqk1DWZCXhkcm51pnGmbmAntwC6AF7rL2LHtHi4et2edKAJHkYUp6t9a8Q57eL6fX3Q4JSfDrjfgn4x2fJaF1APdwbBVKoJyhDUkmV6xAaANYZifq54eFg1qBh54F6mu61U3Df5sZqsepzQJNYp6Y95afLuHGmG97mxhmmRsecKbamu4p6P3TPZEs5eYfHspVf85GNh2BztxxYn5hSsR9c8VRJjBhHR1qGHzX4mbRKWn2D41L7AHPnapSQyHCAPdhSbaAV3b6eLqLvc9QrFBAdnsHqN4NauYDPZc6sSrFuLEwNKFbjefc7pBDnA2pfTUUVqCTFuuaM8VmLKFxG2oVsi1k8GD5moSzQbEphVfWTjE9kTZR35oArptsctXGXRT6MXToom6m4cj465Xs9nsRY8t7FgSHsxetJafgogRjo8NRpgFkBpRgf69QuZbqYkrFMTsoDRkLYCLTF4XZwYzu3tqrzLkSZPKDzK1x7pySFdB56vAstU8HPHLqtzduvHt8Gvrkh1mAYQ1cEphCF1jfs5vZUDifLQYnZ2JiJeMdFZu8RhssWvwU2oL6wqx4Ey2iRaSrLSadYnWx47QvGZeZ8M5gupYMNiL7tTkpCjMjbuetqGcpQrtiwuBJ25DqfnWeLN2K6LS49Fb7GjW6Y3fMgdDYVhh7MFpLiyHMcC7wzdBJSMEcE1VNvo2',\n    [ChainType.Doge]: 'NY4PEzZ7VfjpDKVcQkzdi4CLcgbMvUX53reQKShv8wRAJ8cRsEi4zV8VwevNM5JPxi5UA77685CKHAQAEkE5HUX2jv5HoMoaZFqcYNBQmHxLA86pS3fHDhg6GvJ8SHssoUZX4uGcgEcRt118Bz8bR8sVAGC23UcafXEwmhfCRfrijjPxDx9ZLHN14uuCU9Gv8Upta65PkzbE3oTD3XDuq7RicN59bz8o6eHef9MfxZetNXrgGTkCJJVJrQ5ahqPLmCzkwv5iXLvRjebbPcen8FxPJ7RDE9rG5BW4uuyroqH6nsNcQKRDnvvnrt5PjghRfss4EswpEJXoxxf7VxYUxx2KgHy8W865bjV5Gvmd9nLPnRStwDV7t7HP2U98fMH3Qdp8PS2Vew5edCjjZTiu2k5kB8frNwSdhGvu91TpAhen474RoxWeoZErNRPpkBH3MN4vHo7EZYiJPjsYtLctVEDWZkvFuaFCYQbuF73JqT7673erYxjRu5o3bCHMgNLYPYuriHLyWtpAJvkFa2Xir54tNfMFyEcvPEWYWaB7J8JsBa8E1b6v9x3VsDyNrU3bGXz52Ax7dG5ziTX1DG2bZuRvGSejjeP8GVgUXTBvRARs8t4wKwdicHkZVie2zGBR5w6Ajo1wK8hNHi2ANYSX5VEFEAFgjwo8DNMUTXbyreeKTcJgcntoc1CbNaiDUvJEyRYaAS7mncPsAiuMjTiFUAzRU5gWdtgRTrkVfi638QrvsvKQgKNPxvGBQpEWtSnmDfRhFifDT716wZ22rca55i9V2ArmDRVZG966MSTYNewX96iwndT8PDhhR4xfysMrTdQMPBzFXGoaAyV54rZ37G1JHQjKQLdMXLP67wjqFMNDRjBUsUYpBYVgj4XpvA1nik8UDqGW5zHoEszpjFJNCSzoexM1zLk8q5vk73dfQ3zaME7tTjp7rdAH3tPtWVkrFSWyDe3rw4zZpSHE2iqH8dDvTVuS1QYsJ6G3iqE8nQbg9FipofqTEjihP9ojvcXgKa9ASce5JNsRKHUSeYkAtDs561sZyf5uY626GcsvMYKGHjEjxCYJUYfrDTFz8v14dNAzVAiYQS7M32otTzKeXhB6ZNSRsErvMfrjgW6Rc7joCL1umHo8c3n3nqxLjZqxnzTgBAXnUNDY2g6LLdVRbj41hxTmvVkwV8MV5N1tvTAALAiagxDKu5bWsfTYFHbiiA7tLxqhsUvATorTzU7nrN1hjpQT3i',\n    [ChainType.Runes]: null,\n    [ChainType.Nervos]: null,\n    [ChainType.Handshake]: null,\n    [ChainType.Monero]: null,\n};\nconst permitTriggerAddresses = {\n    [ChainType.Bitcoin]: '5ivrmzxYZZfH2wJRvogecZo1YYXm32CoKnSZdtwxbjNoogRakUFe56VrrcULZtCkvAzM2MNRMxPYSfZc2rB6tkLKLCirG14JPDMfqBoWMhyzzQLVsDukZupema1i8SvYUuoaiPL5rTyQmqgF3ftPbvM2dHY623B3KsKRTNDhkoMoRmKLzenNWqjXpkANpyc3TCkDuvBypXfbWVN55F2ZZUs8L3XkvaJKcb74GY7whJB8Zg31VgpmVW4uVEuqpcvPk5FYNiTdRakyYTUVFnAdCR6ZDjagBYMr3ks2uHMhQdjmoKmmwCocVm4SGZsA8rU8zj6zrEgpepLT5UPD9sZQWtvSi6C82fPEW9pvNXr4T3sFx2xNRv8meyNUhopUfiRzVoWfx6Q4ArqU3dnmRtN8pxkDfTZr7oGrzAFAb3DRhBUPhhfWY2USAw7LMqMAuW65pdUFcGnczQH3B6V4kALNaoGMD7ixKtkdMkrAPHkJmxKzeMEd6Y49PnHWxFkQbXwqGELjDppqmdbKceyrtjUp3JwcZ5qN7YcLg1yXhFUiWAHhnAwGkHsTHivXADhV81sDBVqM1GUB3piyt6gkJ5My3SaRRTsokrnJLoGL23GwjEfTzDsvXCoXww3MQcwUUCXehQConnMxYsK7HHGV4wf8kbctrFd2ekPkeHm5ksjagEVzKMraZJgrRSRWEHdYmUGkU6tLGZTUF4Xe4MkdzXC3sRtif4iUnZg6Tnt3DEx2i5fmPD4xasYkusc6thd77x5x7MZXMdkxuo9BWTG9iiYAaE4aLQ5yEbrYeVY85DCVFAKXTsiwUH1De3rDhRZfFfQRuDqiYomDFumxofAa9k89yLeCSRyQpAH55BXLqvppusJyDwYJKd5itao8z3Qi2Fsvt7oL77fDnbotPwp7EkFbQZdGi7aUU1SdyfhxNwx6dYcFe2zpj6Spj7zb98FR2HahXwXnqqZjuym7RjN55bqPt2FufJ7CwdgQmiBMid7E1sAVMxBZyAeNbhHEqRJCajpUyGXswJjQJ9S1u9c4rRHzdntMtr2RXDtdgrt6b69GpZgZNeAX3QG9W9kQK4SAHE2BULEmNSBZHHitrRYdx97AsDLFfLpzfsPa82ew9oBy3PacMAF2WP48yxQrAzSA2p5idB5QFbYoECBBLsCyApG37AMuPrr24JrWmZLqR5XEPYnKojYrMcciwkn3L6jRpC5c1D9KrsTGk5dGtqBji1FE9XAVxuVpdddJjBSjphPx2UWtvJnwcxB8CoRSsVDF8RoyPcVwMmSfL5arDGJxBUzVu',\n    [ChainType.Cardano]: '5ivrmzxYZc1s5aYrsy9uMd3wphLaHx4Kqrw7wVDwQdtj967D3qYpAw15uAr1CK4RbXKFW7kersNNe9tXu22iut2zG7tCmAP9TzSNgHMSJFBzR9y7vmqpmTGyFmn6poS81E8MzwaJ2MxkULFoS2nj7CwVsCMGweg84sJShZkGm81jxw6N65GHddQ4sJsBJb6MYFcVXeLxrgnEMPd3eFH7XoVj5uM97P6rsUAztZmeaA9hdUkc9Bz497j5BKQaiXyrFj8ghEtL1cemwfnGrsybkuq132QT9qsW7dNaG95D5wSYNUoAP7mVcziPas1PvEa5xRgMKnvE4ByYPT6BfkAMijYfXSDLzi1EbksurZGfC6jX7jfSgwuugXMNbjrUwhzj6657H9MsytUxRW8kNUKN7mwUphQGFS3nWLG4hzyas5BF8MnK7usWD7MJko7FaUWwNPVrRdatwB5uu6rUrY8UeAW9DPQMrL6VZWMKMWFmoY722pVYHdMdCsehR3CnsRDGDpZtvdqJnGgn2czeZ4AfK8o6aykw3HMTvNP2e6pxNt6FYgr2WZhbXsmeqA6bG7t9JNCw6H7tA8KJPAN1X6CYeZMitX5RWCrMtrSy2NEDepNvMgH3n4GD3tvS5Rs94gFVWHfLu4JM5BaTwfRTcdfirnwPQhYhtH6SEc8b5SgGkraojn4JgkKGp2ftszDUNyaKrY8XJQusuMG64Aoe96wr2AaRKKtUhAKfk7kUXHtGoV3h4MhDy5Wnbgb6hXcmQoMQ8HnT7JMAFWUUeWyveNn3hdNucDf2WtmXBsRpwUidapBJPD9Xukw6uEsWdkzsCNcdhZM4EqnkadRKziCubVx52TYoxDYqupyLssPc6JdaLUWny1Nh2vsEdnuNYXj82iX7AeJRaHJeyn8wytA7G8NwQXp2THTniwF6hPCWTub5khfdJ2g4VDTv14GRL88NA6w49N5FaG2ZWxqgRKYxbEJqgBE91KWHoXfsB4qvo6cGfMwpeJU5g6FTiexmXZqrNpRwmnnx1NTGK4TdqnksfaXZPMfPBbdJnQu1vfGwLuMkP5f5EvyfQ4KzazA67AxoabFYkKJk4pvVkRqaWUps9b3nkZhErUMAgxYR4raNtKHSUT13c9RMaGQmtV8viR4b7Z2JoKjqiEP9xGVoZBANhDpJ3EpihvRmDuy7MAZfy1qEm59spvdgdPPEiffw8GBv9MyDfsAGNSzsMhiP1f8WKXduWy7AdEJZTrBJkLZFPTaRHHyU9XvbRyzrxhV87thVrfRhv88hN6Viw2CyRdMJUPmVt',\n    [ChainType.Ergo]: '5ivrmzxYZTDDDoKD1urVYrXZG96ijTUYXQJzE6SCRJ2RR6Kj1UPWL1iN1xeHgYJEQjnQ7m3Ld9tBRRYqjzrAVAqHyGbZB3otUWZW4sUxN4E11fNUZEMQ3kVwnZxFmeSaxcXhQiTFH1cvBYWuFMRRFfaA2UMfpEgm2WoqeiJxPCojp9D7h6yMV4br5EtWTQJKRtcopBRoUgDg9mrKPAXGPZZKTZbYotgLKQ4nzD8QB5hjYJswhLmePaY3zK5eJq7NTcdoAgbNPK9nQ9UpBUgrc8RB76P8evPHMXg6HrVdQ2z3rkvYFVZqH9SmCkE8KGiLYGX7hwaXYGvPExdoVDp7qsSctsPjwgt9Vts2G76dzJzfBhEunJ33vdTEkEXX3wkjK4ZE8g5YKCwGpcED5PhtRQQtJZaZMYTZV3TpbPWy57U49cD3HVeUGR7efxUHZxYybWJ7q8i6NDm3PUwKFN63HmPYQn7TMYGkvSoizTuTAUJomiKgSnvoz2DSUzukRSRmUFA1cLqdR6s7FbeJfpbaKWX4kUGM2Xh38FdqNE94SjkQMY9bv3H5N8MgwGL2La12e1GXAdMCKJCWKRe27vjdaHJWmsKrBLuXQegGN8BaqNuvJbhrmreHAjR9tVwVkxcTUsr8u8TGUzkzN7coV8HiQV9KBMVgQ24NXPYyoCuedwfCiNwYX7PSSbvve7Dgyy5e1S6qbVpEpVtjy9NzWfRaqr5CyGDqhkfjizNG71NZu543vkacjXrrfPWqtNoXMtTRyM1pzwW9ze9aoRX6e92mVaCUB8hTnfH3Q8EstRLDJygLmp63y45tKwBVBDjog7Z6pWhTfBapMBz8Q28pMfPAR8ywfz8qvtkyQcv9SuEZWfvpZREaS5PGhBuqU79eR9bwNwS6TLu9BZV5Y1ahVFA1fMUxhXTvX69hKnNHFgZ35fZdrVrSeU4U5yGvYX7ViTqL2oFk16HLoTXgNs6KQz7PPZr373gDeRh7PfXpX5jWyxw6SRreE3jB5SUiQnZxmAbpJNVkPzFbZXcrsrS3JHSfiVeqp1tk5uNaZcX39tQTXtu4bGrpv6EiMvYPkiDhCiKd5oAVeZ8VxEGN7SP94vF9WhS2oWUMCVLU1XW2DDHejZ36Zo1Ho8fHbUEaKNbRBozY3HYnkYyJuF4wer8xJ6q4KcPppDrS5jqfAaZF6YWsdtqgse7qMeWVUPj23Vr5XG2S9sYmWA7femKuZki71S6BqZGNfit7F4vrzqNZd1L5oyLSVCtuiv3DybRnu2YEaUtrmCphsmrpAFSEwJWtFKqcC',\n    [ChainType.Ethereum]: '5ivrmzxYZsMEcMTZnZnsQm6jutdmSRzVW7WZoqN2c82khPoBUwF6GRVZdd6XhnNf9gbi3fsoZRM3cHmvz3sgJEJmy61cRxTKrM4q9ZfxYKBtyfNXLwD4CCeMedd6pxYDbgT6h3W5Qce2DZX51sw7aP6hu73HxJvcAirXLCYdZxi1nnGUbZYd8WNkU9zZ5ZGLVasrL49hVLNoJsP3ZYLpqzXchCL8RKv42qnLJ2kHc9BZJyv3QAYqMZTZSHQyRnYj4GAbdB3aYP71ge2HXCb6Arc6upjU4cWJPrPY4f8QcMdhXTrUtWp9u443Ekqdd3S2y2jfWLjDLsd7S9y7ASHPqx3GnCcPK4i9YnCQhdM8i5f59nA5ENgo24BTJvyQiRssDrCPpHxeTUp5ae2E5D4vyAnFfWCFfD6f5Z6DEDQvFnu1JLjjLcunp3rehGTSNgjyNNzGkjf6GF2y6enPuNcfpyNWsY2QJot4r1yZWqzeHvMgjbhnjpcManj1ikT1FFeg1oKZCCNBUbed4jYnmM1qFFmTYaovRUuEFXKFU2fhpz3EfEB79PUd5g5YMu1MTkKdUzLrEnoTxz9GKNpXCsoFvwC82hEuwXPcPFuMHdBFa4jtqSueVFgCPHHiXMz2koe6FGmCzY67q8215taocoiEC8NjGNTJ6Bzz3apbT5JP2hLVi6z11kNDQgtTA4gNRoftjZBBNVaFFj1DwURqEBzdawony7FvSpQYzgFEz5PKN7rAAr8Dsd4phbesmeASSph4aQLzB7iuibFSZXxyBm1w8GUEodaWEhh2UeTCJx2XtocU9aLYrUSgA6PgBF5NWzWwXDihESwyboSKnDb2mfHeGyjkjKSfQP2oP8Las1CeMXPdnwXUggckB44f82qjE5ENnqYhah4s5WkgPzzSvx42uhxc8VTbySPgiDefVGuFCEATX6fgAs5ikKh38TYWzLbUi9qM5Ncz9G7Z7Mc8RTdKtRLSxLUoPpiabXtyfdBkNr5PYhznMd3TPy9EHKinSzPV3GiJHGEkfYAbGmf2imbG2LrGtCEnyft3vBXYVocEnAXZsVKSRMPvkWsA7J2LRuQHrZCbVwY4LBDpfrHriEGUnAd168HB7DKPqRtCsVLgd2h6JgSHS4xXvfSwhG371VfTxJgAAtHUgKttcZfpZGXffLCwP7zmQGNVz6FJLsTEN3VXaQMQ7ooCeGHFdL7nbB7ejitfnWzWqgwqi5kv3nZEcmx4YfcnyvAjBosChtBMNfkMSVqa42Mx1xat4eJvHD5Jm1AwYijVqQjcXYh1ZzHqD',\n    [ChainType.Binance]: '5ivrmzxYZw1LAT2rQQY7Gkiuo36J5uzCTyMRoqee9QDzT4Wa1NnZaQ6zVLw3yw4ksfRCdfKiCYfjyiaJuAvdwi8WfVd2VJZo5VfoX7qNEELk34ZdvjCGsSdA3AWVfqSPy8NxPqm41xeccezcgRCVmyTHJa4pu38vtBvTZsnV4jzGTZsSstTQPGZMUUTys6VSBRUGqQjFpjVty3jTFudfJ4rRgyuGhyA1A3jgzY6wPSBXHniAi3c9rQLVEGNzpuyjXD1bFVemGdEmZp5tYLKb5BMsasJr6fa3P4xdyWryg6uUrxGiPZCRT4Z9DMmSyJdfVBFtnLaL7abqN3evRuHrGMn3KVVSFocUM9dLGZpU3XzzvWkgjwxB99FVJ4TzCSKphSgh3gPuCnwQWFhpuRuJJzV8je2jtYguEMNzcygK8WkvkuTsniW3zqJdGpHEqSKcQwnR7a5nP8yVyRRi26aYrNDjuJ2XoqnpLSSNAPmFZNApWcXGRqsqdaJBLsKPkkFXNYfcpwPNcpuExuFaeLhUaCbxdjWKBWMHPxqEhvK2dcs6uXhPjp4QX9XoMSiRqBGC7YAxhZkChKaxmBM3y2sTsyfW69LFM2VKs84FF7tXCGKPomVABQCgVbt5p9BKyPcL8ERa2LJrzfKJwfoXSAPrrK2QEd5zaDi7g6tSVy5QBFzrYARnncF2ZCuGR9Nmh6VAWumXpHfVq83iVVBWHKjSvKJuBEFUzg3G1dWmtwxqRZYFgdgd5FAZp5M6Nj6x4VMi4qcJe9S1exhMHKTDmKnmsJ7AX4YA4MdRGYXGJHRSUb842gqEYbqjjTSu8xRghbuxg9ghnr8NVx4uxwE56zJUMzhP4bVftTH6XhS1MDoRUPi451LcAbRr7QLR7gq8FS4H73FtJN4cni5mURRpNAnzEYFWcjmqaUuC9VSfkuD3Aqk7vSKpbJoSkcaZMXdqb9G4x6SGxjphx8kvxQDTJkmjkxNB5bADpRA7rfkSjRX9zekM8rb7NKu5doxYovb1qPgDuPPbD2eA279btntL8xzqTW2JWQdTPqdHG1ezxBsSWqWdFzzJYFh2VWuYB59A38EB9Mcihj995Y1DGfLt9vHMaw92ERCeqtk4MqX6WSBYc9QzTEA7wUtdYGXLydyRRxbLpYTfTX4sUvhCvg2YGix1L1G4nFaNRq28jiZjfKTCLr2TWDzFvX4jVWhFjFsBVRSCQhiKfDRpsUXm9CYXuk9tvnoVj2NN3e3SLyiWjCEUap84EhdyZn1zHHQSXnsSoSynR1kiWSDCuJCBcyM2MQ8wR',\n    [ChainType.Doge]: '5ivrmzxYa3qBuYZ3teFTEJP1ziojbVZAYdZF528CNfT5tiycZoiqXfZEqgud81sBrXGyGoanY95RS1xwRSzc4nSGhvhg9Awr23q8vde4k7PWrErq42DeCwborsxAwKm1YrWJEwD8KZiKmSMR9jCD3pTxfsvoq4yMJeh4bscJKRj9iuy79tzWT3NU4L1vrVNjQd9ksz8V2mUeU7EXouDTHxAM5Vci3HgeC2CBqY23J3mpXryfb3UPha7a4zf2eF7Tv5viA7ayrGgu582W2ZttnLFHQTRn3gnTU715qzjk7NMer98y528FxXNZsjSFs72tZm4kL6zMthigXX1yNBtr5vXmYKcHUyAeRWuX2CK8jAFWYF4cJeceCN5E2KjoTK47Ge7q8B9MNZBVU83HPGzjVkqjvFDQsDZyt7hyCRhguwKibwyw1Y76ceNXrhzwPgukP6PsCWyipqSMVTAxB3QNR46mGi1v2S3MNKR9bThJU98yQntABweyLuqHVmALaU5s971p9SPi25gVnLsFD2FQnczLpHR2g8iJ2PcUZageyVyCxKbX3EvUoyQTymeaQuSwNgySKAs67YgUPFGcmXD33Fbs7vQvkrDbqUVprE2igGNZvCmStypiqZA6ijDzbaTX1XwFAehFT39WyGQ9NXzCtYn35fj95NLkDWugvEmqL5to8JFbCcHbV13WCJaVgvcerLKU922nuM54QXYNoSQHYdCypp3PXwaWBbsemt1cbH9mGM5JnYuhAm2gKctu7rUwCQ9P6qx7k4nC6ycUWLPsYeaYt23RXxF9cx31A9nUqSW4n4j46j3fVTkBX47C7X2TFF2VgHFJky4d3etKp5EQodYs2caNLgmmACErMCtJ1GuamHCfSEg3iLyLaPAmtRM9HFUVCsMEL3GwLzqEasH3fy9dpUrAh8FqAHPT16gAx7ePEPU8k9obwUyYqkxMBuyaMonoy37GejLXzpzM9DTacEuNCBKw9hVHnDCB5Zxkhuj5kkaH3794qur5GCF3XKFnWNuKf35DBwVeEq3SMMsWmcBB6ZqfJJxa4vCLS6aEhtDxnSxw1TS8T9bvu91dXLH6HoAfK5vnoGHKP387yTuJmcbacFtvBoT6EWDS6DvXQx9FptRgojeF9T1ZjCChE6igPL9WhWPvvCEm6BMR2Jtsxw16JJzqMW33W5CBJstoi8oSKE2yrw7i2hxsyY6UPDWZUe4Cex2tSfWSzSS3tXo5ahVMfoVHxUmmKJoE6St16U58ETVipwqU6WLJT6BGYboueetYfbzL37FPgQEruWWNT',\n    [ChainType.Runes]: null,\n    [ChainType.Nervos]: null,\n    [ChainType.Handshake]: null,\n    [ChainType.Monero]: null,\n};\nconst permitBulkAddresses = {\n    [ChainType.Bitcoin]: 'ZsPNMsGz8D8y11MAneZTVjJndCjgTUrBWezH77jKWr2KXMVRgs4gRkDdTLoUQq8xqtGoESTa7r3zr5E3SxQkE5CM2PaPDSHb5bQWeRtaL9eikJWw95bx4DSjCDcsECpjLxbEfahCHy2sDuXQg6potLhwVVADP5TNUxEDgWPR27x658qcHA54TPRhybb6z67cdmkPrQNXwumoGvoPNnqVcXsdXS71KpQViuk4wXBT156Nd7Tt9b3Dvx827QiLbjJXuajydCDFC6yp2sj5dk7uA5ArNfViybrVQaf71GNGwyh6USgVKBpTurrRBtxeGWNzXi4krd7XbseaU5Crnauk9fj5jEbVH88sPzuD6o4XReNW3odcKDkvqgUh9Vu6b2uGLJsV5wY44Kk3bf8PJmkTc6vQE7Mprkdi2jBfZrzffqoKC6hWLfSZNcUWFV821L43VkJbsaYLukMq1SBJ7y7rsnWcct1U8owQbDpboysHrxfeE84JMTterx8E8sxJqwQRRTxT7M',\n    [ChainType.Cardano]: 'ZsPNMsGz8D8y11MAneZTVjJndCjgTUnjAi7MBVhohaELkSWjyWJLdqw9DFRK5XJ5mS3TnP1cxLsjn38fsQ1FKDfXpczKLF38JVqUcTgTz4vWuQ3moQtya1Yb85tJXVnq2NgvDcuWJsRXQWyqBABL93WEFwT6TWiZeXVAQ7x3EhJGmFvUkbZqbtkHvbYACQ7PZVwVNXn44saome9v7QrCMqvxHHrdqaSc13dHXx2MGVut22sVvMsNXT5ody7hoAqmhfioxM6Yw238jUyturCgtbWdVr42Qv5t2aZ8YCdz6ifvqSbKmnNUBSiccfxr2G9Y4eceJ5jv7iJEaf3RAoYH9vTP1yiacpmFZLjtT38FUz5n95ubWfNg5kZAiefzyaFRpV8sRH147FoaQKFRUQRACivsVvXRBhZWYeA57VZ65E7E6d5RU4JJewNiQ5de5daAQXnC9aV2diVXw9obFC2aBYqHz3U14gHss9xvcVPuqFsJdQRLsejtnYxuoZcJF18vohmNKb',\n    [ChainType.Ergo]: 'ZsPNMsGz8D8y11MAneZTVjJndCjgTUjPFBh5wF6ZNmMySHVDcBmMx2VxGFNCcMxCKDPkdPEzZp4bt5pgwrpZyKV6nmzCAh6SaX5ZnN2fL2X2UTuLvmuk6t8BqrxoiKHmqASttYk6xJPNabuF9ZNMYQBikFWDmq2jrxZS1MG6gQQ2Mx1MgXVvPs9ZkDTe8TykK4MuvQwtjaatjugK3FC5gsB4e4KiTcMPzreUkHvC8mZQGTtGkmHSbq8hkUDfa8MUMAka4oV3unyhgvx9MHjSDNaKWtqrWJpHCsQqPxvzPKohoYSNQt6H3V6ddw1dzGbBz8eKSbno5tEaLSryLDeMAbXhivALPZ3uCyWvx9BKFxSpuqCuQs9aXH7zKedvxzE6XRrrC2TZcWn5UinvbMNu3S4i5oTK2Y8WeVfoy5XHRbK7AL9w9pimJBp5Dx2UnhhHrWbeg9XyVZP7uCEqcUK3iVFmdG2euUa84Jbr7XVaE8v3sBa8LvYdxc6wAVfgPNNbQNxK7Y',\n    [ChainType.Ethereum]: 'ZsPNMsGz8D8y11MAneZTVjJndCjgTUoSPbApCbagsfJ9WvbzbsgAbzHGNF5aNaoR2AyxnrCBH68d5TDEc8aBhVRBT4Q5UC5tdqi9JpMqC8CYFja9PYqMj7KZDjPyMHPxbqUSrq8pGVwe7f8dCV5brNYBCrNqcrC5TmYvp2HpoEUXVb7JsxCuPWQFJgXqYhzEbySQyZQGCdVX6XtjU7aQZK5bzijsXDJhuntTM7ntmdSBJjEhtkMrvrBH8RtTW2JHZw5ZW5QamM3MJbfYDExepJQeJtACiz5n36piDgebfWgjAgibjz6oXsky3mJk2rAETx25AMQSAkHz3cYnH5Gs6BorBka9qXK3U47Dk4tobZGbEZqVeFvuaoRb7VcGUvX8L4rQf72gXzVVCVvY9YEzVoFEfFGe392S5e7X6QpdBuap8maYY4RygToFx6fLeUggDP1gEQ2ptDXZoCcthQPR6ey1GtEju8jqujt2VvJ6A8VjCbU3JYvozB6kqGxLCLKHaN1zm1',\n    [ChainType.Binance]: 'ZsPNMsGz8D8y11MAneZTVjJndCjgTUmenzfjjRBRRAo2DZVkwmBZxuHGoNTFLLrmFhsvuagJbFxBVLFW2nnoSuDHhNckxkJhBKNVhfPghWoKTuCHsEdJcJ1RD6XTT2aWbGPwHkja29mj2RibYNyCqjkPWEmbRJhVvfN2DUZ9pExxBPTmghNa6tFQyLkkfHdmuXEXLdpmWndfdknawDuojQPGjx3p42ewB4eeV8Zs7dDCDLdUUghTcczqJAadPMroUpmifMTw1FrpU3jC3kMaSzYpcpPu4e44xEni3E9hrenfQePbFVe9Jq9bVyjsQBF8vC8UxqefzEFmMoHT9xkdRNsFmfLMAximM3nyNhTMgLimWvLcNddW11jK1FFPumgKRUUeRivjtnXiRsNedXpmHKhvSVvpS8wAJbuySw3bHqkrpgQHqAr6vUiXj5McjsYzVh7PZxrUgEGNe8uLk4UpxJGhW3TVLNcPHdEbq2AoyabVkK2ChbE9KZ2JJBdHah93VgZSVG',\n    [ChainType.Doge]: 'ZsPNMsGz8D8y11MAneZTVjJndCjgTUn38JxZpW4EiZgEoHt1Juw2od5nVwwx23kjav2ZzWjZAYrjAQnGwskZjCxmVagr3o3d8AfdQZySQigfqzTFjekNSHeQBuQPQ1y3ry6fN4w5ECxn9jrmho9pZFkBddZ2QLbAhvZVt8WrpduXniFkG27KsYo6ikCtgRsJyvzjE7kubBpsYfRf7tV8ZT2RyZaSGJp8Lo6SbrAMdDA1mke93sDDkP6B1cXi1UdSSg8nAi68b2HLJEdnw52KES4Xnh3Dg3s3n9Ur1mGf6WJ44oVVxwsBHoXWLhoAXJ6v6XSnX1rxBcqT344WHLrezqdGwzYAbKYqGtUiEZq6fcHVhL3Wu3pxkv2WbupVFpVAeFPxYzcwwf7vtibL7KG5RDuZ3rziqCgLC5jL9ckTS4KkZXH6YEJktNnUmULpcBdpGUHWzeea2SLMeiNYw1aoZ1k9QfmVK7TjxKJ5g8gSrSTwmfZHMPD5v6EBYyu4gBe31WXWVz',\n    [ChainType.Runes]: null,\n    [ChainType.Nervos]: null,\n    [ChainType.Handshake]: null,\n    [ChainType.Monero]: null,\n};\nconst rewardAddresses = {\n    [ChainType.Bitcoin]: '2Eit2LFRqu2Mo33z3pYTJRHNCPYS33MrU9QgeNcRsF9359pYMahqnLvKsHwwH72C6WDSZRj7G7WC5heVyUEawcSLSx821iJXT4xWf2F5fjVWDUpyGNdkxhFwQMhPKpx85Uu16put68V837wxDx19LRJ5uqi7xBa7EDFRU79Grzk8HDrfpUF3qct4xrQUvDofDroRQTuKueAbwybAfGDhNqG3jzKQchgjedBkbPAuDuNunehW4ZXUBLRSfqy3xofV76bxT5zpZjZcKud4XaRQvXUAVGunJzAs7RNZD5WZxenhmKzhiyuzWiq5QkWqxFw2h9vQ6Dd5PdYsWP3dPtaDC8WUjGz8tQ1tU9LuhqZ8QThQA5zBfoPFrk2iJ1repUuwZPjWnDRHLfWppqDQJGm2GEWHmYTQAfCJQFChUtSNstSATxw37xXjziKkPQRRVPr3VPapbHtGSoQyygzTHgcjxv3HSzwXkD7DScyA2iGDsd4B4WeXo4a6nM4CYpxa9f9FvabbNByhKsgq3ZoCsbUVXN99Pet93MFdxVmBBEsGYEYvtmMEDZEGb5z3JZDtVSdudFcm3bij82bdFzKSmmxxWZhscmLYpGGq1J5geqTiyTCgsmksAHumPFBmLkz8v843Jc3z5b6dwFgyXuBmQPTq6Nf8t95y1UYe8UYx3qNVfrHSGbToSgvCQyLKVv5ns8T2SZRWWr',\n    [ChainType.Cardano]: '2Eit2LFRqu2Mo33z3pYTJRHNCPYS33MrU9QgeNcRsF9359pYMahqnLvKsHwwH72C6WDSZRj7G7WC5heVyUEawcSLSx821iJXT4xWf2F5fjVWDUskGdVdyYY5RBJnp3dfYC7iPoRNeopAFQWFwEbTieow347UhRyqvo2LntFpXzomvGwVTfq9YXS8Z1GGW5mUEioD5xC17Sz72NLbQrskSx7QZAxQTbMGh6vwM9J4q7NzRmQeHmWaHLpUHMU4Jdd5ccKumMvAY8d5C8RxB4iATySLY2N1wY84qNsWNaqkNofbUebf6LgmU9HTKAmU3nDoBfX7mhCjH8kXDhZeYdRsuLVFEYu83TkpwgHAYGmUoemxWAeA2BKMx8CBAy9jxbCyUjdnk9i7sLxuejrwLLh8W4tP81YkESjZ8BV65BhzPdvCaiX8vBSorgFfnvGKVzwfhhsSDwLY1GUwLTMLwTUTjSzEjsMX9hzsEEEmhxLsekabLmK3HZ1jssLrFryNuE59uS51hazJsi3gsT8SBk1J9YV6Dq6xto28nLqrMqK6raqLcAm2iU8hBtqdoSXqWzsrZHpqc2uLGhY52ee4k9TpFBvN1RovYUtY6KS4FncT4UgnbEFkzsnWYKX3CDn16tJs5CyZ97gKcvUonZ5EqTwabzni14CcQsTtKtEAqj1odvSyfJ94NnEjuiVPC3VmZbQvveN3bQ',\n    [ChainType.Ergo]: '2Eit2LFRqu2Mo33z3pYTJRHNCPYS33MrU9QgeNcRsF9359pYMahqnLvKsHwwH72C6WDSZRj7G7WC5heVyUEawcSLSx821iJXT4xWf2F5fjVWDUmvtxr3QSv1aLwThLXxeqYCCc34xjxZDPqPyNGYvWLNeBZxATvBeDuQ6pSiiRFknqmvYVsm9eH4Et3eRHCyxDJEoqZsAahwfVSya34dZNHmjaPQkwWo3Coc17pxiEnWuWmG38wSJz1awE6cymzhojnjxDTbbXgjR1yfYU3AU2v9zttnT8Gz3gUzZNSwjiXSPu3G9zkDaFZVKqb5QwTWY3Pp6SFJgBQfx3C3sp4a9d3n9c98pfWFWAGQN5EfkoHosF8BQTDuzXG3NU8gVCNeNPXYA8iWCbvY3XpxQMvQUxqkjDv9VQfUNvAKVHLW43chi2rdBrQ7Teu6NnesLRWUKXpzSxpByWftkCCdBppjZtYmhhCHqpQGkQyTcMRoP2krFKe7xKbfnFkdkhaYH9TTdKuTuKtGb265RXxiqrc34KvkZpaBBQB5UvoCU4iLSDngNTjqkNPnWekDahzNHLd6CtcdC1B19jdGEXWeNADemDtdK4zrMNg7U8iVpyGYhLDnkeLVrcbhoxkHxrFwfrN19XvitDosQqmt9dseR6SWHBCDZJdmJecCiEwd2wBiwN5N5umEy3Dd4Hznv7kDr6eX7KtYxp',\n    [ChainType.Ethereum]: '2Eit2LFRqu2Mo33z3pYTJRHNCPYS33MrU9QgeNcRsF9359pYMahqnLvKsHwwH72C6WDSZRj7G7WC5heVyUEawcSLSx821iJXT4xWf2F5fjVWDUpPyXf9D8PFkALkfhCu47xSApej3a8VHFCfLuQoMFV2LgTs6hEqRf2XQkDHzn3KYbGJ9b6gs2XcYf3ZQA2gJaWJXFErT11uifohMFFRJV7cb1eECubCbHCib3A434SJVrZee18QTRECrDirtC2GdZK6fiKGbGcKFTZWK4f3ChgnuZFCjRoCX2UquL25b2zkev34shFCspbYwYcyKmc5xxrvssUHgQmUZy7yu3RKJPXYuwH7SiittGsJ946spWJEp3cuBiMcpRvwbiCyrQqM1FtK3wZJKqy95bVDfj9zXwFfR1rE9wZADPs6xcJxi9P1z2iBXqPXGQHnKVaHJWEwNZfP2KAZeUi8etKnYSib68e5cuif3YNRVFdNtKAT2SJEsJCDmnUecmdCwvzMeH2EtNYsRBWVeTV4RBypRPi243qkFrct41bz6WZ8FhLFXU1tnExucXvQ48ZoQ4RQpNorEcGNDY8MC52yhkofS5b9wy6AYYjpQyTMmhD1QZF3VcQgPNT6x4yxPXYsjohYZh96h6M8T7m9gfVV3w8xowtVQVAB1kvJHMuZXxBkBNLwFbhxKuMwC2Dje3LZmuH9mhg94f7Uoe',\n    [ChainType.Binance]: '2Eit2LFRqu2Mo33z3pYTJRHNCPYS33MrU9QgeNcRsF9359pYMahqnLvKsHwwH72C6WDSZRj7G7WC5heVyUEawcSLSx821iJXT4xWf2F5fjVWDUmAMWiE8WncsqsSRhckGHa5xwdGj7fCkypvX2Q9ypun1tUfQ8YwoXYgYCSF1M2t7WaUb2ZZzY9yETrdm8ywS3VzDFpirFEiLLgjE5vhsLkcW2PtiChF5npL3SFsxnSY92ZMmSw2U9GzhwDwTKXpPUD17dydf4CTbLATnCdiTkEYxCzVqh3XnBebDhEFSHWhCWVtqRniJJRqpRaAsv64qtBPabPG8HNRHT9TXFR4a58wH8VqdNuUSKHx1NQahaXTPYHfQX7H4mAzYU6fbH5uryhxqSh5HTBmCB8XrJcXCR41FeqjwrkwTiEHJkkyHVTeLdpyaUcHJ9M9nEsTbGbxMBLEc6CLtzRA5bDwFAKXN3i2mo86wUghaPMd72nd3pLDbhGYRntgYMrVWuVDzMhdJamVvFPbiEWiCs1BJ9NgJzasvJpJQxm1uBYskrWnULHQaJf8Kfoixaqcz6mcp2aAEAkoAmd3CcAddM4X1vCuapWeyaxLD7kXrHaafMsatugqJP4JQGFKEkXXBhthKScGLq5wcbYb2cVv6HuzyxyMg92UiLzTyFDB8QG2NwKgTfLGJ5iLDzzsFkPGtkxECDMVmiw21E',\n    [ChainType.Doge]: '2Eit2LFRqu2Mo33z3pYTJRHNCPYS33MrU9QgeNcRsF9359pYMahqnLvKsHwwH72C6WDSZRj7G7WC5heVyUEawcSLSx821iJXT4xWf2F5fjVWDUkje1kCt7DSEufp9kN95BRzhkMTmgY2jmZ3gPH7hjfNkbPBkjLNifx5iH8wZ1EmiMFiWKozc1ZeT3QdnRhCtLZwHo5sBTek83753eK8YZNVgtykvcdLDbsgGyfCXZtJ2zxbNK7522JRormkeNkhLFBxC9u2tQ11EHyvcg8qHUhPA1GCXALUdtB1FkV2chfgewbDmtrpn7tqC7o3eaxQs3Ted3mo3TKmckYVWca7TqHnBCYGE1GRH2X3ZuWuSJXyi1AxKCyRi9JucVAGwpBhQPNR4viEZe5fo6kBiChWriCKmr7pti8685xoAz1ycFnLPKhbgdkwXmZtoLbYYrirEifkMJ1QXtaJStb86NQLQU2ThhqTzEkP22D8sRZ3Ud2b83KcxVvzzCvGeDRK7SkfjbmfhTCazJwwXiFTHBgT2tzfJvQTazwP6czcVC4taS55Ts2uKB4Z9Eu5MeWEvbBLBis8KxnkZkdMecxcBjRdAojCwyMBJUz8EPYo6x659TzbSJhjJiFaQ9f4kanVBV7nC9gK1rq5oY7bFH9MUcwGeu38HQk62kUbv7Q2dYx56CBVw6cHzdRJu6AXHY8dAy3BLqvHCV',\n    [ChainType.Runes]: null,\n    [ChainType.Nervos]: null,\n    [ChainType.Handshake]: null,\n    [ChainType.Monero]: null,\n};\nconst hotWalletAddress = 'nB3L2PD3J4rMmyGk7nnNdESpPXxhPRQ4t1chF8LTXtceMQjKCEgL2pFjPY6cehGjyEFZyHEomBTFXZyqfonvxDozrTtK5JzatD8SdmcPeJNWPvdRb5UxEMXE4WQtpAFzt2veT8Z6bmoWN';\n/**\n * Determines the ChainType based on the provided address.\n * @param address The address to evaluate.\n * @returns The corresponding ChainType or null if not found.\n */\nfunction getChainType(address) {\n    if (!address)\n        return undefined;\n    for (const [chain, addr] of Object.entries(rewardAddresses)) {\n        if (addr === address) {\n            return chain;\n        }\n    }\n    return null;\n}\nfunction getChainTypeForPermitAddress(address) {\n    if (!address)\n        return undefined;\n    for (const [chain, addr] of Object.entries(permitAddresses)) {\n        if (addr === address) {\n            return chain;\n        }\n    }\n    return null;\n}\nif (typeof window !== 'undefined') {\n    window.ChainType = ChainType;\n    window.getChainType = getChainType;\n    window.getChainTypeForPermitAddress = getChainTypeForPermitAddress;\n    window.permitAddresses = permitAddresses;\n    window.rewardAddresses = rewardAddresses;\n    window.permitTriggerAddresses = permitTriggerAddresses;\n    window.permitBulkAddresses = permitBulkAddresses;\n    window.hotWalletAddress = hotWalletAddress;\n    window.rwtTokenIds = rwtTokenIds;\n}\n\n/* eslint-disable @typescript-eslint/no-explicit-any */\nconst rs_DbName = 'rosenDatabase_1.1.5';\nconst rs_DbVersion = 38;\nconst rs_InputsStoreName = 'inputBoxes';\nconst rs_PerfTxStoreName = 'perfTxs';\nconst rs_PermitTxStoreName = 'permitTxs';\nconst rs_ActivePermitTxStoreName = 'activePermitTxs';\nconst rs_DownloadStatusStoreName = 'downloadStatusStore';\nconst rs_OpenBoxesStoreName = 'openBoxesStore';\nconst rs_AddressDataStoreName = 'addressData';\nconst rs_InitialNDownloads = 30;\nconst rs_FullDownloadsBatchSize = 400;\nconst rs_PerfInitialNDownloads = 10;\nconst rs_PerfFullDownloadsBatchSize = 40;\nconst rs_StartFrom = new Date('2024-01-01');\nconst rs_Input_Key = ['boxId', 'outputAddress'];\nconst rs_Permit_Key = 'id';\nconst rs_ActivePermit_Key = 'id';\nconst rs_PerfTx_Key = 'id';\nconst rs_Address_Key = 'address';\nconst rs_PermitCost = 3000;\nconst rs_WatcherCollateralRSN = 30000;\nconst rs_WatcherCollateralERG = 800;\nconst rs_ErgoExplorerHost = 'api.ergoplatform.com';\nconst rs_ErgoNodeHost = 'node-p2p.ergoplatform.com';\n//const rs_ErgoExplorerHost = 'node-p2p.ergoplatform.com';\n// https://node-p2p.ergoplatform.com/swagger\n/*\n\nhttps://api.ergoplatform.com/api/v1/docs/\nhttps://api-p2p.ergoplatform.com/api/v1/docs/\nhttps://api.ergo.aap.cornell.edu/api/v1/docs/\nhttps://api.ergobackup.aap.cornell.edu/api/v1/docs/\nhttps://api.codeutxo.com/api/v1/docs/\n\n*/\nconst rs_RSNTokenId = '8b08cdd5449a9592a9e79711d7d79249d7a03c535d17efaee83e216e80a44c4b';\nconst rs_eRSNTokenId = 'dede2cf5c1a2966453ffec198a9b97b53d281e548903a905519b3525d59cdc3c';\nconst rs_TokenIdMap = {\n    [rs_RSNTokenId]: 'RSN',\n    [rs_eRSNTokenId]: 'eRSN',\n};\nconst rs_RSNDecimals = 3;\nvar Period;\n(function (Period) {\n    Period[\"Day\"] = \"Day\";\n    Period[\"Week\"] = \"Week\";\n    Period[\"Month\"] = \"Month\";\n    Period[\"Year\"] = \"year\";\n    Period[\"All\"] = \"All\";\n})(Period || (Period = {}));\nvar Currency;\n(function (Currency) {\n    Currency[\"EUR\"] = \"EUR\";\n    Currency[\"USD\"] = \"USD\";\n    Currency[\"ERG\"] = \"ERG\";\n    Currency[\"RSN\"] = \"RSN\";\n})(Currency || (Currency = {}));\nif (typeof window !== 'undefined') {\n    window.rs_DbName = rs_DbName;\n    window.rs_DbVersion = rs_DbVersion;\n    window.rs_InputsStoreName = rs_InputsStoreName;\n    window.rs_PerfTxStoreName = rs_PerfTxStoreName;\n    window.rs_PermitTxStoreName = rs_PermitTxStoreName;\n    window.rs_ActivePermitTxStoreName = rs_ActivePermitTxStoreName;\n    window.rs_DownloadStatusStoreName = rs_DownloadStatusStoreName;\n    window.rs_OpenBoxesStoreName = rs_OpenBoxesStoreName;\n    window.rs_AddressDataStoreName = rs_AddressDataStoreName;\n    window.rs_InitialNDownloads = rs_InitialNDownloads;\n    window.rs_FullDownloadsBatchSize = rs_FullDownloadsBatchSize;\n    window.rs_StartFrom = rs_StartFrom;\n    window.rs_Input_Key = rs_Input_Key;\n    window.rs_PerfTx_Key = rs_PerfTx_Key;\n    window.rs_Permit_Key = rs_Permit_Key;\n    window.rs_ActivePermit_Key = rs_ActivePermit_Key;\n    window.rs_Address_Key = rs_Address_Key;\n    window.rs_PermitCost = rs_PermitCost;\n    window.rs_WatcherCollateralRSN = rs_WatcherCollateralRSN;\n    window.rs_WatcherCollateralERG = rs_WatcherCollateralERG;\n    window.Period = Period;\n    window.Currency = Currency;\n    window.rs_PerfInitialNDownloads = rs_PerfInitialNDownloads;\n    window.rs_PerfFullDownloadsBatchSize = rs_PerfFullDownloadsBatchSize;\n    window.rs_ErgoExplorerHost = rs_ErgoExplorerHost;\n    window.rs_ErgoNodeHost = rs_ErgoNodeHost;\n    window.rs_RSNTokenId = rs_RSNTokenId;\n    window.rs_eRSNTokenId = rs_eRSNTokenId;\n    window.rs_TokenIdMap = rs_TokenIdMap;\n    window.rs_RSNDecimals = rs_RSNDecimals;\n}\n\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nclass DataService {\n    db;\n    constructor(db) {\n        this.db = db;\n    }\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    async purgeData(_db) {\n        // Empty implementation\n    }\n    getMaxDownloadDateDifference() {\n        return 3155760000000;\n    }\n    async getData(storeName) {\n        return new Promise((resolve, reject) => {\n            const transaction = this.db.transaction([storeName], 'readonly');\n            const objectStore = transaction.objectStore(storeName);\n            const request = objectStore.getAll();\n            request.onsuccess = () => resolve(request.result);\n            request.onerror = (event) => reject(event.target.error);\n        });\n    }\n    async getDataWithCursor(storeName, filterFn) {\n        return new Promise((resolve, reject) => {\n            const results = [];\n            const transaction = this.db.transaction([storeName], 'readonly');\n            const objectStore = transaction.objectStore(storeName);\n            const request = objectStore.openCursor();\n            request.onsuccess = (event) => {\n                const cursor = event.target.result;\n                if (cursor) {\n                    const value = cursor.value;\n                    if (!filterFn || filterFn(value)) {\n                        results.push(value);\n                    }\n                    cursor.continue();\n                }\n                else {\n                    resolve(results);\n                }\n            };\n            request.onerror = (event) => reject(event.target.error);\n        });\n    }\n}\n\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nclass ChainPerformanceDataService extends DataService {\n    db;\n    eventSender;\n    async getExistingData(transaction) {\n        return new Promise((resolve, reject) => {\n            const dbTtransaction = this.db.transaction([rs_PerfTxStoreName], 'readonly');\n            const objectStore = dbTtransaction.objectStore(rs_PerfTxStoreName);\n            const request = objectStore.get(transaction.id);\n            request.onsuccess = () => {\n                const result = request.result;\n                resolve(result);\n            };\n            request.onerror = (event) => reject(event.target.error);\n        });\n    }\n    async addData(_address, transactions, db) {\n        return new Promise((resolve, reject) => {\n            const tempData = [];\n            transactions.forEach((item) => {\n                const chainTokensCount = {};\n                const eRSNTotal = item.outputs.reduce((total, output) => {\n                    output.assets.forEach((asset) => {\n                        if (asset.tokenId != null && asset.tokenId in rwtTokenIds) {\n                            if (!chainTokensCount[asset.tokenId]) {\n                                chainTokensCount[asset.tokenId] = 1;\n                            }\n                            else {\n                                chainTokensCount[asset.tokenId]++;\n                            }\n                        }\n                    });\n                    const assets = output.assets.filter((a) => a.tokenId === rs_eRSNTokenId &&\n                        Object.values(rewardAddresses).includes(output.address));\n                    return (total +\n                        assets.reduce((acc, asset) => acc + asset.amount / Math.pow(10, rs_RSNDecimals), 0));\n                }, 0);\n                const maxKey = Object.entries(chainTokensCount).reduce((max, [key, value]) => (value > chainTokensCount[max] ? key : max), Object.keys(chainTokensCount)[0]);\n                const chainType = Object.entries(rwtTokenIds).find(([key]) => key === maxKey)?.[1];\n                const dbPerfTx = {\n                    id: item.id,\n                    timestamp: item.timestamp,\n                    amount: eRSNTotal,\n                    chainType: chainType,\n                };\n                tempData.push(dbPerfTx);\n            });\n            const transaction = db.transaction([rs_PerfTxStoreName], 'readwrite');\n            const objectStore = transaction.objectStore(rs_PerfTxStoreName);\n            const putPromises = tempData.map((dbPerfTx) => {\n                return new Promise((putResolve, putReject) => {\n                    console.log('Trying to add dbPerfTx to db with id ' + dbPerfTx.id);\n                    const request = objectStore.put(dbPerfTx);\n                    request.onsuccess = () => putResolve();\n                    request.onerror = (event) => putReject(event.target.error);\n                });\n            });\n            Promise.all(putPromises)\n                .then(async () => {\n                const perfTxs = await this.getPerfTxs();\n                this.eventSender.sendEvent({\n                    type: 'PerfChartChanged',\n                    data: perfTxs,\n                });\n                resolve();\n            })\n                .catch(reject);\n        });\n    }\n    async getPerfTxs() {\n        const perfTxsPromise = this.getData(rs_PerfTxStoreName);\n        console.log('Retrieving PerfTxs');\n        try {\n            let perfTxs = await perfTxsPromise;\n            perfTxs = perfTxs.filter((p) => this.getMaxDownloadDateDifference() >\n                new Date().getTime() - new Date(p.timestamp).getTime());\n            const result = perfTxs.reduce((acc, tx) => {\n                if (tx.chainType !== undefined && tx.chainType !== null) {\n                    const chainKey = tx.chainType;\n                    if (!acc[chainKey]) {\n                        acc[chainKey] = { chart: 0 };\n                    }\n                    acc[chainKey].chart += tx.amount ?? 0;\n                }\n                return acc;\n            }, {});\n            return Object.fromEntries(Object.values(ChainType).map((chain) => [chain, result[chain] || { chart: 0 }]));\n        }\n        catch (error) {\n            console.error(error);\n            return {};\n        }\n    }\n    constructor(db, eventSender) {\n        super(db);\n        this.db = db;\n        this.eventSender = eventSender;\n    }\n    getMaxDownloadDateDifference() {\n        return 604800000;\n    }\n    getDataType() {\n        return 'performance_chart';\n    }\n}\n\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nclass RewardDataService extends DataService {\n    db;\n    chartService;\n    eventSender;\n    async getExistingData(transaction, address) {\n        for (const input of transaction.inputs) {\n            if (input.boxId && getChainType(input.address)) {\n                const data = await this.getDataByBoxId(input.boxId, address, this.db);\n                if (data) {\n                    return data;\n                }\n            }\n        }\n        return null;\n    }\n    constructor(db, chartService, eventSender) {\n        super(db);\n        this.db = db;\n        this.chartService = chartService;\n        this.eventSender = eventSender;\n    }\n    getDataType() {\n        return 'reward';\n    }\n    async getWatcherInputs() {\n        const inputsPromise = this.getData(rs_InputsStoreName);\n        console.log('Retrieving watcher inputs and such');\n        try {\n            const inputs = await inputsPromise;\n            const filteredInputs = inputs.filter((i) => i.chainType != null || getChainType(i.address) != null);\n            filteredInputs.forEach((input) => {\n                input.assets = input.assets\n                    .filter((asset) => asset.tokenId == rs_RSNTokenId || asset.tokenId == rs_eRSNTokenId)\n                    .map((asset_1) => {\n                    return asset_1;\n                });\n            });\n            filteredInputs.sort((a, b) => a.inputDate.getTime() - b.inputDate.getTime());\n            return await new Promise((resolve) => {\n                resolve(filteredInputs);\n            });\n        }\n        catch (error) {\n            console.error(error);\n            return [];\n        }\n    }\n    async addData(address, transactions, db) {\n        return new Promise((resolve, reject) => {\n            // Create a temporary array to hold DbInput items before bulk insertion\n            const tempData = [];\n            // Populate tempData with processed inputs\n            transactions.forEach((item) => {\n                item.inputs.forEach((input) => {\n                    input.outputAddress = address;\n                    input.inputDate = new Date(item.timestamp);\n                    input.assets = input.assets.filter((a) => a.tokenId == rs_RSNTokenId || a.tokenId == rs_eRSNTokenId);\n                    input.assets.forEach((asset) => {\n                        if (asset.tokenId && rs_TokenIdMap[asset.tokenId]) {\n                            asset.name = rs_TokenIdMap[asset.tokenId];\n                            asset.decimals = rs_RSNDecimals;\n                        }\n                    });\n                    const dbInput = {\n                        outputAddress: input.outputAddress,\n                        inputDate: input.inputDate,\n                        boxId: input.boxId,\n                        assets: input.assets || [],\n                        chainType: getChainType(input.address),\n                    };\n                    if (dbInput.chainType && dbInput.assets.length > 0) {\n                        tempData.push(dbInput);\n                    }\n                });\n            });\n            const transaction = db.transaction([rs_InputsStoreName], 'readwrite');\n            const objectStore = transaction.objectStore(rs_InputsStoreName);\n            const putPromises = tempData.map((dbInput) => {\n                return new Promise((putResolve, putReject) => {\n                    const request = objectStore.put(dbInput);\n                    request.onsuccess = () => putResolve();\n                    request.onerror = (event) => putReject(event.target.error);\n                });\n            });\n            Promise.all(putPromises)\n                .then(async () => {\n                const inputs = await this.getSortedInputs();\n                this.eventSender.sendEvent({\n                    type: 'InputsChanged',\n                    data: inputs,\n                });\n                this.eventSender.sendEvent({\n                    type: 'AddressChartChanged',\n                    data: await this.chartService.getAddressCharts(inputs),\n                });\n                resolve();\n            })\n                .catch(reject);\n        });\n    }\n    // Get Data by BoxId from IndexedDB\n    async getDataByBoxId(boxId, addressId, db) {\n        return new Promise((resolve, reject) => {\n            const transaction = db.transaction([rs_InputsStoreName], 'readonly');\n            const objectStore = transaction.objectStore(rs_InputsStoreName);\n            const request = objectStore.get([\n                boxId,\n                addressId,\n            ]); /* ?? objectStore.get([boxId.slice(0, 12), addressId])*/\n            request.onsuccess = () => {\n                const result = request.result;\n                if (!result || result.outputAddress !== addressId) {\n                    resolve(null);\n                }\n                else {\n                    resolve(result);\n                }\n            };\n            request.onerror = (event) => reject(event.target.error);\n        });\n    }\n    async getSortedInputs() {\n        const inputsPromise = await this.getWatcherInputs();\n        let amount = 0;\n        const sortedInputs = [];\n        console.log('start retrieving chart from database');\n        try {\n            const inputs = await inputsPromise;\n            inputs.forEach((input) => {\n                input.assets.forEach((asset) => {\n                    amount += asset.amount;\n                    sortedInputs.push({\n                        inputDate: input.inputDate,\n                        address: input.address ?? '',\n                        assets: input.assets,\n                        outputAddress: input.outputAddress,\n                        boxId: input.boxId,\n                        accumulatedAmount: amount,\n                        amount: asset.amount / Math.pow(10, asset.decimals),\n                        chainType: input.chainType ?? getChainType(input.address),\n                    });\n                });\n            });\n            console.log('done retrieving chart from database ' + inputs.length + ' inputs');\n            return await new Promise((resolve) => {\n                resolve(sortedInputs);\n            });\n        }\n        catch (error) {\n            console.error(error);\n            return sortedInputs;\n        }\n    }\n}\n\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nclass ChartService {\n    async getAddressCharts(inputs) {\n        const addressCharts = {};\n        inputs.forEach((input) => {\n            input.assets.forEach((asset) => {\n                if (!addressCharts[input.outputAddress]) {\n                    addressCharts[input.outputAddress] = { charts: {}, chainType: null };\n                }\n                const currentDate = new Date();\n                const halfYearAgo = new Date(currentDate.getFullYear(), currentDate.getMonth() - 6, currentDate.getDate());\n                if (input.inputDate > halfYearAgo) {\n                    const dt = new Date(input.inputDate.getFullYear(), input.inputDate.getMonth(), input.inputDate.getDate() - input.inputDate.getDay()).getTime();\n                    if (!addressCharts[input.outputAddress].charts[dt]) {\n                        addressCharts[input.outputAddress].charts[dt] = 0;\n                    }\n                    addressCharts[input.outputAddress].charts[dt] +=\n                        asset.amount / Math.pow(10, asset.decimals);\n                    addressCharts[input.outputAddress].chainType =\n                        input.chainType ?? getChainType(input.address);\n                }\n            });\n        });\n        return addressCharts;\n    }\n    async getAmountsByDate(inputs, period) {\n        const reducedInputs = this.reduceData(inputs, period);\n        const amounts = reducedInputs.map((s) => {\n            return { x: s.inputDate, y: s.amount };\n        });\n        return amounts;\n    }\n    reduceData(inputs, period) {\n        const date = new Date();\n        switch (period) {\n            case Period.Day:\n                date.setDate(date.getDate() - 1);\n                break;\n            case Period.Week:\n                date.setDate(date.getDate() - 7);\n                break;\n            case Period.Month:\n                date.setMonth(date.getMonth() - 1);\n                break;\n            case Period.Year:\n                date.setFullYear(date.getFullYear() - 1);\n                break;\n            default:\n                date.setFullYear(date.getFullYear() - 100);\n        }\n        inputs = inputs.filter((r) => r.inputDate >= date);\n        return inputs;\n    }\n}\n\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nclass DownloadService {\n    dataService;\n    myWatcherDataService;\n    eventSender;\n    db;\n    busyCounter = 0;\n    downloadFullSize = rs_FullDownloadsBatchSize;\n    downloadInitialSize = rs_InitialNDownloads;\n    //private static addressDownloadDateMap = new Map<string, Date>();\n    constructor(downloadFullSize, downloadInitialSize, dataService, myWatcherDataService, eventSender, db) {\n        this.dataService = dataService;\n        this.myWatcherDataService = myWatcherDataService;\n        this.eventSender = eventSender;\n        this.db = db;\n        this.downloadFullSize = downloadFullSize;\n        this.downloadInitialSize = downloadInitialSize;\n    }\n    async fetchTransactions(url) {\n        try {\n            const response = await fetch(url);\n            if (!response.ok)\n                throw new Error(`Server returned code: ${response.status}`);\n            return (await response.json());\n        }\n        catch (error) {\n            console.error(`An error occurred: ${error}`);\n            throw error;\n        }\n    }\n    async downloadTransactions(address, offset = 0, limit = 500, useNode) {\n        if (useNode) {\n            const url = `https://${rs_ErgoNodeHost}/blockchain/transaction/byAddress?offset=${offset}&limit=${limit}`;\n            console.log(`Downloading from: ${url}`);\n            const response = await fetch(url, {\n                method: 'POST',\n                headers: {\n                    'Content-Type': 'text/plain',\n                },\n                body: address,\n            });\n            if (!response.ok)\n                throw new Error(`Server returned code: ${response.status}`);\n            const data = (await response.json());\n            const result = {\n                transactions: data.items,\n                total: data.total,\n                items: [],\n            };\n            for (const item of data.items) {\n                const inputDate = new Date(item.timestamp);\n                if (inputDate < rs_StartFrom) {\n                    return result;\n                }\n            }\n            return result;\n        }\n        else {\n            const url = `https://${rs_ErgoExplorerHost}/api/v1/addresses/${address}/transactions?offset=${offset}&limit=${limit}`;\n            console.log(`Downloading from: ${url}`);\n            const response = await this.fetchTransactions(url);\n            const result = {\n                transactions: response.items,\n                total: response.total,\n                items: [],\n            };\n            for (const item of response.items) {\n                const inputDate = new Date(item.timestamp);\n                if (inputDate < rs_StartFrom) {\n                    return result;\n                }\n            }\n            return result;\n        }\n    }\n    async downloadForAddresses() {\n        console.log('Start downloading for all addresses');\n        try {\n            const addresses = await this.dataService.getData(rs_AddressDataStoreName);\n            const downloadPromises = addresses.map(async (addressObj) => {\n                await this.downloadForAddress(addressObj.address, true);\n            });\n            await Promise.all(downloadPromises);\n        }\n        catch (e) {\n            console.error('Error downloading for addresses:', e);\n        }\n        finally {\n            console.log('End downloading for all addresses');\n        }\n    }\n    async downloadForChainPermitAddresses(addresses) {\n        try {\n            const downloadPromises = Object.entries(permitAddresses)\n                .filter(([, address]) => address != null)\n                .map(async ([chainType, address]) => {\n                await this.downloadForAddress(address, true);\n                const permits = await this.myWatcherDataService.getAdressPermits(addresses);\n                await this.eventSender.sendEvent({\n                    type: 'PermitsChanged',\n                    data: permits,\n                });\n                await this.eventSender.sendEvent({\n                    type: 'AddressPermitsDownloaded',\n                    data: chainType,\n                });\n            });\n            await Promise.all(downloadPromises);\n        }\n        catch (e) {\n            console.error('Error downloading for addresses:', e);\n        }\n    }\n    async downloadForActivePermitAddresses(allAddresses, chainType) {\n        try {\n            let addresses = [];\n            Object.entries(permitTriggerAddresses).forEach(([key, address]) => {\n                if (key === chainType && address != null) {\n                    addresses.push(address);\n                }\n            });\n            const downloadPromises = addresses.map(async (address) => {\n                await this.downloadForAddress(address, true, async () => {\n                    try {\n                        const permits = await this.myWatcherDataService.getAdressPermits(allAddresses);\n                        await this.eventSender.sendEvent({\n                            type: 'PermitsChanged',\n                            data: permits,\n                        });\n                    }\n                    catch (err) {\n                        console.error('Error in permits callback:', err);\n                    }\n                });\n            });\n            await Promise.all(downloadPromises);\n        }\n        catch (e) {\n            console.error('Error downloading for addresses:', e);\n        }\n    }\n    // Busy Counter\n    increaseBusyCounter(address) {\n        if (this.busyCounter === 0) {\n            this.eventSender.sendEvent({\n                type: 'StartFullDownload',\n                data: address,\n            });\n        }\n        this.busyCounter++;\n    }\n    decreaseBusyCounter(address) {\n        this.busyCounter--;\n        if (this.busyCounter === 0) {\n            this.eventSender.sendEvent({\n                type: 'EndFullDownload',\n                data: address,\n            });\n        }\n    }\n    // Download All for Address (recursive)\n    async downloadAllForAddress(address, offset, db, useNode, callback) {\n        this.increaseBusyCounter(address);\n        console.log(this.busyCounter);\n        try {\n            const result = await this.downloadTransactions(address, offset, this.downloadFullSize + 10, useNode);\n            console.log(`Processing full download(offset = ${offset}, size = ${this.downloadFullSize}) for: ${address}`);\n            //const t = this.processItems(result.transactions);\n            //console.log('permit amount ' + t);\n            if (!result.transactions || result.transactions.length === 0 || offset > 100000) {\n                await this.setDownloadStatus(address, 'true', db);\n                console.log(this.busyCounter);\n                return;\n            }\n            await this.dataService.addData(address, result.transactions, db);\n            if (callback) {\n                await callback?.();\n            }\n            //await this.dataService.compressInputs();\n            if (this.dataService.getMaxDownloadDateDifference() >\n                new Date().getTime() -\n                    new Date(result.transactions[result.transactions.length - 1].timestamp).getTime()) {\n                await this.downloadAllForAddress(address, offset + this.downloadFullSize, db, useNode);\n            }\n            else {\n                await this.setDownloadStatus(address, 'true', db);\n            }\n        }\n        catch (e) {\n            console.error(e);\n        }\n        finally {\n            this.decreaseBusyCounter(address);\n            console.log(this.busyCounter);\n        }\n    }\n    // Get Download Status for Address from IndexedDB\n    async getDownloadStatus(address, db) {\n        return new Promise((resolve, reject) => {\n            const transaction = db.transaction([rs_DownloadStatusStoreName], 'readonly');\n            const objectStore = transaction.objectStore(rs_DownloadStatusStoreName);\n            const request = objectStore.get(address + '_' + this.dataService.getDataType());\n            request.onsuccess = () => resolve(request.result);\n            request.onerror = (event) => reject(event.target.error);\n        });\n    }\n    // Set Download Status for Address in IndexedDB\n    async setDownloadStatus(address, status, db) {\n        let dbStatus = await this.getDownloadStatus(address, db);\n        if (!dbStatus) {\n            dbStatus = {\n                address: address + '_' + this.dataService.getDataType(),\n                Address: address,\n                status: status,\n                lastDownloadDate: undefined,\n            };\n        }\n        else {\n            dbStatus.status = status;\n            dbStatus.address = address + '_' + this.dataService.getDataType();\n            dbStatus.Address = address;\n        }\n        await this.saveDownloadStatus(dbStatus, db);\n    }\n    async saveDownloadStatus(downloadStatus, db) {\n        return new Promise((resolve, reject) => {\n            const transaction = db.transaction([rs_DownloadStatusStoreName], 'readwrite');\n            const objectStore = transaction.objectStore(rs_DownloadStatusStoreName);\n            const request = objectStore.put(downloadStatus);\n            request.onsuccess = () => resolve();\n            request.onerror = (event) => reject(event.target.error);\n        });\n    }\n    async downloadForAddress(address, useNode, callback) {\n        this.increaseBusyCounter(address);\n        console.log(this.busyCounter);\n        try {\n            const result = await this.downloadTransactions(address, 0, this.downloadInitialSize, useNode);\n            console.log(`Processing initial download(size = ${this.downloadInitialSize}) for: ${address}`);\n            const itemsz = result.transactions.length;\n            let existingData = null;\n            if (itemsz > this.downloadInitialSize / 4) {\n                for (let i = Math.floor(itemsz / 4); i < itemsz - Math.floor(itemsz / 4); i++) {\n                    const item = result.transactions[i];\n                    existingData = await this.dataService.getExistingData(item, address);\n                    if (existingData) {\n                        break;\n                    }\n                }\n            }\n            console.log('Add bunch of data');\n            await this.dataService.addData(address, result.transactions, this.db);\n            if (callback) {\n                await callback?.();\n            }\n            const downloadStatus = (await this.getDownloadStatus(address, this.db))?.status || 'false';\n            if (existingData && downloadStatus === 'true') {\n                console.log(`Found existing boxId in db for ${address}, no need to download more.`);\n            }\n            else if (itemsz >= this.downloadInitialSize) {\n                await this.setDownloadStatus(address, 'false', this.db);\n                console.log(`Downloading all tx's for : ${address}`);\n                await this.downloadAllForAddress(address, 0, this.db, useNode, callback);\n            }\n        }\n        catch (e) {\n            console.error(e);\n        }\n        finally {\n            this.decreaseBusyCounter(address);\n            this.dataService.purgeData(this.db);\n            console.log(this.busyCounter);\n        }\n    }\n}\n\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nclass ServiceWorkerEventSender {\n    async sendEvent(event) {\n        const clientsList = await self.clients.matchAll({\n            type: 'window',\n            includeUncontrolled: true,\n        });\n        for (const client of clientsList) {\n            client.postMessage(event);\n        }\n    }\n}\nclass ProcessEventService {\n    eventSender;\n    services = null;\n    constructor(eventSender) {\n        this.eventSender = eventSender;\n    }\n    async initServices() {\n        //if (this.services) return this.services;\n        const db = await this.initIndexedDB();\n        const chartService = new ChartService();\n        const rewardDataService = new RewardDataService(db, chartService, this.eventSender);\n        const activepermitsDataService = new ActivePermitsDataService(db);\n        const myWatcherDataService = new MyWatcherDataService(db, activepermitsDataService);\n        const chainPerformanceDataService = new ChainPerformanceDataService(db, this.eventSender);\n        const downloadService = new DownloadService(rs_FullDownloadsBatchSize, rs_InitialNDownloads, rewardDataService, myWatcherDataService, this.eventSender, db);\n        const downloadMyWatchersService = new DownloadService(rs_FullDownloadsBatchSize, rs_InitialNDownloads, myWatcherDataService, myWatcherDataService, this.eventSender, db);\n        const downloadActivePermitsService = new DownloadService(rs_FullDownloadsBatchSize, rs_InitialNDownloads, activepermitsDataService, myWatcherDataService, this.eventSender, db);\n        const downloadPerfService = new DownloadService(rs_PerfFullDownloadsBatchSize, rs_PerfInitialNDownloads, chainPerformanceDataService, myWatcherDataService, this.eventSender, db);\n        this.services = {\n            dataService: rewardDataService,\n            chainPerformanceDataService: chainPerformanceDataService,\n            myWatcherDataService: myWatcherDataService,\n            downloadService,\n            chartService,\n            downloadPerfService: downloadPerfService,\n            downloadMyWatchersService: downloadMyWatchersService,\n            downloadActivePermitsService: downloadActivePermitsService,\n            activePermitsDataService: activepermitsDataService,\n        };\n        return this.services;\n    }\n    async processEvent(event) {\n        if (event.type === 'StatisticsScreenLoaded' ||\n            event.type === 'PerformanceScreenLoaded' ||\n            event.type === 'MyWatchersScreenLoaded' ||\n            event.type === 'RequestInputsDownload') {\n            const { dataService, downloadService, downloadPerfService, downloadMyWatchersService, downloadActivePermitsService, chartService, chainPerformanceDataService, myWatcherDataService, activePermitsDataService, } = await this.initServices();\n            if (event.type === 'RequestInputsDownload') {\n                await this.processRequestInputsDownload(event, chartService, dataService, downloadService);\n            }\n            else if (event.type === 'StatisticsScreenLoaded') {\n                await this.processStatisticsScreenLoaded(dataService, downloadService);\n            }\n            else if (event.type === 'MyWatchersScreenLoaded') {\n                await this.processMyWatchersScreenLoaded(event, myWatcherDataService, downloadMyWatchersService, activePermitsDataService, downloadActivePermitsService);\n            }\n            else if (event.type === 'PerformanceScreenLoaded') {\n                await this.processPerformanceScreenLoaded(chainPerformanceDataService, downloadPerfService);\n            }\n        }\n    }\n    async processPerformanceScreenLoaded(chainPerformanceDataService, downloadPerfService) {\n        console.log('Rosen service worker received PerformanceScreenLoaded');\n        try {\n            console.log('Downloading perftxs.');\n            const perfTxs = await chainPerformanceDataService.getPerfTxs();\n            this.eventSender.sendEvent({\n                type: 'PerfChartChanged',\n                data: perfTxs,\n            });\n            downloadPerfService.downloadForAddress(hotWalletAddress, true);\n        }\n        catch (error) {\n            console.error('Error initializing IndexedDB or downloading addresses:', error);\n        }\n    }\n    async processMyWatchersScreenLoaded(event, myWatcherDataService, downloadMyWatchersService, activePermitsDataService, downloadActivePermitsService) {\n        const addresses = event.data.addresses;\n        console.log('Rosen service worker received MyWatchersScreenLoaded initiating syncing of data by downloading from blockchain');\n        try {\n            let permits = await myWatcherDataService.getAdressPermits(addresses);\n            let chainTypes = this.extractChaintTypes(permits, addresses);\n            this.sendPermitsChangedEvent(permits);\n            if (chainTypes.size === 0) {\n                await downloadMyWatchersService.downloadForChainPermitAddresses(addresses);\n                permits = await this.sendPermitChangedEvent(myWatcherDataService, addresses);\n                let chainTypes = this.extractChaintTypes(permits, addresses);\n                await this.processActivePermits(chainTypes, activePermitsDataService, myWatcherDataService, addresses, downloadActivePermitsService);\n            }\n            else {\n                await this.processActivePermits(chainTypes, activePermitsDataService, myWatcherDataService, addresses, downloadActivePermitsService);\n                await downloadMyWatchersService.downloadForChainPermitAddresses(addresses);\n                await this.sendPermitChangedEvent(myWatcherDataService, addresses);\n                let newChainTypes = this.extractChaintTypes(await myWatcherDataService.getAdressPermits(addresses), addresses);\n                if (newChainTypes.size !== chainTypes.size ||\n                    [...newChainTypes].some((ct) => !chainTypes.has(ct))) {\n                    await this.processActivePermits(newChainTypes, activePermitsDataService, myWatcherDataService, addresses, downloadActivePermitsService);\n                }\n            }\n        }\n        catch (error) {\n            console.error('Error initializing IndexedDB or downloading addresses:', error);\n        }\n    }\n    extractChaintTypes(permits, addresses) {\n        let chainTypes = new Set();\n        for (const permit of Object.values(permits)) {\n            if (permit && permit.chainType && addresses.includes(permit.address)) {\n                chainTypes.add(permit.chainType);\n            }\n        }\n        return chainTypes;\n    }\n    async processActivePermits(chainTypes, activePermitsDataService, myWatcherDataService, addresses, downloadActivePermitsService) {\n        await Promise.all(Array.from(chainTypes).map(async (chainType) => {\n            await activePermitsDataService.downloadOpenBoxes(chainType);\n        }));\n        await this.sendPermitChangedEvent(myWatcherDataService, addresses);\n        await Promise.all(Array.from(chainTypes).map(async (chainType) => {\n            await downloadActivePermitsService.downloadForActivePermitAddresses(addresses, chainType);\n        }));\n    }\n    async sendPermitChangedEvent(myWatcherDataService, addresses) {\n        let permits = await myWatcherDataService.getAdressPermits(addresses);\n        this.eventSender.sendEvent({\n            type: 'PermitsChanged',\n            data: permits,\n        });\n        return permits;\n    }\n    sendPermitsChangedEvent(permits) {\n        this.eventSender.sendEvent({\n            type: 'PermitsChanged',\n            data: permits,\n        });\n    }\n    async processStatisticsScreenLoaded(dataService, downloadService) {\n        console.log('Rosen service worker received StatisticsScreenLoaded initiating syncing of data by downloading from blockchain');\n        try {\n            const inputs = await dataService.getSortedInputs();\n            this.eventSender.sendEvent({\n                type: 'InputsChanged',\n                data: inputs,\n            });\n            await downloadService.downloadForAddresses();\n        }\n        catch (error) {\n            console.error('Error initializing IndexedDB or downloading addresses:', error);\n        }\n    }\n    async processRequestInputsDownload(event, chartService, dataService, downloadService) {\n        console.log('Rosen service worker received RequestInputsDownload initiating syncing of data by downloading from blockchain, event.data: ' +\n            event.data);\n        try {\n            const addressCharts = await chartService.getAddressCharts(await dataService.getSortedInputs());\n            this.eventSender.sendEvent({\n                type: 'AddressChartChanged',\n                data: addressCharts,\n            });\n            if (event.data && typeof event.data === 'string') {\n                await downloadService.downloadForAddress(event.data, true);\n            }\n            else {\n                await downloadService.downloadForAddresses();\n            }\n        }\n        catch (error) {\n            console.error('Error initializing IndexedDB or downloading addresses:', error);\n        }\n    }\n    // IndexedDB Initialization\n    async initIndexedDB() {\n        return new Promise((resolve, reject) => {\n            let dbName = rs_DbName;\n            const request = indexedDB.open(dbName);\n            request.onsuccess = (event) => {\n                const db = event.target.result;\n                resolve(db);\n            };\n            request.onerror = (event) => {\n                console.error('Error opening IndexedDB:', event.target.error);\n                reject(event.target.error);\n            };\n        });\n    }\n}\n/* eslint-disable @typescript-eslint/no-explicit-any */\nif (typeof window !== 'undefined') {\n    window.ProcessEventService = ProcessEventService;\n}\n\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nclass MyWatcherDataService extends DataService {\n    db;\n    activePermitsDataService;\n    async getExistingData(transaction, address) {\n        for (const input of transaction.inputs) {\n            if (input.boxId) {\n                const data = await this.getDataById(this.createUniqueId(input.boxId, transaction.id, address), this.db);\n                if (data) {\n                    return data;\n                }\n            }\n        }\n        for (const output of transaction.outputs) {\n            if (output.boxId) {\n                const data = await this.getDataById(this.createUniqueId(output.boxId, transaction.id, address), this.db);\n                if (data) {\n                    return data;\n                }\n            }\n        }\n        return null;\n    }\n    constructor(db, activePermitsDataService) {\n        super(db);\n        this.db = db;\n        this.activePermitsDataService = activePermitsDataService;\n    }\n    createUniqueId(boxId, transactionId, address) {\n        const str = `${transactionId}_${boxId}_${address}`;\n        let hash = 0, i, chr;\n        for (i = 0; i < str.length; i++) {\n            chr = str.charCodeAt(i);\n            hash = (hash << 5) - hash + chr;\n            hash |= 0;\n        }\n        return hash.toString();\n    }\n    getDataType() {\n        return 'permit';\n    }\n    async getWatcherPermits() {\n        const permitsPromise = this.getData(rs_PermitTxStoreName);\n        console.log('Retrieving watcher permits and such');\n        try {\n            const permits = await permitsPromise;\n            permits.forEach((permit) => {\n                permit.assets = permit.assets\n                    .filter((asset) => asset.tokenId == rs_RSNTokenId)\n                    .map((asset_1) => {\n                    return asset_1;\n                });\n            });\n            permits.sort((a, b) => b.date.getTime() - a.date.getTime());\n            return await new Promise((resolve) => {\n                resolve(permits);\n            });\n        }\n        catch (error) {\n            console.error(error);\n            return [];\n        }\n    }\n    shouldAddToDb(address, assets) {\n        return (address != null &&\n            address.length > 0 &&\n            address.length <= 100 &&\n            assets.some((asset) => asset.tokenId == rs_RSNTokenId));\n    }\n    async getAdressPermits(addresses) {\n        const permits = await this.getWatcherPermits();\n        const widSums = {};\n        const permitInfo = [];\n        for (const permit of permits) {\n            const sum = permit.assets.reduce((acc, asset) => {\n                if (asset.tokenId == rs_RSNTokenId) {\n                    return acc + asset.amount / Math.pow(10, rs_RSNDecimals);\n                }\n                return acc;\n            }, 0);\n            if (widSums[permit.wid]) {\n                widSums[permit.wid] += sum;\n            }\n            else {\n                widSums[permit.wid] = sum;\n            }\n        }\n        for (const permit of permits) {\n            if (!permitInfo.some((p) => p.address == permit.address)) {\n                permitInfo.push({\n                    address: permit.address,\n                    wid: permit.wid,\n                    lockedRSN: widSums[permit.wid] || 0,\n                    activeLockedRSN: 0,\n                    chainType: permit.chainType,\n                });\n            }\n        }\n        let addressActivePermits = await this.activePermitsDataService.getAdressActivePermits(addresses);\n        for (const activePermit of addressActivePermits) {\n            const info = permitInfo.find((p) => p.address === activePermit.address);\n            if (info) {\n                info.activeLockedRSN += rs_PermitCost;\n            }\n        }\n        return permitInfo;\n    }\n    async addData(address, transactions, db) {\n        return new Promise((resolve, reject) => {\n            // Create a temporary array to hold PermitTx items before bulk insertion\n            const tempData = [];\n            transactions.forEach((item) => {\n                let iwids = item.inputs\n                    .flatMap((input) => input.assets)\n                    .filter((asset) => asset.amount == 2 || asset.amount == 3)\n                    .flatMap((a) => a.tokenId);\n                let owids = item.outputs\n                    .flatMap((output) => output.assets)\n                    .filter((asset) => asset.amount == 2 || asset.amount == 3)\n                    .flatMap((a) => a.tokenId);\n                const allWids = Array.from(new Set([...iwids, ...owids]));\n                item.inputs.forEach((input) => {\n                    if (this.shouldAddToDb(input.address, input.assets) === false) {\n                        return;\n                    }\n                    input.inputDate = new Date(item.timestamp);\n                    input.assets = input.assets.filter((a) => a.tokenId == rs_RSNTokenId || a.amount == 2 || a.amount == 3);\n                    let wid;\n                    for (wid of allWids) {\n                        const PermitTx = {\n                            id: this.createUniqueId(input.boxId, item.id, address),\n                            address: input.address,\n                            date: input.inputDate,\n                            boxId: input.boxId,\n                            assets: input.assets || [],\n                            wid: wid ?? '',\n                            chainType: getChainTypeForPermitAddress(address),\n                            transactionId: item.id,\n                        };\n                        if (PermitTx.assets.length > 0) {\n                            tempData.push(PermitTx);\n                        }\n                    }\n                });\n                item.outputs.forEach((output) => {\n                    if (this.shouldAddToDb(output.address, output.assets) === false) {\n                        return;\n                    }\n                    output.outputDate = new Date(item.timestamp);\n                    output.assets = output.assets.filter((a) => a.tokenId == rs_RSNTokenId || a.amount == 2 || a.amount == 3);\n                    output.assets.forEach((a) => {\n                        a.amount = -a.amount;\n                    });\n                    let wid;\n                    for (wid of allWids) {\n                        const PermitTx = {\n                            id: this.createUniqueId(output.boxId, item.id, address),\n                            address: output.address,\n                            date: output.outputDate,\n                            boxId: output.boxId,\n                            assets: output.assets || [],\n                            wid: wid ?? '',\n                            chainType: getChainTypeForPermitAddress(address),\n                            transactionId: item.id,\n                        };\n                        if (PermitTx.assets.length > 0) {\n                            tempData.push(PermitTx);\n                        }\n                    }\n                });\n            });\n            const transaction = db.transaction([rs_PermitTxStoreName], 'readwrite');\n            const objectStore = transaction.objectStore(rs_PermitTxStoreName);\n            const putPromises = tempData.map((PermitTx) => {\n                return new Promise((putResolve, putReject) => {\n                    const request = objectStore.put(PermitTx);\n                    request.onsuccess = () => putResolve();\n                    request.onerror = (event) => putReject(event.target.error);\n                });\n            });\n            Promise.all(putPromises)\n                .then(async () => {\n                /*\n      const permits = await this.getAdressPermits();\n      \n                this.eventSender.sendEvent({\n                  type: 'PermitsChanged',\n                  data: permits,\n                });\n                */\n                resolve();\n            })\n                .catch(reject);\n        });\n    }\n    // Get Data by BoxId from IndexedDB\n    async getDataById(id, db) {\n        return new Promise((resolve, reject) => {\n            const transaction = db.transaction([rs_PermitTxStoreName], 'readonly');\n            const objectStore = transaction.objectStore(rs_PermitTxStoreName);\n            const request = objectStore.get(id);\n            request.onsuccess = () => {\n                const result = request.result;\n                if (!result || result.id !== id) {\n                    resolve(null);\n                }\n                else {\n                    resolve(result);\n                }\n            };\n            request.onerror = (event) => reject(event.target.error);\n        });\n    }\n    async getSortedPermits() {\n        const permitsPromise = await this.getWatcherPermits();\n        const sortedPermits = [];\n        console.log('start retrieving permits from database');\n        try {\n            const permits = await permitsPromise;\n            permits.forEach((permitTx) => {\n                sortedPermits.push({\n                    id: permitTx.id,\n                    date: permitTx.date,\n                    address: permitTx.address,\n                    assets: permitTx.assets,\n                    wid: permitTx.wid,\n                    boxId: permitTx.boxId,\n                    chainType: permitTx.chainType ?? getChainTypeForPermitAddress(permitTx.address),\n                    transactionId: permitTx.transactionId,\n                });\n            });\n            console.log('done retrieving permits from database ' + permits.length + ' permits');\n            return await new Promise((resolve) => {\n                resolve(sortedPermits);\n            });\n        }\n        catch (error) {\n            console.error(error);\n            return sortedPermits;\n        }\n    }\n}\n\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nclass ActivePermitsDataService extends DataService {\n    db;\n    async getExistingData(transaction, address) {\n        const dbTransaction = this.db.transaction([rs_ActivePermitTxStoreName], 'readonly');\n        const objectStore = dbTransaction.objectStore(rs_ActivePermitTxStoreName);\n        for (const input of transaction.inputs) {\n            if (input.boxId) {\n                const data = await this.getDataById(this.createUniqueId(input.boxId, transaction.id, address), objectStore);\n                if (data) {\n                    return data;\n                }\n            }\n        }\n        for (const output of transaction.outputs) {\n            if (output.boxId) {\n                const data = await this.getDataById(this.createUniqueId(output.boxId, transaction.id, address), objectStore);\n                if (data) {\n                    return data;\n                }\n            }\n        }\n        return null;\n    }\n    constructor(db) {\n        super(db);\n        this.db = db;\n    }\n    createUniqueId(boxId, transactionId, address) {\n        const str = `${transactionId}_${boxId}_${address}`;\n        let hash = 0, i, chr;\n        for (i = 0; i < str.length; i++) {\n            chr = str.charCodeAt(i);\n            hash = (hash << 5) - hash + chr;\n            hash |= 0;\n        }\n        return hash.toString();\n    }\n    getDataType() {\n        return 'activepermit';\n    }\n    getMaxDownloadDateDifference() {\n        return 204800000;\n    }\n    async getWatcherPermits() {\n        const permitsPromise = this.getData(rs_ActivePermitTxStoreName);\n        console.log('Retrieving watcher active permits');\n        try {\n            const permits = await permitsPromise;\n            permits.forEach((permit) => {\n                permit.assets = permit.assets\n                    .filter((asset) => asset.tokenId != null && asset.tokenId in rwtTokenIds)\n                    .map((asset_1) => {\n                    return asset_1;\n                });\n            });\n            permits.sort((a, b) => b.date.getTime() - a.date.getTime());\n            return await new Promise((resolve) => {\n                resolve(permits);\n            });\n        }\n        catch (error) {\n            console.error(error);\n            return [];\n        }\n    }\n    async downloadOpenBoxes(chainType) {\n        let addresses = [];\n        Object.entries(permitBulkAddresses).forEach(([key, address]) => {\n            if (key === chainType && address != null) {\n                addresses.push(address);\n            }\n        });\n        const downloadPromises = addresses.map(async (address) => {\n            let url = 'https://api.ergoplatform.com/api/v1/boxes/unspent/byAddress/' + address;\n            const response = await fetch(url);\n            if (!response.ok)\n                throw new Error(`Server returned code: ${response.status}`);\n            await this.saveOpenBoxes(address, await response.json(), this.db);\n        });\n        await Promise.all(downloadPromises);\n    }\n    async saveOpenBoxes(address, openBoxesJson, db) {\n        return new Promise((resolve, reject) => {\n            const transaction = db.transaction([rs_OpenBoxesStoreName], 'readwrite');\n            const objectStore = transaction.objectStore(rs_OpenBoxesStoreName);\n            const boxes = { address: address, openBoxesJson: openBoxesJson };\n            const request = objectStore.put(boxes);\n            request.onsuccess = () => resolve();\n            request.onerror = (event) => reject(event.target.error);\n        });\n    }\n    async getOpenBoxesMap(db) {\n        const openBoxesMap = {};\n        const transaction = db.transaction([rs_OpenBoxesStoreName], 'readonly');\n        const objectStore = transaction.objectStore(rs_OpenBoxesStoreName);\n        for (const [, address] of Object.entries(permitBulkAddresses)) {\n            if (address) {\n                openBoxesMap[address] = await new Promise((resolve, reject) => {\n                    const request = objectStore.get(address);\n                    request.onsuccess = () => {\n                        const result = request.result;\n                        resolve(JSON.stringify(result?.openBoxesJson ?? null));\n                    };\n                    request.onerror = (event) => reject(event.target.error);\n                });\n            }\n        }\n        return openBoxesMap;\n    }\n    shouldAddInputToDb(address) {\n        return ((address != null && address.length <= 100) ||\n            Object.values(permitTriggerAddresses).includes(address));\n    }\n    shouldAddOutputToDb(address) {\n        return (Object.values(permitBulkAddresses).includes(address) ||\n            Object.values(permitTriggerAddresses).includes(address) ||\n            Object.values(rewardAddresses).includes(address));\n    }\n    async getAdressActivePermits(addresses = null) {\n        const permits = await this.getWatcherPermits();\n        const openBoxesMap = await this.getOpenBoxesMap(this.db);\n        let addressPermits = new Array();\n        if (addresses != null && addresses.length > 0) {\n            addressPermits = permits.filter((info) => addresses.some((addr) => addr === info.address));\n        }\n        let result = new Array();\n        const permitsByTxId = {};\n        for (const permit of permits) {\n            if (!permitsByTxId[permit.transactionId]) {\n                permitsByTxId[permit.transactionId] = [];\n            }\n            permitsByTxId[permit.transactionId].push(permit);\n        }\n        const boxIdMap = {};\n        for (const permit of permits) {\n            if (!boxIdMap[permit.boxId]) {\n                boxIdMap[permit.boxId] = [];\n            }\n            boxIdMap[permit.boxId].push(permit);\n        }\n        for (const permit of addressPermits) {\n            let outputs = (permitsByTxId[permit.transactionId] ?? []).filter((o) => Object.values(permitTriggerAddresses).some((address) => address === o.address));\n            let foundResolved = false;\n            for (const output of outputs) {\n                let cnt = boxIdMap[output.boxId] ?? [];\n                if (cnt.length >= 2) {\n                    foundResolved = true;\n                    for (const p of cnt) {\n                        let txs = permitsByTxId[p.transactionId]?.filter((t) => Object.values(permitBulkAddresses).includes(t.address)) ?? [];\n                        await Promise.all(txs.map(async (t) => {\n                            let openBoxes = openBoxesMap[t.address];\n                            if (openBoxes && openBoxes.indexOf(t.boxId) !== -1) {\n                                if (!result.some((r) => r.boxId === t.boxId)) {\n                                    result.push(permit);\n                                }\n                            }\n                        }));\n                    }\n                }\n            }\n            if (foundResolved === false) {\n                result.push(permit);\n            }\n        }\n        return result;\n    }\n    async addData(address, transactions, db) {\n        return new Promise((resolve, reject) => {\n            // Create a temporary array to hold PermitTx items before bulk insertion\n            const tempData = [];\n            transactions.forEach((item) => {\n                item.inputs.forEach((input) => {\n                    if (this.shouldAddInputToDb(input.address) === false) {\n                        return;\n                    }\n                    input.inputDate = new Date(item.timestamp);\n                    input.assets = input.assets.filter((a) => a.tokenId != null && a.tokenId in rwtTokenIds);\n                    const PermitTx = {\n                        id: this.createUniqueId(input.boxId, item.id, address),\n                        address: input.address,\n                        date: input.inputDate,\n                        boxId: input.boxId,\n                        assets: input.assets || [],\n                        wid: '',\n                        chainType: getChainTypeForPermitAddress(address),\n                        transactionId: item.id,\n                    };\n                    tempData.push(PermitTx);\n                });\n                item.outputs.forEach((output) => {\n                    if (this.shouldAddOutputToDb(output.address) === false) {\n                        return;\n                    }\n                    output.outputDate = new Date(item.timestamp);\n                    output.assets = output.assets.filter((a) => a.tokenId != null && a.tokenId in rwtTokenIds);\n                    output.assets.forEach((a) => {\n                        a.amount = -a.amount;\n                    });\n                    const PermitTx = {\n                        id: this.createUniqueId(output.boxId, item.id, address),\n                        address: output.address,\n                        date: output.outputDate,\n                        boxId: output.boxId,\n                        assets: output.assets || [],\n                        wid: '',\n                        chainType: getChainTypeForPermitAddress(address),\n                        transactionId: item.id,\n                    };\n                    tempData.push(PermitTx);\n                });\n            });\n            const transaction = db.transaction([rs_ActivePermitTxStoreName], 'readwrite');\n            const objectStore = transaction.objectStore(rs_ActivePermitTxStoreName);\n            const putPromises = tempData.map((PermitTx) => {\n                return new Promise((putResolve, putReject) => {\n                    const request = objectStore.put(PermitTx);\n                    request.onsuccess = () => putResolve();\n                    request.onerror = (event) => putReject(event.target.error);\n                });\n            });\n            Promise.all(putPromises)\n                .then(async () => {\n                resolve();\n            })\n                .catch(reject);\n        });\n    }\n    async purgeData(db) {\n        let permitTxs = await this.getData(rs_ActivePermitTxStoreName);\n        permitTxs = (await permitTxs).sort((a, b) => new Date(a.date).getTime() - new Date(b.date).getTime());\n        let permitTx = null;\n        if (permitTxs.length >= rs_FullDownloadsBatchSize) {\n            permitTx = permitTxs[rs_FullDownloadsBatchSize - 1];\n        }\n        else {\n            permitTx = permitTxs[permitTxs.length - 1];\n        }\n        let maxDiff = this.getMaxDownloadDateDifference();\n        const now = Date.now();\n        if (permitTx != null && now - permitTx.date.getTime() > maxDiff) {\n            maxDiff = now - permitTx.date.getTime();\n        }\n        return new Promise((resolve, reject) => {\n            const transaction = db.transaction([rs_ActivePermitTxStoreName], 'readwrite');\n            const objectStore = transaction.objectStore(rs_ActivePermitTxStoreName);\n            const request = objectStore.openCursor();\n            request.onsuccess = (event) => {\n                const cursor = event.target.result;\n                if (cursor) {\n                    const permitTx = cursor.value;\n                    if (permitTx.date && now - new Date(permitTx.date).getTime() > maxDiff) {\n                        cursor.delete();\n                    }\n                    cursor.continue();\n                }\n                else {\n                    resolve();\n                }\n            };\n            request.onerror = (event) => reject(event.target.error);\n        });\n    }\n    // Get Data by BoxId from IndexedDB\n    async getDataById(id, objectStore) {\n        return new Promise((resolve, reject) => {\n            const request = objectStore.get(id);\n            request.onsuccess = () => {\n                const result = request.result;\n                if (!result || result.id !== id) {\n                    resolve(null);\n                }\n                else {\n                    resolve(result);\n                }\n            };\n            request.onerror = (event) => reject(event.target.error);\n        });\n    }\n    async getSortedPermits() {\n        const permitsPromise = await this.getWatcherPermits();\n        const sortedPermits = [];\n        console.log('start retrieving permits from database');\n        try {\n            const permits = await permitsPromise;\n            permits.forEach((permitTx) => {\n                sortedPermits.push({\n                    id: permitTx.id,\n                    date: permitTx.date,\n                    address: permitTx.address,\n                    assets: permitTx.assets,\n                    wid: permitTx.wid,\n                    boxId: permitTx.boxId,\n                    transactionId: permitTx.transactionId,\n                    chainType: permitTx.chainType ?? getChainTypeForPermitAddress(permitTx.address),\n                });\n            });\n            console.log('done retrieving permits from database ' + permits.length + ' permits');\n            return await new Promise((resolve) => {\n                resolve(sortedPermits);\n            });\n        }\n        catch (error) {\n            console.error(error);\n            return sortedPermits;\n        }\n    }\n}\n"],
  "mappings": "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",
  "names": ["ChainType", "Period", "Currency", "chainTypes", "permitTx"]
}
