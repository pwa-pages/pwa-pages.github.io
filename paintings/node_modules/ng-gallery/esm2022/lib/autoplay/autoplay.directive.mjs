import { Directive, Input } from '@angular/core';
import { delay, of, switchMap, tap, EMPTY } from 'rxjs';
import * as i0 from "@angular/core";
import * as i1 from "../services/gallery.service";
import * as i2 from "../utils/img-manager";
export class AutoplayDirective {
    constructor(_gallery, _imgManager) {
        this._gallery = _gallery;
        this._imgManager = _imgManager;
    }
    ngAfterViewInit() {
        this._galleryRef = this._gallery.ref(this.galleryId);
        this._subscribe();
        if (this.config.autoplay) {
            this._galleryRef.play();
        }
    }
    ngOnChanges(changes) {
        if (this._galleryRef && changes.config?.currentValue.autoplay !== changes.config?.previousValue.autoplay) {
            this.config.autoplay ? this._galleryRef.play() : this._galleryRef.stop();
        }
    }
    ngOnDestroy() {
        this._unsubscribe();
    }
    _subscribe() {
        this._unsubscribe();
        this._currentSubscription = this._galleryRef.playingChanged.pipe(switchMap((state) => {
            if (state.isPlaying) {
                return this._imgManager.getActiveItem(this._galleryRef.state).pipe(switchMap(() => of({}).pipe(delay(this.config.autoplayInterval), tap(() => {
                    if (this._galleryRef.stateSnapshot.hasNext) {
                        this._galleryRef.next(this.config.scrollBehavior);
                    }
                    else {
                        this._galleryRef.set(0, this.config.scrollBehavior);
                    }
                }))));
            }
            return EMPTY;
        })).subscribe();
    }
    _unsubscribe() {
        this._currentSubscription?.unsubscribe();
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.2.1", ngImport: i0, type: AutoplayDirective, deps: [{ token: i1.Gallery }, { token: i2.ImgManager }], target: i0.ɵɵFactoryTarget.Directive }); }
    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "14.0.0", version: "18.2.1", type: AutoplayDirective, isStandalone: true, selector: "gallery-core[autoplay]", inputs: { config: "config", galleryId: "galleryId" }, usesOnChanges: true, ngImport: i0 }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.2.1", ngImport: i0, type: AutoplayDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: 'gallery-core[autoplay]',
                    standalone: true
                }]
        }], ctorParameters: () => [{ type: i1.Gallery }, { type: i2.ImgManager }], propDecorators: { config: [{
                type: Input
            }], galleryId: [{
                type: Input
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXV0b3BsYXkuZGlyZWN0aXZlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vcHJvamVjdHMvbmctZ2FsbGVyeS9zcmMvbGliL2F1dG9wbGF5L2F1dG9wbGF5LmRpcmVjdGl2ZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsU0FBUyxFQUFFLEtBQUssRUFBc0QsTUFBTSxlQUFlLENBQUM7QUFDckcsT0FBTyxFQUFnQixLQUFLLEVBQUUsRUFBRSxFQUFFLFNBQVMsRUFBRSxHQUFHLEVBQUUsS0FBSyxFQUFFLE1BQU0sTUFBTSxDQUFDOzs7O0FBV3RFLE1BQU0sT0FBTyxpQkFBaUI7SUFVNUIsWUFBb0IsUUFBaUIsRUFBVSxXQUF1QjtRQUFsRCxhQUFRLEdBQVIsUUFBUSxDQUFTO1FBQVUsZ0JBQVcsR0FBWCxXQUFXLENBQVk7SUFDdEUsQ0FBQztJQUVELGVBQWU7UUFDYixJQUFJLENBQUMsV0FBVyxHQUFHLElBQUksQ0FBQyxRQUFRLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsQ0FBQztRQUNyRCxJQUFJLENBQUMsVUFBVSxFQUFFLENBQUM7UUFDbEIsSUFBSSxJQUFJLENBQUMsTUFBTSxDQUFDLFFBQVEsRUFBRSxDQUFDO1lBQ3pCLElBQUksQ0FBQyxXQUFXLENBQUMsSUFBSSxFQUFFLENBQUM7UUFDMUIsQ0FBQztJQUNILENBQUM7SUFFRCxXQUFXLENBQUMsT0FBc0I7UUFDaEMsSUFBSSxJQUFJLENBQUMsV0FBVyxJQUFJLE9BQU8sQ0FBQyxNQUFNLEVBQUUsWUFBWSxDQUFDLFFBQVEsS0FBSyxPQUFPLENBQUMsTUFBTSxFQUFFLGFBQWEsQ0FBQyxRQUFRLEVBQUUsQ0FBQztZQUN6RyxJQUFJLENBQUMsTUFBTSxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxJQUFJLEVBQUUsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxJQUFJLEVBQUUsQ0FBQztRQUMzRSxDQUFDO0lBQ0gsQ0FBQztJQUVELFdBQVc7UUFDVCxJQUFJLENBQUMsWUFBWSxFQUFFLENBQUM7SUFDdEIsQ0FBQztJQUdPLFVBQVU7UUFDaEIsSUFBSSxDQUFDLFlBQVksRUFBRSxDQUFDO1FBRXBCLElBQUksQ0FBQyxvQkFBb0IsR0FBRyxJQUFJLENBQUMsV0FBVyxDQUFDLGNBQWMsQ0FBQyxJQUFJLENBQzlELFNBQVMsQ0FBQyxDQUFDLEtBQW1CLEVBQUUsRUFBRTtZQUNoQyxJQUFJLEtBQUssQ0FBQyxTQUFTLEVBQUUsQ0FBQztnQkFDcEIsT0FBTyxJQUFJLENBQUMsV0FBVyxDQUFDLGFBQWEsQ0FBQyxJQUFJLENBQUMsV0FBVyxDQUFDLEtBQUssQ0FBQyxDQUFDLElBQUksQ0FDaEUsU0FBUyxDQUFDLEdBQUcsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBQyxJQUFJLENBQ3pCLEtBQUssQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLGdCQUFnQixDQUFDLEVBQ25DLEdBQUcsQ0FBQyxHQUFHLEVBQUU7b0JBQ1AsSUFBSSxJQUFJLENBQUMsV0FBVyxDQUFDLGFBQWEsQ0FBQyxPQUFPLEVBQUUsQ0FBQzt3QkFDM0MsSUFBSSxDQUFDLFdBQVcsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxjQUFjLENBQUMsQ0FBQztvQkFDcEQsQ0FBQzt5QkFBTSxDQUFDO3dCQUNOLElBQUksQ0FBQyxXQUFXLENBQUMsR0FBRyxDQUFDLENBQUMsRUFBRSxJQUFJLENBQUMsTUFBTSxDQUFDLGNBQWMsQ0FBQyxDQUFDO29CQUN0RCxDQUFDO2dCQUNILENBQUMsQ0FBQyxDQUNILENBQUMsQ0FDSCxDQUFDO1lBQ0osQ0FBQztZQUNELE9BQU8sS0FBSyxDQUFDO1FBQ2YsQ0FBQyxDQUFDLENBQ0gsQ0FBQyxTQUFTLEVBQUUsQ0FBQztJQUNoQixDQUFDO0lBRU8sWUFBWTtRQUNsQixJQUFJLENBQUMsb0JBQW9CLEVBQUUsV0FBVyxFQUFFLENBQUM7SUFDM0MsQ0FBQzs4R0ExRFUsaUJBQWlCO2tHQUFqQixpQkFBaUI7OzJGQUFqQixpQkFBaUI7a0JBSjdCLFNBQVM7bUJBQUM7b0JBQ1QsUUFBUSxFQUFFLHdCQUF3QjtvQkFDbEMsVUFBVSxFQUFFLElBQUk7aUJBQ2pCO3FHQU9VLE1BQU07c0JBQWQsS0FBSztnQkFFRyxTQUFTO3NCQUFqQixLQUFLIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgRGlyZWN0aXZlLCBJbnB1dCwgQWZ0ZXJWaWV3SW5pdCwgT25DaGFuZ2VzLCBPbkRlc3Ryb3ksIFNpbXBsZUNoYW5nZXMgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuaW1wb3J0IHsgU3Vic2NyaXB0aW9uLCBkZWxheSwgb2YsIHN3aXRjaE1hcCwgdGFwLCBFTVBUWSB9IGZyb20gJ3J4anMnO1xyXG5pbXBvcnQgeyBJbWdNYW5hZ2VyIH0gZnJvbSAnLi4vdXRpbHMvaW1nLW1hbmFnZXInO1xyXG5pbXBvcnQgeyBHYWxsZXJ5IH0gZnJvbSAnLi4vc2VydmljZXMvZ2FsbGVyeS5zZXJ2aWNlJztcclxuaW1wb3J0IHsgR2FsbGVyeVJlZiB9IGZyb20gJy4uL3NlcnZpY2VzL2dhbGxlcnktcmVmJztcclxuaW1wb3J0IHsgR2FsbGVyeVN0YXRlIH0gZnJvbSAnLi4vbW9kZWxzL2dhbGxlcnkubW9kZWwnO1xyXG5pbXBvcnQgeyBHYWxsZXJ5Q29uZmlnIH0gZnJvbSAnLi4vbW9kZWxzL2NvbmZpZy5tb2RlbCc7XHJcblxyXG5ARGlyZWN0aXZlKHtcclxuICBzZWxlY3RvcjogJ2dhbGxlcnktY29yZVthdXRvcGxheV0nLFxyXG4gIHN0YW5kYWxvbmU6IHRydWVcclxufSlcclxuZXhwb3J0IGNsYXNzIEF1dG9wbGF5RGlyZWN0aXZlIGltcGxlbWVudHMgQWZ0ZXJWaWV3SW5pdCwgT25DaGFuZ2VzLCBPbkRlc3Ryb3kge1xyXG5cclxuICBwcml2YXRlIF9jdXJyZW50U3Vic2NyaXB0aW9uOiBTdWJzY3JpcHRpb247XHJcblxyXG4gIHByaXZhdGUgX2dhbGxlcnlSZWY6IEdhbGxlcnlSZWY7XHJcblxyXG4gIEBJbnB1dCgpIGNvbmZpZzogR2FsbGVyeUNvbmZpZztcclxuXHJcbiAgQElucHV0KCkgZ2FsbGVyeUlkOiBzdHJpbmc7XHJcblxyXG4gIGNvbnN0cnVjdG9yKHByaXZhdGUgX2dhbGxlcnk6IEdhbGxlcnksIHByaXZhdGUgX2ltZ01hbmFnZXI6IEltZ01hbmFnZXIpIHtcclxuICB9XHJcblxyXG4gIG5nQWZ0ZXJWaWV3SW5pdCgpOiB2b2lkIHtcclxuICAgIHRoaXMuX2dhbGxlcnlSZWYgPSB0aGlzLl9nYWxsZXJ5LnJlZih0aGlzLmdhbGxlcnlJZCk7XHJcbiAgICB0aGlzLl9zdWJzY3JpYmUoKTtcclxuICAgIGlmICh0aGlzLmNvbmZpZy5hdXRvcGxheSkge1xyXG4gICAgICB0aGlzLl9nYWxsZXJ5UmVmLnBsYXkoKTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIG5nT25DaGFuZ2VzKGNoYW5nZXM6IFNpbXBsZUNoYW5nZXMpOiB2b2lkIHtcclxuICAgIGlmICh0aGlzLl9nYWxsZXJ5UmVmICYmIGNoYW5nZXMuY29uZmlnPy5jdXJyZW50VmFsdWUuYXV0b3BsYXkgIT09IGNoYW5nZXMuY29uZmlnPy5wcmV2aW91c1ZhbHVlLmF1dG9wbGF5KSB7XHJcbiAgICAgIHRoaXMuY29uZmlnLmF1dG9wbGF5ID8gdGhpcy5fZ2FsbGVyeVJlZi5wbGF5KCkgOiB0aGlzLl9nYWxsZXJ5UmVmLnN0b3AoKTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIG5nT25EZXN0cm95KCk6IHZvaWQge1xyXG4gICAgdGhpcy5fdW5zdWJzY3JpYmUoKTtcclxuICB9XHJcblxyXG5cclxuICBwcml2YXRlIF9zdWJzY3JpYmUoKTogdm9pZCB7XHJcbiAgICB0aGlzLl91bnN1YnNjcmliZSgpO1xyXG5cclxuICAgIHRoaXMuX2N1cnJlbnRTdWJzY3JpcHRpb24gPSB0aGlzLl9nYWxsZXJ5UmVmLnBsYXlpbmdDaGFuZ2VkLnBpcGUoXHJcbiAgICAgIHN3aXRjaE1hcCgoc3RhdGU6IEdhbGxlcnlTdGF0ZSkgPT4ge1xyXG4gICAgICAgIGlmIChzdGF0ZS5pc1BsYXlpbmcpIHtcclxuICAgICAgICAgIHJldHVybiB0aGlzLl9pbWdNYW5hZ2VyLmdldEFjdGl2ZUl0ZW0odGhpcy5fZ2FsbGVyeVJlZi5zdGF0ZSkucGlwZShcclxuICAgICAgICAgICAgc3dpdGNoTWFwKCgpID0+IG9mKHt9KS5waXBlKFxyXG4gICAgICAgICAgICAgIGRlbGF5KHRoaXMuY29uZmlnLmF1dG9wbGF5SW50ZXJ2YWwpLFxyXG4gICAgICAgICAgICAgIHRhcCgoKSA9PiB7XHJcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5fZ2FsbGVyeVJlZi5zdGF0ZVNuYXBzaG90Lmhhc05leHQpIHtcclxuICAgICAgICAgICAgICAgICAgdGhpcy5fZ2FsbGVyeVJlZi5uZXh0KHRoaXMuY29uZmlnLnNjcm9sbEJlaGF2aW9yKTtcclxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgIHRoaXMuX2dhbGxlcnlSZWYuc2V0KDAsIHRoaXMuY29uZmlnLnNjcm9sbEJlaGF2aW9yKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICApKVxyXG4gICAgICAgICAgKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIEVNUFRZO1xyXG4gICAgICB9KVxyXG4gICAgKS5zdWJzY3JpYmUoKTtcclxuICB9XHJcblxyXG4gIHByaXZhdGUgX3Vuc3Vic2NyaWJlKCk6IHZvaWQge1xyXG4gICAgdGhpcy5fY3VycmVudFN1YnNjcmlwdGlvbj8udW5zdWJzY3JpYmUoKTtcclxuICB9XHJcbn1cclxuIl19