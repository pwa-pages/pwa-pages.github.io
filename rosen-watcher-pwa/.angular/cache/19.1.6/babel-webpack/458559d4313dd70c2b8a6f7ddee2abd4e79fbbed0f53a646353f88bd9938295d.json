{"ast":null,"code":"import _asyncToGenerator from \"/home/pebblerye/pwa/pwa-pages.github.io/rosen-watcher-pwa/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { Subject } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nexport var EventType = /*#__PURE__*/function (EventType) {\n  EventType[\"StartFullDownload\"] = \"StartFullDownload\";\n  EventType[\"EndFullDownload\"] = \"EndFullDownload\";\n  EventType[\"RefreshInputs\"] = \"RefreshInputs\";\n  EventType[\"InputsChanged\"] = \"InputsChanged\";\n  EventType[\"PerfChartChanged\"] = \"PerfChartChanged\";\n  EventType[\"SwipeActivated\"] = \"SwipeActivated\";\n  EventType[\"SwipeDeActivated\"] = \"SwipeDeActivated\";\n  EventType[\"SwipeVertical\"] = \"SwipeVertical\";\n  EventType[\"StatisticsScreenLoaded\"] = \"StatisticsScreenLoaded\";\n  EventType[\"RequestInputsDownload\"] = \"RequestInputsDownload\";\n  EventType[\"WatchersScreenLoaded\"] = \"WatchersScreenLoaded\";\n  EventType[\"SettingsScreenLoaded\"] = \"SettingsScreenLoaded\";\n  EventType[\"PerformanceScreenLoaded\"] = \"PerformanceScreenLoaded\";\n  EventType[\"AddressChartChanged\"] = \"AddressChartChanged\";\n  EventType[\"WindowResized\"] = \"WindowResized\";\n  EventType[\"VersionUpdated\"] = \"VersionUpdated\";\n  return EventType;\n}(EventType || {});\nexport let EventService = /*#__PURE__*/(() => {\n  class EventService {\n    constructor(ngZone) {\n      this.ngZone = ngZone;\n      this.eventSubscriptions = this.resetSubscriptions();\n    }\n    resetSubscriptions() {\n      this.eventSubscriptions = {\n        [EventType.StartFullDownload]: new Subject(),\n        [EventType.EndFullDownload]: new Subject(),\n        [EventType.RefreshInputs]: new Subject(),\n        [EventType.InputsChanged]: new Subject(),\n        [EventType.PerfChartChanged]: new Subject(),\n        [EventType.SwipeActivated]: new Subject(),\n        [EventType.SwipeDeActivated]: new Subject(),\n        [EventType.SwipeVertical]: new Subject(),\n        [EventType.StatisticsScreenLoaded]: new Subject(),\n        [EventType.PerformanceScreenLoaded]: new Subject(),\n        [EventType.RequestInputsDownload]: new Subject(),\n        [EventType.AddressChartChanged]: new Subject(),\n        [EventType.VersionUpdated]: new Subject(),\n        [EventType.WatchersScreenLoaded]: new Subject(),\n        [EventType.SettingsScreenLoaded]: new Subject(),\n        [EventType.WindowResized]: new Subject()\n      };\n      return this.eventSubscriptions;\n    }\n    sendEvent(eventType) {\n      var _this = this;\n      return _asyncToGenerator(function* () {\n        console.log('Received event: ' + eventType);\n        _this.eventSubscriptions[eventType].next({});\n      })();\n    }\n    sendEventWithData(eventType, eventData, profile) {\n      var _this2 = this;\n      return _asyncToGenerator(function* () {\n        console.log('Received event: ' + eventType + ' for profile ' + profile);\n        _this2.eventSubscriptions[eventType].next(eventData);\n      })();\n    }\n    subscribeToEvent(eventType, callback) {\n      var _this3 = this;\n      return _asyncToGenerator(function* () {\n        const eventCallBack = callback;\n        yield _this3.subscribe(eventType, eventCallBack);\n      })();\n    }\n    subscribe(eventType, callback) {\n      var _this4 = this;\n      return _asyncToGenerator(function* () {\n        _this4.eventSubscriptions[eventType].subscribe((...eventData) => {\n          // Ensure Angular detects the change\n          _this4.ngZone.run(() => {\n            callback(...eventData);\n          });\n        });\n      })();\n    }\n    subscribeToAllEvents(callback) {\n      var _this5 = this;\n      return _asyncToGenerator(function* () {\n        Object.values(EventType).forEach(eventType => {\n          _this5.subscribeToEvent(eventType, (...args) => callback(eventType, ...args));\n        });\n      })();\n    }\n    unSubscribeAll(events) {\n      var _this6 = this;\n      return _asyncToGenerator(function* () {\n        for (const eventType of events) {\n          console.log('Unsubscribing all from ' + eventType);\n          _this6.eventSubscriptions[eventType].unsubscribe();\n          _this6.eventSubscriptions[eventType] = new Subject();\n        }\n      })();\n    }\n    static {\n      this.ɵfac = function EventService_Factory(__ngFactoryType__) {\n        return new (__ngFactoryType__ || EventService)(i0.ɵɵinject(i0.NgZone));\n      };\n    }\n    static {\n      this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n        token: EventService,\n        factory: EventService.ɵfac,\n        providedIn: 'root'\n      });\n    }\n  }\n  return EventService;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}