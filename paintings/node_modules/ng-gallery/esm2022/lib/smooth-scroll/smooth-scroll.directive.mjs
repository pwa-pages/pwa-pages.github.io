import { Directive, Inject, Input, Output, EventEmitter } from '@angular/core';
import { DOCUMENT } from '@angular/common';
import { Dir } from '@angular/cdk/bidi';
import { getRtlScrollAxisType, RtlScrollAxisType } from '@angular/cdk/platform';
import { Observable, Subject, of, take, merge, expand, fromEvent, switchMap, takeUntil, takeWhile, finalize } from 'rxjs';
import BezierEasing from './bezier-easing';
import * as i0 from "@angular/core";
import * as i1 from "@angular/cdk/bidi";
export class SmoothScroll {
    get _w() {
        return this._document.defaultView;
    }
    /**
     * Timing method
     */
    get _now() {
        return this._w.performance?.now?.bind(this._w.performance) || Date.now;
    }
    set smoothScroll(value) {
        if (value) {
            this._zone.runOutsideAngular(() => {
                this.scrollTo(value);
            });
        }
    }
    constructor(_document, _zone, _dir, _el) {
        this._document = _document;
        this._zone = _zone;
        this._dir = _dir;
        this._scrollController = new Subject();
        this._finished = new Subject();
        this.isScrollingChange = new EventEmitter();
        this._el = _el.nativeElement;
    }
    ngOnInit() {
        this._subscription = this._scrollController.pipe(switchMap((context) => {
            this._zone.run(() => {
                this.isScrollingChange.emit(true);
            });
            this._el.classList.add('g-scrolling');
            this._el.style.setProperty('--slider-scroll-snap-type', 'none');
            // Scroll each step recursively
            return of(null).pipe(expand(() => this._step(context).pipe(takeWhile((currContext) => this._isFinished(currContext)), takeUntil(this._finished))), finalize(() => this.resetElement()), takeUntil(this._interrupted()));
        })).subscribe();
    }
    ngOnDestroy() {
        this._subscription?.unsubscribe();
        this._scrollController.complete();
    }
    /**
     * changes scroll position inside an element
     */
    _scrollElement(x, y) {
        this._el.scrollLeft = x;
        this._el.scrollTop = y;
    }
    resetElement() {
        this._zone.run(() => {
            this.isScrollingChange.emit(false);
        });
        this._el.classList.remove('g-scrolling');
        if (!this._isInterruptedByMouse) {
            this._el.style.setProperty('--slider-scroll-snap-type', this.adapter.scrollSnapType);
        }
        this._isInterruptedByMouse = false;
    }
    /**
     * Checks if smooth scroll has reached, cleans up the smooth scroll stream and resolves its promise
     */
    _isFinished(context) {
        if (context.currentX !== context.x || context.currentY !== context.y) {
            return true;
        }
        this._finished.next();
        return false;
    }
    /**
     * Terminates an ongoing smooth scroll
     */
    _interrupted() {
        let interrupt$;
        if (this.interruptOnMousemove && typeof Hammer !== 'undefined') {
            this._hammer = new Hammer(this._el, { inputClass: Hammer.MouseInput });
            this._hammer.get('pan').set({ direction: this.adapter.hammerDirection });
            // For gallery thumb slider, dragging thumbnails should cancel the ongoing scroll
            interrupt$ = merge(new Observable((subscriber) => {
                this._hammer.on('panstart', () => {
                    this._isInterruptedByMouse = true;
                    subscriber.next();
                    subscriber.complete();
                });
                return () => {
                    this._hammer.destroy();
                };
            }), fromEvent(this._el, 'wheel', { passive: true, capture: true }), fromEvent(this._el, 'touchmove', { passive: true, capture: true }));
        }
        else {
            interrupt$ = merge(fromEvent(this._el, 'wheel', { passive: true, capture: true }), fromEvent(this._el, 'touchmove', { passive: true, capture: true }));
        }
        return interrupt$.pipe(take(1));
    }
    /**
     * A function called recursively that, given a context, steps through scrolling
     */
    _step(context) {
        return new Observable((subscriber) => {
            let elapsed = (this._now() - context.startTime) / context.duration;
            // avoid elapsed times higher than one
            elapsed = elapsed > 1 ? 1 : elapsed;
            // apply easing to elapsed time
            const value = context.easing(elapsed);
            context.currentX = context.startX + (context.x - context.startX) * value;
            context.currentY = context.startY + (context.y - context.startY) * value;
            this._scrollElement(context.currentX, context.currentY);
            // Proceed to the step
            requestAnimationFrame(() => {
                subscriber.next(context);
                subscriber.complete();
            });
        });
    }
    _applyScrollToOptions(options) {
        if (!options.duration) {
            this._scrollElement(options.left, options.top);
        }
        const context = {
            scrollable: this._el,
            startTime: this._now(),
            startX: this._el.scrollLeft,
            startY: this._el.scrollTop,
            x: options.left == null ? this._el.scrollLeft : ~~options.left,
            y: options.top == null ? this._el.scrollTop : ~~options.top,
            duration: options.duration,
            easing: BezierEasing(options.easing.x1, options.easing.y1, options.easing.x2, options.easing.y2)
        };
        this._scrollController.next(context);
    }
    /**
     * Scrolls to the specified offsets. This is a normalized version of the browser's native scrollTo
     * method, since browsers are not consistent about what scrollLeft means in RTL. For this method
     * left and right always refer to the left and right side of the scrolling container irrespective
     * of the layout direction. start and end refer to left and right in an LTR context and vice-versa
     * in an RTL context.
     * @param params specified the offsets to scroll to.
     */
    scrollTo(params) {
        const isRtl = this._dir.value === 'rtl';
        const rtlScrollAxisType = getRtlScrollAxisType();
        const options = {
            ...params,
            ...{
                // Rewrite start & end offsets as right or left offsets.
                left: params.left == null ? (isRtl ? params.end : params.start) : params.left,
                right: params.right == null ? (isRtl ? params.start : params.end) : params.right
            },
            duration: params.behavior === 'smooth' ? this.config.scrollDuration : 0,
            easing: this.config.scrollEase,
        };
        // Rewrite the bottom offset as a top offset.
        if (options.bottom != null) {
            options.top = this._el.scrollHeight - this._el.clientHeight - options.bottom;
        }
        // Rewrite the right offset as a left offset.
        if (isRtl && rtlScrollAxisType !== RtlScrollAxisType.NORMAL) {
            if (options.left != null) {
                options.right = this._el.scrollWidth - this._el.clientWidth - options.left;
            }
            if (rtlScrollAxisType === RtlScrollAxisType.INVERTED) {
                options.left = options.right;
            }
            else if (rtlScrollAxisType === RtlScrollAxisType.NEGATED) {
                options.left = options.right ? -options.right : options.right;
            }
        }
        else {
            if (options.right != null) {
                options.left = this._el.scrollWidth - this._el.clientWidth - options.right;
            }
        }
        return this._applyScrollToOptions(options);
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.2.1", ngImport: i0, type: SmoothScroll, deps: [{ token: DOCUMENT }, { token: i0.NgZone }, { token: i1.Dir }, { token: i0.ElementRef }], target: i0.ɵɵFactoryTarget.Directive }); }
    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "14.0.0", version: "18.2.1", type: SmoothScroll, isStandalone: true, selector: "[smoothScroll]", inputs: { smoothScroll: "smoothScroll", adapter: "adapter", config: "config", interruptOnMousemove: ["smoothScrollInterruptOnMousemove", "interruptOnMousemove"] }, outputs: { isScrollingChange: "isScrollingChange" }, providers: [Dir], ngImport: i0 }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.2.1", ngImport: i0, type: SmoothScroll, decorators: [{
            type: Directive,
            args: [{
                    selector: '[smoothScroll]',
                    standalone: true,
                    providers: [Dir]
                }]
        }], ctorParameters: () => [{ type: Document, decorators: [{
                    type: Inject,
                    args: [DOCUMENT]
                }] }, { type: i0.NgZone }, { type: i1.Dir }, { type: i0.ElementRef }], propDecorators: { smoothScroll: [{
                type: Input
            }], adapter: [{
                type: Input
            }], config: [{
                type: Input
            }], interruptOnMousemove: [{
                type: Input,
                args: ['smoothScrollInterruptOnMousemove']
            }], isScrollingChange: [{
                type: Output
            }] } });
//# sourceMappingURL=data:application/json;base64,