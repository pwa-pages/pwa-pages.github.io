const processEventServiceSingleton=(()=>{console.log("Initializing ProcessEventService singleton factory");let o=null;return()=>(o||(console.log("Creating new ProcessEventService instance"),o=new ProcessEventService(new ServiceWorkerEventSender)),o)})();self.addEventListener("message",async o=>{const e=processEventServiceSingleton(),s=o.data;console.log(`Rosen service worker received event of type ${s.type}`),e.processEvent({data:s.data,type:s.type})}),self.addEventListener("message",async o=>{const e=o.data;console.log(`Rosen service worker received event of type ${e.type}`)});var ChainType;(function(o){o.Ergo="Ergo",o.Cardano="Cardano",o.Bitcoin="Bitcoin",o.Ethereum="Ethereum",o.Binance="Binance",o.Doge="Doge",o.Runes="Runes"})(ChainType||(ChainType={}));const chainTypeTokens=Object.fromEntries(Object.values(ChainType).map(o=>[o,`rspv2${o}RWT`])),chainTypeWatcherIdentifier=Object.fromEntries(Object.values(ChainType).map(o=>[o,`rspv2${o}AWC`])),permitAddresses={[ChainType.Bitcoin]:"NY4PEzZ7VfjtnTN697R7my9uAVkCYb6N71J2RSmJCFSdDqVf9aPvFQqKXujYDBtSA8hxYVUgkGgU9SP2Ss7JDUkHkdGLBqZwH4yDcPyVvbVbcre3o7nR59wiFDVtjzCjfZmVvMVJD9HiW4GKqVuZGTQCKns8tDe3sJoDNTL3VmhzRUPZf9JCN4TNji1ruXf5CxqWtDrCfoxE4xfbRWGmtBMdLMoRdL85V7z1fP5KxroWX5YgZQo28nTCU3WjPuY2YrjqYYGNHXvFZ9G8E85kCcseNtRWqViXGFzmwqHWKaYe4AdJzBbMKzJWYszsbiemNvisPtT2Yj3FjAmAErpW3gMeWyH3WtbipaAu9D31ggpLeLkLTGscJ9HB2oExpGWvv6u9mGdkTJMHYUuZJUGrcJPE3m7ZTEFxwkbeR9oD8nHHgW4SB46kHFbxzNoUksGPZQnxf95J3e5PUnhYgg7mrQLNpq6pphgGukFcHDgAN2rgFmUSDVsuzomhP735SMiveXSPzx6PZeP7CmrEHyXN6mFbBJuY17kvzzix1w9eFwryZDuZqnAANkYhF3TLkLyGZfSC4o9iAGynpivuNMUgbKAuj6D116tKoCq9PHELL8eTefmXNLFuhauQuKRjmWQKj9zYSd7qi6Zf49KX25PnWHkC3REc4abYpjtiQFefT2HkWRwneTCkJ8uMvoHs6kJzLg8NVzH8XwEZhTM2tNSDhBKZaURpYiQcHwLDgv5uFiwhasLAdZi2EJywBYX51NKc6m4MEsTiAJC9jkEydWcwyDzSHN18yEr4rvEgMNkUhLHJokgV2v3BNFhUTJqe58e2QXAmx9MytUDqzg3vwexEpMhueC2roYA27P1mmb85HKEz15a8LnuUT8ZjmG8kDbHuPYFyxcATytVuDrFDzqKBt9X36bocip4ZU4RRY8JcWjJvMcrBCjV3EhDVQ4it8bhoZnn79PsXazvDteua1NEYEJniPnNrRaiKTUWrseEUQ2vVjWy134jMxRbeiARhoj7MDxug2kFP8jRGSsxWt3Qqbv2SezT3xZ8jYxTyQ2CiyJ61CvUQwPtmoY3XKjrgrJKwnSzJRs4egKPYZKoSiSy6UdHMKuNDmys8wYo3Gi2EgVdUYRLLWcHh5Z2H91odSbTW2h5e6pZeY4a45TgihE6ZnZBhHGc75zJjukhPgP1wEp8GrreHA7ejvTEmpwNgj571x5JrvRD5TxWaFuZKBonGexovAK2L5v",[ChainType.Cardano]:"NY4PEzZ7VfjqPk9gZSNS6ERoYyYBEBebyeXUPs1sjEfdenV3Kq1QKWBSQ1Gfem47fPVRw5UXcYNXtgXNGqsD4DedukcYv5c5kviu94yWpyrh2tbXHea1tyfuEcb8njgvXkAxrXkjvgcPEQqy7BsR3KQPe8vzSaBG5V8WFHQqvHmpMXXYMvKDZzRbNjZUgYvVinGq6qx9hct1fFG15nFdcWZkzhBcu8ytydt3MmnkYEyL4L2rLD8Jp2Q16DfeaBBqmuyxpMoVxPrQzbPjq5GKTKrqnpisWVrubpAy5dg1oQ6tVZompLpwTWvX1xWspA9tWPmc3MCV2e6y313KzSosGLi2Sdv2ptDgJpKamQv6fNKmj3TWkNbPCDfjp2KXYcfYE1vQ5prRZCPCDhVgWP7bqpF3SeUTMJmvBaXjd1tBavjanquQDkYU4n5XBwJPvUa5kCAP1USTgP4cgPA6SzB8hg2RXmB4PmEWM2RWv2mrirYeTdZrzXCbpGCd9B9GK7bNknnYz1X8wVqyYxxQMZ7Rort4BVRNPNKzEMtdGKSmQpiWitfoAfphXL3SGMfwMT3sspgDcD93Ftiq9gf6kgawpFBKWJmV5jXmfiSCWkPW5x56L5hcc3NwJLYYjcMh81aXQBP4HguyudttZcF8QiDa6Ae3idS1BTegArbhZBFn1TQJGgWtuCubLC5Ja71FadEN1G1s4Uz4BapDu3WpNH4NJn3UeWavLd1EytGjevyJu8XjziAMYr6cPZsyhb95aj7LAHgwJ8YT42zWYoDxqhEzbuderVtfauVJxEo2Rt7p83hMtkFS8Dy3vNbdmGEhWEFfDEyquEHTLsYkehRMWTeTeoDpRhKpeXoDxTNriR6Fz6y3Koxwzg281gYhxxvew7TpvSa3cLvjBpNxuoUfhyT645u51cBsQzden3RB5LjJeToSctrx74nNGCm9sR7fQgzno2pETeit1mykq4eocy93EoTcypKitcbfhgAYwXrGcGUQyhsupFgPZMnms5VnWhCsGKkK93uy7z4BRgi9y2aU7zMUxPJN6q3kYhjcdgYhcgqLLmWo5pBRSxcuq3p3NhPnd2Tps5RztjtUS5ZkbRVsTri8Sy2J5xPLir6VB7uxcPCSYYGJaaVfENJ8tYLYH3m3TUoxRipyjNDDBmsRdujqFQvFoYiCyaPFgu9iqzMvuPDM7FDPAKV8V7A895N9SMMZkG7uAzVvLgrU8Wrxdby2CAX9ttmPJn",[ChainType.Ergo]:"NY4PEzZ7Vfjvo3AYu7dBh4ziatarsMAVPnwtHZL6BfoKeaots7P629HvVAmDZNdiVNUitWMqVJhgphUregwCXnhVNRddztP93qbtSWCMzVk1UQmCVUpvQyb25nyH1PrpRSjpFewJWeN3bjiVF6bTAm2t11X4d2fKGnAo3PX2BFVeyAUre7T5CZs2uikxZisyrJ1djE4UY1uwpTFkJv3RzZ3JMugNDeicf7qWqtCtNH8E9uG56VD2dMvmsr5YHQbrKgxa5foyA4K8cD59o2ub9ezbhjSgfXbc6VLaXmp5SzdP6n61MaePNexedifBWwAsHFcaaVXf7oUkePp5dDpc5mBbaAuidBAwH4SaxnUNjPw2bHVSXEk3ZJwwBrZRG7CYBCvEN6wFuPyzuhGsJQwdCtvUqxViGhxWrhRYKwixLhScVdGwCFCF9HjuCXt92FkEZKRk1kJuNzMUuc9AUbafbwhi8RC96TVQrtnsajhomptLKFmQXg4nZQao3jwHV8kfZeyF9BX5kiWUnC83Wa7X7seGUcECHRPLAapk7Lr1kUQ6Q62RpBKeGUsfmPcyNhaZ2bmdxMxxHAhdZdKVr78R5ch2BvG7ZtV6wkHB1hcVJGJmU4dskPPR5EFd8gED72eeUnNAsTknW7ePfNMj4DYWGqf2QhPHDZXsyRN2Mczv4tgyRsNA2HR3U9oZikejcuYhha9yNsXEdNn23B8wa5aDZwR6hwZ9hQ74yv29sbfBAfe9XWT2UZAVaeZeazQSSrvAhicEKnwmCAvfwcZNS57SHJ1EfZf1oEt66S6mGFdBzcKPLZzmJmCgMiBmMThqMemT1XS1ovES76LVcpXSkyiEdA17htR5HuPWdDVfWNQAK2jAM8BjKGtvsh93oMFGvMaBVBAvj1QcfTr17LdeeT7h78bKzyF5SQWuyu46xtDbmTZVrR1ZSpnffiD8TbWnae85Bw1VfttScQ8yfa26dsc9pwLrHhYhC4XKEVPWYUxLHZd959tLA2kGNkJBJR8PPThR8PugaUTq1sQpLg4ezPPUjYyWFvhFf6Rcw5rcJAwj99AUwoEhPaUnxT3TxiEJBbD3Zsna33mQD9Zg69Zzr9xiLA7GzhhA998dwkpbbgqFxyASwH6yav5qDbXPZH7GPtt3nTjUfRs87SGYgVGHoGhqaVUAfQKW4TtvFicdpvQws5kg1nZthd7WkWcR7HqLc1R4wBPFynFVGc457vhQwaP78yQsQDHq86",[ChainType.Ethereum]:"NY4PEzZ7Vfju59RSazdQK92s7PaLrnCh5D9yZBZx7fptQjQZ7Ra2Xiz1PFusrkij3YamVoqXNqoUzazpjnzwmX4zKvPwWGLdqk1RXvp82m7Km2nwtvL2d6tVVCfgiVzA392JszEtNDh9hNXn6wk8eXjXwUg1q1w4UJi6XzmscSH6iZ1BR6ghCp5fyrZBeUfnvbPsfgHmmoVQzmDJ5E9KjmCg53detrDH29gyZUKyqjC5ddnCKG5cvVmoZ7D2ix9KFa9RuLcpVTxnVnuoJnHL1yoGog11TB3eT5hRyiUzeBU688pMb1xyUaCw8bjh5wSsBRAWQnDiAaGuj6zsJEnKeMW94XLeaTASw4K2bwyWHr4BVN9XNSeopFoj6mXPrD2ZhGgPV4HeQp1qEQ2pemMiSecXYkghfnk1t8hnfDNMfXoyKXxEmN8Cf1p7M8pqtgo7H9uUi6xsfotsB2uHVSoT21nzERYMaej9YuYwgC2iUzrzeZNFu7LbMqBErDgHn4wfgppRnF6axDca7QJGNv3q7E2q1DGRpzmTXPfr9FeFxki9geAwsTAy1KTqU2u6TY2wcRC3GzQz83x6LatZLhf9HZnVWZ3SRWQ5AmKUfxhHVxVC9Hwiraqb7ciZBsrnXHWmFaHHHYxafZwoLUBqxeWnHNM211MUwJ2rD9pvrqREfYs4CKYJNDxe5nezL11TnsLyt6p6XkKgHXvvqnk9HQ27pMbpNVX33Y8iQpznFvL2YBCn6Dw9hBDgb8thcYkkAXyLRZskEmhXQFL9evXTstNoeJVJp7NAo7dejZRaKHzTvZnZpkybJGks44qFbGSuSXGegN1V1HWyYGnGSgEJm3yrapNC5tdTvHWXVDxjw1G2TwqKL8D4HZVsyWsu8PEErsaf593jscXKTRn2uqvdhp29rJKGV4v2Cfd8DDXzwhmVxcVFyUiXg9JDe8fCi2rxmFai7a6P6vTJrUkJRtKYBt5RUY3uzKXpX4J4fBWMHmnM2yTSgdaXb9MYULmsbWitqpxiTWh1iMQdXNHxU1A2hHvsqogqEhrG9bGmMU1m1EFSFAPocv3KUf5bPYUWmVUFaxa2MLmE4fs1EC3kCJz8434NrxD1YVA1iosiv5f2tDM8E3w15VRik2a3R1Y6C1D9uHAAT1XK1A27dnx6e586eghm5BuvCY9Di89bdYH5KX3sg4NzWAAJYd5DLZbtdXxzRrKiKwMcPjskhwyQRcv3qstVzPDfJdE8Ej",[ChainType.Binance]:"NY4PEzZ7VfjvyhUfALrnVnmbCo79cESCRMoD4m6TNTRdUnGR3B7EM3KRKxPh6BmdAsdArGV8DgAanEjs4QLYzYTBPGexkgMBPaRwAMSuVAG5rtzuN5qNmyAZsfdrR3cnBuspTqRkBQFp1oczXkCVNFdjpPwAFYLZgnnJFJVnZbp5TQSECTioxM1oJSKm7LBnEbPNrVWFqcShvqAjoyie7Bd471mNEq8y3mEeV7FH3AQCm4fKQgyfwYkRBC4jvFjWDaMshpFbV325g7n5rcyRsbXJ8EGMC2pKVGEbkx2JCgX4ba5dxx1uGibiHnuHiTNXLmrbEJ6BFtBFZB69Ye7U1C23uBEEvTRLteSbKzKAaGv7UbhVtvcgX91muR3sy7jXTW5FszKWej7knHLWJhbUf47fCVvmbXWEx6rHu3fj5hEqQyfVuER3J54yQAtP9ertP9hQX6GQ7mXfyUwmxTYiJS4GxLzeWZGwfSfRUDe6GN7qurja8kVeMrTwdo835yt4XUcemLK53TCkTLe61Bev6NtiUCSuNrhddXcdfMzqk1DWZCXhkcm51pnGmbmAntwC6AF7rL2LHtHi4et2edKAJHkYUp6t9a8Q57eL6fX3Q4JSfDrjfgn4x2fJaF1APdwbBVKoJyhDUkmV6xAaANYZifq54eFg1qBh54F6mu61U3Df5sZqsepzQJNYp6Y95afLuHGmG97mxhmmRsecKbamu4p6P3TPZEs5eYfHspVf85GNh2BztxxYn5hSsR9c8VRJjBhHR1qGHzX4mbRKWn2D41L7AHPnapSQyHCAPdhSbaAV3b6eLqLvc9QrFBAdnsHqN4NauYDPZc6sSrFuLEwNKFbjefc7pBDnA2pfTUUVqCTFuuaM8VmLKFxG2oVsi1k8GD5moSzQbEphVfWTjE9kTZR35oArptsctXGXRT6MXToom6m4cj465Xs9nsRY8t7FgSHsxetJafgogRjo8NRpgFkBpRgf69QuZbqYkrFMTsoDRkLYCLTF4XZwYzu3tqrzLkSZPKDzK1x7pySFdB56vAstU8HPHLqtzduvHt8Gvrkh1mAYQ1cEphCF1jfs5vZUDifLQYnZ2JiJeMdFZu8RhssWvwU2oL6wqx4Ey2iRaSrLSadYnWx47QvGZeZ8M5gupYMNiL7tTkpCjMjbuetqGcpQrtiwuBJ25DqfnWeLN2K6LS49Fb7GjW6Y3fMgdDYVhh7MFpLiyHMcC7wzdBJSMEcE1VNvo2",[ChainType.Doge]:"NY4PEzZ7VfjpDKVcQkzdi4CLcgbMvUX53reQKShv8wRAJ8cRsEi4zV8VwevNM5JPxi5UA77685CKHAQAEkE5HUX2jv5HoMoaZFqcYNBQmHxLA86pS3fHDhg6GvJ8SHssoUZX4uGcgEcRt118Bz8bR8sVAGC23UcafXEwmhfCRfrijjPxDx9ZLHN14uuCU9Gv8Upta65PkzbE3oTD3XDuq7RicN59bz8o6eHef9MfxZetNXrgGTkCJJVJrQ5ahqPLmCzkwv5iXLvRjebbPcen8FxPJ7RDE9rG5BW4uuyroqH6nsNcQKRDnvvnrt5PjghRfss4EswpEJXoxxf7VxYUxx2KgHy8W865bjV5Gvmd9nLPnRStwDV7t7HP2U98fMH3Qdp8PS2Vew5edCjjZTiu2k5kB8frNwSdhGvu91TpAhen474RoxWeoZErNRPpkBH3MN4vHo7EZYiJPjsYtLctVEDWZkvFuaFCYQbuF73JqT7673erYxjRu5o3bCHMgNLYPYuriHLyWtpAJvkFa2Xir54tNfMFyEcvPEWYWaB7J8JsBa8E1b6v9x3VsDyNrU3bGXz52Ax7dG5ziTX1DG2bZuRvGSejjeP8GVgUXTBvRARs8t4wKwdicHkZVie2zGBR5w6Ajo1wK8hNHi2ANYSX5VEFEAFgjwo8DNMUTXbyreeKTcJgcntoc1CbNaiDUvJEyRYaAS7mncPsAiuMjTiFUAzRU5gWdtgRTrkVfi638QrvsvKQgKNPxvGBQpEWtSnmDfRhFifDT716wZ22rca55i9V2ArmDRVZG966MSTYNewX96iwndT8PDhhR4xfysMrTdQMPBzFXGoaAyV54rZ37G1JHQjKQLdMXLP67wjqFMNDRjBUsUYpBYVgj4XpvA1nik8UDqGW5zHoEszpjFJNCSzoexM1zLk8q5vk73dfQ3zaME7tTjp7rdAH3tPtWVkrFSWyDe3rw4zZpSHE2iqH8dDvTVuS1QYsJ6G3iqE8nQbg9FipofqTEjihP9ojvcXgKa9ASce5JNsRKHUSeYkAtDs561sZyf5uY626GcsvMYKGHjEjxCYJUYfrDTFz8v14dNAzVAiYQS7M32otTzKeXhB6ZNSRsErvMfrjgW6Rc7joCL1umHo8c3n3nqxLjZqxnzTgBAXnUNDY2g6LLdVRbj41hxTmvVkwV8MV5N1tvTAALAiagxDKu5bWsfTYFHbiiA7tLxqhsUvATorTzU7nrN1hjpQT3i",[ChainType.Runes]:null},permitTriggerAddresses={[ChainType.Bitcoin]:"5ivrmzxYZZfH2wJRvogecZo1YYXm32CoKnSZdtwxbjNoogRakUFe56VrrcULZtCkvAzM2MNRMxPYSfZc2rB6tkLKLCirG14JPDMfqBoWMhyzzQLVsDukZupema1i8SvYUuoaiPL5rTyQmqgF3ftPbvM2dHY623B3KsKRTNDhkoMoRmKLzenNWqjXpkANpyc3TCkDuvBypXfbWVN55F2ZZUs8L3XkvaJKcb74GY7whJB8Zg31VgpmVW4uVEuqpcvPk5FYNiTdRakyYTUVFnAdCR6ZDjagBYMr3ks2uHMhQdjmoKmmwCocVm4SGZsA8rU8zj6zrEgpepLT5UPD9sZQWtvSi6C82fPEW9pvNXr4T3sFx2xNRv8meyNUhopUfiRzVoWfx6Q4ArqU3dnmRtN8pxkDfTZr7oGrzAFAb3DRhBUPhhfWY2USAw7LMqMAuW65pdUFcGnczQH3B6V4kALNaoGMD7ixKtkdMkrAPHkJmxKzeMEd6Y49PnHWxFkQbXwqGELjDppqmdbKceyrtjUp3JwcZ5qN7YcLg1yXhFUiWAHhnAwGkHsTHivXADhV81sDBVqM1GUB3piyt6gkJ5My3SaRRTsokrnJLoGL23GwjEfTzDsvXCoXww3MQcwUUCXehQConnMxYsK7HHGV4wf8kbctrFd2ekPkeHm5ksjagEVzKMraZJgrRSRWEHdYmUGkU6tLGZTUF4Xe4MkdzXC3sRtif4iUnZg6Tnt3DEx2i5fmPD4xasYkusc6thd77x5x7MZXMdkxuo9BWTG9iiYAaE4aLQ5yEbrYeVY85DCVFAKXTsiwUH1De3rDhRZfFfQRuDqiYomDFumxofAa9k89yLeCSRyQpAH55BXLqvppusJyDwYJKd5itao8z3Qi2Fsvt7oL77fDnbotPwp7EkFbQZdGi7aUU1SdyfhxNwx6dYcFe2zpj6Spj7zb98FR2HahXwXnqqZjuym7RjN55bqPt2FufJ7CwdgQmiBMid7E1sAVMxBZyAeNbhHEqRJCajpUyGXswJjQJ9S1u9c4rRHzdntMtr2RXDtdgrt6b69GpZgZNeAX3QG9W9kQK4SAHE2BULEmNSBZHHitrRYdx97AsDLFfLpzfsPa82ew9oBy3PacMAF2WP48yxQrAzSA2p5idB5QFbYoECBBLsCyApG37AMuPrr24JrWmZLqR5XEPYnKojYrMcciwkn3L6jRpC5c1D9KrsTGk5dGtqBji1FE9XAVxuVpdddJjBSjphPx2UWtvJnwcxB8CoRSsVDF8RoyPcVwMmSfL5arDGJxBUzVu",[ChainType.Cardano]:"5ivrmzxYZc1s5aYrsy9uMd3wphLaHx4Kqrw7wVDwQdtj967D3qYpAw15uAr1CK4RbXKFW7kersNNe9tXu22iut2zG7tCmAP9TzSNgHMSJFBzR9y7vmqpmTGyFmn6poS81E8MzwaJ2MxkULFoS2nj7CwVsCMGweg84sJShZkGm81jxw6N65GHddQ4sJsBJb6MYFcVXeLxrgnEMPd3eFH7XoVj5uM97P6rsUAztZmeaA9hdUkc9Bz497j5BKQaiXyrFj8ghEtL1cemwfnGrsybkuq132QT9qsW7dNaG95D5wSYNUoAP7mVcziPas1PvEa5xRgMKnvE4ByYPT6BfkAMijYfXSDLzi1EbksurZGfC6jX7jfSgwuugXMNbjrUwhzj6657H9MsytUxRW8kNUKN7mwUphQGFS3nWLG4hzyas5BF8MnK7usWD7MJko7FaUWwNPVrRdatwB5uu6rUrY8UeAW9DPQMrL6VZWMKMWFmoY722pVYHdMdCsehR3CnsRDGDpZtvdqJnGgn2czeZ4AfK8o6aykw3HMTvNP2e6pxNt6FYgr2WZhbXsmeqA6bG7t9JNCw6H7tA8KJPAN1X6CYeZMitX5RWCrMtrSy2NEDepNvMgH3n4GD3tvS5Rs94gFVWHfLu4JM5BaTwfRTcdfirnwPQhYhtH6SEc8b5SgGkraojn4JgkKGp2ftszDUNyaKrY8XJQusuMG64Aoe96wr2AaRKKtUhAKfk7kUXHtGoV3h4MhDy5Wnbgb6hXcmQoMQ8HnT7JMAFWUUeWyveNn3hdNucDf2WtmXBsRpwUidapBJPD9Xukw6uEsWdkzsCNcdhZM4EqnkadRKziCubVx52TYoxDYqupyLssPc6JdaLUWny1Nh2vsEdnuNYXj82iX7AeJRaHJeyn8wytA7G8NwQXp2THTniwF6hPCWTub5khfdJ2g4VDTv14GRL88NA6w49N5FaG2ZWxqgRKYxbEJqgBE91KWHoXfsB4qvo6cGfMwpeJU5g6FTiexmXZqrNpRwmnnx1NTGK4TdqnksfaXZPMfPBbdJnQu1vfGwLuMkP5f5EvyfQ4KzazA67AxoabFYkKJk4pvVkRqaWUps9b3nkZhErUMAgxYR4raNtKHSUT13c9RMaGQmtV8viR4b7Z2JoKjqiEP9xGVoZBANhDpJ3EpihvRmDuy7MAZfy1qEm59spvdgdPPEiffw8GBv9MyDfsAGNSzsMhiP1f8WKXduWy7AdEJZTrBJkLZFPTaRHHyU9XvbRyzrxhV87thVrfRhv88hN6Viw2CyRdMJUPmVt",[ChainType.Ergo]:"5ivrmzxYZTDDDoKD1urVYrXZG96ijTUYXQJzE6SCRJ2RR6Kj1UPWL1iN1xeHgYJEQjnQ7m3Ld9tBRRYqjzrAVAqHyGbZB3otUWZW4sUxN4E11fNUZEMQ3kVwnZxFmeSaxcXhQiTFH1cvBYWuFMRRFfaA2UMfpEgm2WoqeiJxPCojp9D7h6yMV4br5EtWTQJKRtcopBRoUgDg9mrKPAXGPZZKTZbYotgLKQ4nzD8QB5hjYJswhLmePaY3zK5eJq7NTcdoAgbNPK9nQ9UpBUgrc8RB76P8evPHMXg6HrVdQ2z3rkvYFVZqH9SmCkE8KGiLYGX7hwaXYGvPExdoVDp7qsSctsPjwgt9Vts2G76dzJzfBhEunJ33vdTEkEXX3wkjK4ZE8g5YKCwGpcED5PhtRQQtJZaZMYTZV3TpbPWy57U49cD3HVeUGR7efxUHZxYybWJ7q8i6NDm3PUwKFN63HmPYQn7TMYGkvSoizTuTAUJomiKgSnvoz2DSUzukRSRmUFA1cLqdR6s7FbeJfpbaKWX4kUGM2Xh38FdqNE94SjkQMY9bv3H5N8MgwGL2La12e1GXAdMCKJCWKRe27vjdaHJWmsKrBLuXQegGN8BaqNuvJbhrmreHAjR9tVwVkxcTUsr8u8TGUzkzN7coV8HiQV9KBMVgQ24NXPYyoCuedwfCiNwYX7PSSbvve7Dgyy5e1S6qbVpEpVtjy9NzWfRaqr5CyGDqhkfjizNG71NZu543vkacjXrrfPWqtNoXMtTRyM1pzwW9ze9aoRX6e92mVaCUB8hTnfH3Q8EstRLDJygLmp63y45tKwBVBDjog7Z6pWhTfBapMBz8Q28pMfPAR8ywfz8qvtkyQcv9SuEZWfvpZREaS5PGhBuqU79eR9bwNwS6TLu9BZV5Y1ahVFA1fMUxhXTvX69hKnNHFgZ35fZdrVrSeU4U5yGvYX7ViTqL2oFk16HLoTXgNs6KQz7PPZr373gDeRh7PfXpX5jWyxw6SRreE3jB5SUiQnZxmAbpJNVkPzFbZXcrsrS3JHSfiVeqp1tk5uNaZcX39tQTXtu4bGrpv6EiMvYPkiDhCiKd5oAVeZ8VxEGN7SP94vF9WhS2oWUMCVLU1XW2DDHejZ36Zo1Ho8fHbUEaKNbRBozY3HYnkYyJuF4wer8xJ6q4KcPppDrS5jqfAaZF6YWsdtqgse7qMeWVUPj23Vr5XG2S9sYmWA7femKuZki71S6BqZGNfit7F4vrzqNZd1L5oyLSVCtuiv3DybRnu2YEaUtrmCphsmrpAFSEwJWtFKqcC",[ChainType.Ethereum]:"5ivrmzxYZsMEcMTZnZnsQm6jutdmSRzVW7WZoqN2c82khPoBUwF6GRVZdd6XhnNf9gbi3fsoZRM3cHmvz3sgJEJmy61cRxTKrM4q9ZfxYKBtyfNXLwD4CCeMedd6pxYDbgT6h3W5Qce2DZX51sw7aP6hu73HxJvcAirXLCYdZxi1nnGUbZYd8WNkU9zZ5ZGLVasrL49hVLNoJsP3ZYLpqzXchCL8RKv42qnLJ2kHc9BZJyv3QAYqMZTZSHQyRnYj4GAbdB3aYP71ge2HXCb6Arc6upjU4cWJPrPY4f8QcMdhXTrUtWp9u443Ekqdd3S2y2jfWLjDLsd7S9y7ASHPqx3GnCcPK4i9YnCQhdM8i5f59nA5ENgo24BTJvyQiRssDrCPpHxeTUp5ae2E5D4vyAnFfWCFfD6f5Z6DEDQvFnu1JLjjLcunp3rehGTSNgjyNNzGkjf6GF2y6enPuNcfpyNWsY2QJot4r1yZWqzeHvMgjbhnjpcManj1ikT1FFeg1oKZCCNBUbed4jYnmM1qFFmTYaovRUuEFXKFU2fhpz3EfEB79PUd5g5YMu1MTkKdUzLrEnoTxz9GKNpXCsoFvwC82hEuwXPcPFuMHdBFa4jtqSueVFgCPHHiXMz2koe6FGmCzY67q8215taocoiEC8NjGNTJ6Bzz3apbT5JP2hLVi6z11kNDQgtTA4gNRoftjZBBNVaFFj1DwURqEBzdawony7FvSpQYzgFEz5PKN7rAAr8Dsd4phbesmeASSph4aQLzB7iuibFSZXxyBm1w8GUEodaWEhh2UeTCJx2XtocU9aLYrUSgA6PgBF5NWzWwXDihESwyboSKnDb2mfHeGyjkjKSfQP2oP8Las1CeMXPdnwXUggckB44f82qjE5ENnqYhah4s5WkgPzzSvx42uhxc8VTbySPgiDefVGuFCEATX6fgAs5ikKh38TYWzLbUi9qM5Ncz9G7Z7Mc8RTdKtRLSxLUoPpiabXtyfdBkNr5PYhznMd3TPy9EHKinSzPV3GiJHGEkfYAbGmf2imbG2LrGtCEnyft3vBXYVocEnAXZsVKSRMPvkWsA7J2LRuQHrZCbVwY4LBDpfrHriEGUnAd168HB7DKPqRtCsVLgd2h6JgSHS4xXvfSwhG371VfTxJgAAtHUgKttcZfpZGXffLCwP7zmQGNVz6FJLsTEN3VXaQMQ7ooCeGHFdL7nbB7ejitfnWzWqgwqi5kv3nZEcmx4YfcnyvAjBosChtBMNfkMSVqa42Mx1xat4eJvHD5Jm1AwYijVqQjcXYh1ZzHqD",[ChainType.Binance]:"5ivrmzxYZw1LAT2rQQY7Gkiuo36J5uzCTyMRoqee9QDzT4Wa1NnZaQ6zVLw3yw4ksfRCdfKiCYfjyiaJuAvdwi8WfVd2VJZo5VfoX7qNEELk34ZdvjCGsSdA3AWVfqSPy8NxPqm41xeccezcgRCVmyTHJa4pu38vtBvTZsnV4jzGTZsSstTQPGZMUUTys6VSBRUGqQjFpjVty3jTFudfJ4rRgyuGhyA1A3jgzY6wPSBXHniAi3c9rQLVEGNzpuyjXD1bFVemGdEmZp5tYLKb5BMsasJr6fa3P4xdyWryg6uUrxGiPZCRT4Z9DMmSyJdfVBFtnLaL7abqN3evRuHrGMn3KVVSFocUM9dLGZpU3XzzvWkgjwxB99FVJ4TzCSKphSgh3gPuCnwQWFhpuRuJJzV8je2jtYguEMNzcygK8WkvkuTsniW3zqJdGpHEqSKcQwnR7a5nP8yVyRRi26aYrNDjuJ2XoqnpLSSNAPmFZNApWcXGRqsqdaJBLsKPkkFXNYfcpwPNcpuExuFaeLhUaCbxdjWKBWMHPxqEhvK2dcs6uXhPjp4QX9XoMSiRqBGC7YAxhZkChKaxmBM3y2sTsyfW69LFM2VKs84FF7tXCGKPomVABQCgVbt5p9BKyPcL8ERa2LJrzfKJwfoXSAPrrK2QEd5zaDi7g6tSVy5QBFzrYARnncF2ZCuGR9Nmh6VAWumXpHfVq83iVVBWHKjSvKJuBEFUzg3G1dWmtwxqRZYFgdgd5FAZp5M6Nj6x4VMi4qcJe9S1exhMHKTDmKnmsJ7AX4YA4MdRGYXGJHRSUb842gqEYbqjjTSu8xRghbuxg9ghnr8NVx4uxwE56zJUMzhP4bVftTH6XhS1MDoRUPi451LcAbRr7QLR7gq8FS4H73FtJN4cni5mURRpNAnzEYFWcjmqaUuC9VSfkuD3Aqk7vSKpbJoSkcaZMXdqb9G4x6SGxjphx8kvxQDTJkmjkxNB5bADpRA7rfkSjRX9zekM8rb7NKu5doxYovb1qPgDuPPbD2eA279btntL8xzqTW2JWQdTPqdHG1ezxBsSWqWdFzzJYFh2VWuYB59A38EB9Mcihj995Y1DGfLt9vHMaw92ERCeqtk4MqX6WSBYc9QzTEA7wUtdYGXLydyRRxbLpYTfTX4sUvhCvg2YGix1L1G4nFaNRq28jiZjfKTCLr2TWDzFvX4jVWhFjFsBVRSCQhiKfDRpsUXm9CYXuk9tvnoVj2NN3e3SLyiWjCEUap84EhdyZn1zHHQSXnsSoSynR1kiWSDCuJCBcyM2MQ8wR",[ChainType.Doge]:"5ivrmzxYa3qBuYZ3teFTEJP1ziojbVZAYdZF528CNfT5tiycZoiqXfZEqgud81sBrXGyGoanY95RS1xwRSzc4nSGhvhg9Awr23q8vde4k7PWrErq42DeCwborsxAwKm1YrWJEwD8KZiKmSMR9jCD3pTxfsvoq4yMJeh4bscJKRj9iuy79tzWT3NU4L1vrVNjQd9ksz8V2mUeU7EXouDTHxAM5Vci3HgeC2CBqY23J3mpXryfb3UPha7a4zf2eF7Tv5viA7ayrGgu582W2ZttnLFHQTRn3gnTU715qzjk7NMer98y528FxXNZsjSFs72tZm4kL6zMthigXX1yNBtr5vXmYKcHUyAeRWuX2CK8jAFWYF4cJeceCN5E2KjoTK47Ge7q8B9MNZBVU83HPGzjVkqjvFDQsDZyt7hyCRhguwKibwyw1Y76ceNXrhzwPgukP6PsCWyipqSMVTAxB3QNR46mGi1v2S3MNKR9bThJU98yQntABweyLuqHVmALaU5s971p9SPi25gVnLsFD2FQnczLpHR2g8iJ2PcUZageyVyCxKbX3EvUoyQTymeaQuSwNgySKAs67YgUPFGcmXD33Fbs7vQvkrDbqUVprE2igGNZvCmStypiqZA6ijDzbaTX1XwFAehFT39WyGQ9NXzCtYn35fj95NLkDWugvEmqL5to8JFbCcHbV13WCJaVgvcerLKU922nuM54QXYNoSQHYdCypp3PXwaWBbsemt1cbH9mGM5JnYuhAm2gKctu7rUwCQ9P6qx7k4nC6ycUWLPsYeaYt23RXxF9cx31A9nUqSW4n4j46j3fVTkBX47C7X2TFF2VgHFJky4d3etKp5EQodYs2caNLgmmACErMCtJ1GuamHCfSEg3iLyLaPAmtRM9HFUVCsMEL3GwLzqEasH3fy9dpUrAh8FqAHPT16gAx7ePEPU8k9obwUyYqkxMBuyaMonoy37GejLXzpzM9DTacEuNCBKw9hVHnDCB5Zxkhuj5kkaH3794qur5GCF3XKFnWNuKf35DBwVeEq3SMMsWmcBB6ZqfJJxa4vCLS6aEhtDxnSxw1TS8T9bvu91dXLH6HoAfK5vnoGHKP387yTuJmcbacFtvBoT6EWDS6DvXQx9FptRgojeF9T1ZjCChE6igPL9WhWPvvCEm6BMR2Jtsxw16JJzqMW33W5CBJstoi8oSKE2yrw7i2hxsyY6UPDWZUe4Cex2tSfWSzSS3tXo5ahVMfoVHxUmmKJoE6St16U58ETVipwqU6WLJT6BGYboueetYfbzL37FPgQEruWWNT",[ChainType.Runes]:null},permitBulkAddresses={[ChainType.Bitcoin]:"ZsPNMsGz8D8y11MAneZTVjJndCjgTUrBWezH77jKWr2KXMVRgs4gRkDdTLoUQq8xqtGoESTa7r3zr5E3SxQkE5CM2PaPDSHb5bQWeRtaL9eikJWw95bx4DSjCDcsECpjLxbEfahCHy2sDuXQg6potLhwVVADP5TNUxEDgWPR27x658qcHA54TPRhybb6z67cdmkPrQNXwumoGvoPNnqVcXsdXS71KpQViuk4wXBT156Nd7Tt9b3Dvx827QiLbjJXuajydCDFC6yp2sj5dk7uA5ArNfViybrVQaf71GNGwyh6USgVKBpTurrRBtxeGWNzXi4krd7XbseaU5Crnauk9fj5jEbVH88sPzuD6o4XReNW3odcKDkvqgUh9Vu6b2uGLJsV5wY44Kk3bf8PJmkTc6vQE7Mprkdi2jBfZrzffqoKC6hWLfSZNcUWFV821L43VkJbsaYLukMq1SBJ7y7rsnWcct1U8owQbDpboysHrxfeE84JMTterx8E8sxJqwQRRTxT7M",[ChainType.Cardano]:"ZsPNMsGz8D8y11MAneZTVjJndCjgTUnjAi7MBVhohaELkSWjyWJLdqw9DFRK5XJ5mS3TnP1cxLsjn38fsQ1FKDfXpczKLF38JVqUcTgTz4vWuQ3moQtya1Yb85tJXVnq2NgvDcuWJsRXQWyqBABL93WEFwT6TWiZeXVAQ7x3EhJGmFvUkbZqbtkHvbYACQ7PZVwVNXn44saome9v7QrCMqvxHHrdqaSc13dHXx2MGVut22sVvMsNXT5ody7hoAqmhfioxM6Yw238jUyturCgtbWdVr42Qv5t2aZ8YCdz6ifvqSbKmnNUBSiccfxr2G9Y4eceJ5jv7iJEaf3RAoYH9vTP1yiacpmFZLjtT38FUz5n95ubWfNg5kZAiefzyaFRpV8sRH147FoaQKFRUQRACivsVvXRBhZWYeA57VZ65E7E6d5RU4JJewNiQ5de5daAQXnC9aV2diVXw9obFC2aBYqHz3U14gHss9xvcVPuqFsJdQRLsejtnYxuoZcJF18vohmNKb",[ChainType.Ergo]:"ZsPNMsGz8D8y11MAneZTVjJndCjgTUjPFBh5wF6ZNmMySHVDcBmMx2VxGFNCcMxCKDPkdPEzZp4bt5pgwrpZyKV6nmzCAh6SaX5ZnN2fL2X2UTuLvmuk6t8BqrxoiKHmqASttYk6xJPNabuF9ZNMYQBikFWDmq2jrxZS1MG6gQQ2Mx1MgXVvPs9ZkDTe8TykK4MuvQwtjaatjugK3FC5gsB4e4KiTcMPzreUkHvC8mZQGTtGkmHSbq8hkUDfa8MUMAka4oV3unyhgvx9MHjSDNaKWtqrWJpHCsQqPxvzPKohoYSNQt6H3V6ddw1dzGbBz8eKSbno5tEaLSryLDeMAbXhivALPZ3uCyWvx9BKFxSpuqCuQs9aXH7zKedvxzE6XRrrC2TZcWn5UinvbMNu3S4i5oTK2Y8WeVfoy5XHRbK7AL9w9pimJBp5Dx2UnhhHrWbeg9XyVZP7uCEqcUK3iVFmdG2euUa84Jbr7XVaE8v3sBa8LvYdxc6wAVfgPNNbQNxK7Y",[ChainType.Ethereum]:"ZsPNMsGz8D8y11MAneZTVjJndCjgTUoSPbApCbagsfJ9WvbzbsgAbzHGNF5aNaoR2AyxnrCBH68d5TDEc8aBhVRBT4Q5UC5tdqi9JpMqC8CYFja9PYqMj7KZDjPyMHPxbqUSrq8pGVwe7f8dCV5brNYBCrNqcrC5TmYvp2HpoEUXVb7JsxCuPWQFJgXqYhzEbySQyZQGCdVX6XtjU7aQZK5bzijsXDJhuntTM7ntmdSBJjEhtkMrvrBH8RtTW2JHZw5ZW5QamM3MJbfYDExepJQeJtACiz5n36piDgebfWgjAgibjz6oXsky3mJk2rAETx25AMQSAkHz3cYnH5Gs6BorBka9qXK3U47Dk4tobZGbEZqVeFvuaoRb7VcGUvX8L4rQf72gXzVVCVvY9YEzVoFEfFGe392S5e7X6QpdBuap8maYY4RygToFx6fLeUggDP1gEQ2ptDXZoCcthQPR6ey1GtEju8jqujt2VvJ6A8VjCbU3JYvozB6kqGxLCLKHaN1zm1",[ChainType.Binance]:"ZsPNMsGz8D8y11MAneZTVjJndCjgTUmenzfjjRBRRAo2DZVkwmBZxuHGoNTFLLrmFhsvuagJbFxBVLFW2nnoSuDHhNckxkJhBKNVhfPghWoKTuCHsEdJcJ1RD6XTT2aWbGPwHkja29mj2RibYNyCqjkPWEmbRJhVvfN2DUZ9pExxBPTmghNa6tFQyLkkfHdmuXEXLdpmWndfdknawDuojQPGjx3p42ewB4eeV8Zs7dDCDLdUUghTcczqJAadPMroUpmifMTw1FrpU3jC3kMaSzYpcpPu4e44xEni3E9hrenfQePbFVe9Jq9bVyjsQBF8vC8UxqefzEFmMoHT9xkdRNsFmfLMAximM3nyNhTMgLimWvLcNddW11jK1FFPumgKRUUeRivjtnXiRsNedXpmHKhvSVvpS8wAJbuySw3bHqkrpgQHqAr6vUiXj5McjsYzVh7PZxrUgEGNe8uLk4UpxJGhW3TVLNcPHdEbq2AoyabVkK2ChbE9KZ2JJBdHah93VgZSVG",[ChainType.Doge]:"ZsPNMsGz8D8y11MAneZTVjJndCjgTUn38JxZpW4EiZgEoHt1Juw2od5nVwwx23kjav2ZzWjZAYrjAQnGwskZjCxmVagr3o3d8AfdQZySQigfqzTFjekNSHeQBuQPQ1y3ry6fN4w5ECxn9jrmho9pZFkBddZ2QLbAhvZVt8WrpduXniFkG27KsYo6ikCtgRsJyvzjE7kubBpsYfRf7tV8ZT2RyZaSGJp8Lo6SbrAMdDA1mke93sDDkP6B1cXi1UdSSg8nAi68b2HLJEdnw52KES4Xnh3Dg3s3n9Ur1mGf6WJ44oVVxwsBHoXWLhoAXJ6v6XSnX1rxBcqT344WHLrezqdGwzYAbKYqGtUiEZq6fcHVhL3Wu3pxkv2WbupVFpVAeFPxYzcwwf7vtibL7KG5RDuZ3rziqCgLC5jL9ckTS4KkZXH6YEJktNnUmULpcBdpGUHWzeea2SLMeiNYw1aoZ1k9QfmVK7TjxKJ5g8gSrSTwmfZHMPD5v6EBYyu4gBe31WXWVz",[ChainType.Runes]:null},rewardAddresses={[ChainType.Bitcoin]:"2Eit2LFRqu2Mo33z3pYTJRHNCPYS33MrU9QgeNcRsF9359pYMahqnLvKsHwwH72C6WDSZRj7G7WC5heVyUEawcSLSx821iJXT4xWf2F5fjVWDUpyGNdkxhFwQMhPKpx85Uu16put68V837wxDx19LRJ5uqi7xBa7EDFRU79Grzk8HDrfpUF3qct4xrQUvDofDroRQTuKueAbwybAfGDhNqG3jzKQchgjedBkbPAuDuNunehW4ZXUBLRSfqy3xofV76bxT5zpZjZcKud4XaRQvXUAVGunJzAs7RNZD5WZxenhmKzhiyuzWiq5QkWqxFw2h9vQ6Dd5PdYsWP3dPtaDC8WUjGz8tQ1tU9LuhqZ8QThQA5zBfoPFrk2iJ1repUuwZPjWnDRHLfWppqDQJGm2GEWHmYTQAfCJQFChUtSNstSATxw37xXjziKkPQRRVPr3VPapbHtGSoQyygzTHgcjxv3HSzwXkD7DScyA2iGDsd4B4WeXo4a6nM4CYpxa9f9FvabbNByhKsgq3ZoCsbUVXN99Pet93MFdxVmBBEsGYEYvtmMEDZEGb5z3JZDtVSdudFcm3bij82bdFzKSmmxxWZhscmLYpGGq1J5geqTiyTCgsmksAHumPFBmLkz8v843Jc3z5b6dwFgyXuBmQPTq6Nf8t95y1UYe8UYx3qNVfrHSGbToSgvCQyLKVv5ns8T2SZRWWr",[ChainType.Cardano]:"2Eit2LFRqu2Mo33z3pYTJRHNCPYS33MrU9QgeNcRsF9359pYMahqnLvKsHwwH72C6WDSZRj7G7WC5heVyUEawcSLSx821iJXT4xWf2F5fjVWDUskGdVdyYY5RBJnp3dfYC7iPoRNeopAFQWFwEbTieow347UhRyqvo2LntFpXzomvGwVTfq9YXS8Z1GGW5mUEioD5xC17Sz72NLbQrskSx7QZAxQTbMGh6vwM9J4q7NzRmQeHmWaHLpUHMU4Jdd5ccKumMvAY8d5C8RxB4iATySLY2N1wY84qNsWNaqkNofbUebf6LgmU9HTKAmU3nDoBfX7mhCjH8kXDhZeYdRsuLVFEYu83TkpwgHAYGmUoemxWAeA2BKMx8CBAy9jxbCyUjdnk9i7sLxuejrwLLh8W4tP81YkESjZ8BV65BhzPdvCaiX8vBSorgFfnvGKVzwfhhsSDwLY1GUwLTMLwTUTjSzEjsMX9hzsEEEmhxLsekabLmK3HZ1jssLrFryNuE59uS51hazJsi3gsT8SBk1J9YV6Dq6xto28nLqrMqK6raqLcAm2iU8hBtqdoSXqWzsrZHpqc2uLGhY52ee4k9TpFBvN1RovYUtY6KS4FncT4UgnbEFkzsnWYKX3CDn16tJs5CyZ97gKcvUonZ5EqTwabzni14CcQsTtKtEAqj1odvSyfJ94NnEjuiVPC3VmZbQvveN3bQ",[ChainType.Ergo]:"2Eit2LFRqu2Mo33z3pYTJRHNCPYS33MrU9QgeNcRsF9359pYMahqnLvKsHwwH72C6WDSZRj7G7WC5heVyUEawcSLSx821iJXT4xWf2F5fjVWDUmvtxr3QSv1aLwThLXxeqYCCc34xjxZDPqPyNGYvWLNeBZxATvBeDuQ6pSiiRFknqmvYVsm9eH4Et3eRHCyxDJEoqZsAahwfVSya34dZNHmjaPQkwWo3Coc17pxiEnWuWmG38wSJz1awE6cymzhojnjxDTbbXgjR1yfYU3AU2v9zttnT8Gz3gUzZNSwjiXSPu3G9zkDaFZVKqb5QwTWY3Pp6SFJgBQfx3C3sp4a9d3n9c98pfWFWAGQN5EfkoHosF8BQTDuzXG3NU8gVCNeNPXYA8iWCbvY3XpxQMvQUxqkjDv9VQfUNvAKVHLW43chi2rdBrQ7Teu6NnesLRWUKXpzSxpByWftkCCdBppjZtYmhhCHqpQGkQyTcMRoP2krFKe7xKbfnFkdkhaYH9TTdKuTuKtGb265RXxiqrc34KvkZpaBBQB5UvoCU4iLSDngNTjqkNPnWekDahzNHLd6CtcdC1B19jdGEXWeNADemDtdK4zrMNg7U8iVpyGYhLDnkeLVrcbhoxkHxrFwfrN19XvitDosQqmt9dseR6SWHBCDZJdmJecCiEwd2wBiwN5N5umEy3Dd4Hznv7kDr6eX7KtYxp",[ChainType.Ethereum]:"2Eit2LFRqu2Mo33z3pYTJRHNCPYS33MrU9QgeNcRsF9359pYMahqnLvKsHwwH72C6WDSZRj7G7WC5heVyUEawcSLSx821iJXT4xWf2F5fjVWDUpPyXf9D8PFkALkfhCu47xSApej3a8VHFCfLuQoMFV2LgTs6hEqRf2XQkDHzn3KYbGJ9b6gs2XcYf3ZQA2gJaWJXFErT11uifohMFFRJV7cb1eECubCbHCib3A434SJVrZee18QTRECrDirtC2GdZK6fiKGbGcKFTZWK4f3ChgnuZFCjRoCX2UquL25b2zkev34shFCspbYwYcyKmc5xxrvssUHgQmUZy7yu3RKJPXYuwH7SiittGsJ946spWJEp3cuBiMcpRvwbiCyrQqM1FtK3wZJKqy95bVDfj9zXwFfR1rE9wZADPs6xcJxi9P1z2iBXqPXGQHnKVaHJWEwNZfP2KAZeUi8etKnYSib68e5cuif3YNRVFdNtKAT2SJEsJCDmnUecmdCwvzMeH2EtNYsRBWVeTV4RBypRPi243qkFrct41bz6WZ8FhLFXU1tnExucXvQ48ZoQ4RQpNorEcGNDY8MC52yhkofS5b9wy6AYYjpQyTMmhD1QZF3VcQgPNT6x4yxPXYsjohYZh96h6M8T7m9gfVV3w8xowtVQVAB1kvJHMuZXxBkBNLwFbhxKuMwC2Dje3LZmuH9mhg94f7Uoe",[ChainType.Binance]:"2Eit2LFRqu2Mo33z3pYTJRHNCPYS33MrU9QgeNcRsF9359pYMahqnLvKsHwwH72C6WDSZRj7G7WC5heVyUEawcSLSx821iJXT4xWf2F5fjVWDUmAMWiE8WncsqsSRhckGHa5xwdGj7fCkypvX2Q9ypun1tUfQ8YwoXYgYCSF1M2t7WaUb2ZZzY9yETrdm8ywS3VzDFpirFEiLLgjE5vhsLkcW2PtiChF5npL3SFsxnSY92ZMmSw2U9GzhwDwTKXpPUD17dydf4CTbLATnCdiTkEYxCzVqh3XnBebDhEFSHWhCWVtqRniJJRqpRaAsv64qtBPabPG8HNRHT9TXFR4a58wH8VqdNuUSKHx1NQahaXTPYHfQX7H4mAzYU6fbH5uryhxqSh5HTBmCB8XrJcXCR41FeqjwrkwTiEHJkkyHVTeLdpyaUcHJ9M9nEsTbGbxMBLEc6CLtzRA5bDwFAKXN3i2mo86wUghaPMd72nd3pLDbhGYRntgYMrVWuVDzMhdJamVvFPbiEWiCs1BJ9NgJzasvJpJQxm1uBYskrWnULHQaJf8Kfoixaqcz6mcp2aAEAkoAmd3CcAddM4X1vCuapWeyaxLD7kXrHaafMsatugqJP4JQGFKEkXXBhthKScGLq5wcbYb2cVv6HuzyxyMg92UiLzTyFDB8QG2NwKgTfLGJ5iLDzzsFkPGtkxECDMVmiw21E",[ChainType.Doge]:"2Eit2LFRqu2Mo33z3pYTJRHNCPYS33MrU9QgeNcRsF9359pYMahqnLvKsHwwH72C6WDSZRj7G7WC5heVyUEawcSLSx821iJXT4xWf2F5fjVWDUkje1kCt7DSEufp9kN95BRzhkMTmgY2jmZ3gPH7hjfNkbPBkjLNifx5iH8wZ1EmiMFiWKozc1ZeT3QdnRhCtLZwHo5sBTek83753eK8YZNVgtykvcdLDbsgGyfCXZtJ2zxbNK7522JRormkeNkhLFBxC9u2tQ11EHyvcg8qHUhPA1GCXALUdtB1FkV2chfgewbDmtrpn7tqC7o3eaxQs3Ted3mo3TKmckYVWca7TqHnBCYGE1GRH2X3ZuWuSJXyi1AxKCyRi9JucVAGwpBhQPNR4viEZe5fo6kBiChWriCKmr7pti8685xoAz1ycFnLPKhbgdkwXmZtoLbYYrirEifkMJ1QXtaJStb86NQLQU2ThhqTzEkP22D8sRZ3Ud2b83KcxVvzzCvGeDRK7SkfjbmfhTCazJwwXiFTHBgT2tzfJvQTazwP6czcVC4taS55Ts2uKB4Z9Eu5MeWEvbBLBis8KxnkZkdMecxcBjRdAojCwyMBJUz8EPYo6x659TzbSJhjJiFaQ9f4kanVBV7nC9gK1rq5oY7bFH9MUcwGeu38HQk62kUbv7Q2dYx56CBVw6cHzdRJu6AXHY8dAy3BLqvHCV",[ChainType.Runes]:null},hotWalletAddress="nB3L2PD3J4rMmyGk7nnNdESpPXxhPRQ4t1chF8LTXtceMQjKCEgL2pFjPY6cehGjyEFZyHEomBTFXZyqfonvxDozrTtK5JzatD8SdmcPeJNWPvdRb5UxEMXE4WQtpAFzt2veT8Z6bmoWN";function getChainType(o){if(o){for(const[e,s]of Object.entries(rewardAddresses))if(s===o)return e;return null}}function getChainTypeForPermitAddress(o){if(o){for(const[e,s]of Object.entries(permitAddresses))if(s===o)return e;return null}}typeof window<"u"&&(window.ChainType=ChainType,window.getChainType=getChainType,window.getChainTypeForPermitAddress=getChainTypeForPermitAddress,window.permitAddresses=permitAddresses,window.rewardAddresses=rewardAddresses,window.permitTriggerAddresses=permitTriggerAddresses,window.permitBulkAddresses=permitBulkAddresses,window.hotWalletAddress=hotWalletAddress);const rs_DbName="rosenDatabase_1.1.5",rs_DbVersion=31,rs_InputsStoreName="inputBoxes",rs_PerfTxStoreName="perfTxs",rs_PermitTxStoreName="permitTxs",rs_DownloadStatusStoreName="downloadStatusStore",rs_AddressDataStoreName="addressData",rs_InitialNDownloads=20,rs_FullDownloadsBatchSize=400,rs_PerfInitialNDownloads=10,rs_PerfFullDownloadsBatchSize=40,rs_StartFrom=new Date("2024-01-01"),rs_Input_Key=["boxId","outputAddress"],rs_Permit_Key="id",rs_PerfTx_Key="id",rs_Address_Key="address",rs_PermitCost=3e3,rs_WatcherCollateralRSN=3e4,rs_WatcherCollateralERG=800,rs_ErgoExplorerHost="api.ergoplatform.com";var Period;(function(o){o.Day="Day",o.Week="Week",o.Month="Month",o.Year="year",o.All="All"})(Period||(Period={}));var Currency;(function(o){o.EUR="EUR",o.USD="USD",o.ERG="ERG",o.RSN="RSN"})(Currency||(Currency={})),typeof window<"u"&&(window.rs_DbName=rs_DbName,window.rs_DbVersion=rs_DbVersion,window.rs_InputsStoreName=rs_InputsStoreName,window.rs_PerfTxStoreName=rs_PerfTxStoreName,window.rs_PermitTxStoreName=rs_PermitTxStoreName,window.rs_DownloadStatusStoreName=rs_DownloadStatusStoreName,window.rs_AddressDataStoreName=rs_AddressDataStoreName,window.rs_InitialNDownloads=rs_InitialNDownloads,window.rs_FullDownloadsBatchSize=rs_FullDownloadsBatchSize,window.rs_StartFrom=rs_StartFrom,window.rs_Input_Key=rs_Input_Key,window.rs_PerfTx_Key=rs_PerfTx_Key,window.rs_Permit_Key=rs_Permit_Key,window.rs_Address_Key=rs_Address_Key,window.rs_PermitCost=rs_PermitCost,window.rs_WatcherCollateralRSN=rs_WatcherCollateralRSN,window.rs_WatcherCollateralERG=rs_WatcherCollateralERG,window.Period=Period,window.Currency=Currency,window.rs_PerfInitialNDownloads=rs_PerfInitialNDownloads,window.rs_PerfFullDownloadsBatchSize=rs_PerfFullDownloadsBatchSize,window.rs_ErgoExplorerHost=rs_ErgoExplorerHost);class DataService{db;constructor(e){this.db=e}getMaxDownloadDateDifference(){return 315576e7}async getData(e){return new Promise((s,t)=>{const n=this.db.transaction([e],"readonly").objectStore(e).getAll();n.onsuccess=()=>s(n.result),n.onerror=d=>t(d.target.error)})}}class ChainPerformanceDataService extends DataService{db;eventSender;async getExistingData(e){return new Promise((s,t)=>{const n=this.db.transaction([rs_PerfTxStoreName],"readonly").objectStore(rs_PerfTxStoreName).get(e.id);n.onsuccess=()=>{const d=n.result;s(d)},n.onerror=d=>t(d.target.error)})}async addData(e,s,t){return new Promise((r,a)=>{const n=[];s.forEach(c=>{const w={},S=c.outputs.reduce((f,D)=>{D.assets.forEach(g=>{Object.values(chainTypeTokens).includes(g.name)&&(w[g.name]?w[g.name]++:w[g.name]=1)});const p=D.assets.filter(g=>g.name==="eRSN"&&Object.values(rewardAddresses).includes(D.address));return f+p.reduce((g,v)=>g+v.amount/Math.pow(10,v.decimals),0)},0),m=Object.entries(w).reduce((f,[D,p])=>p>w[f]?D:f,Object.keys(w)[0]),i=Object.entries(chainTypeTokens).find(([,f])=>f===m)?.[0],y={id:c.id,timestamp:c.timestamp,amount:S,chainType:i};n.push(y)});const u=t.transaction([rs_PerfTxStoreName],"readwrite").objectStore(rs_PerfTxStoreName),h=n.map(c=>new Promise((w,S)=>{console.log("Trying to add dbPerfTx to db with id "+c.id);const m=u.put(c);m.onsuccess=()=>w(),m.onerror=i=>S(i.target.error)}));Promise.all(h).then(async()=>{const c=await this.getPerfTxs();this.eventSender.sendEvent({type:"PerfChartChanged",data:c}),r()}).catch(a)})}async getPerfTxs(){const e=this.getData(rs_PerfTxStoreName);console.log("Retrieving PerfTxs");try{let s=await e;s=s.filter(r=>this.getMaxDownloadDateDifference()>new Date().getTime()-new Date(r.timestamp).getTime());const t=s.reduce((r,a)=>{if(a.chainType!==void 0&&a.chainType!==null){const n=a.chainType;r[n]||(r[n]={chart:0}),r[n].chart+=a.amount??0}return r},{});return Object.fromEntries(Object.values(ChainType).map(r=>[r,t[r]||{chart:0}]))}catch(s){return console.error(s),{}}}constructor(e,s){super(e),this.db=e,this.eventSender=s}getMaxDownloadDateDifference(){return 6048e5}getDataType(){return"performance_chart"}}class RewardDataService extends DataService{db;chartService;eventSender;async getExistingData(e,s){for(const t of e.inputs)if(t.boxId&&getChainType(t.address)){const r=await this.getDataByBoxId(t.boxId,s,this.db);if(r)return r}return null}constructor(e,s,t){super(e),this.db=e,this.chartService=s,this.eventSender=t}getDataType(){return"reward"}async getWatcherInputs(){const e=this.getData(rs_InputsStoreName);console.log("Retrieving watcher inputs and such");try{const t=(await e).filter(r=>r.chainType!=null||getChainType(r.address)!=null);return t.forEach(r=>{r.assets=r.assets.filter(a=>a.name==="RSN"||a.name==="eRSN").map(a=>a)}),t.sort((r,a)=>r.inputDate.getTime()-a.inputDate.getTime()),await new Promise(r=>{r(t)})}catch(s){return console.error(s),[]}}async addData(e,s,t){return new Promise((r,a)=>{const n=[];s.forEach(c=>{c.inputs.forEach(w=>{w.outputAddress=e,w.inputDate=new Date(c.timestamp),w.assets=w.assets.filter(m=>m.name==="eRSN"||m.name==="RSN"),w.assets.forEach(m=>{m.tokenId=null});const S={outputAddress:w.outputAddress,inputDate:w.inputDate,boxId:w.boxId,assets:w.assets||[],chainType:getChainType(w.address)};S.chainType&&S.assets.length>0&&n.push(S)})});const u=t.transaction([rs_InputsStoreName],"readwrite").objectStore(rs_InputsStoreName),h=n.map(c=>new Promise((w,S)=>{const m=u.put(c);m.onsuccess=()=>w(),m.onerror=i=>S(i.target.error)}));Promise.all(h).then(async()=>{const c=await this.getSortedInputs();this.eventSender.sendEvent({type:"InputsChanged",data:c}),this.eventSender.sendEvent({type:"AddressChartChanged",data:await this.chartService.getAddressCharts(c)}),r()}).catch(a)})}async getDataByBoxId(e,s,t){return new Promise((r,a)=>{const u=t.transaction([rs_InputsStoreName],"readonly").objectStore(rs_InputsStoreName).get([e,s]);u.onsuccess=()=>{const h=u.result;!h||h.outputAddress!==s?r(null):r(h)},u.onerror=h=>a(h.target.error)})}async getSortedInputs(){const e=await this.getWatcherInputs();let s=0;const t=[];console.log("start retrieving chart from database");try{const r=await e;return r.forEach(a=>{a.assets.forEach(n=>{s+=n.amount,t.push({inputDate:a.inputDate,address:a.address??"",assets:a.assets,outputAddress:a.outputAddress,boxId:a.boxId,accumulatedAmount:s,amount:n.amount/Math.pow(10,n.decimals),chainType:a.chainType??getChainType(a.address)})})}),console.log("done retrieving chart from database "+r.length+" inputs"),await new Promise(a=>{a(t)})}catch(r){return console.error(r),t}}}class ChartService{async getAddressCharts(e){const s={};return e.forEach(t=>{t.assets.forEach(r=>{s[t.outputAddress]||(s[t.outputAddress]={charts:{},chainType:null});const a=new Date,n=new Date(a.getFullYear(),a.getMonth()-6,a.getDate());if(t.inputDate>n){const d=new Date(t.inputDate.getFullYear(),t.inputDate.getMonth(),t.inputDate.getDate()-t.inputDate.getDay()).getTime();s[t.outputAddress].charts[d]||(s[t.outputAddress].charts[d]=0),s[t.outputAddress].charts[d]+=r.amount/Math.pow(10,r.decimals),s[t.outputAddress].chainType=t.chainType??getChainType(t.address)}})}),s}async getAmountsByDate(e,s){return this.reduceData(e,s).map(a=>({x:a.inputDate,y:a.amount}))}reduceData(e,s){const t=new Date;switch(s){case Period.Day:t.setDate(t.getDate()-1);break;case Period.Week:t.setDate(t.getDate()-7);break;case Period.Month:t.setMonth(t.getMonth()-1);break;case Period.Year:t.setFullYear(t.getFullYear()-1);break;default:t.setFullYear(t.getFullYear()-100)}return e=e.filter(r=>r.inputDate>=t),e}}class DownloadService{dataService;eventSender;db;busyCounter=0;downloadFullSize=rs_FullDownloadsBatchSize;downloadInitialSize=rs_InitialNDownloads;constructor(e,s,t,r,a){this.dataService=t,this.eventSender=r,this.db=a,this.downloadFullSize=e,this.downloadInitialSize=s}async fetchTransactions(e){try{const s=await fetch(e);if(!s.ok)throw new Error(`Server returned code: ${s.status}`);return await s.json()}catch(s){throw console.error(`An error occurred: ${s}`),s}}async downloadTransactions(e,s=0,t=500){const r=`https://${rs_ErgoExplorerHost}/api/v1/addresses/${e}/transactions?offset=${s}&limit=${t}`;console.log(`Downloading from: ${r}`);const a=await this.fetchTransactions(r),n={transactions:a.items,total:a.total,items:[]};for(const d of a.items)if(new Date(d.timestamp)<rs_StartFrom)return n;return n}async downloadForAddresses(){console.log("Start downloading for all addresses");try{const s=(await this.dataService.getData(rs_AddressDataStoreName)).map(async t=>{await this.downloadForAddress(t.address)});await Promise.all(s)}catch(e){console.error("Error downloading for addresses:",e)}finally{console.log("End downloading for all addresses")}}async downloadForChainPermitAddresses(){try{let e=[];Object.entries(permitAddresses).forEach(([,t])=>{t!=null&&e.push(t)});const s=e.map(async t=>{await this.downloadForAddress(t)});await Promise.all(s)}catch(e){console.error("Error downloading for addresses:",e)}}increaseBusyCounter(e){this.busyCounter===0&&this.eventSender.sendEvent({type:"StartFullDownload",data:e}),this.busyCounter++}decreaseBusyCounter(e){this.busyCounter--,this.busyCounter===0&&this.eventSender.sendEvent({type:"EndFullDownload",data:e})}async downloadAllForAddress(e,s,t){this.increaseBusyCounter(e),console.log(this.busyCounter);try{const r=await this.downloadTransactions(e,s,this.downloadFullSize+10);if(console.log(`Processing full download(offset = ${s}, size = ${this.downloadFullSize}) for: ${e}`),!r.transactions||r.transactions.length===0||s>1e5){await this.setDownloadStatus(e,"true",t),console.log(this.busyCounter);return}await this.dataService.addData(e,r.transactions,t),this.dataService.getMaxDownloadDateDifference()>new Date().getTime()-new Date(r.transactions[r.transactions.length-1].timestamp).getTime()?await this.downloadAllForAddress(e,s+this.downloadFullSize,t):await this.setDownloadStatus(e,"true",t)}catch(r){console.error(r)}finally{this.decreaseBusyCounter(e),console.log(this.busyCounter)}}async getDownloadStatus(e,s){return new Promise((t,r)=>{const d=s.transaction([rs_DownloadStatusStoreName],"readonly").objectStore(rs_DownloadStatusStoreName).get(e+"_"+this.dataService.getDataType());d.onsuccess=()=>t(d.result),d.onerror=u=>r(u.target.error)})}async setDownloadStatus(e,s,t){let r=await this.getDownloadStatus(e,t);r?(r.status=s,r.address=e+"_"+this.dataService.getDataType(),r.Address=e):r={address:e+"_"+this.dataService.getDataType(),Address:e,status:s,lastDownloadDate:void 0},await this.saveDownloadStatus(r,t)}async saveDownloadStatus(e,s){return new Promise((t,r)=>{const d=s.transaction([rs_DownloadStatusStoreName],"readwrite").objectStore(rs_DownloadStatusStoreName).put(e);d.onsuccess=()=>t(),d.onerror=u=>r(u.target.error)})}async downloadForAddress(e){this.increaseBusyCounter(e),console.log(this.busyCounter);try{const s=await this.downloadTransactions(e,0,this.downloadInitialSize);console.log(`Processing initial download(size = ${this.downloadInitialSize}) for: ${e}`);const t=s.transactions.length;let r=null;if(t>this.downloadInitialSize/4)for(let n=Math.floor(t/4);n<t-Math.floor(t/4);n++){const d=s.transactions[n];if(r=await this.dataService.getExistingData(d,e),r)break}console.log("Add bunch of data"),await this.dataService.addData(e,s.transactions,this.db);const a=(await this.getDownloadStatus(e,this.db))?.status||"false";r&&a==="true"?console.log(`Found existing boxId in db for ${e}, no need to download more.`):t>=this.downloadInitialSize&&(await this.setDownloadStatus(e,"false",this.db),console.log(`Downloading all tx's for : ${e}`),await this.downloadAllForAddress(e,0,this.db))}catch(s){console.error(s)}finally{this.decreaseBusyCounter(e),console.log(this.busyCounter)}}}class ServiceWorkerEventSender{async sendEvent(e){const s=await self.clients.matchAll({type:"window",includeUncontrolled:!0});for(const t of s)t.postMessage(e)}}class ProcessEventService{eventSender;services=null;constructor(e){this.eventSender=e}async initServices(){const e=await this.initIndexedDB(),s=new ChartService,t=new RewardDataService(e,s,this.eventSender),r=new MyWatcherDataService(e,this.eventSender),a=new ChainPerformanceDataService(e,this.eventSender),n=new DownloadService(rs_FullDownloadsBatchSize,rs_InitialNDownloads,t,this.eventSender,e),d=new DownloadService(rs_FullDownloadsBatchSize,rs_InitialNDownloads,r,this.eventSender,e),u=new DownloadService(rs_PerfFullDownloadsBatchSize,rs_PerfInitialNDownloads,a,this.eventSender,e);return this.services={dataService:t,chainPerformanceDataService:a,myWatcherDataService:r,downloadService:n,chartService:s,downloadPerfService:u,downloadMyWatchersService:d},this.services}async processEvent(e){if(e.type==="StatisticsScreenLoaded"||e.type==="PerformanceScreenLoaded"||e.type==="MyWatchersScreenLoaded"||e.type==="RequestInputsDownload"){const{dataService:s,downloadService:t,downloadPerfService:r,downloadMyWatchersService:a,chartService:n,chainPerformanceDataService:d,myWatcherDataService:u}=await this.initServices();if(e.type==="RequestInputsDownload"){console.log("Rosen service worker received RequestInputsDownload initiating syncing of data by downloading from blockchain, event.data: "+e.data);try{const h=await n.getAddressCharts(await s.getSortedInputs());this.eventSender.sendEvent({type:"AddressChartChanged",data:h}),e.data&&typeof e.data=="string"?await t.downloadForAddress(e.data):await t.downloadForAddresses()}catch(h){console.error("Error initializing IndexedDB or downloading addresses:",h)}}else if(e.type==="StatisticsScreenLoaded"){console.log("Rosen service worker received StatisticsScreenLoaded initiating syncing of data by downloading from blockchain");try{const h=await s.getSortedInputs();this.eventSender.sendEvent({type:"InputsChanged",data:h}),await t.downloadForAddresses()}catch(h){console.error("Error initializing IndexedDB or downloading addresses:",h)}}else if(e.type==="MyWatchersScreenLoaded"){console.log("Rosen service worker received MyWatchersScreenLoaded initiating syncing of data by downloading from blockchain");try{const h=await u.getAdressPermits();this.eventSender.sendEvent({type:"PermitsChanged",data:h}),await a.downloadForChainPermitAddresses()}catch(h){console.error("Error initializing IndexedDB or downloading addresses:",h)}}else if(e.type==="PerformanceScreenLoaded"){console.log("Rosen service worker received PerformanceScreenLoaded");try{console.log("Downloading perftxs.");const h=await d.getPerfTxs();this.eventSender.sendEvent({type:"PerfChartChanged",data:h}),r.downloadForAddress(hotWalletAddress)}catch(h){console.error("Error initializing IndexedDB or downloading addresses:",h)}}}}async initIndexedDB(){return new Promise((e,s)=>{let t=rs_DbName;const r=indexedDB.open(t);r.onsuccess=a=>{const n=a.target.result;e(n)},r.onerror=a=>{console.error("Error opening IndexedDB:",a.target.error),s(a.target.error)}})}}typeof window<"u"&&(window.ProcessEventService=ProcessEventService);class MyWatcherDataService extends DataService{db;eventSender;async getExistingData(e,s){for(const t of e.inputs)if(t.boxId){const r=await this.getDataById(this.createUniqueId(t.boxId,e.id,s),this.db);if(r)return r}for(const t of e.outputs)if(t.boxId){const r=await this.getDataById(this.createUniqueId(t.boxId,e.id,s),this.db);if(r)return r}return null}constructor(e,s){super(e),this.db=e,this.eventSender=s}createUniqueId(e,s,t){const r=`${s}_${e}_${t}`;let a=0,n,d;for(n=0;n<r.length;n++)d=r.charCodeAt(n),a=(a<<5)-a+d,a|=0;return a.toString()}getDataType(){return"permit"}async getWatcherPermits(){const e=this.getData(rs_PermitTxStoreName);console.log("Retrieving watcher permits and such");try{const s=await e;return s.forEach(t=>{t.assets=t.assets.filter(r=>r.name=="RSN").map(r=>r)}),s.sort((t,r)=>r.date.getTime()-t.date.getTime()),await new Promise(t=>{t(s)})}catch(s){return console.error(s),[]}}shouldAddToDb(e,s){return e!=null&&e.length>0&&e.length<=100&&s.some(t=>t.name==="RSN")}async getAdressPermits(){const e=await this.getWatcherPermits(),s={},t=[];for(const a of e){const n=a.assets.reduce((d,u)=>u.name==="RSN"?d+u.amount/Math.pow(10,u.decimals):d,0);s[a.wid]?s[a.wid]+=n:s[a.wid]=n}for(const a of e)t.some(n=>n.address==a.address)||t.push({address:a.address,wid:a.wid,lockedRSN:s[a.wid]||0,activeLockedRSN:0,chainType:a.chainType});const r=await this.getData(rs_AddressDataStoreName);return t.filter(a=>r.some(n=>n.address===a.address))}async addData(e,s,t){return new Promise((r,a)=>{const n=[];s.forEach(c=>{let w=c.inputs.flatMap(i=>i.assets).filter(i=>i.name.startsWith("WID-")).flatMap(i=>i.name),S=c.outputs.flatMap(i=>i.assets).filter(i=>i.name.startsWith("WID-")).flatMap(i=>i.name);const m=Array.from(new Set([...w,...S]));c.inputs.forEach(i=>{if(this.shouldAddToDb(i.address,i.assets)===!1)return;i.inputDate=new Date(c.timestamp),i.assets=i.assets.filter(f=>f.name=="RSN"||f.name.startsWith("WID-")),i.assets.forEach(f=>{f.tokenId=null});let y;for(y of m){const f={id:this.createUniqueId(i.boxId,c.id,e),address:i.address,date:i.inputDate,boxId:i.boxId,assets:i.assets||[],wid:y??"",chainType:getChainTypeForPermitAddress(e)};f.assets.length>0&&n.push(f)}}),c.outputs.forEach(i=>{if(this.shouldAddToDb(i.address,i.assets)===!1)return;i.outputDate=new Date(c.timestamp),i.assets=i.assets.filter(f=>f.name=="RSN"||f.name.startsWith("WID-")),i.assets.forEach(f=>{f.tokenId=null,f.amount=-f.amount});let y;for(y of m){const f={id:this.createUniqueId(i.boxId,c.id,e),address:i.address,date:i.outputDate,boxId:i.boxId,assets:i.assets||[],wid:y??"",chainType:getChainTypeForPermitAddress(e)};f.assets.length>0&&n.push(f)}})});const u=t.transaction([rs_PermitTxStoreName],"readwrite").objectStore(rs_PermitTxStoreName),h=n.map(c=>new Promise((w,S)=>{const m=u.put(c);m.onsuccess=()=>w(),m.onerror=i=>S(i.target.error)}));Promise.all(h).then(async()=>{const c=await this.getAdressPermits();this.eventSender.sendEvent({type:"PermitsChanged",data:c}),r()}).catch(a)})}async getDataById(e,s){return new Promise((t,r)=>{const d=s.transaction([rs_PermitTxStoreName],"readonly").objectStore(rs_PermitTxStoreName).get(e);d.onsuccess=()=>{const u=d.result;!u||u.id!==e?t(null):t(u)},d.onerror=u=>r(u.target.error)})}async getSortedPermits(){const e=await this.getWatcherPermits(),s=[];console.log("start retrieving permits from database");try{const t=await e;return t.forEach(r=>{s.push({id:r.id,date:r.date,address:r.address,assets:r.assets,wid:r.wid,boxId:r.boxId,chainType:r.chainType??getChainTypeForPermitAddress(r.address)})}),console.log("done retrieving permits from database "+t.length+" permits"),await new Promise(r=>{r(s)})}catch(t){return console.error(t),s}}}
