import { Directive, Input, Output, EventEmitter } from '@angular/core';
import { ActiveItemObserver } from './active-item-observer';
import * as i0 from "@angular/core";
export class SliderIntersectionObserver {
    get _viewport() {
        return this._el.nativeElement;
    }
    constructor(_zone, _el) {
        this._zone = _zone;
        this._el = _el;
        this._sensor = new ActiveItemObserver();
        this.activeIndexChange = new EventEmitter();
    }
    ngOnChanges() {
        (this.config.itemAutosize || this.disabled) ? this._unsubscribe() : this._subscribe();
    }
    ngOnDestroy() {
        this._unsubscribe();
    }
    _subscribe() {
        this._unsubscribe();
        if (!!this.adapter && !!this.items?.length) {
            const rootMargin = this.adapter.getRootMargin();
            if (this.config.debug) {
                this._viewport.style.setProperty('--intersection-margin', `"INTERSECTION(${rootMargin})"`);
            }
            this._zone.runOutsideAngular(() => {
                this._currentSubscription = this._sensor.observe(this._viewport, this.items.map((item) => item.nativeElement), rootMargin).subscribe((index) => {
                    this._zone.run(() => this.activeIndexChange.emit(index));
                });
            });
        }
    }
    _unsubscribe() {
        this._currentSubscription?.unsubscribe();
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.2.1", ngImport: i0, type: SliderIntersectionObserver, deps: [{ token: i0.NgZone }, { token: i0.ElementRef }], target: i0.ɵɵFactoryTarget.Directive }); }
    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "14.0.0", version: "18.2.1", type: SliderIntersectionObserver, isStandalone: true, selector: "[sliderIntersectionObserver]", inputs: { adapter: "adapter", items: "items", config: "config", disabled: ["sliderIntersectionObserverDisabled", "disabled"] }, outputs: { activeIndexChange: "activeIndexChange" }, usesOnChanges: true, ngImport: i0 }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.2.1", ngImport: i0, type: SliderIntersectionObserver, decorators: [{
            type: Directive,
            args: [{
                    selector: '[sliderIntersectionObserver]',
                    standalone: true
                }]
        }], ctorParameters: () => [{ type: i0.NgZone }, { type: i0.ElementRef }], propDecorators: { adapter: [{
                type: Input
            }], items: [{
                type: Input
            }], config: [{
                type: Input
            }], disabled: [{
                type: Input,
                args: ['sliderIntersectionObserverDisabled']
            }], activeIndexChange: [{
                type: Output
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2xpZGVyLWludGVyc2VjdGlvbi1vYnNlcnZlci5kaXJlY3RpdmUuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9wcm9qZWN0cy9uZy1nYWxsZXJ5L3NyYy9saWIvb2JzZXJ2ZXJzL3NsaWRlci1pbnRlcnNlY3Rpb24tb2JzZXJ2ZXIuZGlyZWN0aXZlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxTQUFTLEVBQUUsS0FBSyxFQUFFLE1BQU0sRUFBNEMsWUFBWSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBR2pILE9BQU8sRUFBRSxrQkFBa0IsRUFBRSxNQUFNLHdCQUF3QixDQUFDOztBQVE1RCxNQUFNLE9BQU8sMEJBQTBCO0lBTXJDLElBQVksU0FBUztRQUNuQixPQUFPLElBQUksQ0FBQyxHQUFHLENBQUMsYUFBYSxDQUFDO0lBQ2hDLENBQUM7SUFZRCxZQUFvQixLQUFhLEVBQVUsR0FBNEI7UUFBbkQsVUFBSyxHQUFMLEtBQUssQ0FBUTtRQUFVLFFBQUcsR0FBSCxHQUFHLENBQXlCO1FBaEIvRCxZQUFPLEdBQXVCLElBQUksa0JBQWtCLEVBQUUsQ0FBQztRQWNyRCxzQkFBaUIsR0FBeUIsSUFBSSxZQUFZLEVBQVUsQ0FBQztJQUcvRSxDQUFDO0lBRUQsV0FBVztRQUNULENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxZQUFZLElBQUksSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsWUFBWSxFQUFFLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxVQUFVLEVBQUUsQ0FBQztJQUN4RixDQUFDO0lBRUQsV0FBVztRQUNULElBQUksQ0FBQyxZQUFZLEVBQUUsQ0FBQztJQUN0QixDQUFDO0lBRU8sVUFBVTtRQUNoQixJQUFJLENBQUMsWUFBWSxFQUFFLENBQUM7UUFFcEIsSUFBSSxDQUFDLENBQUMsSUFBSSxDQUFDLE9BQU8sSUFBSSxDQUFDLENBQUMsSUFBSSxDQUFDLEtBQUssRUFBRSxNQUFNLEVBQUUsQ0FBQztZQUMzQyxNQUFNLFVBQVUsR0FBVyxJQUFJLENBQUMsT0FBTyxDQUFDLGFBQWEsRUFBRSxDQUFDO1lBQ3hELElBQUksSUFBSSxDQUFDLE1BQU0sQ0FBQyxLQUFLLEVBQUUsQ0FBQztnQkFDdEIsSUFBSSxDQUFDLFNBQVMsQ0FBQyxLQUFLLENBQUMsV0FBVyxDQUFDLHVCQUF1QixFQUFFLGlCQUFrQixVQUFXLElBQUksQ0FBQyxDQUFDO1lBQy9GLENBQUM7WUFFRCxJQUFJLENBQUMsS0FBSyxDQUFDLGlCQUFpQixDQUFDLEdBQUcsRUFBRTtnQkFDaEMsSUFBSSxDQUFDLG9CQUFvQixHQUFHLElBQUksQ0FBQyxPQUFPLENBQUMsT0FBTyxDQUM5QyxJQUFJLENBQUMsU0FBUyxFQUNkLElBQUksQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLENBQUMsSUFBMEIsRUFBRSxFQUFFLENBQUMsSUFBSSxDQUFDLGFBQWEsQ0FBQyxFQUNsRSxVQUFVLENBQ1gsQ0FBQyxTQUFTLENBQUMsQ0FBQyxLQUFhLEVBQUUsRUFBRTtvQkFDNUIsSUFBSSxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLGlCQUFpQixDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDO2dCQUMzRCxDQUFDLENBQUMsQ0FBQztZQUNMLENBQUMsQ0FBQyxDQUFDO1FBQ0wsQ0FBQztJQUNILENBQUM7SUFFTyxZQUFZO1FBQ2xCLElBQUksQ0FBQyxvQkFBb0IsRUFBRSxXQUFXLEVBQUUsQ0FBQztJQUMzQyxDQUFDOzhHQXREVSwwQkFBMEI7a0dBQTFCLDBCQUEwQjs7MkZBQTFCLDBCQUEwQjtrQkFKdEMsU0FBUzttQkFBQztvQkFDVCxRQUFRLEVBQUUsOEJBQThCO29CQUN4QyxVQUFVLEVBQUUsSUFBSTtpQkFDakI7b0dBV1UsT0FBTztzQkFBZixLQUFLO2dCQUVHLEtBQUs7c0JBQWIsS0FBSztnQkFFRyxNQUFNO3NCQUFkLEtBQUs7Z0JBRXVDLFFBQVE7c0JBQXBELEtBQUs7dUJBQUMsb0NBQW9DO2dCQUVqQyxpQkFBaUI7c0JBQTFCLE1BQU0iLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBEaXJlY3RpdmUsIElucHV0LCBPdXRwdXQsIE9uQ2hhbmdlcywgT25EZXN0cm95LCBOZ1pvbmUsIEVsZW1lbnRSZWYsIEV2ZW50RW1pdHRlciB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQgeyBza2lwLCBTdWJzY3JpcHRpb24gfSBmcm9tICdyeGpzJztcclxuaW1wb3J0IHsgR2FsbGVyeUNvbmZpZyB9IGZyb20gJy4uL21vZGVscy9jb25maWcubW9kZWwnO1xyXG5pbXBvcnQgeyBBY3RpdmVJdGVtT2JzZXJ2ZXIgfSBmcm9tICcuL2FjdGl2ZS1pdGVtLW9ic2VydmVyJztcclxuaW1wb3J0IHsgU2xpZGVyQWRhcHRlciB9IGZyb20gJy4uL2NvbXBvbmVudHMvYWRhcHRlcnMnO1xyXG5pbXBvcnQgeyBHYWxsZXJ5SXRlbUNvbXBvbmVudCB9IGZyb20gJy4uL2NvbXBvbmVudHMvZ2FsbGVyeS1pdGVtLmNvbXBvbmVudCc7XHJcblxyXG5ARGlyZWN0aXZlKHtcclxuICBzZWxlY3RvcjogJ1tzbGlkZXJJbnRlcnNlY3Rpb25PYnNlcnZlcl0nLFxyXG4gIHN0YW5kYWxvbmU6IHRydWVcclxufSlcclxuZXhwb3J0IGNsYXNzIFNsaWRlckludGVyc2VjdGlvbk9ic2VydmVyIGltcGxlbWVudHMgT25DaGFuZ2VzLCBPbkRlc3Ryb3kge1xyXG5cclxuICBwcml2YXRlIF9jdXJyZW50U3Vic2NyaXB0aW9uOiBTdWJzY3JpcHRpb247XHJcblxyXG4gIHByaXZhdGUgX3NlbnNvcjogQWN0aXZlSXRlbU9ic2VydmVyID0gbmV3IEFjdGl2ZUl0ZW1PYnNlcnZlcigpO1xyXG5cclxuICBwcml2YXRlIGdldCBfdmlld3BvcnQoKTogSFRNTEVsZW1lbnQge1xyXG4gICAgcmV0dXJuIHRoaXMuX2VsLm5hdGl2ZUVsZW1lbnQ7XHJcbiAgfVxyXG5cclxuICBASW5wdXQoKSBhZGFwdGVyOiBTbGlkZXJBZGFwdGVyO1xyXG5cclxuICBASW5wdXQoKSBpdGVtczogR2FsbGVyeUl0ZW1Db21wb25lbnRbXTtcclxuXHJcbiAgQElucHV0KCkgY29uZmlnOiBHYWxsZXJ5Q29uZmlnO1xyXG5cclxuICBASW5wdXQoJ3NsaWRlckludGVyc2VjdGlvbk9ic2VydmVyRGlzYWJsZWQnKSBkaXNhYmxlZDogYm9vbGVhbjtcclxuXHJcbiAgQE91dHB1dCgpIGFjdGl2ZUluZGV4Q2hhbmdlOiBFdmVudEVtaXR0ZXI8bnVtYmVyPiA9IG5ldyBFdmVudEVtaXR0ZXI8bnVtYmVyPigpO1xyXG5cclxuICBjb25zdHJ1Y3Rvcihwcml2YXRlIF96b25lOiBOZ1pvbmUsIHByaXZhdGUgX2VsOiBFbGVtZW50UmVmPEhUTUxFbGVtZW50Pikge1xyXG4gIH1cclxuXHJcbiAgbmdPbkNoYW5nZXMoKTogdm9pZCB7XHJcbiAgICAodGhpcy5jb25maWcuaXRlbUF1dG9zaXplIHx8IHRoaXMuZGlzYWJsZWQpID8gdGhpcy5fdW5zdWJzY3JpYmUoKSA6IHRoaXMuX3N1YnNjcmliZSgpO1xyXG4gIH1cclxuXHJcbiAgbmdPbkRlc3Ryb3koKTogdm9pZCB7XHJcbiAgICB0aGlzLl91bnN1YnNjcmliZSgpO1xyXG4gIH1cclxuXHJcbiAgcHJpdmF0ZSBfc3Vic2NyaWJlKCk6IHZvaWQge1xyXG4gICAgdGhpcy5fdW5zdWJzY3JpYmUoKTtcclxuXHJcbiAgICBpZiAoISF0aGlzLmFkYXB0ZXIgJiYgISF0aGlzLml0ZW1zPy5sZW5ndGgpIHtcclxuICAgICAgY29uc3Qgcm9vdE1hcmdpbjogc3RyaW5nID0gdGhpcy5hZGFwdGVyLmdldFJvb3RNYXJnaW4oKTtcclxuICAgICAgaWYgKHRoaXMuY29uZmlnLmRlYnVnKSB7XHJcbiAgICAgICAgdGhpcy5fdmlld3BvcnQuc3R5bGUuc2V0UHJvcGVydHkoJy0taW50ZXJzZWN0aW9uLW1hcmdpbicsIGBcIklOVEVSU0VDVElPTigkeyByb290TWFyZ2luIH0pXCJgKTtcclxuICAgICAgfVxyXG5cclxuICAgICAgdGhpcy5fem9uZS5ydW5PdXRzaWRlQW5ndWxhcigoKSA9PiB7XHJcbiAgICAgICAgdGhpcy5fY3VycmVudFN1YnNjcmlwdGlvbiA9IHRoaXMuX3NlbnNvci5vYnNlcnZlKFxyXG4gICAgICAgICAgdGhpcy5fdmlld3BvcnQsXHJcbiAgICAgICAgICB0aGlzLml0ZW1zLm1hcCgoaXRlbTogR2FsbGVyeUl0ZW1Db21wb25lbnQpID0+IGl0ZW0ubmF0aXZlRWxlbWVudCksXHJcbiAgICAgICAgICByb290TWFyZ2luXHJcbiAgICAgICAgKS5zdWJzY3JpYmUoKGluZGV4OiBudW1iZXIpID0+IHtcclxuICAgICAgICAgIHRoaXMuX3pvbmUucnVuKCgpID0+IHRoaXMuYWN0aXZlSW5kZXhDaGFuZ2UuZW1pdChpbmRleCkpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgICB9KTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIHByaXZhdGUgX3Vuc3Vic2NyaWJlKCk6IHZvaWQge1xyXG4gICAgdGhpcy5fY3VycmVudFN1YnNjcmlwdGlvbj8udW5zdWJzY3JpYmUoKTtcclxuICB9XHJcbn1cclxuIl19