import { Directive, Input, Output, EventEmitter } from '@angular/core';
import { combineLatest, filter, switchMap } from 'rxjs';
import { ActiveItemObserver } from './active-item-observer';
import { resizeObservable } from '../utils/resize-observer';
import * as i0 from "@angular/core";
import * as i1 from "../components/gallery-item.component";
export class ItemIntersectionObserver {
    get _viewport() {
        return this._item.nativeElement.parentElement.parentElement;
    }
    constructor(_zone, _item) {
        this._zone = _zone;
        this._item = _item;
        this._sensor = new ActiveItemObserver();
        this.activeIndexChange = new EventEmitter();
    }
    ngOnChanges() {
        (this.config.itemAutosize && !this.disabled) ? this._subscribe() : this._unsubscribe();
    }
    ngOnDestroy() {
        this._unsubscribe();
    }
    _subscribe() {
        this._unsubscribe();
        if (!!this.adapter) {
            this._zone.runOutsideAngular(() => {
                this._currentSubscription = combineLatest([
                    resizeObservable(this._viewport),
                    resizeObservable(this._item.nativeElement)
                ]).pipe(switchMap(() => this._item.state$), filter((state) => state !== 'loading'), switchMap(() => {
                    const rootMargin = this.adapter.getElementRootMargin(this._viewport, this._item.nativeElement);
                    if (this.config.debug) {
                        this._item.nativeElement.style.setProperty('--item-intersection-margin', `"VIEWPORT(${this._viewport.clientWidth}x${this._viewport.clientHeight}) ITEM(${this._item.nativeElement.clientWidth}x${this._item.nativeElement.clientHeight}) INTERSECTION(${rootMargin})"`);
                    }
                    return this._sensor.observe(this._viewport, [this._item.nativeElement], rootMargin);
                })).subscribe((index) => {
                    this._zone.run(() => this.activeIndexChange.emit(index));
                });
            });
        }
    }
    _unsubscribe() {
        this._currentSubscription?.unsubscribe();
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.2.1", ngImport: i0, type: ItemIntersectionObserver, deps: [{ token: i0.NgZone }, { token: i1.GalleryItemComponent }], target: i0.ɵɵFactoryTarget.Directive }); }
    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "14.0.0", version: "18.2.1", type: ItemIntersectionObserver, isStandalone: true, selector: "[itemIntersectionObserver]", inputs: { adapter: "adapter", config: "config", disabled: ["itemIntersectionObserverDisabled", "disabled"] }, outputs: { activeIndexChange: "activeIndexChange" }, usesOnChanges: true, ngImport: i0 }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.2.1", ngImport: i0, type: ItemIntersectionObserver, decorators: [{
            type: Directive,
            args: [{
                    selector: '[itemIntersectionObserver]',
                    standalone: true
                }]
        }], ctorParameters: () => [{ type: i0.NgZone }, { type: i1.GalleryItemComponent }], propDecorators: { adapter: [{
                type: Input
            }], config: [{
                type: Input
            }], disabled: [{
                type: Input,
                args: ['itemIntersectionObserverDisabled']
            }], activeIndexChange: [{
                type: Output
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaXRlbS1pbnRlcnNlY3Rpb24tb2JzZXJ2ZXIuZGlyZWN0aXZlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vcHJvamVjdHMvbmctZ2FsbGVyeS9zcmMvbGliL29ic2VydmVycy9pdGVtLWludGVyc2VjdGlvbi1vYnNlcnZlci5kaXJlY3RpdmUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLFNBQVMsRUFBRSxLQUFLLEVBQUUsTUFBTSxFQUFnQyxZQUFZLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDckcsT0FBTyxFQUFnQixhQUFhLEVBQUUsTUFBTSxFQUFFLFNBQVMsRUFBRSxNQUFNLE1BQU0sQ0FBQztBQUV0RSxPQUFPLEVBQUUsa0JBQWtCLEVBQUUsTUFBTSx3QkFBd0IsQ0FBQztBQUM1RCxPQUFPLEVBQUUsZ0JBQWdCLEVBQUUsTUFBTSwwQkFBMEIsQ0FBQzs7O0FBUzVELE1BQU0sT0FBTyx3QkFBd0I7SUFNbkMsSUFBWSxTQUFTO1FBQ25CLE9BQU8sSUFBSSxDQUFDLEtBQUssQ0FBQyxhQUFhLENBQUMsYUFBYSxDQUFDLGFBQWEsQ0FBQztJQUM5RCxDQUFDO0lBVUQsWUFBb0IsS0FBYSxFQUFVLEtBQTJCO1FBQWxELFVBQUssR0FBTCxLQUFLLENBQVE7UUFBVSxVQUFLLEdBQUwsS0FBSyxDQUFzQjtRQWQ5RCxZQUFPLEdBQXVCLElBQUksa0JBQWtCLEVBQUUsQ0FBQztRQVlyRCxzQkFBaUIsR0FBeUIsSUFBSSxZQUFZLEVBQVUsQ0FBQztJQUcvRSxDQUFDO0lBRUQsV0FBVztRQUNULENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxZQUFZLElBQUksQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxVQUFVLEVBQUUsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLFlBQVksRUFBRSxDQUFDO0lBQ3pGLENBQUM7SUFFRCxXQUFXO1FBQ1QsSUFBSSxDQUFDLFlBQVksRUFBRSxDQUFDO0lBQ3RCLENBQUM7SUFFTyxVQUFVO1FBQ2hCLElBQUksQ0FBQyxZQUFZLEVBQUUsQ0FBQztRQUVwQixJQUFJLENBQUMsQ0FBQyxJQUFJLENBQUMsT0FBTyxFQUFFLENBQUM7WUFDbkIsSUFBSSxDQUFDLEtBQUssQ0FBQyxpQkFBaUIsQ0FBQyxHQUFHLEVBQUU7Z0JBQ2hDLElBQUksQ0FBQyxvQkFBb0IsR0FBRyxhQUFhLENBQUM7b0JBQ3hDLGdCQUFnQixDQUFDLElBQUksQ0FBQyxTQUFTLENBQUM7b0JBQ2hDLGdCQUFnQixDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsYUFBYSxDQUFDO2lCQUMzQyxDQUFDLENBQUMsSUFBSSxDQUNMLFNBQVMsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLE1BQU0sQ0FBQyxFQUNsQyxNQUFNLENBQUMsQ0FBQyxLQUFnQixFQUFFLEVBQUUsQ0FBQyxLQUFLLEtBQUssU0FBUyxDQUFDLEVBQ2pELFNBQVMsQ0FBQyxHQUFHLEVBQUU7b0JBQ2IsTUFBTSxVQUFVLEdBQVcsSUFBSSxDQUFDLE9BQU8sQ0FBQyxvQkFBb0IsQ0FBQyxJQUFJLENBQUMsU0FBUyxFQUFFLElBQUksQ0FBQyxLQUFLLENBQUMsYUFBYSxDQUFDLENBQUM7b0JBQ3ZHLElBQUksSUFBSSxDQUFDLE1BQU0sQ0FBQyxLQUFLLEVBQUUsQ0FBQzt3QkFDdEIsSUFBSSxDQUFDLEtBQUssQ0FBQyxhQUFhLENBQUMsS0FBSyxDQUFDLFdBQVcsQ0FBQyw0QkFBNEIsRUFBRSxhQUFjLElBQUksQ0FBQyxTQUFTLENBQUMsV0FBWSxJQUFLLElBQUksQ0FBQyxTQUFTLENBQUMsWUFBYSxVQUFXLElBQUksQ0FBQyxLQUFLLENBQUMsYUFBYSxDQUFDLFdBQVksSUFBSyxJQUFJLENBQUMsS0FBSyxDQUFDLGFBQWEsQ0FBQyxZQUFhLGtCQUFtQixVQUFXLElBQUksQ0FBQyxDQUFDO29CQUNwUixDQUFDO29CQUVELE9BQU8sSUFBSSxDQUFDLE9BQU8sQ0FBQyxPQUFPLENBQ3pCLElBQUksQ0FBQyxTQUFTLEVBQ2QsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLGFBQWEsQ0FBQyxFQUMxQixVQUFVLENBQ1gsQ0FBQztnQkFDSixDQUFDLENBQ0EsQ0FDRixDQUFDLFNBQVMsQ0FBQyxDQUFDLEtBQWEsRUFBRSxFQUFFO29CQUM1QixJQUFJLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsaUJBQWlCLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUM7Z0JBQzNELENBQUMsQ0FBQyxDQUFDO1lBQ0wsQ0FBQyxDQUFDLENBQUM7UUFDTCxDQUFDO0lBQ0gsQ0FBQztJQUVPLFlBQVk7UUFDbEIsSUFBSSxDQUFDLG9CQUFvQixFQUFFLFdBQVcsRUFBRSxDQUFDO0lBQzNDLENBQUM7OEdBOURVLHdCQUF3QjtrR0FBeEIsd0JBQXdCOzsyRkFBeEIsd0JBQXdCO2tCQUpwQyxTQUFTO21CQUFDO29CQUNULFFBQVEsRUFBRSw0QkFBNEI7b0JBQ3RDLFVBQVUsRUFBRSxJQUFJO2lCQUNqQjs4R0FXVSxPQUFPO3NCQUFmLEtBQUs7Z0JBRUcsTUFBTTtzQkFBZCxLQUFLO2dCQUVxQyxRQUFRO3NCQUFsRCxLQUFLO3VCQUFDLGtDQUFrQztnQkFFL0IsaUJBQWlCO3NCQUExQixNQUFNIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgRGlyZWN0aXZlLCBJbnB1dCwgT3V0cHV0LCBPbkNoYW5nZXMsIE9uRGVzdHJveSwgTmdab25lLCBFdmVudEVtaXR0ZXIgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuaW1wb3J0IHsgU3Vic2NyaXB0aW9uLCBjb21iaW5lTGF0ZXN0LCBmaWx0ZXIsIHN3aXRjaE1hcCB9IGZyb20gJ3J4anMnO1xyXG5pbXBvcnQgeyBHYWxsZXJ5Q29uZmlnIH0gZnJvbSAnLi4vbW9kZWxzL2NvbmZpZy5tb2RlbCc7XHJcbmltcG9ydCB7IEFjdGl2ZUl0ZW1PYnNlcnZlciB9IGZyb20gJy4vYWN0aXZlLWl0ZW0tb2JzZXJ2ZXInO1xyXG5pbXBvcnQgeyByZXNpemVPYnNlcnZhYmxlIH0gZnJvbSAnLi4vdXRpbHMvcmVzaXplLW9ic2VydmVyJztcclxuaW1wb3J0IHsgU2xpZGVyQWRhcHRlciB9IGZyb20gJy4uL2NvbXBvbmVudHMvYWRhcHRlcnMnO1xyXG5pbXBvcnQgeyBHYWxsZXJ5SXRlbUNvbXBvbmVudCB9IGZyb20gJy4uL2NvbXBvbmVudHMvZ2FsbGVyeS1pdGVtLmNvbXBvbmVudCc7XHJcbmltcG9ydCB7IEl0ZW1TdGF0ZSB9IGZyb20gJy4uL2NvbXBvbmVudHMvdGVtcGxhdGVzL2l0ZW1zLm1vZGVsJztcclxuXHJcbkBEaXJlY3RpdmUoe1xyXG4gIHNlbGVjdG9yOiAnW2l0ZW1JbnRlcnNlY3Rpb25PYnNlcnZlcl0nLFxyXG4gIHN0YW5kYWxvbmU6IHRydWVcclxufSlcclxuZXhwb3J0IGNsYXNzIEl0ZW1JbnRlcnNlY3Rpb25PYnNlcnZlciBpbXBsZW1lbnRzIE9uQ2hhbmdlcywgT25EZXN0cm95IHtcclxuXHJcbiAgcHJpdmF0ZSBfY3VycmVudFN1YnNjcmlwdGlvbjogU3Vic2NyaXB0aW9uO1xyXG5cclxuICBwcml2YXRlIF9zZW5zb3I6IEFjdGl2ZUl0ZW1PYnNlcnZlciA9IG5ldyBBY3RpdmVJdGVtT2JzZXJ2ZXIoKTtcclxuXHJcbiAgcHJpdmF0ZSBnZXQgX3ZpZXdwb3J0KCk6IEhUTUxFbGVtZW50IHtcclxuICAgIHJldHVybiB0aGlzLl9pdGVtLm5hdGl2ZUVsZW1lbnQucGFyZW50RWxlbWVudC5wYXJlbnRFbGVtZW50O1xyXG4gIH1cclxuXHJcbiAgQElucHV0KCkgYWRhcHRlcjogU2xpZGVyQWRhcHRlcjtcclxuXHJcbiAgQElucHV0KCkgY29uZmlnOiBHYWxsZXJ5Q29uZmlnO1xyXG5cclxuICBASW5wdXQoJ2l0ZW1JbnRlcnNlY3Rpb25PYnNlcnZlckRpc2FibGVkJykgZGlzYWJsZWQ6IGJvb2xlYW47XHJcblxyXG4gIEBPdXRwdXQoKSBhY3RpdmVJbmRleENoYW5nZTogRXZlbnRFbWl0dGVyPG51bWJlcj4gPSBuZXcgRXZlbnRFbWl0dGVyPG51bWJlcj4oKTtcclxuXHJcbiAgY29uc3RydWN0b3IocHJpdmF0ZSBfem9uZTogTmdab25lLCBwcml2YXRlIF9pdGVtOiBHYWxsZXJ5SXRlbUNvbXBvbmVudCkge1xyXG4gIH1cclxuXHJcbiAgbmdPbkNoYW5nZXMoKTogdm9pZCB7XHJcbiAgICAodGhpcy5jb25maWcuaXRlbUF1dG9zaXplICYmICF0aGlzLmRpc2FibGVkKSA/IHRoaXMuX3N1YnNjcmliZSgpIDogdGhpcy5fdW5zdWJzY3JpYmUoKTtcclxuICB9XHJcblxyXG4gIG5nT25EZXN0cm95KCk6IHZvaWQge1xyXG4gICAgdGhpcy5fdW5zdWJzY3JpYmUoKTtcclxuICB9XHJcblxyXG4gIHByaXZhdGUgX3N1YnNjcmliZSgpOiB2b2lkIHtcclxuICAgIHRoaXMuX3Vuc3Vic2NyaWJlKCk7XHJcblxyXG4gICAgaWYgKCEhdGhpcy5hZGFwdGVyKSB7XHJcbiAgICAgIHRoaXMuX3pvbmUucnVuT3V0c2lkZUFuZ3VsYXIoKCkgPT4ge1xyXG4gICAgICAgIHRoaXMuX2N1cnJlbnRTdWJzY3JpcHRpb24gPSBjb21iaW5lTGF0ZXN0KFtcclxuICAgICAgICAgIHJlc2l6ZU9ic2VydmFibGUodGhpcy5fdmlld3BvcnQpLFxyXG4gICAgICAgICAgcmVzaXplT2JzZXJ2YWJsZSh0aGlzLl9pdGVtLm5hdGl2ZUVsZW1lbnQpXHJcbiAgICAgICAgXSkucGlwZShcclxuICAgICAgICAgIHN3aXRjaE1hcCgoKSA9PiB0aGlzLl9pdGVtLnN0YXRlJCksXHJcbiAgICAgICAgICBmaWx0ZXIoKHN0YXRlOiBJdGVtU3RhdGUpID0+IHN0YXRlICE9PSAnbG9hZGluZycpLFxyXG4gICAgICAgICAgc3dpdGNoTWFwKCgpID0+IHtcclxuICAgICAgICAgICAgY29uc3Qgcm9vdE1hcmdpbjogc3RyaW5nID0gdGhpcy5hZGFwdGVyLmdldEVsZW1lbnRSb290TWFyZ2luKHRoaXMuX3ZpZXdwb3J0LCB0aGlzLl9pdGVtLm5hdGl2ZUVsZW1lbnQpO1xyXG4gICAgICAgICAgICBpZiAodGhpcy5jb25maWcuZGVidWcpIHtcclxuICAgICAgICAgICAgICB0aGlzLl9pdGVtLm5hdGl2ZUVsZW1lbnQuc3R5bGUuc2V0UHJvcGVydHkoJy0taXRlbS1pbnRlcnNlY3Rpb24tbWFyZ2luJywgYFwiVklFV1BPUlQoJHsgdGhpcy5fdmlld3BvcnQuY2xpZW50V2lkdGggfXgkeyB0aGlzLl92aWV3cG9ydC5jbGllbnRIZWlnaHQgfSkgSVRFTSgkeyB0aGlzLl9pdGVtLm5hdGl2ZUVsZW1lbnQuY2xpZW50V2lkdGggfXgkeyB0aGlzLl9pdGVtLm5hdGl2ZUVsZW1lbnQuY2xpZW50SGVpZ2h0IH0pIElOVEVSU0VDVElPTigkeyByb290TWFyZ2luIH0pXCJgKTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX3NlbnNvci5vYnNlcnZlKFxyXG4gICAgICAgICAgICAgIHRoaXMuX3ZpZXdwb3J0LFxyXG4gICAgICAgICAgICAgIFt0aGlzLl9pdGVtLm5hdGl2ZUVsZW1lbnRdLFxyXG4gICAgICAgICAgICAgIHJvb3RNYXJnaW5cclxuICAgICAgICAgICAgKTtcclxuICAgICAgICAgIH1cclxuICAgICAgICAgIClcclxuICAgICAgICApLnN1YnNjcmliZSgoaW5kZXg6IG51bWJlcikgPT4ge1xyXG4gICAgICAgICAgdGhpcy5fem9uZS5ydW4oKCkgPT4gdGhpcy5hY3RpdmVJbmRleENoYW5nZS5lbWl0KGluZGV4KSk7XHJcbiAgICAgICAgfSk7XHJcbiAgICAgIH0pO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgcHJpdmF0ZSBfdW5zdWJzY3JpYmUoKTogdm9pZCB7XHJcbiAgICB0aGlzLl9jdXJyZW50U3Vic2NyaXB0aW9uPy51bnN1YnNjcmliZSgpO1xyXG4gIH1cclxufVxyXG4iXX0=