{
    "pipes": [],
    "interfaces": [
        {
            "name": "AddressData",
            "id": "interface-AddressData-0516426d8e20c4b6339f9fdc3bb21d06f8cc54c9be0d530bb788639bf0a531f3067cebad105048e92f1fb067111ec6ae4ce5c1df038cef7349792c6ccb512426",
            "file": "src/shared/ts/download.service.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "interface AddressData {\n  address: string;\n}\n\ninterface TransactionItem {\n  outputCreatedAt: string | number | Date;\n  timestamp: string;\n  inputs: Input[];\n  outputs: Output[];\n  id: string;\n}\n\ninterface FetchTransactionsResponse {\n  transactions: TransactionItem[];\n  items: TransactionItem[];\n  total: number;\n}\n\ninterface DownloadStatus {\n  address: string;\n  Address: string;\n  status: string;\n  lastDownloadDate: Date | undefined;\n}\n\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nclass DownloadService<T> {\n  private busyCounter = 0;\n  private downloadFullSize = rs_FullDownloadsBatchSize;\n  private downloadInitialSize = rs_InitialNDownloads;\n  //private static addressDownloadDateMap = new Map<string, Date>();\n\n  constructor(\n    downloadFullSize: number,\n    downloadInitialSize: number,\n    private dataService: DataService<T>,\n    private eventSender: EventSender,\n    private db: IDBDatabase,\n  ) {\n    this.downloadFullSize = downloadFullSize;\n    this.downloadInitialSize = downloadInitialSize;\n  }\n\n  async fetchTransactions(url: string): Promise<FetchTransactionsResponse> {\n    try {\n      const response: Response = await fetch(url);\n      if (!response.ok) throw new Error(`Server returned code: ${response.status}`);\n      return (await response.json()) as FetchTransactionsResponse;\n    } catch (error) {\n      console.error(`An error occurred: ${error}`);\n      throw error;\n    }\n  }\n\n  async downloadTransactions(\n    address: string,\n    offset = 0,\n    limit = 500,\n  ): Promise<FetchTransactionsResponse> {\n    const url = `https://${rs_ErgoExplorerHost}/api/v1/addresses/${address}/transactions?offset=${offset}&limit=${limit}`;\n    console.log(`Downloading from: ${url}`);\n\n    const response: FetchTransactionsResponse = await this.fetchTransactions(url);\n    const result: FetchTransactionsResponse = {\n      transactions: response.items,\n      total: response.total,\n      items: [],\n    };\n\n    for (const item of response.items) {\n      const inputDate: Date = new Date(item.timestamp);\n      if (inputDate < rs_StartFrom) {\n        return result;\n      }\n    }\n\n    return result;\n  }\n\n  async downloadForAddresses(): Promise<void> {\n    try {\n      const addresses: AddressData[] =\n        await this.dataService.getData<AddressData>(rs_AddressDataStoreName);\n\n      const downloadPromises: Promise<void>[] = addresses.map(async (addressObj: AddressData) => {\n        await this.downloadForAddress(addressObj.address);\n      });\n\n      await Promise.all(downloadPromises);\n    } catch (e) {\n      console.error('Error downloading for addresses:', e);\n    }\n  }\n\n  // Busy Counter\n  private increaseBusyCounter(address: string): void {\n    if (this.busyCounter === 0) {\n      this.eventSender.sendEvent({\n        type: 'StartFullDownload',\n        data: address,\n      });\n    }\n    this.busyCounter++;\n  }\n\n  private decreaseBusyCounter(address: string): void {\n    this.busyCounter--;\n    if (this.busyCounter === 0) {\n      this.eventSender.sendEvent({\n        type: 'EndFullDownload',\n        data: address,\n      });\n    }\n  }\n\n  // Download All for Address (recursive)\n  async downloadAllForAddress(address: string, offset: number, db: IDBDatabase): Promise<void> {\n    this.increaseBusyCounter(address);\n    console.log(this.busyCounter);\n\n    try {\n      const result: FetchTransactionsResponse = await this.downloadTransactions(\n        address,\n        offset,\n        this.downloadFullSize + 10,\n      );\n      console.log(\n        `Processing full download(offset = ${offset}, size = ${this.downloadFullSize}) for: ${address}`,\n      );\n\n      //const t = this.processItems(result.transactions);\n      //console.log('permit amount ' + t);\n\n      if (!result.transactions || result.transactions.length === 0 || offset > 100000) {\n        await this.setDownloadStatus(address, 'true', db);\n        console.log(this.busyCounter);\n        return;\n      }\n\n      await this.dataService.addData(address, result.transactions, db);\n      //await this.dataService.compressInputs();\n\n      if (\n        this.dataService.getMaxDownloadDateDifference() >\n        new Date().getTime() -\n          new Date(result.transactions[result.transactions.length - 1].timestamp).getTime()\n      ) {\n        await this.downloadAllForAddress(address, offset + this.downloadFullSize, db);\n      } else {\n        await this.setDownloadStatus(address, 'true', db);\n      }\n    } catch (e) {\n      console.error(e);\n    } finally {\n      this.decreaseBusyCounter(address);\n      console.log(this.busyCounter);\n    }\n  }\n  /*\n  processItems(items: TransactionItem[]): number {\n    let r = 0;\n    items.forEach((item) => {\n      \n      item.inputs.forEach((i) => {\n        i.assets.forEach((a) => {\n          if (a.name == 'rspv2CardanoRWT') {\n            r -= a.amount;\n          }\n        });\n      });\n      \n\n      item.outputs.forEach((o) => {\n        if (!getChainType(o.address)) {\n          o.assets.forEach((a) => {\n            if (a.name == 'rspv2CardanoRWT') {\n              r += a.amount;\n              if (a.amount > 30000000) {\n                console.log('wtfffffffffffffff ' + a.amount);\n              }\n            }\n          });\n        }\n      });\n    });\n\n    return r / 3000000;\n  }\n  */\n\n  // Get Download Status for Address from IndexedDB\n  async getDownloadStatus(address: string, db: IDBDatabase): Promise<DownloadStatus> {\n    return new Promise((resolve, reject) => {\n      const transaction: IDBTransaction = db.transaction([rs_DownloadStatusStoreName], 'readonly');\n      const objectStore: IDBObjectStore = transaction.objectStore(rs_DownloadStatusStoreName);\n      const request: IDBRequest = objectStore.get(address + '_' + this.dataService.getDataType());\n\n      request.onsuccess = () => resolve(request.result as DownloadStatus);\n      request.onerror = (event: Event) => reject((event.target as IDBRequest).error);\n    });\n  }\n\n  // Set Download Status for Address in IndexedDB\n  async setDownloadStatus(address: string, status: string, db: IDBDatabase): Promise<void> {\n    let dbStatus: DownloadStatus | undefined = await this.getDownloadStatus(address, db);\n\n    if (!dbStatus) {\n      dbStatus = {\n        address: address + '_' + this.dataService.getDataType(),\n        Address: address,\n        status: status,\n        lastDownloadDate: undefined,\n      };\n    } else {\n      dbStatus.status = status;\n      dbStatus.address = address + '_' + this.dataService.getDataType();\n      dbStatus.Address = address;\n    }\n\n    await this.saveDownloadStatus(dbStatus, db);\n  }\n\n  async saveDownloadStatus(downloadStatus: DownloadStatus, db: IDBDatabase): Promise<void> {\n    return new Promise((resolve, reject) => {\n      const transaction: IDBTransaction = db.transaction([rs_DownloadStatusStoreName], 'readwrite');\n      const objectStore: IDBObjectStore = transaction.objectStore(rs_DownloadStatusStoreName);\n\n      const request: IDBRequest = objectStore.put(downloadStatus);\n\n      request.onsuccess = () => resolve();\n      request.onerror = (event: Event) => reject((event.target as IDBRequest).error);\n    });\n  }\n\n  async downloadForAddress(address: string): Promise<void> {\n    /*const downloadStatus = await this.getDownloadStatus(address, this.db);\n\n    \n    if (downloadStatus?.lastDownloadDate) {\n      const lastDownloadDate: Date | undefined = downloadStatus.lastDownloadDate;\n      if (lastDownloadDate && lastDownloadDate.getTime() > new Date().getTime() - 1000 * 120) {\n        return;\n      }\n    }\n\n    if (downloadStatus) {\n      downloadStatus.lastDownloadDate = new Date();\n      await this.saveDownloadStatus(downloadStatus, this.db);\n    }\n*/\n    this.increaseBusyCounter(address);\n    console.log(this.busyCounter);\n\n    try {\n      const result: FetchTransactionsResponse = await this.downloadTransactions(\n        address,\n        0,\n        this.downloadInitialSize,\n      );\n      console.log(\n        `Processing initial download(size = ${this.downloadInitialSize}) for: ${address}`,\n      );\n\n      const itemsz: number = result.transactions.length;\n\n      let existingData: T | null = null;\n\n      if (itemsz > this.downloadInitialSize / 4) {\n        for (let i = Math.floor(itemsz / 4); i < itemsz - Math.floor(itemsz / 4); i++) {\n          const item: TransactionItem = result.transactions[i];\n\n          existingData = await this.dataService.getExistingData(item, address);\n          if (existingData) {\n            break;\n          }\n        }\n      }\n\n      console.log('Add bunch of data');\n      await this.dataService.addData(address, result.transactions, this.db);\n      const downloadStatus: string =\n        (await this.getDownloadStatus(address, this.db))?.status || 'false';\n      if (existingData && downloadStatus === 'true') {\n        console.log(`Found existing boxId in db for ${address}, no need to download more.`);\n      } else if (itemsz >= this.downloadInitialSize) {\n        await this.setDownloadStatus(address, 'false', this.db);\n        console.log(`Downloading all tx's for : ${address}`);\n        await this.downloadAllForAddress(address, 0, this.db);\n      }\n    } catch (e) {\n      console.error(e);\n    } finally {\n      this.decreaseBusyCounter(address);\n      console.log(this.busyCounter);\n    }\n  }\n}\n",
            "properties": [
                {
                    "name": "address",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 2
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "Asset",
            "id": "interface-Asset-fc84b9c8de9c067aa13489c6f50dbddab401c283a01e212eb981acffc4a49b262929e75b3bd85e6779eb00e173438c0f2f7d04579a7cba8d0785c6180fdf7ab4",
            "file": "src/shared/ts/data.service.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "interface Asset {\n  id: string;\n  name: string;\n  quantity: number;\n  amount: number;\n  decimals: number;\n  tokenId: string | null;\n}\n\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\ninterface DbInput {\n  outputAddress: string;\n  inputDate: Date;\n  boxId: string;\n  assets: Asset[];\n  address?: string;\n  chainType?: string;\n}\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\ninterface Input {\n  boxId: string;\n  outputAddress: string;\n  inputDate: Date;\n  assets: Asset[];\n  address: string;\n  amount?: number;\n  accumulatedAmount?: number;\n  chainType?: ChainType | null;\n}\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\ninterface Output {\n  assets: Asset[];\n  address: string;\n}\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nabstract class DataService<T> {\n  constructor(public db: IDBDatabase) {}\n  abstract addData(\n    address: string,\n    transactions: TransactionItem[],\n    db: IDBDatabase,\n  ): Promise<void>;\n  abstract getDataType(): string;\n  getMaxDownloadDateDifference(): number {\n    return 3155760000000;\n  }\n\n  abstract getExistingData(transaction: TransactionItem, address: string): Promise<T | null>;\n\n  async getData<T>(storeName: string): Promise<T[]> {\n    return new Promise((resolve, reject) => {\n      const transaction: IDBTransaction = this.db.transaction([storeName], 'readonly');\n      const objectStore: IDBObjectStore = transaction.objectStore(storeName);\n      const request: IDBRequest = objectStore.getAll();\n\n      request.onsuccess = () => resolve(request.result as T[]);\n      request.onerror = (event: Event) => reject((event.target as IDBRequest).error);\n    });\n  }\n}\n",
            "properties": [
                {
                    "name": "amount",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "decimals",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 2
                },
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 3
                },
                {
                    "name": "quantity",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "tokenId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string | null",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 7
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "BeforeInstallPromptEvent",
            "id": "interface-BeforeInstallPromptEvent-214ccaeec1dc9fd3aa648ee84364d80b4d7e1383cea0e12e1586c39dd54facbac0ee7c912cdf94681dbe489a588346f75c206d57e38f5f0e15503b28c2570554",
            "file": "src/app/service/browser.service.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Injectable } from '@angular/core';\n\nimport { MatDialog } from '@angular/material/dialog';\nimport { QRDialogComponent } from '../statistics/qrdialog.component';\nimport { Router } from '@angular/router';\nimport { Address } from '../../service/ts/models/address';\nimport { Location } from '@angular/common';\nimport { EventService, EventType } from './event.service';\n\nexport interface BeforeInstallPromptEvent extends Event {\n  prompt: () => Promise<void>;\n  userChoice: Promise<{ outcome: 'accepted' | 'dismissed'; platform: string }>;\n}\n\nexport interface WindowWithPrompt extends Window {\n  showHomeLink?: boolean;\n  deferredPrompt?: BeforeInstallPromptEvent;\n}\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class BrowserService {\n  constructor(\n    private qrDialog: MatDialog,\n    private router: Router,\n    private location?: Location,\n    private eventService?: EventService,\n  ) {\n    window.addEventListener('beforeinstallprompt', (event: Event) => {\n      (window as WindowWithPrompt).showHomeLink = true;\n      event.preventDefault();\n\n      (window as WindowWithPrompt).deferredPrompt = event as BeforeInstallPromptEvent;\n    });\n\n    window.addEventListener('resize', () => {\n      this.eventService?.sendEvent(EventType.WindowResized);\n    });\n  }\n\n  showQR(addresses: Address[]): void {\n    this.qrDialog.open(QRDialogComponent, {\n      data: { qrData: this.getShareUrl(addresses) },\n    });\n  }\n\n  getShareUrl(addresses: Address[]): string {\n    const currentUrl = window.location.pathname;\n    const subdirectory = currentUrl.substring(0, currentUrl.lastIndexOf('/'));\n    const urlTree = this.router.createUrlTree(['main'], {\n      queryParams: { addresses: JSON.stringify(addresses) },\n    });\n    const url = window.location.origin + subdirectory + this.router.serializeUrl(urlTree);\n    return url;\n  }\n\n  replacePath() {\n    const currentPath = this.location?.path();\n\n    if (!currentPath) {\n      return;\n    }\n\n    if (currentPath.includes('?')) {\n      const parts = currentPath.split('?');\n      const newPath = parts[0];\n      this.location?.replaceState(newPath);\n    }\n  }\n\n  share(addresses: Address[]): void {\n    const url = this.getShareUrl(addresses);\n\n    console.log('share url: ' + url);\n\n    navigator.share({\n      title: 'Rosen Watcher',\n      text: 'Rosen Watcher',\n      url: url,\n    });\n  }\n\n  showHomeLink(): boolean {\n    return (window as WindowWithPrompt).showHomeLink == true;\n  }\n\n  installApp(): void {\n    if ((window as WindowWithPrompt).deferredPrompt) {\n      (window as WindowWithPrompt).deferredPrompt?.prompt();\n\n      (window as WindowWithPrompt).deferredPrompt?.userChoice.then(\n        (choiceResult: { outcome: 'accepted' | 'dismissed'; platform: string }) => {\n          if (choiceResult.outcome === 'accepted') {\n            (window as WindowWithPrompt).showHomeLink = false;\n          }\n          (window as WindowWithPrompt).deferredPrompt = undefined;\n        },\n      );\n    }\n  }\n}\n",
            "properties": [
                {
                    "name": "prompt",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "function",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 11
                },
                {
                    "name": "userChoice",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Promise<literal type>",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 12
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": [
                "Event"
            ]
        },
        {
            "name": "CurrencyRates",
            "id": "interface-CurrencyRates-7fd93a8d02340b329d8e78b3f763fe01ee58de6796e66586520736a95e2adbd005018b9e79f21ad6fd1c6fc448d453ae04a3cabb76c6aecd501455ac83f037f3",
            "file": "src/app/service/price.service.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { map } from 'rxjs/operators';\nimport { HttpDownloadService } from './http.download.service';\nimport { Observable, of } from 'rxjs';\n\nexport interface CurrencyRates {\n  ergo: {\n    eur: number;\n    usd: number;\n  };\n  'rosen-bridge': {\n    eur: number;\n    usd: number;\n  };\n}\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class PriceService {\n  constructor(private downloadService: HttpDownloadService) {}\n  private currencyRates: Record<string, Record<string, number>> = {};\n\n  public convert(amount: number, from: string, to: string): Observable<number> {\n    return this.getPrices().pipe(\n      map((rates: Record<string, Record<string, number>>) => {\n        if (rates[from][to] || rates[from][to] == 0) {\n          return rates[from][to] * amount;\n        } else {\n          return (rates[from]['EUR'] / rates[to]['EUR']) * amount;\n        }\n      }),\n    );\n  }\n\n  private getPrices(): Observable<Record<string, Record<string, number>>> {\n    const pricesUrl = `https://api.coingecko.com/api/v3/simple/price?ids=rosen-bridge,ergo&vs_currencies=eur,usd`;\n\n    if (this.currencyRates['ERG']) {\n      return of(this.currencyRates);\n    }\n\n    this.currencyRates = {\n      ERG: { EUR: 0, USD: 0 },\n      RSN: { EUR: 0, USD: 0 },\n    };\n\n    return this.downloadService.downloadStream<CurrencyRates>(pricesUrl).pipe(\n      map((data: CurrencyRates) => {\n        this.currencyRates['ERG']['EUR'] = data.ergo.eur;\n        this.currencyRates['ERG']['USD'] = data.ergo.usd;\n        this.currencyRates['RSN']['EUR'] = data['rosen-bridge'].eur;\n        this.currencyRates['RSN']['USD'] = data['rosen-bridge'].usd;\n        return this.currencyRates;\n      }),\n    );\n  }\n}\n",
            "properties": [
                {
                    "name": "ergo",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "rosen-bridge",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 11
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "DateNumberPoint",
            "id": "interface-DateNumberPoint-93c43d4e9d00e8ea851609c3907c3ada8f32bbbe0790a841f5264546eedf34e3973e3c0713f74e5dafb7157a4224b74fffe1a74a57434cc344d1fccb8f790f91",
            "file": "src/shared/ts/constants.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "const rs_DbName = 'rosenDatabase_1.1.5';\nconst rs_DbVersion = 28;\nconst rs_InputsStoreName = 'inputBoxes';\nconst rs_PerfTxStoreName = 'perfTxs';\nconst rs_DownloadStatusStoreName = 'downloadStatusStore';\nconst rs_AddressDataStoreName = 'addressData';\nconst rs_InitialNDownloads = 20;\nconst rs_FullDownloadsBatchSize = 400;\nconst rs_PerfInitialNDownloads = 10;\nconst rs_PerfFullDownloadsBatchSize = 40;\nconst rs_StartFrom: Date = new Date('2024-01-01');\nconst rs_Input_Key = ['boxId', 'outputAddress'];\nconst rs_PerfTx_Key = 'id';\nconst rs_Address_Key = 'address';\nconst rs_PermitCost = 3000;\nconst rs_WatcherCollateralRSN = 30000;\nconst rs_WatcherCollateralERG = 800;\nconst rs_ErgoExplorerHost = 'api.ergoplatform.com';\n//const rs_ErgoExplorerHost = 'api.ergo.aap.cornell.edu';\n\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\ninterface DateNumberPoint {\n  x: Date;\n  y: number;\n}\n\nenum Period {\n  Day = 'Day',\n  Week = 'Week',\n  Month = 'Month',\n  Year = 'year',\n  All = 'All',\n}\n\nenum Currency {\n  EUR = 'EUR',\n  USD = 'USD',\n  ERG = 'ERG',\n  RSN = 'RSN',\n}\n\nif (typeof window !== 'undefined') {\n  (window as any).rs_DbName = rs_DbName;\n  (window as any).rs_DbVersion = rs_DbVersion;\n  (window as any).rs_InputsStoreName = rs_InputsStoreName;\n  (window as any).rs_PerfTxStoreName = rs_PerfTxStoreName;\n  (window as any).rs_DownloadStatusStoreName = rs_DownloadStatusStoreName;\n  (window as any).rs_AddressDataStoreName = rs_AddressDataStoreName;\n  (window as any).rs_InitialNDownloads = rs_InitialNDownloads;\n  (window as any).rs_FullDownloadsBatchSize = rs_FullDownloadsBatchSize;\n  (window as any).rs_StartFrom = rs_StartFrom;\n  (window as any).rs_Input_Key = rs_Input_Key;\n  (window as any).rs_PerfTx_Key = rs_PerfTx_Key;\n  (window as any).rs_Address_Key = rs_Address_Key;\n  (window as any).rs_PermitCost = rs_PermitCost;\n  (window as any).rs_WatcherCollateralRSN = rs_WatcherCollateralRSN;\n  (window as any).rs_WatcherCollateralERG = rs_WatcherCollateralERG;\n  (window as any).Period = Period;\n  (window as any).Currency = Currency;\n  (window as any).rs_PerfInitialNDownloads = rs_PerfInitialNDownloads;\n  (window as any).rs_PerfFullDownloadsBatchSize = rs_PerfFullDownloadsBatchSize;\n  (window as any).rs_ErgoExplorerHost = rs_ErgoExplorerHost;\n}\n",
            "properties": [
                {
                    "name": "x",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Date",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 24
                },
                {
                    "name": "y",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 25
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "DbInput",
            "id": "interface-DbInput-fc84b9c8de9c067aa13489c6f50dbddab401c283a01e212eb981acffc4a49b262929e75b3bd85e6779eb00e173438c0f2f7d04579a7cba8d0785c6180fdf7ab4",
            "file": "src/shared/ts/data.service.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "interface Asset {\n  id: string;\n  name: string;\n  quantity: number;\n  amount: number;\n  decimals: number;\n  tokenId: string | null;\n}\n\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\ninterface DbInput {\n  outputAddress: string;\n  inputDate: Date;\n  boxId: string;\n  assets: Asset[];\n  address?: string;\n  chainType?: string;\n}\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\ninterface Input {\n  boxId: string;\n  outputAddress: string;\n  inputDate: Date;\n  assets: Asset[];\n  address: string;\n  amount?: number;\n  accumulatedAmount?: number;\n  chainType?: ChainType | null;\n}\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\ninterface Output {\n  assets: Asset[];\n  address: string;\n}\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nabstract class DataService<T> {\n  constructor(public db: IDBDatabase) {}\n  abstract addData(\n    address: string,\n    transactions: TransactionItem[],\n    db: IDBDatabase,\n  ): Promise<void>;\n  abstract getDataType(): string;\n  getMaxDownloadDateDifference(): number {\n    return 3155760000000;\n  }\n\n  abstract getExistingData(transaction: TransactionItem, address: string): Promise<T | null>;\n\n  async getData<T>(storeName: string): Promise<T[]> {\n    return new Promise((resolve, reject) => {\n      const transaction: IDBTransaction = this.db.transaction([storeName], 'readonly');\n      const objectStore: IDBObjectStore = transaction.objectStore(storeName);\n      const request: IDBRequest = objectStore.getAll();\n\n      request.onsuccess = () => resolve(request.result as T[]);\n      request.onerror = (event: Event) => reject((event.target as IDBRequest).error);\n    });\n  }\n}\n",
            "properties": [
                {
                    "name": "address",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 16
                },
                {
                    "name": "assets",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Asset[]",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 15
                },
                {
                    "name": "boxId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 14
                },
                {
                    "name": "chainType",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "inputDate",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Date",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 13
                },
                {
                    "name": "outputAddress",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 12
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "DialogData",
            "id": "interface-DialogData-43901bd211a9dfaaae1c611f47d16d78c92c3f2d92b20911a72c85fe65c79d980824de46c57577d029ccf1692c6000b2a4d0ffebacdb0c4e91dba8b0cddbb7a8",
            "file": "src/app/settings/settings.dialog.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Component, Inject } from '@angular/core';\nimport { MatDialogRef, MAT_DIALOG_DATA, MatDialogClose } from '@angular/material/dialog';\nimport { FormsModule } from '@angular/forms';\n\ninterface DialogData {\n  title: string;\n  content: string;\n  address: string;\n}\n\n@Component({\n  selector: 'app-dialog',\n  templateUrl: './dialog.html',\n  standalone: true,\n  imports: [FormsModule, MatDialogClose],\n})\nexport class SettingsDialogComponent {\n  constructor(\n    public dialogRef: MatDialogRef<SettingsDialogComponent>,\n    @Inject(MAT_DIALOG_DATA) public data: DialogData,\n  ) {}\n\n  onCancelClick(): void {\n    this.dialogRef.close();\n  }\n\n  pasteData(): void {\n    navigator.clipboard\n      .readText()\n      .then((pastedText) => {\n        this.data.address = pastedText;\n      })\n      .catch((err) => {\n        console.error('Failed to read clipboard contents: ', err);\n      });\n  }\n}\n",
            "properties": [
                {
                    "name": "address",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "content",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "title",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 6
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "DownloadStatus",
            "id": "interface-DownloadStatus-0516426d8e20c4b6339f9fdc3bb21d06f8cc54c9be0d530bb788639bf0a531f3067cebad105048e92f1fb067111ec6ae4ce5c1df038cef7349792c6ccb512426",
            "file": "src/shared/ts/download.service.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "interface AddressData {\n  address: string;\n}\n\ninterface TransactionItem {\n  outputCreatedAt: string | number | Date;\n  timestamp: string;\n  inputs: Input[];\n  outputs: Output[];\n  id: string;\n}\n\ninterface FetchTransactionsResponse {\n  transactions: TransactionItem[];\n  items: TransactionItem[];\n  total: number;\n}\n\ninterface DownloadStatus {\n  address: string;\n  Address: string;\n  status: string;\n  lastDownloadDate: Date | undefined;\n}\n\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nclass DownloadService<T> {\n  private busyCounter = 0;\n  private downloadFullSize = rs_FullDownloadsBatchSize;\n  private downloadInitialSize = rs_InitialNDownloads;\n  //private static addressDownloadDateMap = new Map<string, Date>();\n\n  constructor(\n    downloadFullSize: number,\n    downloadInitialSize: number,\n    private dataService: DataService<T>,\n    private eventSender: EventSender,\n    private db: IDBDatabase,\n  ) {\n    this.downloadFullSize = downloadFullSize;\n    this.downloadInitialSize = downloadInitialSize;\n  }\n\n  async fetchTransactions(url: string): Promise<FetchTransactionsResponse> {\n    try {\n      const response: Response = await fetch(url);\n      if (!response.ok) throw new Error(`Server returned code: ${response.status}`);\n      return (await response.json()) as FetchTransactionsResponse;\n    } catch (error) {\n      console.error(`An error occurred: ${error}`);\n      throw error;\n    }\n  }\n\n  async downloadTransactions(\n    address: string,\n    offset = 0,\n    limit = 500,\n  ): Promise<FetchTransactionsResponse> {\n    const url = `https://${rs_ErgoExplorerHost}/api/v1/addresses/${address}/transactions?offset=${offset}&limit=${limit}`;\n    console.log(`Downloading from: ${url}`);\n\n    const response: FetchTransactionsResponse = await this.fetchTransactions(url);\n    const result: FetchTransactionsResponse = {\n      transactions: response.items,\n      total: response.total,\n      items: [],\n    };\n\n    for (const item of response.items) {\n      const inputDate: Date = new Date(item.timestamp);\n      if (inputDate < rs_StartFrom) {\n        return result;\n      }\n    }\n\n    return result;\n  }\n\n  async downloadForAddresses(): Promise<void> {\n    try {\n      const addresses: AddressData[] =\n        await this.dataService.getData<AddressData>(rs_AddressDataStoreName);\n\n      const downloadPromises: Promise<void>[] = addresses.map(async (addressObj: AddressData) => {\n        await this.downloadForAddress(addressObj.address);\n      });\n\n      await Promise.all(downloadPromises);\n    } catch (e) {\n      console.error('Error downloading for addresses:', e);\n    }\n  }\n\n  // Busy Counter\n  private increaseBusyCounter(address: string): void {\n    if (this.busyCounter === 0) {\n      this.eventSender.sendEvent({\n        type: 'StartFullDownload',\n        data: address,\n      });\n    }\n    this.busyCounter++;\n  }\n\n  private decreaseBusyCounter(address: string): void {\n    this.busyCounter--;\n    if (this.busyCounter === 0) {\n      this.eventSender.sendEvent({\n        type: 'EndFullDownload',\n        data: address,\n      });\n    }\n  }\n\n  // Download All for Address (recursive)\n  async downloadAllForAddress(address: string, offset: number, db: IDBDatabase): Promise<void> {\n    this.increaseBusyCounter(address);\n    console.log(this.busyCounter);\n\n    try {\n      const result: FetchTransactionsResponse = await this.downloadTransactions(\n        address,\n        offset,\n        this.downloadFullSize + 10,\n      );\n      console.log(\n        `Processing full download(offset = ${offset}, size = ${this.downloadFullSize}) for: ${address}`,\n      );\n\n      //const t = this.processItems(result.transactions);\n      //console.log('permit amount ' + t);\n\n      if (!result.transactions || result.transactions.length === 0 || offset > 100000) {\n        await this.setDownloadStatus(address, 'true', db);\n        console.log(this.busyCounter);\n        return;\n      }\n\n      await this.dataService.addData(address, result.transactions, db);\n      //await this.dataService.compressInputs();\n\n      if (\n        this.dataService.getMaxDownloadDateDifference() >\n        new Date().getTime() -\n          new Date(result.transactions[result.transactions.length - 1].timestamp).getTime()\n      ) {\n        await this.downloadAllForAddress(address, offset + this.downloadFullSize, db);\n      } else {\n        await this.setDownloadStatus(address, 'true', db);\n      }\n    } catch (e) {\n      console.error(e);\n    } finally {\n      this.decreaseBusyCounter(address);\n      console.log(this.busyCounter);\n    }\n  }\n  /*\n  processItems(items: TransactionItem[]): number {\n    let r = 0;\n    items.forEach((item) => {\n      \n      item.inputs.forEach((i) => {\n        i.assets.forEach((a) => {\n          if (a.name == 'rspv2CardanoRWT') {\n            r -= a.amount;\n          }\n        });\n      });\n      \n\n      item.outputs.forEach((o) => {\n        if (!getChainType(o.address)) {\n          o.assets.forEach((a) => {\n            if (a.name == 'rspv2CardanoRWT') {\n              r += a.amount;\n              if (a.amount > 30000000) {\n                console.log('wtfffffffffffffff ' + a.amount);\n              }\n            }\n          });\n        }\n      });\n    });\n\n    return r / 3000000;\n  }\n  */\n\n  // Get Download Status for Address from IndexedDB\n  async getDownloadStatus(address: string, db: IDBDatabase): Promise<DownloadStatus> {\n    return new Promise((resolve, reject) => {\n      const transaction: IDBTransaction = db.transaction([rs_DownloadStatusStoreName], 'readonly');\n      const objectStore: IDBObjectStore = transaction.objectStore(rs_DownloadStatusStoreName);\n      const request: IDBRequest = objectStore.get(address + '_' + this.dataService.getDataType());\n\n      request.onsuccess = () => resolve(request.result as DownloadStatus);\n      request.onerror = (event: Event) => reject((event.target as IDBRequest).error);\n    });\n  }\n\n  // Set Download Status for Address in IndexedDB\n  async setDownloadStatus(address: string, status: string, db: IDBDatabase): Promise<void> {\n    let dbStatus: DownloadStatus | undefined = await this.getDownloadStatus(address, db);\n\n    if (!dbStatus) {\n      dbStatus = {\n        address: address + '_' + this.dataService.getDataType(),\n        Address: address,\n        status: status,\n        lastDownloadDate: undefined,\n      };\n    } else {\n      dbStatus.status = status;\n      dbStatus.address = address + '_' + this.dataService.getDataType();\n      dbStatus.Address = address;\n    }\n\n    await this.saveDownloadStatus(dbStatus, db);\n  }\n\n  async saveDownloadStatus(downloadStatus: DownloadStatus, db: IDBDatabase): Promise<void> {\n    return new Promise((resolve, reject) => {\n      const transaction: IDBTransaction = db.transaction([rs_DownloadStatusStoreName], 'readwrite');\n      const objectStore: IDBObjectStore = transaction.objectStore(rs_DownloadStatusStoreName);\n\n      const request: IDBRequest = objectStore.put(downloadStatus);\n\n      request.onsuccess = () => resolve();\n      request.onerror = (event: Event) => reject((event.target as IDBRequest).error);\n    });\n  }\n\n  async downloadForAddress(address: string): Promise<void> {\n    /*const downloadStatus = await this.getDownloadStatus(address, this.db);\n\n    \n    if (downloadStatus?.lastDownloadDate) {\n      const lastDownloadDate: Date | undefined = downloadStatus.lastDownloadDate;\n      if (lastDownloadDate && lastDownloadDate.getTime() > new Date().getTime() - 1000 * 120) {\n        return;\n      }\n    }\n\n    if (downloadStatus) {\n      downloadStatus.lastDownloadDate = new Date();\n      await this.saveDownloadStatus(downloadStatus, this.db);\n    }\n*/\n    this.increaseBusyCounter(address);\n    console.log(this.busyCounter);\n\n    try {\n      const result: FetchTransactionsResponse = await this.downloadTransactions(\n        address,\n        0,\n        this.downloadInitialSize,\n      );\n      console.log(\n        `Processing initial download(size = ${this.downloadInitialSize}) for: ${address}`,\n      );\n\n      const itemsz: number = result.transactions.length;\n\n      let existingData: T | null = null;\n\n      if (itemsz > this.downloadInitialSize / 4) {\n        for (let i = Math.floor(itemsz / 4); i < itemsz - Math.floor(itemsz / 4); i++) {\n          const item: TransactionItem = result.transactions[i];\n\n          existingData = await this.dataService.getExistingData(item, address);\n          if (existingData) {\n            break;\n          }\n        }\n      }\n\n      console.log('Add bunch of data');\n      await this.dataService.addData(address, result.transactions, this.db);\n      const downloadStatus: string =\n        (await this.getDownloadStatus(address, this.db))?.status || 'false';\n      if (existingData && downloadStatus === 'true') {\n        console.log(`Found existing boxId in db for ${address}, no need to download more.`);\n      } else if (itemsz >= this.downloadInitialSize) {\n        await this.setDownloadStatus(address, 'false', this.db);\n        console.log(`Downloading all tx's for : ${address}`);\n        await this.downloadAllForAddress(address, 0, this.db);\n      }\n    } catch (e) {\n      console.error(e);\n    } finally {\n      this.decreaseBusyCounter(address);\n      console.log(this.busyCounter);\n    }\n  }\n}\n",
            "properties": [
                {
                    "name": "address",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 20
                },
                {
                    "name": "Address",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 21
                },
                {
                    "name": "lastDownloadDate",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Date | undefined",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 23
                },
                {
                    "name": "status",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 22
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "EventPayload",
            "id": "interface-EventPayload-01d17c2c611d5aef37ae184b63bf3c4571ba39641b78dbb0cbe851a0e090cee60a4870db0ee25ed2a3179ec5b86072de5ea1ec6ac64c13b761da8f27e40e62fd",
            "file": "src/shared/ts/process.event.service.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "interface EventPayload<T> {\n  type: string;\n  data?: T;\n}\n\ninterface EventSender {\n  sendEvent<T>(event: EventPayload<T>): Promise<void>;\n}\n\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nclass ServiceWorkerEventSender implements EventSender {\n  async sendEvent<T>(event: EventPayload<T>): Promise<void> {\n    const clientsList = await (self as unknown as ServiceWorkerGlobalScope).clients.matchAll({\n      type: 'window',\n      includeUncontrolled: true,\n    });\n    for (const client of clientsList) {\n      client.postMessage(event);\n    }\n  }\n}\n\nclass ProcessEventService {\n  constructor(private eventSender: EventSender) {}\n  private async initServices() {\n    const db: IDBDatabase = await this.initIndexedDB();\n    const chartService: ChartService = new ChartService();\n    const rewardDataService: RewardDataService = new RewardDataService(\n      db,\n      chartService,\n      this.eventSender,\n    );\n    const chainPerformanceDataService: ChainPerformanceDataService =\n      new ChainPerformanceDataService(db, this.eventSender);\n    const downloadService: DownloadService<DbInput> = new DownloadService<DbInput>(\n      rs_FullDownloadsBatchSize,\n      rs_InitialNDownloads,\n      rewardDataService,\n      this.eventSender,\n      db,\n    );\n    const downloadPerfService: DownloadService<PerfTx> = new DownloadService<PerfTx>(\n      rs_PerfFullDownloadsBatchSize,\n      rs_PerfInitialNDownloads,\n      chainPerformanceDataService,\n      this.eventSender,\n      db,\n    );\n    return {\n      dataService: rewardDataService,\n      chainPerformanceDataService: chainPerformanceDataService,\n      downloadService,\n      chartService,\n      downloadPerfService: downloadPerfService,\n    };\n  }\n\n  public async processEvent(event: EventPayload<object>) {\n    if (\n      event.type === 'StatisticsScreenLoaded' ||\n      event.type === 'PerformanceScreenLoaded' ||\n      event.type === 'RequestInputsDownload'\n    ) {\n      const {\n        dataService,\n        downloadService,\n        downloadPerfService,\n        chartService,\n        chainPerformanceDataService,\n      }: {\n        dataService: RewardDataService;\n        downloadService: DownloadService<DbInput>;\n        downloadPerfService: DownloadService<PerfTx>;\n        chartService: ChartService;\n        chainPerformanceDataService: ChainPerformanceDataService;\n      } = await this.initServices();\n\n      if (event.type === 'RequestInputsDownload') {\n        console.log(\n          'Rosen service worker received RequestInputsDownload initiating syncing of data by downloading from blockchain, event.data: ' +\n            event.data,\n        );\n\n        try {\n          const addressCharts = await chartService.getAddressCharts(\n            await dataService.getSortedInputs(),\n          );\n\n          this.eventSender.sendEvent({\n            type: 'AddressChartChanged',\n            data: addressCharts,\n          });\n\n          if (event.data) {\n            await downloadService.downloadForAddress(event.data as unknown as string);\n          } else {\n            await downloadService.downloadForAddresses();\n          }\n        } catch (error) {\n          console.error('Error initializing IndexedDB or downloading addresses:', error);\n        }\n      } else if (event.type === 'StatisticsScreenLoaded') {\n        console.log(\n          'Rosen service worker received StatisticsScreenLoaded initiating syncing of data by downloading from blockchain',\n        );\n\n        try {\n          const inputs = await dataService.getSortedInputs();\n          this.eventSender.sendEvent({\n            type: 'InputsChanged',\n            data: inputs,\n          });\n\n          await downloadService.downloadForAddresses();\n        } catch (error) {\n          console.error('Error initializing IndexedDB or downloading addresses:', error);\n        }\n      } else if (event.type === 'PerformanceScreenLoaded') {\n        console.log('Rosen service worker received PerformanceScreenLoaded');\n\n        try {\n          console.log('Downloading perftxs.');\n          const perfTxs = await chainPerformanceDataService.getPerfTxs();\n\n          this.eventSender.sendEvent({\n            type: 'PerfChartChanged',\n            data: perfTxs,\n          });\n\n          downloadPerfService.downloadForAddress(hotWalletAddress);\n        } catch (error) {\n          console.error('Error initializing IndexedDB or downloading addresses:', error);\n        }\n      }\n    }\n  }\n\n  // IndexedDB Initialization\n  private async initIndexedDB(): Promise<IDBDatabase> {\n    return new Promise((resolve, reject) => {\n      let dbName = rs_DbName;\n\n      const request: IDBOpenDBRequest = indexedDB.open(dbName);\n\n      request.onsuccess = (event: Event) => {\n        const db: IDBDatabase = (event.target as IDBOpenDBRequest).result;\n        resolve(db);\n      };\n\n      request.onerror = (event: Event) => {\n        console.error('Error opening IndexedDB:', (event.target as IDBOpenDBRequest).error);\n        reject((event.target as IDBOpenDBRequest).error);\n      };\n    });\n  }\n}\n\n/* eslint-disable @typescript-eslint/no-explicit-any */\nif (typeof window !== 'undefined') {\n  (window as any).ProcessEventService = ProcessEventService;\n}\n",
            "properties": [
                {
                    "name": "data",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "T",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 3
                },
                {
                    "name": "type",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 2
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "EventSender",
            "id": "interface-EventSender-01d17c2c611d5aef37ae184b63bf3c4571ba39641b78dbb0cbe851a0e090cee60a4870db0ee25ed2a3179ec5b86072de5ea1ec6ac64c13b761da8f27e40e62fd",
            "file": "src/shared/ts/process.event.service.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "interface EventPayload<T> {\n  type: string;\n  data?: T;\n}\n\ninterface EventSender {\n  sendEvent<T>(event: EventPayload<T>): Promise<void>;\n}\n\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nclass ServiceWorkerEventSender implements EventSender {\n  async sendEvent<T>(event: EventPayload<T>): Promise<void> {\n    const clientsList = await (self as unknown as ServiceWorkerGlobalScope).clients.matchAll({\n      type: 'window',\n      includeUncontrolled: true,\n    });\n    for (const client of clientsList) {\n      client.postMessage(event);\n    }\n  }\n}\n\nclass ProcessEventService {\n  constructor(private eventSender: EventSender) {}\n  private async initServices() {\n    const db: IDBDatabase = await this.initIndexedDB();\n    const chartService: ChartService = new ChartService();\n    const rewardDataService: RewardDataService = new RewardDataService(\n      db,\n      chartService,\n      this.eventSender,\n    );\n    const chainPerformanceDataService: ChainPerformanceDataService =\n      new ChainPerformanceDataService(db, this.eventSender);\n    const downloadService: DownloadService<DbInput> = new DownloadService<DbInput>(\n      rs_FullDownloadsBatchSize,\n      rs_InitialNDownloads,\n      rewardDataService,\n      this.eventSender,\n      db,\n    );\n    const downloadPerfService: DownloadService<PerfTx> = new DownloadService<PerfTx>(\n      rs_PerfFullDownloadsBatchSize,\n      rs_PerfInitialNDownloads,\n      chainPerformanceDataService,\n      this.eventSender,\n      db,\n    );\n    return {\n      dataService: rewardDataService,\n      chainPerformanceDataService: chainPerformanceDataService,\n      downloadService,\n      chartService,\n      downloadPerfService: downloadPerfService,\n    };\n  }\n\n  public async processEvent(event: EventPayload<object>) {\n    if (\n      event.type === 'StatisticsScreenLoaded' ||\n      event.type === 'PerformanceScreenLoaded' ||\n      event.type === 'RequestInputsDownload'\n    ) {\n      const {\n        dataService,\n        downloadService,\n        downloadPerfService,\n        chartService,\n        chainPerformanceDataService,\n      }: {\n        dataService: RewardDataService;\n        downloadService: DownloadService<DbInput>;\n        downloadPerfService: DownloadService<PerfTx>;\n        chartService: ChartService;\n        chainPerformanceDataService: ChainPerformanceDataService;\n      } = await this.initServices();\n\n      if (event.type === 'RequestInputsDownload') {\n        console.log(\n          'Rosen service worker received RequestInputsDownload initiating syncing of data by downloading from blockchain, event.data: ' +\n            event.data,\n        );\n\n        try {\n          const addressCharts = await chartService.getAddressCharts(\n            await dataService.getSortedInputs(),\n          );\n\n          this.eventSender.sendEvent({\n            type: 'AddressChartChanged',\n            data: addressCharts,\n          });\n\n          if (event.data) {\n            await downloadService.downloadForAddress(event.data as unknown as string);\n          } else {\n            await downloadService.downloadForAddresses();\n          }\n        } catch (error) {\n          console.error('Error initializing IndexedDB or downloading addresses:', error);\n        }\n      } else if (event.type === 'StatisticsScreenLoaded') {\n        console.log(\n          'Rosen service worker received StatisticsScreenLoaded initiating syncing of data by downloading from blockchain',\n        );\n\n        try {\n          const inputs = await dataService.getSortedInputs();\n          this.eventSender.sendEvent({\n            type: 'InputsChanged',\n            data: inputs,\n          });\n\n          await downloadService.downloadForAddresses();\n        } catch (error) {\n          console.error('Error initializing IndexedDB or downloading addresses:', error);\n        }\n      } else if (event.type === 'PerformanceScreenLoaded') {\n        console.log('Rosen service worker received PerformanceScreenLoaded');\n\n        try {\n          console.log('Downloading perftxs.');\n          const perfTxs = await chainPerformanceDataService.getPerfTxs();\n\n          this.eventSender.sendEvent({\n            type: 'PerfChartChanged',\n            data: perfTxs,\n          });\n\n          downloadPerfService.downloadForAddress(hotWalletAddress);\n        } catch (error) {\n          console.error('Error initializing IndexedDB or downloading addresses:', error);\n        }\n      }\n    }\n  }\n\n  // IndexedDB Initialization\n  private async initIndexedDB(): Promise<IDBDatabase> {\n    return new Promise((resolve, reject) => {\n      let dbName = rs_DbName;\n\n      const request: IDBOpenDBRequest = indexedDB.open(dbName);\n\n      request.onsuccess = (event: Event) => {\n        const db: IDBDatabase = (event.target as IDBOpenDBRequest).result;\n        resolve(db);\n      };\n\n      request.onerror = (event: Event) => {\n        console.error('Error opening IndexedDB:', (event.target as IDBOpenDBRequest).error);\n        reject((event.target as IDBOpenDBRequest).error);\n      };\n    });\n  }\n}\n\n/* eslint-disable @typescript-eslint/no-explicit-any */\nif (typeof window !== 'undefined') {\n  (window as any).ProcessEventService = ProcessEventService;\n}\n",
            "properties": [],
            "indexSignatures": [],
            "kind": 173,
            "methods": [
                {
                    "name": "sendEvent",
                    "args": [
                        {
                            "name": "event",
                            "type": "EventPayload<T>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<void>",
                    "typeParameters": [
                        "T"
                    ],
                    "line": 7,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "EventPayload<T>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "extends": []
        },
        {
            "name": "FetchTransactionsResponse",
            "id": "interface-FetchTransactionsResponse-0516426d8e20c4b6339f9fdc3bb21d06f8cc54c9be0d530bb788639bf0a531f3067cebad105048e92f1fb067111ec6ae4ce5c1df038cef7349792c6ccb512426",
            "file": "src/shared/ts/download.service.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "interface AddressData {\n  address: string;\n}\n\ninterface TransactionItem {\n  outputCreatedAt: string | number | Date;\n  timestamp: string;\n  inputs: Input[];\n  outputs: Output[];\n  id: string;\n}\n\ninterface FetchTransactionsResponse {\n  transactions: TransactionItem[];\n  items: TransactionItem[];\n  total: number;\n}\n\ninterface DownloadStatus {\n  address: string;\n  Address: string;\n  status: string;\n  lastDownloadDate: Date | undefined;\n}\n\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nclass DownloadService<T> {\n  private busyCounter = 0;\n  private downloadFullSize = rs_FullDownloadsBatchSize;\n  private downloadInitialSize = rs_InitialNDownloads;\n  //private static addressDownloadDateMap = new Map<string, Date>();\n\n  constructor(\n    downloadFullSize: number,\n    downloadInitialSize: number,\n    private dataService: DataService<T>,\n    private eventSender: EventSender,\n    private db: IDBDatabase,\n  ) {\n    this.downloadFullSize = downloadFullSize;\n    this.downloadInitialSize = downloadInitialSize;\n  }\n\n  async fetchTransactions(url: string): Promise<FetchTransactionsResponse> {\n    try {\n      const response: Response = await fetch(url);\n      if (!response.ok) throw new Error(`Server returned code: ${response.status}`);\n      return (await response.json()) as FetchTransactionsResponse;\n    } catch (error) {\n      console.error(`An error occurred: ${error}`);\n      throw error;\n    }\n  }\n\n  async downloadTransactions(\n    address: string,\n    offset = 0,\n    limit = 500,\n  ): Promise<FetchTransactionsResponse> {\n    const url = `https://${rs_ErgoExplorerHost}/api/v1/addresses/${address}/transactions?offset=${offset}&limit=${limit}`;\n    console.log(`Downloading from: ${url}`);\n\n    const response: FetchTransactionsResponse = await this.fetchTransactions(url);\n    const result: FetchTransactionsResponse = {\n      transactions: response.items,\n      total: response.total,\n      items: [],\n    };\n\n    for (const item of response.items) {\n      const inputDate: Date = new Date(item.timestamp);\n      if (inputDate < rs_StartFrom) {\n        return result;\n      }\n    }\n\n    return result;\n  }\n\n  async downloadForAddresses(): Promise<void> {\n    try {\n      const addresses: AddressData[] =\n        await this.dataService.getData<AddressData>(rs_AddressDataStoreName);\n\n      const downloadPromises: Promise<void>[] = addresses.map(async (addressObj: AddressData) => {\n        await this.downloadForAddress(addressObj.address);\n      });\n\n      await Promise.all(downloadPromises);\n    } catch (e) {\n      console.error('Error downloading for addresses:', e);\n    }\n  }\n\n  // Busy Counter\n  private increaseBusyCounter(address: string): void {\n    if (this.busyCounter === 0) {\n      this.eventSender.sendEvent({\n        type: 'StartFullDownload',\n        data: address,\n      });\n    }\n    this.busyCounter++;\n  }\n\n  private decreaseBusyCounter(address: string): void {\n    this.busyCounter--;\n    if (this.busyCounter === 0) {\n      this.eventSender.sendEvent({\n        type: 'EndFullDownload',\n        data: address,\n      });\n    }\n  }\n\n  // Download All for Address (recursive)\n  async downloadAllForAddress(address: string, offset: number, db: IDBDatabase): Promise<void> {\n    this.increaseBusyCounter(address);\n    console.log(this.busyCounter);\n\n    try {\n      const result: FetchTransactionsResponse = await this.downloadTransactions(\n        address,\n        offset,\n        this.downloadFullSize + 10,\n      );\n      console.log(\n        `Processing full download(offset = ${offset}, size = ${this.downloadFullSize}) for: ${address}`,\n      );\n\n      //const t = this.processItems(result.transactions);\n      //console.log('permit amount ' + t);\n\n      if (!result.transactions || result.transactions.length === 0 || offset > 100000) {\n        await this.setDownloadStatus(address, 'true', db);\n        console.log(this.busyCounter);\n        return;\n      }\n\n      await this.dataService.addData(address, result.transactions, db);\n      //await this.dataService.compressInputs();\n\n      if (\n        this.dataService.getMaxDownloadDateDifference() >\n        new Date().getTime() -\n          new Date(result.transactions[result.transactions.length - 1].timestamp).getTime()\n      ) {\n        await this.downloadAllForAddress(address, offset + this.downloadFullSize, db);\n      } else {\n        await this.setDownloadStatus(address, 'true', db);\n      }\n    } catch (e) {\n      console.error(e);\n    } finally {\n      this.decreaseBusyCounter(address);\n      console.log(this.busyCounter);\n    }\n  }\n  /*\n  processItems(items: TransactionItem[]): number {\n    let r = 0;\n    items.forEach((item) => {\n      \n      item.inputs.forEach((i) => {\n        i.assets.forEach((a) => {\n          if (a.name == 'rspv2CardanoRWT') {\n            r -= a.amount;\n          }\n        });\n      });\n      \n\n      item.outputs.forEach((o) => {\n        if (!getChainType(o.address)) {\n          o.assets.forEach((a) => {\n            if (a.name == 'rspv2CardanoRWT') {\n              r += a.amount;\n              if (a.amount > 30000000) {\n                console.log('wtfffffffffffffff ' + a.amount);\n              }\n            }\n          });\n        }\n      });\n    });\n\n    return r / 3000000;\n  }\n  */\n\n  // Get Download Status for Address from IndexedDB\n  async getDownloadStatus(address: string, db: IDBDatabase): Promise<DownloadStatus> {\n    return new Promise((resolve, reject) => {\n      const transaction: IDBTransaction = db.transaction([rs_DownloadStatusStoreName], 'readonly');\n      const objectStore: IDBObjectStore = transaction.objectStore(rs_DownloadStatusStoreName);\n      const request: IDBRequest = objectStore.get(address + '_' + this.dataService.getDataType());\n\n      request.onsuccess = () => resolve(request.result as DownloadStatus);\n      request.onerror = (event: Event) => reject((event.target as IDBRequest).error);\n    });\n  }\n\n  // Set Download Status for Address in IndexedDB\n  async setDownloadStatus(address: string, status: string, db: IDBDatabase): Promise<void> {\n    let dbStatus: DownloadStatus | undefined = await this.getDownloadStatus(address, db);\n\n    if (!dbStatus) {\n      dbStatus = {\n        address: address + '_' + this.dataService.getDataType(),\n        Address: address,\n        status: status,\n        lastDownloadDate: undefined,\n      };\n    } else {\n      dbStatus.status = status;\n      dbStatus.address = address + '_' + this.dataService.getDataType();\n      dbStatus.Address = address;\n    }\n\n    await this.saveDownloadStatus(dbStatus, db);\n  }\n\n  async saveDownloadStatus(downloadStatus: DownloadStatus, db: IDBDatabase): Promise<void> {\n    return new Promise((resolve, reject) => {\n      const transaction: IDBTransaction = db.transaction([rs_DownloadStatusStoreName], 'readwrite');\n      const objectStore: IDBObjectStore = transaction.objectStore(rs_DownloadStatusStoreName);\n\n      const request: IDBRequest = objectStore.put(downloadStatus);\n\n      request.onsuccess = () => resolve();\n      request.onerror = (event: Event) => reject((event.target as IDBRequest).error);\n    });\n  }\n\n  async downloadForAddress(address: string): Promise<void> {\n    /*const downloadStatus = await this.getDownloadStatus(address, this.db);\n\n    \n    if (downloadStatus?.lastDownloadDate) {\n      const lastDownloadDate: Date | undefined = downloadStatus.lastDownloadDate;\n      if (lastDownloadDate && lastDownloadDate.getTime() > new Date().getTime() - 1000 * 120) {\n        return;\n      }\n    }\n\n    if (downloadStatus) {\n      downloadStatus.lastDownloadDate = new Date();\n      await this.saveDownloadStatus(downloadStatus, this.db);\n    }\n*/\n    this.increaseBusyCounter(address);\n    console.log(this.busyCounter);\n\n    try {\n      const result: FetchTransactionsResponse = await this.downloadTransactions(\n        address,\n        0,\n        this.downloadInitialSize,\n      );\n      console.log(\n        `Processing initial download(size = ${this.downloadInitialSize}) for: ${address}`,\n      );\n\n      const itemsz: number = result.transactions.length;\n\n      let existingData: T | null = null;\n\n      if (itemsz > this.downloadInitialSize / 4) {\n        for (let i = Math.floor(itemsz / 4); i < itemsz - Math.floor(itemsz / 4); i++) {\n          const item: TransactionItem = result.transactions[i];\n\n          existingData = await this.dataService.getExistingData(item, address);\n          if (existingData) {\n            break;\n          }\n        }\n      }\n\n      console.log('Add bunch of data');\n      await this.dataService.addData(address, result.transactions, this.db);\n      const downloadStatus: string =\n        (await this.getDownloadStatus(address, this.db))?.status || 'false';\n      if (existingData && downloadStatus === 'true') {\n        console.log(`Found existing boxId in db for ${address}, no need to download more.`);\n      } else if (itemsz >= this.downloadInitialSize) {\n        await this.setDownloadStatus(address, 'false', this.db);\n        console.log(`Downloading all tx's for : ${address}`);\n        await this.downloadAllForAddress(address, 0, this.db);\n      }\n    } catch (e) {\n      console.error(e);\n    } finally {\n      this.decreaseBusyCounter(address);\n      console.log(this.busyCounter);\n    }\n  }\n}\n",
            "properties": [
                {
                    "name": "items",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TransactionItem[]",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 15
                },
                {
                    "name": "total",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 16
                },
                {
                    "name": "transactions",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TransactionItem[]",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 14
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "Input",
            "id": "interface-Input-fc84b9c8de9c067aa13489c6f50dbddab401c283a01e212eb981acffc4a49b262929e75b3bd85e6779eb00e173438c0f2f7d04579a7cba8d0785c6180fdf7ab4",
            "file": "src/shared/ts/data.service.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "interface Asset {\n  id: string;\n  name: string;\n  quantity: number;\n  amount: number;\n  decimals: number;\n  tokenId: string | null;\n}\n\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\ninterface DbInput {\n  outputAddress: string;\n  inputDate: Date;\n  boxId: string;\n  assets: Asset[];\n  address?: string;\n  chainType?: string;\n}\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\ninterface Input {\n  boxId: string;\n  outputAddress: string;\n  inputDate: Date;\n  assets: Asset[];\n  address: string;\n  amount?: number;\n  accumulatedAmount?: number;\n  chainType?: ChainType | null;\n}\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\ninterface Output {\n  assets: Asset[];\n  address: string;\n}\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nabstract class DataService<T> {\n  constructor(public db: IDBDatabase) {}\n  abstract addData(\n    address: string,\n    transactions: TransactionItem[],\n    db: IDBDatabase,\n  ): Promise<void>;\n  abstract getDataType(): string;\n  getMaxDownloadDateDifference(): number {\n    return 3155760000000;\n  }\n\n  abstract getExistingData(transaction: TransactionItem, address: string): Promise<T | null>;\n\n  async getData<T>(storeName: string): Promise<T[]> {\n    return new Promise((resolve, reject) => {\n      const transaction: IDBTransaction = this.db.transaction([storeName], 'readonly');\n      const objectStore: IDBObjectStore = transaction.objectStore(storeName);\n      const request: IDBRequest = objectStore.getAll();\n\n      request.onsuccess = () => resolve(request.result as T[]);\n      request.onerror = (event: Event) => reject((event.target as IDBRequest).error);\n    });\n  }\n}\n",
            "properties": [
                {
                    "name": "accumulatedAmount",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 27
                },
                {
                    "name": "address",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 25
                },
                {
                    "name": "amount",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 26
                },
                {
                    "name": "assets",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Asset[]",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 24
                },
                {
                    "name": "boxId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 21
                },
                {
                    "name": "chainType",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ChainType | null",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 28
                },
                {
                    "name": "inputDate",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Date",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 23
                },
                {
                    "name": "outputAddress",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 22
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "MessageEventData",
            "id": "interface-MessageEventData-baab408d416b94856d92d7a98a6313e9c654e3442c2067326f4c583dd8282624a3256bc89044f9b2ffd1f89102f5b428fa6de7cf9004cd23c0a5724359178bc8",
            "file": "src/shared/ts/rosen-download-worker.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "interface MessageEventData {\n  type: string;\n  data: string;\n}\n\nself.addEventListener('message', async (event: MessageEvent) => {\n  const processEventServiceSingleton = (() => {\n    console.log('Initializing ProcessEventService singleton');\n    let instance: ProcessEventService | null = null;\n    return () => {\n      if (!instance) {\n        instance = new ProcessEventService(new ServiceWorkerEventSender());\n      }\n      return instance;\n    };\n  })();\n\n  const processEventService = processEventServiceSingleton();\n  const data: MessageEventData = event.data;\n\n  console.log(`Rosen service worker received event of type ${data.type}`);\n  processEventService.processEvent({ data: data.data as unknown as object, type: data.type });\n});\n",
            "properties": [
                {
                    "name": "data",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "type",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 4
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "Output",
            "id": "interface-Output-fc84b9c8de9c067aa13489c6f50dbddab401c283a01e212eb981acffc4a49b262929e75b3bd85e6779eb00e173438c0f2f7d04579a7cba8d0785c6180fdf7ab4",
            "file": "src/shared/ts/data.service.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "interface Asset {\n  id: string;\n  name: string;\n  quantity: number;\n  amount: number;\n  decimals: number;\n  tokenId: string | null;\n}\n\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\ninterface DbInput {\n  outputAddress: string;\n  inputDate: Date;\n  boxId: string;\n  assets: Asset[];\n  address?: string;\n  chainType?: string;\n}\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\ninterface Input {\n  boxId: string;\n  outputAddress: string;\n  inputDate: Date;\n  assets: Asset[];\n  address: string;\n  amount?: number;\n  accumulatedAmount?: number;\n  chainType?: ChainType | null;\n}\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\ninterface Output {\n  assets: Asset[];\n  address: string;\n}\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nabstract class DataService<T> {\n  constructor(public db: IDBDatabase) {}\n  abstract addData(\n    address: string,\n    transactions: TransactionItem[],\n    db: IDBDatabase,\n  ): Promise<void>;\n  abstract getDataType(): string;\n  getMaxDownloadDateDifference(): number {\n    return 3155760000000;\n  }\n\n  abstract getExistingData(transaction: TransactionItem, address: string): Promise<T | null>;\n\n  async getData<T>(storeName: string): Promise<T[]> {\n    return new Promise((resolve, reject) => {\n      const transaction: IDBTransaction = this.db.transaction([storeName], 'readonly');\n      const objectStore: IDBObjectStore = transaction.objectStore(storeName);\n      const request: IDBRequest = objectStore.getAll();\n\n      request.onsuccess = () => resolve(request.result as T[]);\n      request.onerror = (event: Event) => reject((event.target as IDBRequest).error);\n    });\n  }\n}\n",
            "properties": [
                {
                    "name": "address",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 33
                },
                {
                    "name": "assets",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Asset[]",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 32
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "PerfTx",
            "id": "interface-PerfTx-105d27e866472bea5550120d47e8fcaa45662aca194b277035e48ea3228f362d3226bb54673ba62b70f0425d76006fa9436ee4f3782a079d7cc0a209366dd2b4",
            "file": "src/shared/ts/chain.performance.data.service.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "interface PerfTx {\n  id: string;\n  timestamp: string;\n  chainType?: string;\n  amount: number;\n  decimals?: number;\n}\n\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nclass ChainPerformanceDataService extends DataService<PerfTx> {\n  override async getExistingData(transaction: TransactionItem): Promise<PerfTx | null> {\n    return new Promise((resolve, reject) => {\n      const dbTtransaction: IDBTransaction = this.db.transaction([rs_PerfTxStoreName], 'readonly');\n      const objectStore: IDBObjectStore = dbTtransaction.objectStore(rs_PerfTxStoreName);\n      const request: IDBRequest = objectStore.get(transaction.id);\n\n      request.onsuccess = () => {\n        const result: PerfTx | null = request.result as PerfTx | null;\n        resolve(result);\n      };\n\n      request.onerror = (event: Event) => reject((event.target as IDBRequest).error);\n    });\n  }\n  override async addData(\n    _address: string,\n    transactions: TransactionItem[],\n    db: IDBDatabase,\n  ): Promise<void> {\n    return new Promise((resolve, reject) => {\n      const tempData: PerfTx[] = [];\n\n      transactions.forEach((item: TransactionItem) => {\n        const chainTokensCount: Record<string, number> = {};\n        const eRSNTotal = item.outputs.reduce((total, output) => {\n          output.assets.forEach((asset) => {\n            if (Object.values(chainTypeTokens).includes(asset.name)) {\n              if (!chainTokensCount[asset.name]) {\n                chainTokensCount[asset.name] = 1;\n              } else {\n                chainTokensCount[asset.name]++;\n              }\n            }\n          });\n\n          const assets = output.assets.filter(\n            (a) => a.name === 'eRSN' && Object.values(rewardAddresses).includes(output.address),\n          );\n\n          return (\n            total +\n            assets.reduce((acc, asset) => acc + asset.amount / Math.pow(10, asset.decimals), 0)\n          );\n        }, 0);\n\n        const maxKey = Object.entries(chainTokensCount).reduce(\n          (max, [key, value]) => (value > chainTokensCount[max] ? key : max),\n          Object.keys(chainTokensCount)[0],\n        );\n\n        const chainType = Object.entries(chainTypeTokens).find(\n          ([, value]) => value === maxKey,\n        )?.[0];\n\n        const dbPerfTx: PerfTx = {\n          id: item.id,\n          timestamp: item.timestamp,\n          amount: eRSNTotal,\n          chainType: chainType,\n        };\n\n        tempData.push(dbPerfTx);\n      });\n\n      const transaction: IDBTransaction = db.transaction([rs_PerfTxStoreName], 'readwrite');\n      const objectStore: IDBObjectStore = transaction.objectStore(rs_PerfTxStoreName);\n\n      const putPromises = tempData.map((dbPerfTx: PerfTx) => {\n        return new Promise<void>((putResolve, putReject) => {\n          console.log('Trying to add dbPerfTx to db with id ' + dbPerfTx.id);\n          const request: IDBRequest = objectStore.put(dbPerfTx);\n          request.onsuccess = () => putResolve();\n          request.onerror = (event: Event) => putReject((event.target as IDBRequest).error);\n        });\n      });\n\n      Promise.all(putPromises)\n        .then(async () => {\n          const perfTxs = await this.getPerfTxs();\n          this.eventSender.sendEvent({\n            type: 'PerfChartChanged',\n            data: perfTxs,\n          });\n\n          resolve();\n        })\n        .catch(reject);\n    });\n  }\n  public async getPerfTxs(): Promise<Record<ChainType, { chart: number }>> {\n    const perfTxsPromise = this.getData<PerfTx>(rs_PerfTxStoreName);\n\n    console.log('Retrieving PerfTxs');\n\n    try {\n      let perfTxs = await perfTxsPromise;\n      perfTxs = perfTxs.filter(\n        (p) =>\n          this.getMaxDownloadDateDifference() >\n          new Date().getTime() - new Date(p.timestamp).getTime(),\n      );\n\n      const result = perfTxs.reduce(\n        (acc, tx) => {\n          if (tx.chainType !== undefined && tx.chainType !== null) {\n            const chainKey = tx.chainType as ChainType;\n\n            if (!acc[chainKey]) {\n              acc[chainKey] = { chart: 0 };\n            }\n\n            acc[chainKey].chart += tx.amount ?? 0;\n          }\n          return acc;\n        },\n        {} as Record<ChainType, { chart: number }>,\n      );\n\n      return Object.fromEntries(\n        Object.values(ChainType).map((chain) => [chain, result[chain] || { chart: 0 }]),\n      ) as Record<ChainType, { chart: number }>;\n    } catch (error) {\n      console.error(error);\n      return {} as Record<ChainType, { chart: number }>;\n    }\n  }\n\n  constructor(\n    public override db: IDBDatabase,\n    private eventSender: EventSender,\n  ) {\n    super(db);\n  }\n\n  override getMaxDownloadDateDifference(): number {\n    return 604800000;\n  }\n\n  getDataType(): string {\n    return 'performance_chart';\n  }\n}\n",
            "properties": [
                {
                    "name": "amount",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "chainType",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "decimals",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 2
                },
                {
                    "name": "timestamp",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 3
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "QRDialogData",
            "id": "interface-QRDialogData-c209a5be38b20523bcb2b4441af34cb4bd6777c0071fb87b557431045fc43dadc49e6cae43b16f6884f286fc142c06dd29592ad3d3aa97ee4a79c4b53fa7d018",
            "file": "src/app/statistics/qrdialog.component.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Component, Inject } from '@angular/core';\nimport { MatDialogRef, MAT_DIALOG_DATA } from '@angular/material/dialog';\nimport { QRCodeComponent } from 'angularx-qrcode';\n\ninterface QRDialogData {\n  title: string;\n  content: string;\n  qrData: string;\n}\n\n@Component({\n  selector: 'app-qr-dialog',\n  templateUrl: './qrdialog.html',\n  standalone: true,\n  imports: [QRCodeComponent],\n})\nexport class QRDialogComponent {\n  constructor(\n    public dialogRef: MatDialogRef<QRDialogComponent>,\n    @Inject(MAT_DIALOG_DATA) public data: QRDialogData,\n  ) {}\n\n  onCancelClick(): void {\n    this.dialogRef.close();\n  }\n}\n",
            "properties": [
                {
                    "name": "content",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "qrData",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "title",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 6
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "ServiceWorkerMessage",
            "id": "interface-ServiceWorkerMessage-9e1e99115174b6e3db1ec22b03036ffb4aa6c3bd524d743a9a23a1665fb605759c77eefbc815f154ff4520c6bd3a057d7463772b36ab4be22331d218a73fdfb3",
            "file": "src/app/service/service.worker.service.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Inject, Injectable } from '@angular/core';\nimport { EventData, EventService, EventType } from './event.service';\nimport { HttpClient } from '@angular/common/http';\nimport { IS_ELEMENTS_ACTIVE } from './tokens';\n\n// Define a type for the messages being sent to the service worker\ninterface ServiceWorkerMessage {\n  type: string;\n  data?: object;\n  payload?: object;\n}\n\nclass AngularEventSender implements EventSender {\n  constructor(private eventService: EventService) {}\n\n  async sendEvent<T>(event: EventPayload<T>): Promise<void> {\n    this.eventService.sendEventWithData(event.type as EventType, event.data ?? '');\n  }\n}\n\nexport function initializeServiceWorkerService(serviceWorkerService: ServiceWorkerService) {\n  return (): Promise<void> => {\n    return serviceWorkerService.initialize();\n  };\n}\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class ServiceWorkerService {\n  private avoidServiceWorker = true;\n\n  constructor(\n    private eventService: EventService,\n    private http: HttpClient,\n    @Inject(IS_ELEMENTS_ACTIVE) public isElementsActive: boolean,\n  ) {\n    this.checkForVersionDiscrepancy();\n    this.listenForServiceWorkerMessages();\n  }\n\n  public async initialize() {\n    this.eventService.subscribeToAllEvents((eventType, eventData) => {\n      if (\n        eventType == EventType.PerformanceScreenLoaded ||\n        eventType == EventType.StatisticsScreenLoaded ||\n        eventType == EventType.RequestInputsDownload\n      ) {\n        console.log(eventData);\n\n        if (this.avoidServiceWorker) {\n          console.log('Avoiding service worker, sending event ' + eventType + 'to angular worker');\n          const processEventService = new ProcessEventService(\n            new AngularEventSender(this.eventService),\n          );\n\n          processEventService.processEvent({\n            data: eventData as object | undefined,\n            type: eventType,\n          });\n        } else {\n          console.log('Sending to service worker, event ' + eventType);\n          this.sendMessageToServiceWorker({\n            type: eventType,\n            data: eventData,\n          } as ServiceWorkerMessage);\n        }\n      }\n    });\n  }\n\n  checkForVersionDiscrepancy(): void {\n    if (this.isElementsActive) {\n      console.log('Elements are active, avoiding service worker');\n      this.avoidServiceWorker = true;\n      return;\n    }\n\n    this.http\n      .get<{ appData?: { version?: string } }>('ngsw.json', { responseType: 'json' })\n      .subscribe(\n        (data) => {\n          console.log('Current Service Worker Version(ngsw.json) :', data.appData?.version);\n          console.log(\n            'localStorage rosenWatcherServiceVersion:',\n            localStorage.getItem('rosenWatcherServiceVersion'),\n          );\n\n          if (data.appData?.version == localStorage.getItem('rosenWatcherServiceVersion')) {\n            console.log('sw versions in sync');\n            this.avoidServiceWorker = false;\n          } else {\n            console.log('sw versions not in sync');\n            this.avoidServiceWorker = true;\n          }\n        },\n        (error: unknown) => {\n          console.error('Error fetching SW version', error);\n        },\n      );\n  }\n\n  getVersion(): string | null {\n    const version = localStorage.getItem('rosenWatcherServiceVersion');\n    return version;\n  }\n\n  sendMessageToServiceWorker(message: ServiceWorkerMessage) {\n    if (navigator.serviceWorker) {\n      navigator.serviceWorker.ready\n        .then((registration) => {\n          if (registration.active) {\n            registration.active.postMessage(message);\n          } else {\n            console.error('Service worker is not active yet');\n          }\n        })\n        .catch((error) => {\n          console.error('Error waiting for service worker to become ready:', error);\n        });\n    } else {\n      console.error('No service worker found');\n    }\n  }\n\n  listenForServiceWorkerMessages() {\n    if (navigator.serviceWorker) {\n      navigator.serviceWorker.addEventListener('controllerchange', () => {\n        console.log('New service worker has taken control. Reloading the page.');\n        //window.location.reload();\n      });\n\n      navigator.serviceWorker.ready.then((registration) => {\n        if (registration.installing) {\n          console.log('Service worker installing new version.');\n        }\n        registration.addEventListener('updatefound', () => {\n          console.log('updatefound: Service worker installing new version.');\n        });\n      });\n\n      navigator.serviceWorker.addEventListener('message', (event) => {\n        const message = event.data as ServiceWorkerMessage;\n\n        console.log(\n          'Received message from service worker of type ' + message.type + ', data ' + message.data,\n        );\n\n        this.handleServiceWorkerMessage(message);\n\n        const v = event?.data?.version?.appData?.version;\n\n        if (v) {\n          this.eventService.sendEventWithData(EventType.VersionUpdated, v);\n          localStorage.setItem('rosenWatcherServiceVersion', v);\n        }\n      });\n    } else {\n      console.error('Service worker is not supported in this browser.');\n    }\n  }\n\n  handleServiceWorkerMessage(message: ServiceWorkerMessage) {\n    console.log('Handling message from service worker:', message);\n\n    if ((Object.values(EventType) as string[]).includes(message.type)) {\n      if (message.data) {\n        this.eventService.sendEventWithData(message.type as EventType, message.data as EventData);\n      } else {\n        this.eventService.sendEvent(message.type as EventType);\n      }\n    }\n  }\n}\n",
            "properties": [
                {
                    "name": "data",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "payload",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 10
                },
                {
                    "name": "type",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 8
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "TransactionItem",
            "id": "interface-TransactionItem-0516426d8e20c4b6339f9fdc3bb21d06f8cc54c9be0d530bb788639bf0a531f3067cebad105048e92f1fb067111ec6ae4ce5c1df038cef7349792c6ccb512426",
            "file": "src/shared/ts/download.service.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "interface AddressData {\n  address: string;\n}\n\ninterface TransactionItem {\n  outputCreatedAt: string | number | Date;\n  timestamp: string;\n  inputs: Input[];\n  outputs: Output[];\n  id: string;\n}\n\ninterface FetchTransactionsResponse {\n  transactions: TransactionItem[];\n  items: TransactionItem[];\n  total: number;\n}\n\ninterface DownloadStatus {\n  address: string;\n  Address: string;\n  status: string;\n  lastDownloadDate: Date | undefined;\n}\n\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nclass DownloadService<T> {\n  private busyCounter = 0;\n  private downloadFullSize = rs_FullDownloadsBatchSize;\n  private downloadInitialSize = rs_InitialNDownloads;\n  //private static addressDownloadDateMap = new Map<string, Date>();\n\n  constructor(\n    downloadFullSize: number,\n    downloadInitialSize: number,\n    private dataService: DataService<T>,\n    private eventSender: EventSender,\n    private db: IDBDatabase,\n  ) {\n    this.downloadFullSize = downloadFullSize;\n    this.downloadInitialSize = downloadInitialSize;\n  }\n\n  async fetchTransactions(url: string): Promise<FetchTransactionsResponse> {\n    try {\n      const response: Response = await fetch(url);\n      if (!response.ok) throw new Error(`Server returned code: ${response.status}`);\n      return (await response.json()) as FetchTransactionsResponse;\n    } catch (error) {\n      console.error(`An error occurred: ${error}`);\n      throw error;\n    }\n  }\n\n  async downloadTransactions(\n    address: string,\n    offset = 0,\n    limit = 500,\n  ): Promise<FetchTransactionsResponse> {\n    const url = `https://${rs_ErgoExplorerHost}/api/v1/addresses/${address}/transactions?offset=${offset}&limit=${limit}`;\n    console.log(`Downloading from: ${url}`);\n\n    const response: FetchTransactionsResponse = await this.fetchTransactions(url);\n    const result: FetchTransactionsResponse = {\n      transactions: response.items,\n      total: response.total,\n      items: [],\n    };\n\n    for (const item of response.items) {\n      const inputDate: Date = new Date(item.timestamp);\n      if (inputDate < rs_StartFrom) {\n        return result;\n      }\n    }\n\n    return result;\n  }\n\n  async downloadForAddresses(): Promise<void> {\n    try {\n      const addresses: AddressData[] =\n        await this.dataService.getData<AddressData>(rs_AddressDataStoreName);\n\n      const downloadPromises: Promise<void>[] = addresses.map(async (addressObj: AddressData) => {\n        await this.downloadForAddress(addressObj.address);\n      });\n\n      await Promise.all(downloadPromises);\n    } catch (e) {\n      console.error('Error downloading for addresses:', e);\n    }\n  }\n\n  // Busy Counter\n  private increaseBusyCounter(address: string): void {\n    if (this.busyCounter === 0) {\n      this.eventSender.sendEvent({\n        type: 'StartFullDownload',\n        data: address,\n      });\n    }\n    this.busyCounter++;\n  }\n\n  private decreaseBusyCounter(address: string): void {\n    this.busyCounter--;\n    if (this.busyCounter === 0) {\n      this.eventSender.sendEvent({\n        type: 'EndFullDownload',\n        data: address,\n      });\n    }\n  }\n\n  // Download All for Address (recursive)\n  async downloadAllForAddress(address: string, offset: number, db: IDBDatabase): Promise<void> {\n    this.increaseBusyCounter(address);\n    console.log(this.busyCounter);\n\n    try {\n      const result: FetchTransactionsResponse = await this.downloadTransactions(\n        address,\n        offset,\n        this.downloadFullSize + 10,\n      );\n      console.log(\n        `Processing full download(offset = ${offset}, size = ${this.downloadFullSize}) for: ${address}`,\n      );\n\n      //const t = this.processItems(result.transactions);\n      //console.log('permit amount ' + t);\n\n      if (!result.transactions || result.transactions.length === 0 || offset > 100000) {\n        await this.setDownloadStatus(address, 'true', db);\n        console.log(this.busyCounter);\n        return;\n      }\n\n      await this.dataService.addData(address, result.transactions, db);\n      //await this.dataService.compressInputs();\n\n      if (\n        this.dataService.getMaxDownloadDateDifference() >\n        new Date().getTime() -\n          new Date(result.transactions[result.transactions.length - 1].timestamp).getTime()\n      ) {\n        await this.downloadAllForAddress(address, offset + this.downloadFullSize, db);\n      } else {\n        await this.setDownloadStatus(address, 'true', db);\n      }\n    } catch (e) {\n      console.error(e);\n    } finally {\n      this.decreaseBusyCounter(address);\n      console.log(this.busyCounter);\n    }\n  }\n  /*\n  processItems(items: TransactionItem[]): number {\n    let r = 0;\n    items.forEach((item) => {\n      \n      item.inputs.forEach((i) => {\n        i.assets.forEach((a) => {\n          if (a.name == 'rspv2CardanoRWT') {\n            r -= a.amount;\n          }\n        });\n      });\n      \n\n      item.outputs.forEach((o) => {\n        if (!getChainType(o.address)) {\n          o.assets.forEach((a) => {\n            if (a.name == 'rspv2CardanoRWT') {\n              r += a.amount;\n              if (a.amount > 30000000) {\n                console.log('wtfffffffffffffff ' + a.amount);\n              }\n            }\n          });\n        }\n      });\n    });\n\n    return r / 3000000;\n  }\n  */\n\n  // Get Download Status for Address from IndexedDB\n  async getDownloadStatus(address: string, db: IDBDatabase): Promise<DownloadStatus> {\n    return new Promise((resolve, reject) => {\n      const transaction: IDBTransaction = db.transaction([rs_DownloadStatusStoreName], 'readonly');\n      const objectStore: IDBObjectStore = transaction.objectStore(rs_DownloadStatusStoreName);\n      const request: IDBRequest = objectStore.get(address + '_' + this.dataService.getDataType());\n\n      request.onsuccess = () => resolve(request.result as DownloadStatus);\n      request.onerror = (event: Event) => reject((event.target as IDBRequest).error);\n    });\n  }\n\n  // Set Download Status for Address in IndexedDB\n  async setDownloadStatus(address: string, status: string, db: IDBDatabase): Promise<void> {\n    let dbStatus: DownloadStatus | undefined = await this.getDownloadStatus(address, db);\n\n    if (!dbStatus) {\n      dbStatus = {\n        address: address + '_' + this.dataService.getDataType(),\n        Address: address,\n        status: status,\n        lastDownloadDate: undefined,\n      };\n    } else {\n      dbStatus.status = status;\n      dbStatus.address = address + '_' + this.dataService.getDataType();\n      dbStatus.Address = address;\n    }\n\n    await this.saveDownloadStatus(dbStatus, db);\n  }\n\n  async saveDownloadStatus(downloadStatus: DownloadStatus, db: IDBDatabase): Promise<void> {\n    return new Promise((resolve, reject) => {\n      const transaction: IDBTransaction = db.transaction([rs_DownloadStatusStoreName], 'readwrite');\n      const objectStore: IDBObjectStore = transaction.objectStore(rs_DownloadStatusStoreName);\n\n      const request: IDBRequest = objectStore.put(downloadStatus);\n\n      request.onsuccess = () => resolve();\n      request.onerror = (event: Event) => reject((event.target as IDBRequest).error);\n    });\n  }\n\n  async downloadForAddress(address: string): Promise<void> {\n    /*const downloadStatus = await this.getDownloadStatus(address, this.db);\n\n    \n    if (downloadStatus?.lastDownloadDate) {\n      const lastDownloadDate: Date | undefined = downloadStatus.lastDownloadDate;\n      if (lastDownloadDate && lastDownloadDate.getTime() > new Date().getTime() - 1000 * 120) {\n        return;\n      }\n    }\n\n    if (downloadStatus) {\n      downloadStatus.lastDownloadDate = new Date();\n      await this.saveDownloadStatus(downloadStatus, this.db);\n    }\n*/\n    this.increaseBusyCounter(address);\n    console.log(this.busyCounter);\n\n    try {\n      const result: FetchTransactionsResponse = await this.downloadTransactions(\n        address,\n        0,\n        this.downloadInitialSize,\n      );\n      console.log(\n        `Processing initial download(size = ${this.downloadInitialSize}) for: ${address}`,\n      );\n\n      const itemsz: number = result.transactions.length;\n\n      let existingData: T | null = null;\n\n      if (itemsz > this.downloadInitialSize / 4) {\n        for (let i = Math.floor(itemsz / 4); i < itemsz - Math.floor(itemsz / 4); i++) {\n          const item: TransactionItem = result.transactions[i];\n\n          existingData = await this.dataService.getExistingData(item, address);\n          if (existingData) {\n            break;\n          }\n        }\n      }\n\n      console.log('Add bunch of data');\n      await this.dataService.addData(address, result.transactions, this.db);\n      const downloadStatus: string =\n        (await this.getDownloadStatus(address, this.db))?.status || 'false';\n      if (existingData && downloadStatus === 'true') {\n        console.log(`Found existing boxId in db for ${address}, no need to download more.`);\n      } else if (itemsz >= this.downloadInitialSize) {\n        await this.setDownloadStatus(address, 'false', this.db);\n        console.log(`Downloading all tx's for : ${address}`);\n        await this.downloadAllForAddress(address, 0, this.db);\n      }\n    } catch (e) {\n      console.error(e);\n    } finally {\n      this.decreaseBusyCounter(address);\n      console.log(this.busyCounter);\n    }\n  }\n}\n",
            "properties": [
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 10
                },
                {
                    "name": "inputs",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Input[]",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "outputCreatedAt",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string | number | Date",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "outputs",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Output[]",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "timestamp",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 7
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "User",
            "id": "interface-User-d4821beac0e4a852e513391b7470981c4353fdd95a18628bb68136c8695b489ee15b926e2e5031bc26cf30e1508e0a362c3ee13a06734702b4d15af140e485d5",
            "file": "src/stories/user.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface User {\n  name: string;\n}\n",
            "properties": [
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 2
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "WindowWithPrompt",
            "id": "interface-WindowWithPrompt-214ccaeec1dc9fd3aa648ee84364d80b4d7e1383cea0e12e1586c39dd54facbac0ee7c912cdf94681dbe489a588346f75c206d57e38f5f0e15503b28c2570554",
            "file": "src/app/service/browser.service.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Injectable } from '@angular/core';\n\nimport { MatDialog } from '@angular/material/dialog';\nimport { QRDialogComponent } from '../statistics/qrdialog.component';\nimport { Router } from '@angular/router';\nimport { Address } from '../../service/ts/models/address';\nimport { Location } from '@angular/common';\nimport { EventService, EventType } from './event.service';\n\nexport interface BeforeInstallPromptEvent extends Event {\n  prompt: () => Promise<void>;\n  userChoice: Promise<{ outcome: 'accepted' | 'dismissed'; platform: string }>;\n}\n\nexport interface WindowWithPrompt extends Window {\n  showHomeLink?: boolean;\n  deferredPrompt?: BeforeInstallPromptEvent;\n}\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class BrowserService {\n  constructor(\n    private qrDialog: MatDialog,\n    private router: Router,\n    private location?: Location,\n    private eventService?: EventService,\n  ) {\n    window.addEventListener('beforeinstallprompt', (event: Event) => {\n      (window as WindowWithPrompt).showHomeLink = true;\n      event.preventDefault();\n\n      (window as WindowWithPrompt).deferredPrompt = event as BeforeInstallPromptEvent;\n    });\n\n    window.addEventListener('resize', () => {\n      this.eventService?.sendEvent(EventType.WindowResized);\n    });\n  }\n\n  showQR(addresses: Address[]): void {\n    this.qrDialog.open(QRDialogComponent, {\n      data: { qrData: this.getShareUrl(addresses) },\n    });\n  }\n\n  getShareUrl(addresses: Address[]): string {\n    const currentUrl = window.location.pathname;\n    const subdirectory = currentUrl.substring(0, currentUrl.lastIndexOf('/'));\n    const urlTree = this.router.createUrlTree(['main'], {\n      queryParams: { addresses: JSON.stringify(addresses) },\n    });\n    const url = window.location.origin + subdirectory + this.router.serializeUrl(urlTree);\n    return url;\n  }\n\n  replacePath() {\n    const currentPath = this.location?.path();\n\n    if (!currentPath) {\n      return;\n    }\n\n    if (currentPath.includes('?')) {\n      const parts = currentPath.split('?');\n      const newPath = parts[0];\n      this.location?.replaceState(newPath);\n    }\n  }\n\n  share(addresses: Address[]): void {\n    const url = this.getShareUrl(addresses);\n\n    console.log('share url: ' + url);\n\n    navigator.share({\n      title: 'Rosen Watcher',\n      text: 'Rosen Watcher',\n      url: url,\n    });\n  }\n\n  showHomeLink(): boolean {\n    return (window as WindowWithPrompt).showHomeLink == true;\n  }\n\n  installApp(): void {\n    if ((window as WindowWithPrompt).deferredPrompt) {\n      (window as WindowWithPrompt).deferredPrompt?.prompt();\n\n      (window as WindowWithPrompt).deferredPrompt?.userChoice.then(\n        (choiceResult: { outcome: 'accepted' | 'dismissed'; platform: string }) => {\n          if (choiceResult.outcome === 'accepted') {\n            (window as WindowWithPrompt).showHomeLink = false;\n          }\n          (window as WindowWithPrompt).deferredPrompt = undefined;\n        },\n      );\n    }\n  }\n}\n",
            "properties": [
                {
                    "name": "deferredPrompt",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "BeforeInstallPromptEvent",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "showHomeLink",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 16
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": [
                "Window"
            ]
        }
    ],
    "injectables": [
        {
            "name": "BrowserService",
            "id": "injectable-BrowserService-214ccaeec1dc9fd3aa648ee84364d80b4d7e1383cea0e12e1586c39dd54facbac0ee7c912cdf94681dbe489a588346f75c206d57e38f5f0e15503b28c2570554",
            "file": "src/app/service/browser.service.ts",
            "properties": [],
            "methods": [
                {
                    "name": "getShareUrl",
                    "args": [
                        {
                            "name": "addresses",
                            "type": "Address[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 48,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "addresses",
                            "type": "Address[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "installApp",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 88,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "replacePath",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 58,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "share",
                    "args": [
                        {
                            "name": "addresses",
                            "type": "Address[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 72,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "addresses",
                            "type": "Address[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "showHomeLink",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 84,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "showQR",
                    "args": [
                        {
                            "name": "addresses",
                            "type": "Address[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 42,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "addresses",
                            "type": "Address[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\n\nimport { MatDialog } from '@angular/material/dialog';\nimport { QRDialogComponent } from '../statistics/qrdialog.component';\nimport { Router } from '@angular/router';\nimport { Address } from '../../service/ts/models/address';\nimport { Location } from '@angular/common';\nimport { EventService, EventType } from './event.service';\n\nexport interface BeforeInstallPromptEvent extends Event {\n  prompt: () => Promise<void>;\n  userChoice: Promise<{ outcome: 'accepted' | 'dismissed'; platform: string }>;\n}\n\nexport interface WindowWithPrompt extends Window {\n  showHomeLink?: boolean;\n  deferredPrompt?: BeforeInstallPromptEvent;\n}\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class BrowserService {\n  constructor(\n    private qrDialog: MatDialog,\n    private router: Router,\n    private location?: Location,\n    private eventService?: EventService,\n  ) {\n    window.addEventListener('beforeinstallprompt', (event: Event) => {\n      (window as WindowWithPrompt).showHomeLink = true;\n      event.preventDefault();\n\n      (window as WindowWithPrompt).deferredPrompt = event as BeforeInstallPromptEvent;\n    });\n\n    window.addEventListener('resize', () => {\n      this.eventService?.sendEvent(EventType.WindowResized);\n    });\n  }\n\n  showQR(addresses: Address[]): void {\n    this.qrDialog.open(QRDialogComponent, {\n      data: { qrData: this.getShareUrl(addresses) },\n    });\n  }\n\n  getShareUrl(addresses: Address[]): string {\n    const currentUrl = window.location.pathname;\n    const subdirectory = currentUrl.substring(0, currentUrl.lastIndexOf('/'));\n    const urlTree = this.router.createUrlTree(['main'], {\n      queryParams: { addresses: JSON.stringify(addresses) },\n    });\n    const url = window.location.origin + subdirectory + this.router.serializeUrl(urlTree);\n    return url;\n  }\n\n  replacePath() {\n    const currentPath = this.location?.path();\n\n    if (!currentPath) {\n      return;\n    }\n\n    if (currentPath.includes('?')) {\n      const parts = currentPath.split('?');\n      const newPath = parts[0];\n      this.location?.replaceState(newPath);\n    }\n  }\n\n  share(addresses: Address[]): void {\n    const url = this.getShareUrl(addresses);\n\n    console.log('share url: ' + url);\n\n    navigator.share({\n      title: 'Rosen Watcher',\n      text: 'Rosen Watcher',\n      url: url,\n    });\n  }\n\n  showHomeLink(): boolean {\n    return (window as WindowWithPrompt).showHomeLink == true;\n  }\n\n  installApp(): void {\n    if ((window as WindowWithPrompt).deferredPrompt) {\n      (window as WindowWithPrompt).deferredPrompt?.prompt();\n\n      (window as WindowWithPrompt).deferredPrompt?.userChoice.then(\n        (choiceResult: { outcome: 'accepted' | 'dismissed'; platform: string }) => {\n          if (choiceResult.outcome === 'accepted') {\n            (window as WindowWithPrompt).showHomeLink = false;\n          }\n          (window as WindowWithPrompt).deferredPrompt = undefined;\n        },\n      );\n    }\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "qrDialog",
                        "type": "MatDialog",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "location",
                        "type": "Location",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true
                    },
                    {
                        "name": "eventService",
                        "type": "EventService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true
                    }
                ],
                "line": 23,
                "jsdoctags": [
                    {
                        "name": "qrDialog",
                        "type": "MatDialog",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "location",
                        "type": "Location",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true,
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "eventService",
                        "type": "EventService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true,
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "type": "injectable"
        },
        {
            "name": "ChainChartService",
            "id": "injectable-ChainChartService-7c4854c1d92e23a798c591b88deb5be431fb9892be58fe093acda94d9c27235f737dd75b70b9161e01bc8632a6d95e4d51f064e45f615f6b28d92f6773226974",
            "file": "src/app/service/chain.chart.service.ts",
            "properties": [
                {
                    "name": "chartColors",
                    "defaultValue": "[\n    '#1f77b4', // Blue\n    '#2ca02c', // Green\n    '#bcbd22', // Yellow-Green\n    '#d62728', // Red\n    '#ff7f0e', // Orange\n    '#8c564b', // Brown\n    '#e377c2', // Pink\n    '#7f7f7f', // Gray\n    '#17becf', // Turquoise\n    '#9467bd', // Purple\n  ]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string[]",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 18,
                    "modifierKind": [
                        148
                    ]
                }
            ],
            "methods": [
                {
                    "name": "calculateTriangleArea",
                    "args": [
                        {
                            "name": "p1",
                            "type": "DateNumberPoint",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "p2",
                            "type": "DateNumberPoint",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "p3",
                            "type": "DateNumberPoint",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "number",
                    "typeParameters": [],
                    "line": 326,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "p1",
                            "type": "DateNumberPoint",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "p2",
                            "type": "DateNumberPoint",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "p3",
                            "type": "DateNumberPoint",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "createChainPerformanceChart",
                    "args": [
                        {
                            "name": "dataset",
                            "type": "ChartDataset<bar | literal type[]>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Chart<bar, literal type[], >",
                    "typeParameters": [],
                    "line": 31,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "dataset",
                            "type": "ChartDataset<bar | literal type[]>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "createPerformanceChart",
                    "args": [
                        {
                            "name": "datasets",
                            "type": "ChartDataset<bar, literal type[]>[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Chart<bar, literal type[], >",
                    "typeParameters": [],
                    "line": 101,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "datasets",
                            "type": "ChartDataset<bar, literal type[]>[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "createStatisticsChart",
                    "args": [
                        {
                            "name": "canvasElement",
                            "type": "HTMLCanvasElement",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "rewardsChart",
                            "type": "DateNumberPoint[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "nDataSets",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "tensions",
                            "type": "number[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "chartTitle",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "color",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "LineChart",
                    "typeParameters": [],
                    "line": 176,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "canvasElement",
                            "type": "HTMLCanvasElement",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "rewardsChart",
                            "type": "DateNumberPoint[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "nDataSets",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "tensions",
                            "type": "number[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "chartTitle",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "color",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "reduceChartData",
                    "args": [
                        {
                            "name": "data",
                            "type": "DateNumberPoint[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "targetPoints",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "adaptExtremes",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "DateNumberPoint[]",
                    "typeParameters": [],
                    "line": 335,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "data",
                            "type": "DateNumberPoint[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "targetPoints",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "adaptExtremes",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "updateStatisticsChart",
                    "args": [
                        {
                            "name": "chart",
                            "type": "LineChart",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "newTitle",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "newColor",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 264,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "chart",
                            "type": "LineChart",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "newTitle",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "newColor",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport Chart, { ChartDataset, TooltipItem } from 'chart.js/auto';\nimport 'chartjs-adapter-date-fns';\n\nexport type LineChart = Chart<\n  'line',\n  {\n    x: Date;\n    y: number;\n  }[],\n  unknown\n>;\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class ChainChartService {\n  readonly chartColors: string[] = [\n    '#1f77b4', // Blue\n    '#2ca02c', // Green\n    '#bcbd22', // Yellow-Green\n    '#d62728', // Red\n    '#ff7f0e', // Orange\n    '#8c564b', // Brown\n    '#e377c2', // Pink\n    '#7f7f7f', // Gray\n    '#17becf', // Turquoise\n    '#9467bd', // Purple\n  ];\n\n  createChainPerformanceChart(\n    dataset: ChartDataset<'bar', { x: string | number | Date; y: number }[]>,\n  ): Chart<'bar', { x: string | number | Date; y: number }[], unknown> {\n    return new Chart<'bar', { x: string | number | Date; y: number }[]>('PerformanceChart', {\n      type: 'bar',\n      data: {\n        datasets: [dataset],\n      },\n      options: {\n        responsive: true,\n        maintainAspectRatio: false,\n        scales: {\n          y: {\n            beginAtZero: true,\n            alignToPixels: true,\n            grid: {\n              color: 'rgba(0, 0, 0, 0.1)',\n            },\n            ticks: {\n              callback: function (value: number | string) {\n                return (value as number).toLocaleString('en-US', {\n                  minimumFractionDigits: 0,\n                });\n              },\n            },\n          },\n          x: {\n            type: 'category', // Ensuring it's a categorical axis\n            alignToPixels: true,\n            grid: {\n              color: 'rgba(0, 0, 0, 0.1)',\n            },\n          },\n        },\n        plugins: {\n          tooltip: {\n            backgroundColor: 'rgba(0, 0, 0, 0.7)',\n            bodyFont: {\n              size: 14,\n            },\n            titleFont: {\n              size: 16,\n              weight: 'bold',\n            },\n            callbacks: {\n              label: function (context: TooltipItem<'bar'>) {\n                const value = context.raw as { y: number };\n                return (\n                  context.dataset.label +\n                  ': ' +\n                  value.y.toLocaleString('en-US', { minimumFractionDigits: 2 })\n                );\n              },\n            },\n          },\n          legend: {\n            display: false,\n          },\n        },\n        elements: {\n          bar: {\n            borderWidth: 0,\n            borderRadius: 4, // Adds rounded corners\n            borderSkipped: false,\n          },\n        },\n      },\n    });\n  }\n\n  createPerformanceChart(\n    datasets: ChartDataset<'bar', { x: string | number | Date; y: number }[]>[],\n  ): Chart<'bar', { x: string | number | Date; y: number }[], unknown> {\n    return new Chart<'bar', { x: string | number | Date; y: number }[]>('PerformanceChart', {\n      type: 'bar',\n      data: {\n        datasets: datasets,\n      },\n      options: {\n        responsive: true,\n        maintainAspectRatio: false,\n        scales: {\n          y: {\n            beginAtZero: true,\n            stacked: true,\n            alignToPixels: true,\n            grid: {\n              color: 'rgba(0, 0, 0, 0.1)',\n            },\n            ticks: {\n              callback: function (value: number | string) {\n                return (value as number).toLocaleString('en-US', {\n                  minimumFractionDigits: 0,\n                });\n              },\n            },\n          },\n          x: {\n            type: 'time',\n            stacked: true,\n            alignToPixels: true,\n            time: {\n              unit: 'week',\n            },\n            grid: {\n              color: 'rgba(0, 0, 0, 0.1)',\n            },\n          },\n        },\n        plugins: {\n          tooltip: {\n            backgroundColor: 'rgba(0, 0, 0, 0.7)',\n            bodyFont: {\n              size: 14,\n            },\n            titleFont: {\n              size: 16,\n              weight: 'bold',\n            },\n            callbacks: {\n              label: function (context: TooltipItem<'bar'>) {\n                const value = context.raw as { y: number };\n                return (\n                  context.dataset.label +\n                  ': ' +\n                  value.y.toLocaleString('en-US', { minimumFractionDigits: 2 })\n                );\n              },\n            },\n          },\n          legend: {\n            display: false,\n          },\n        },\n        elements: {\n          bar: {\n            borderWidth: 0,\n            borderRadius: 0,\n            borderSkipped: false,\n          },\n        },\n      },\n    });\n  }\n\n  createStatisticsChart(\n    canvasElement: HTMLCanvasElement,\n    rewardsChart: DateNumberPoint[],\n    nDataSets: number,\n    tensions: number[],\n    chartTitle: string,\n    color?: string,\n  ): LineChart {\n    const dataSets: ChartDataset<'line', DateNumberPoint[]>[] = [];\n    for (let i = 0; i < nDataSets; i++) {\n      let chartColor = color ?? 'rgba(138, 128, 128)';\n      if (i > 0) {\n        chartColor = this.chartColors[i - 1];\n      }\n\n      dataSets.push({\n        label: chartTitle,\n        data: rewardsChart,\n        borderColor: chartColor,\n        backgroundColor: color ?? 'rgba(0, 0, 0, 0.1)',\n        borderWidth: 4,\n        pointBackgroundColor: chartColor,\n        cubicInterpolationMode: 'default',\n        tension: tensions[i],\n        pointRadius: 0,\n      });\n    }\n\n    return new Chart<'line', DateNumberPoint[]>(canvasElement, {\n      type: 'line',\n      data: {\n        datasets: dataSets,\n      },\n      options: {\n        responsive: true,\n        maintainAspectRatio: false,\n        animation: {\n          duration: 0,\n        },\n        scales: {\n          y: {\n            grid: {\n              color: color ?? 'rgba(0, 0, 0, 0.1)',\n            },\n            ticks: {\n              color: color ?? 'rgba(0, 0, 0, 0.7)',\n              callback: function (value: number | string) {\n                return value as number;\n              },\n            },\n          },\n          x: {\n            type: 'time',\n            time: {\n              unit: 'day',\n            },\n            grid: {\n              color: color ?? 'rgba(0, 0, 0, 0.1)',\n            },\n            ticks: {\n              color: color ?? 'rgba(0, 0, 0, 0.7)',\n            },\n          },\n        },\n        plugins: {\n          tooltip: {\n            backgroundColor: color ?? 'rgba(0, 0, 0, 0.7)',\n            bodyFont: {\n              size: 14,\n            },\n            titleFont: {\n              size: 16,\n              weight: 'bold',\n            },\n          },\n          legend: {\n            labels: {\n              color: color ?? 'rgba(0, 0, 0, 0.7)',\n              font: {\n                size: 14,\n              },\n            },\n          },\n        },\n      },\n    });\n  }\n\n  updateStatisticsChart(chart: LineChart, newTitle: string, newColor?: string): void {\n    chart.data.datasets.forEach((dataset, i) => {\n      dataset.label = newTitle;\n      let chartColor = newColor ?? 'rgba(138, 128, 128)';\n      if (i > 0) {\n        chartColor = this.chartColors[i - 1];\n      }\n      (dataset as ChartDataset<'line', DateNumberPoint[]>).borderColor = chartColor;\n      (dataset as ChartDataset<'line', DateNumberPoint[]>).pointBackgroundColor = chartColor;\n      (dataset as ChartDataset<'line', DateNumberPoint[]>).backgroundColor =\n        newColor ?? 'rgba(0, 0, 0, 0.1)';\n    });\n\n    if (\n      chart.options.scales &&\n      chart.options.scales['y'] &&\n      typeof chart.options.scales['y'] === 'object'\n    ) {\n      chart.options.scales['y'].grid = {\n        ...chart.options.scales['y'].grid,\n        color: newColor ?? 'rgba(0, 0, 0, 0.1)',\n      };\n      chart.options.scales['y'].ticks = {\n        ...chart.options.scales['y'].ticks,\n        color: newColor ?? 'rgba(0, 0, 0, 0.7)',\n      };\n    }\n    if (\n      chart.options.scales &&\n      chart.options.scales['x'] &&\n      typeof chart.options.scales['x'] === 'object'\n    ) {\n      chart.options.scales['x'].grid = {\n        ...chart.options.scales['x'].grid,\n        color: newColor ?? 'rgba(0, 0, 0, 0.1)',\n      };\n      chart.options.scales['x'].ticks = {\n        ...chart.options.scales['x'].ticks,\n        color: newColor ?? 'rgba(0, 0, 0, 0.7)',\n      };\n    }\n    if (\n      chart.options.plugins &&\n      chart.options.plugins.legend &&\n      typeof chart.options.plugins.legend === 'object'\n    ) {\n      chart.options.plugins.legend.labels = {\n        ...chart.options.plugins.legend.labels,\n        color: newColor ?? 'rgba(0, 0, 0, 0.7)',\n      };\n    }\n    if (\n      chart.options.plugins &&\n      chart.options.plugins.tooltip &&\n      typeof chart.options.plugins.tooltip === 'object'\n    ) {\n      chart.options.plugins.tooltip.backgroundColor = newColor ?? 'rgba(0, 0, 0, 0.7)';\n    }\n\n    chart.update();\n  }\n\n  calculateTriangleArea(p1: DateNumberPoint, p2: DateNumberPoint, p3: DateNumberPoint): number {\n    return Math.abs(\n      (p1.x.getTime() * (p2.y - p3.y) +\n        p2.x.getTime() * (p3.y - p1.y) +\n        p3.x.getTime() * (p1.y - p2.y)) /\n        2,\n    );\n  }\n\n  reduceChartData(\n    data: DateNumberPoint[],\n    targetPoints: number,\n    adaptExtremes: boolean,\n  ): DateNumberPoint[] {\n    if (data.length == 0) {\n      return [];\n    }\n    let points = data.slice();\n\n    let remainingPoints = points.length - targetPoints;\n\n    while (remainingPoints > 0) {\n      let minArea = Infinity;\n      let indexToRemove = -1;\n\n      for (let i = 1; i < points.length - 1; i++) {\n        const area = this.calculateTriangleArea(points[i - 1], points[i], points[i + 1]);\n        if (area < minArea) {\n          minArea = area;\n          indexToRemove = i;\n        }\n      }\n\n      if (indexToRemove !== -1) {\n        points.splice(indexToRemove, 1);\n        remainingPoints--;\n      } else {\n        break;\n      }\n    }\n\n    if (!adaptExtremes) {\n      return points;\n    }\n\n    const timeValuesX = points.map((p) => p.x.getTime());\n    const minTimeX = Math.min(...timeValuesX);\n    const maxTimeX = Math.max(...timeValuesX);\n    const timeRangeX = maxTimeX - minTimeX;\n\n    const newPoints: DateNumberPoint[] = [];\n\n    newPoints[0] = points[0];\n    const valuesY = points.map((p) => p.y);\n    const minY = Math.min(...valuesY);\n    const maxY = Math.max(...valuesY);\n    const rangeY = maxY - minY;\n\n    let currentPoint = 0;\n\n    for (let i = 1; i < points.length; i++) {\n      const diff = points[i].y - points[i - 1].y;\n\n      const timeDiff = points[i].x.getTime() - points[currentPoint].x.getTime();\n\n      const dx = timeDiff / timeRangeX;\n      const dy = diff / rangeY;\n\n      const steepSlope = dx < 0.1 * dy || dy < 0.1 * dx;\n\n      if (!steepSlope) {\n        newPoints.push(points[i]);\n        currentPoint = i;\n      } else if (i == points.length - 1) {\n        newPoints[newPoints.length - 1] = points[i];\n      }\n    }\n\n    points = newPoints;\n    if (points.length <= 1 && data.length > 1) {\n      points = [data[0], data[data.length - 1]];\n    }\n\n    return points;\n  }\n}\n",
            "extends": [],
            "type": "injectable"
        },
        {
            "name": "ChainDataService",
            "id": "injectable-ChainDataService-a67b9f2a817a3aef1c1f28dffd75b3c7d13602457b68821ccadcdd8dd8b78e6cd2b09665f2cf7741207e044b6cb0d742d3028ccdae39d8803fba9d30b9b9f565",
            "file": "src/app/service/chain.data.service.ts",
            "properties": [
                {
                    "name": "addressCharts",
                    "defaultValue": "{}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Record<string | literal type>",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 20,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "busyCounter",
                    "defaultValue": "0",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 44
                },
                {
                    "name": "chainChart",
                    "defaultValue": "{\n    [ChainType.Bitcoin]: {\n      chart: 0,\n    },\n    [ChainType.Cardano]: {\n      chart: 0,\n    },\n    [ChainType.Ergo]: {\n      chart: 0,\n    },\n    [ChainType.Ethereum]: {\n      chart: 0,\n    },\n    [ChainType.Binance]: {\n      chart: 0,\n    },\n    [ChainType.Doge]: {\n      chart: 0,\n    },\n  }",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Record<ChainType | literal type>",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 24,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "rsnInputs",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Input[]",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 19,
                    "modifierKind": [
                        125
                    ]
                }
            ],
            "methods": [
                {
                    "name": "getAddressCharts",
                    "args": [],
                    "optional": false,
                    "returnType": "Record<string, literal type>",
                    "typeParameters": [],
                    "line": 131,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "getAddresses",
                    "args": [],
                    "optional": false,
                    "returnType": "Promise<Address[]>",
                    "typeParameters": [],
                    "line": 142,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        134
                    ]
                },
                {
                    "name": "getAddressesForDisplay",
                    "args": [
                        {
                            "name": "inputs",
                            "type": "Input[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Address[]",
                    "typeParameters": [],
                    "line": 146,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "inputs",
                            "type": "Input[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getAddressesFromInputs",
                    "args": [
                        {
                            "name": "inputs",
                            "type": "Input[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Address[]",
                    "typeParameters": [],
                    "line": 154,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "inputs",
                            "type": "Input[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getChainChart",
                    "args": [],
                    "optional": false,
                    "returnType": "Record<ChainType, literal type>",
                    "typeParameters": [],
                    "line": 138,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "getInputs",
                    "args": [],
                    "optional": false,
                    "returnType": "Promise<Input[]>",
                    "typeParameters": [],
                    "line": 77,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        134
                    ]
                },
                {
                    "name": "getInputsPart",
                    "args": [
                        {
                            "name": "size",
                            "type": "number | null",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "fromDate",
                            "type": "Date | null",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "toDate",
                            "type": "Date | null",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "addresses",
                            "type": "Address[] | null",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Input[]",
                    "typeParameters": [],
                    "line": 81,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        125
                    ],
                    "jsdoctags": [
                        {
                            "name": "size",
                            "type": "number | null",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "fromDate",
                            "type": "Date | null",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "toDate",
                            "type": "Date | null",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "addresses",
                            "type": "Address[] | null",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getSortedInputs",
                    "args": [
                        {
                            "name": "ascending",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "fromDate",
                            "type": "Date | null",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "toDate",
                            "type": "Date | null",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Input[]",
                    "typeParameters": [],
                    "line": 104,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "ascending",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "fromDate",
                            "type": "Date | null",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "toDate",
                            "type": "Date | null",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "initialize",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 52,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        125,
                        134
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { StorageService } from './storage.service';\n\nimport { Input } from '../../service/ts/models/input';\nimport { Address } from '../../service/ts/models/address';\nimport { EventService, EventType } from './event.service';\nimport { DateUtils } from '../statistics/date.utils';\n\nexport function initializeDataService(dataService: ChainDataService) {\n  return (): Promise<void> => {\n    return dataService.initialize();\n  };\n}\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class ChainDataService {\n  public rsnInputs: Input[] = [];\n  private addressCharts: Record<\n    string,\n    { chainType: ChainType | null; charts: Record<number, number> }\n  > = {};\n  private chainChart: Record<ChainType, { chart: number }> = {\n    [ChainType.Bitcoin]: {\n      chart: 0,\n    },\n    [ChainType.Cardano]: {\n      chart: 0,\n    },\n    [ChainType.Ergo]: {\n      chart: 0,\n    },\n    [ChainType.Ethereum]: {\n      chart: 0,\n    },\n    [ChainType.Binance]: {\n      chart: 0,\n    },\n    [ChainType.Doge]: {\n      chart: 0,\n    },\n  };\n  busyCounter = 0;\n\n  constructor(\n    private storageService: StorageService,\n\n    private eventService: EventService,\n  ) {}\n\n  public async initialize() {\n    this.eventService.subscribeToEvent(EventType.InputsChanged, async (i: Input[]) => {\n      this.rsnInputs = i;\n      this.eventService.sendEvent(EventType.RefreshInputs);\n    });\n\n    this.eventService.subscribeToEvent(\n      EventType.PerfChartChanged,\n      async (a: Record<string, { chainType: ChainType | null; chart: number }>) => {\n        this.chainChart = a;\n        this.eventService.sendEvent(EventType.RefreshInputs);\n      },\n    );\n\n    this.eventService.subscribeToEvent(\n      EventType.AddressChartChanged,\n      async (\n        a: Record<string, { chainType: ChainType | null; charts: Record<number, number> }>,\n      ) => {\n        this.addressCharts = a;\n        this.eventService.sendEvent(EventType.RefreshInputs);\n      },\n    );\n  }\n\n  async getInputs(): Promise<Input[]> {\n    return this.storageService.getInputs();\n  }\n\n  public getInputsPart(\n    size: number | null,\n    fromDate: Date | null,\n    toDate: Date | null,\n    addresses: Address[] | null,\n  ): Input[] {\n    let result = this.getSortedInputs(false, fromDate, toDate);\n\n    if (result && addresses && addresses.length > 0) {\n      const activeAddresses = addresses\n        .filter((address) => address.active)\n        .map((address) => address.address);\n\n      result = result.filter((input) => activeAddresses.includes(input.outputAddress));\n    }\n\n    if (size) {\n      result = result.slice(0, size);\n    }\n\n    return result;\n  }\n\n  getSortedInputs(ascending: boolean, fromDate: Date | null, toDate: Date | null): Input[] {\n    this.rsnInputs.sort((a, b) => {\n      const aTime = Math.round(a.inputDate.getTime() / 1000) * 1000;\n      const bTime = Math.round(b.inputDate.getTime() / 1000) * 1000;\n\n      if (aTime !== bTime) {\n        return !ascending ? bTime - aTime : aTime - bTime;\n      }\n\n      return (b.amount ?? 0) - (a.amount ?? 0);\n    });\n\n    let result = this.rsnInputs;\n    const stripTimeUTC = DateUtils.StripTimeUTC();\n    const fromDateUTC = DateUtils.convertToUTCWithSameFields(fromDate);\n    const toDateUTC = DateUtils.convertToUTCWithSameFields(toDate);\n\n    result = result.filter((i) => {\n      const inputDateStripped = stripTimeUTC(i.inputDate);\n      return (\n        (!fromDateUTC || inputDateStripped! >= fromDateUTC) &&\n        (!toDateUTC || inputDateStripped! <= toDateUTC)\n      );\n    });\n    return result;\n  }\n\n  getAddressCharts(): Record<\n    string,\n    { chainType: ChainType | null; charts: Record<number, number> }\n  > {\n    return this.addressCharts;\n  }\n\n  getChainChart(): Record<ChainType, { chart: number }> {\n    return this.chainChart;\n  }\n\n  async getAddresses(): Promise<Address[]> {\n    return await this.storageService.getAddressData();\n  }\n\n  getAddressesForDisplay(inputs: Input[]): Address[] {\n    const addresses = this.getAddressesFromInputs(inputs);\n\n    addresses.sort((a, b) => (a.chainType ?? '').localeCompare(b.chainType ?? ''));\n\n    return addresses;\n  }\n\n  getAddressesFromInputs(inputs: Input[]): Address[] {\n    const addresses: Address[] = [];\n\n    const existingAddresses = new Set(addresses.map((a) => a.address));\n\n    inputs.forEach((input: Input) => {\n      if (!existingAddresses.has(input.outputAddress)) {\n        const newAddress = new Address(input.outputAddress, input.chainType ?? null);\n        addresses.push(newAddress);\n        existingAddresses.add(input.outputAddress);\n      }\n    });\n\n    return addresses;\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "storageService",
                        "type": "StorageService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "eventService",
                        "type": "EventService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 44,
                "jsdoctags": [
                    {
                        "name": "storageService",
                        "type": "StorageService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "eventService",
                        "type": "EventService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "type": "injectable"
        },
        {
            "name": "ChainService",
            "id": "injectable-ChainService-e915d140143be304ad119c0ac2f8878cc5b130895c646f04d3ff1d84e1e794234ddfb694643637e10635a98805a31977258a4fb330c60a5091d46fa4227e8791",
            "file": "src/app/service/chain.service.ts",
            "properties": [],
            "methods": [
                {
                    "name": "getChainType",
                    "args": [
                        {
                            "name": "address",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "ChainType",
                    "typeParameters": [],
                    "line": 7,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "address",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class ChainService {\n  getChainType(address: string) {\n    return getChainType(address);\n  }\n}\n",
            "extends": [],
            "type": "injectable"
        },
        {
            "name": "EventService",
            "id": "injectable-EventService-69d20583e075887802c12119291a67f7333ebfc74f1e3b7c83d11889dc8757c87b0077d7ce9e158527f5fb3ded6e83f6c6b314239d901945daa866589e3b08f8",
            "file": "src/app/service/event.service.ts",
            "properties": [
                {
                    "name": "eventSubscriptions",
                    "defaultValue": "this.resetSubscriptions()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Record<EventType | Subject<EventData>>",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 35
                }
            ],
            "methods": [
                {
                    "name": "resetSubscriptions",
                    "args": [],
                    "optional": false,
                    "returnType": "Record<EventType, Subject<any>>",
                    "typeParameters": [],
                    "line": 37,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "sendEvent",
                    "args": [
                        {
                            "name": "eventType",
                            "type": "EventType",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 61,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        134
                    ],
                    "jsdoctags": [
                        {
                            "name": "eventType",
                            "type": "EventType",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "sendEventWithData",
                    "args": [
                        {
                            "name": "eventType",
                            "type": "EventType",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "eventData",
                            "type": "EventData",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 66,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        134
                    ],
                    "jsdoctags": [
                        {
                            "name": "eventType",
                            "type": "EventType",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "eventData",
                            "type": "EventData",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "subscribe",
                    "args": [
                        {
                            "name": "eventType",
                            "type": "EventType",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "callback",
                            "type": "function",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "function": [
                                {
                                    "name": "args",
                                    "type": "EventData[]",
                                    "deprecated": false,
                                    "deprecationMessage": "",
                                    "dotDotDotToken": true
                                }
                            ]
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 77,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123,
                        134
                    ],
                    "jsdoctags": [
                        {
                            "name": "eventType",
                            "type": "EventType",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "callback",
                            "type": "function",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "function": [
                                {
                                    "name": "args",
                                    "type": "EventData[]",
                                    "deprecated": false,
                                    "deprecationMessage": "",
                                    "dotDotDotToken": true
                                }
                            ],
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "subscribeToAllEvents",
                    "args": [
                        {
                            "name": "callback",
                            "type": "function",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "function": [
                                {
                                    "name": "eventType",
                                    "type": "EventType",
                                    "deprecated": false,
                                    "deprecationMessage": ""
                                },
                                {
                                    "name": "args",
                                    "type": "EventData[]",
                                    "deprecated": false,
                                    "deprecationMessage": "",
                                    "dotDotDotToken": true
                                }
                            ]
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 86,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        134
                    ],
                    "jsdoctags": [
                        {
                            "name": "callback",
                            "type": "function",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "function": [
                                {
                                    "name": "eventType",
                                    "type": "EventType",
                                    "deprecated": false,
                                    "deprecationMessage": ""
                                },
                                {
                                    "name": "args",
                                    "type": "EventData[]",
                                    "deprecated": false,
                                    "deprecationMessage": "",
                                    "dotDotDotToken": true
                                }
                            ],
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "subscribeToEvent",
                    "args": [
                        {
                            "name": "eventType",
                            "type": "EventType",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "callback",
                            "type": "function",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "function": [
                                {
                                    "name": "args",
                                    "type": "T[]",
                                    "deprecated": false,
                                    "deprecationMessage": "",
                                    "dotDotDotToken": true
                                }
                            ]
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [
                        "T"
                    ],
                    "line": 70,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        134
                    ],
                    "jsdoctags": [
                        {
                            "name": "eventType",
                            "type": "EventType",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "callback",
                            "type": "function",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "function": [
                                {
                                    "name": "args",
                                    "type": "T[]",
                                    "deprecated": false,
                                    "deprecationMessage": "",
                                    "dotDotDotToken": true
                                }
                            ],
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "unSubscribeAll",
                    "args": [
                        {
                            "name": "events",
                            "type": "EventType[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 92,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        134
                    ],
                    "jsdoctags": [
                        {
                            "name": "events",
                            "type": "EventType[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { Subject } from 'rxjs';\nimport { Input } from '../../service/ts/models/input';\nimport { NgZone } from '@angular/core';\n\nexport enum EventType {\n  StartFullDownload = 'StartFullDownload',\n  EndFullDownload = 'EndFullDownload',\n  RefreshInputs = 'RefreshInputs',\n  InputsChanged = 'InputsChanged',\n  PerfChartChanged = 'PerfChartChanged',\n  SwipeActivated = 'SwipeActivated',\n  SwipeDeActivated = 'SwipeDeActivated',\n  SwipeVertical = 'SwipeVertical',\n  StatisticsScreenLoaded = 'StatisticsScreenLoaded',\n  RequestInputsDownload = 'RequestInputsDownload',\n  WatchersScreenLoaded = 'WatchersScreenLoaded',\n  SettingsScreenLoaded = 'SettingsScreenLoaded',\n  PerformanceScreenLoaded = 'PerformanceScreenLoaded',\n  AddressChartChanged = 'AddressChartChanged',\n  WindowResized = 'WindowResized',\n  VersionUpdated = 'VersionUpdated',\n  WatchersStatsChanged = 'WatchersStatsChanged',\n  ChainPerformanceChartsChanged = 'ChainPerformanceChartsChanged',\n}\n\nexport type EventData = string | Input | object;\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class EventService {\n  constructor(private ngZone: NgZone) {}\n\n  eventSubscriptions: Record<EventType, Subject<EventData>> = this.resetSubscriptions();\n\n  resetSubscriptions() {\n    this.eventSubscriptions = {\n      [EventType.StartFullDownload]: new Subject<EventData>(),\n      [EventType.EndFullDownload]: new Subject<EventData>(),\n      [EventType.RefreshInputs]: new Subject<EventData>(),\n      [EventType.InputsChanged]: new Subject<EventData>(),\n      [EventType.PerfChartChanged]: new Subject<EventData>(),\n      [EventType.SwipeActivated]: new Subject<EventData>(),\n      [EventType.SwipeDeActivated]: new Subject<EventData>(),\n      [EventType.SwipeVertical]: new Subject<EventData>(),\n      [EventType.StatisticsScreenLoaded]: new Subject<EventData>(),\n      [EventType.PerformanceScreenLoaded]: new Subject<EventData>(),\n      [EventType.RequestInputsDownload]: new Subject<EventData>(),\n      [EventType.AddressChartChanged]: new Subject<EventData>(),\n      [EventType.VersionUpdated]: new Subject<EventData>(),\n      [EventType.WatchersScreenLoaded]: new Subject<EventData>(),\n      [EventType.SettingsScreenLoaded]: new Subject<EventData>(),\n      [EventType.WindowResized]: new Subject<EventData>(),\n      [EventType.WatchersStatsChanged]: new Subject<EventData>(),\n      [EventType.ChainPerformanceChartsChanged]: new Subject<EventData>(),\n    };\n    return this.eventSubscriptions;\n  }\n\n  async sendEvent(eventType: EventType) {\n    console.log('Received event: ' + eventType);\n    this.eventSubscriptions[eventType].next({} as EventData);\n  }\n\n  async sendEventWithData(eventType: EventType, eventData: EventData) {\n    this.eventSubscriptions[eventType].next(eventData);\n  }\n\n  async subscribeToEvent<T>(eventType: EventType, callback: (...args: T[]) => void) {\n    const eventCallBack: (...args: EventData[]) => void = callback as (\n      ...args: EventData[]\n    ) => void;\n    await this.subscribe(eventType, eventCallBack);\n  }\n\n  private async subscribe(eventType: EventType, callback: (...args: EventData[]) => void) {\n    this.eventSubscriptions[eventType].subscribe((...eventData) => {\n      // Ensure Angular detects the change\n      this.ngZone.run(() => {\n        callback(...eventData);\n      });\n    });\n  }\n\n  async subscribeToAllEvents(callback: (eventType: EventType, ...args: EventData[]) => void) {\n    Object.values(EventType).forEach((eventType) => {\n      this.subscribeToEvent(eventType, (...args: EventData[]) => callback(eventType, ...args));\n    });\n  }\n\n  async unSubscribeAll(events: EventType[]) {\n    for (const eventType of events) {\n      console.log('Unsubscribing all from ' + eventType);\n      this.eventSubscriptions[eventType].unsubscribe();\n      this.eventSubscriptions[eventType] = new Subject<EventData>();\n    }\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "ngZone",
                        "type": "NgZone",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 32,
                "jsdoctags": [
                    {
                        "name": "ngZone",
                        "type": "NgZone",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "type": "injectable"
        },
        {
            "name": "HttpDownloadService",
            "id": "injectable-HttpDownloadService-99afcd11d3f69951759e8ca3343764bec2b19d5684eb85bb6a47b141d03f96965f1036ba8753fba1c946af78eb348425b224b3daa8ba82db1191660018614951",
            "file": "src/app/service/http.download.service.ts",
            "properties": [
                {
                    "name": "activeDownloads",
                    "defaultValue": "{}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Record<string | boolean>",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 12,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methods": [
                {
                    "name": "download",
                    "args": [
                        {
                            "name": "url",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<T>",
                    "typeParameters": [
                        "T"
                    ],
                    "line": 22,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        134
                    ],
                    "jsdoctags": [
                        {
                            "name": "url",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "downloadPermitInfo",
                    "args": [
                        {
                            "name": "watcherUrl",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<T>",
                    "typeParameters": [
                        "T"
                    ],
                    "line": 18,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "watcherUrl",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "downloadStream",
                    "args": [
                        {
                            "name": "url",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<T>",
                    "typeParameters": [
                        "T"
                    ],
                    "line": 46,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "url",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "endDownload",
                    "args": [
                        {
                            "name": "url",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 34,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123,
                        134
                    ],
                    "jsdoctags": [
                        {
                            "name": "url",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "initiateDownload",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 27,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123,
                        134
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { of, Observable, throwError, concat, EMPTY } from 'rxjs';\nimport { HttpClient } from '@angular/common/http';\nimport { catchError, map } from 'rxjs/operators';\nimport { firstValueFrom } from 'rxjs';\nimport { EventService, EventType } from './event.service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class HttpDownloadService {\n  private activeDownloads: Record<string, boolean> = {};\n  constructor(\n    private http: HttpClient,\n    private eventService: EventService,\n  ) {}\n\n  downloadPermitInfo<T>(watcherUrl: string): Promise<T> {\n    return this.download(watcherUrl + '/api/info');\n  }\n\n  async download<T>(url: string): Promise<T> {\n    console.log('Downloading from:', url);\n    return firstValueFrom(this.downloadStream(url));\n  }\n\n  private async initiateDownload() {\n    const numActive = Object.values(this.activeDownloads).filter((value) => value === true).length;\n    if (numActive == 0) {\n      this.eventService.sendEvent(EventType.StartFullDownload);\n    }\n  }\n\n  private async endDownload(url: string) {\n    if (this.activeDownloads[url]) {\n      this.activeDownloads[url] = false;\n      const numActive = Object.values(this.activeDownloads).filter(\n        (value) => value === true,\n      ).length;\n      if (numActive == 0) {\n        this.eventService.sendEvent(EventType.EndFullDownload);\n      }\n    }\n  }\n\n  downloadStream<T>(url: string): Observable<T> {\n    this.initiateDownload();\n    console.log('Attempting to load from cache:', url);\n    this.activeDownloads[url] = true;\n    // Check if the data exists in the cache\n    const cachedData = localStorage.getItem(url);\n    let cacheObservable: Observable<T>;\n\n    if (cachedData) {\n      console.log('Loaded from cache:', url);\n      cacheObservable = of(JSON.parse(cachedData));\n    } else {\n      console.log('No cache available:', url);\n      cacheObservable = EMPTY; // Observable that completes immediately\n    }\n\n    const downloadObservable = this.http.get<T>(url).pipe(\n      map((results: T) => {\n        console.log('Downloaded from server:', url);\n        localStorage.setItem(url, JSON.stringify(results));\n\n        this.endDownload(url);\n        return results;\n      }),\n      catchError((error) => {\n        console.log('Download failed:', url);\n\n        this.endDownload(url);\n        return throwError(error);\n      }),\n    );\n\n    // First emit cached data if available, then try to download and emit the new data\n    return concat(cacheObservable, downloadObservable);\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "eventService",
                        "type": "EventService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 12,
                "jsdoctags": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "eventService",
                        "type": "EventService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "type": "injectable"
        },
        {
            "name": "NavigationService",
            "id": "injectable-NavigationService-ed68a5e6712bbbd41dc16ec0863652cd4f2fa55c3e1308f7e681d2636a0ce4eccad6a4d27bf63bcec4dce04ca0be46a4294b22ae53fd28cf873ceee363ac2b87",
            "file": "src/app/service/navigation.service.ts",
            "properties": [
                {
                    "name": "currentNavigationIndex",
                    "defaultValue": "0",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 10,
                    "modifierKind": [
                        125
                    ]
                },
                {
                    "name": "latestVersionUpdate",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string | null",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 13
                },
                {
                    "name": "navigationItems",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "NavigationItem[]",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 12
                }
            ],
            "methods": [
                {
                    "name": "getCurrentNavigationItem",
                    "args": [],
                    "optional": false,
                    "returnType": "NavigationItem",
                    "typeParameters": [],
                    "line": 74,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        125
                    ]
                },
                {
                    "name": "getLeftItem",
                    "args": [],
                    "optional": false,
                    "returnType": "NavigationItem",
                    "typeParameters": [],
                    "line": 82,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        125
                    ]
                },
                {
                    "name": "getNavigationItems",
                    "args": [],
                    "optional": false,
                    "returnType": "NavigationItem[]",
                    "typeParameters": [],
                    "line": 78,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        125
                    ]
                },
                {
                    "name": "getRightItem",
                    "args": [],
                    "optional": false,
                    "returnType": "NavigationItem",
                    "typeParameters": [],
                    "line": 88,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        125
                    ]
                },
                {
                    "name": "navigate",
                    "args": [
                        {
                            "name": "to",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 92,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        125
                    ],
                    "jsdoctags": [
                        {
                            "name": "to",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "navigateLeft",
                    "args": [],
                    "optional": false,
                    "returnType": "NavigationItem",
                    "typeParameters": [],
                    "line": 124,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        125
                    ]
                },
                {
                    "name": "navigateRight",
                    "args": [],
                    "optional": false,
                    "returnType": "NavigationItem",
                    "typeParameters": [],
                    "line": 118,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        125
                    ]
                },
                {
                    "name": "navigateTo",
                    "args": [
                        {
                            "name": "to",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "NavigationItem",
                    "typeParameters": [],
                    "line": 113,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        125
                    ],
                    "jsdoctags": [
                        {
                            "name": "to",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "swapPerformanceItems",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 107,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "updateCurrentNavigationIndex",
                    "args": [
                        {
                            "name": "url",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 60,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "url",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { Router, NavigationEnd } from '@angular/router';\nimport { filter } from 'rxjs/operators';\nimport { EventService, EventType } from './event.service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class NavigationService {\n  public currentNavigationIndex = 0;\n\n  navigationItems: NavigationItem[] = [];\n  latestVersionUpdate: string | null = null;\n\n  constructor(\n    private router: Router,\n    private eventService: EventService,\n  ) {\n    this.navigationItems.push({ route: '/statistics' });\n    this.navigationItems.push({ route: '/performance' });\n    this.navigationItems.push({ route: '/watchers' });\n    this.navigationItems.push({ route: '/chainperformance' });\n\n    this.router.events\n      .pipe(\n        filter((event): event is NavigationEnd => event instanceof NavigationEnd), // Type guard for NavigationEnd\n      )\n      .subscribe((event) => {\n        const url = event.urlAfterRedirects;\n        this.updateCurrentNavigationIndex(url);\n      });\n\n    this.eventService.subscribeToEvent<string>(EventType.VersionUpdated, (v) => {\n      this.latestVersionUpdate = v;\n      //this.checkForReload();\n    });\n\n    const performanceItem = localStorage.getItem('performanceScreen');\n    if (performanceItem?.startsWith('/chainperformance')) {\n      this.swapPerformanceItems();\n    }\n  }\n\n  /*\n  private checkForReload() {\n    if (\n      this.latestVersionUpdate &&\n      localStorage.getItem('versionReload') != this.latestVersionUpdate\n    ) {\n      localStorage.setItem('versionReload', this.latestVersionUpdate);\n      this.latestVersionUpdate = null;\n      console.log('Application has been updated, reloading screen.');\n      setTimeout(() => {\n        console.log('Doing the reload...');\n        window.location.reload();\n      }, 1000);\n    }\n  }*/\n\n  private updateCurrentNavigationIndex(url: string): void {\n    if (url.startsWith('/chainperformance')) {\n      this.currentNavigationIndex = 1;\n      return;\n    }\n\n    let index = this.navigationItems.findIndex((item) => url.startsWith(item.route));\n    if (index == -1) {\n      index = 0;\n    }\n    this.currentNavigationIndex = index;\n    //this.checkForReload();\n  }\n\n  public getCurrentNavigationItem(): NavigationItem {\n    return this.navigationItems[this.currentNavigationIndex];\n  }\n\n  public getNavigationItems(): NavigationItem[] {\n    return this.navigationItems;\n  }\n\n  public getLeftItem(): NavigationItem {\n    return this.navigationItems[\n      (this.currentNavigationIndex - 1 + this.navigationItems.length) % 3\n    ];\n  }\n\n  public getRightItem(): NavigationItem {\n    return this.navigationItems[(this.currentNavigationIndex + 1) % 3];\n  }\n\n  public navigate(to: string): void {\n    if (to.startsWith('/performance') && !this.router.url.startsWith('/performance')) {\n      this.swapPerformanceItems();\n    } else if (\n      to.startsWith('/chainperformance') &&\n      !this.router.url.startsWith('/chainperformance')\n    ) {\n      this.swapPerformanceItems();\n    }\n\n    localStorage.setItem('performanceScreen', this.navigationItems[1].route);\n\n    this.router.navigate([to]);\n  }\n\n  private swapPerformanceItems() {\n    const t = this.navigationItems[1];\n    this.navigationItems[1] = this.navigationItems[3];\n    this.navigationItems[3] = t;\n  }\n\n  public navigateTo(to: number): NavigationItem {\n    this.currentNavigationIndex = to;\n    return this.getCurrentNavigationItem();\n  }\n\n  public navigateRight(): NavigationItem {\n    const l = 3;\n    this.currentNavigationIndex = (this.currentNavigationIndex + 1) % l;\n    return this.getCurrentNavigationItem();\n  }\n\n  public navigateLeft(): NavigationItem {\n    const l = 3;\n    this.currentNavigationIndex = (this.currentNavigationIndex - 1 + l) % l;\n    return this.getCurrentNavigationItem();\n  }\n}\nexport class NavigationItem {\n  route!: string;\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "eventService",
                        "type": "EventService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 13,
                "jsdoctags": [
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "eventService",
                        "type": "EventService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "type": "injectable"
        },
        {
            "name": "PriceService",
            "id": "injectable-PriceService-7fd93a8d02340b329d8e78b3f763fe01ee58de6796e66586520736a95e2adbd005018b9e79f21ad6fd1c6fc448d453ae04a3cabb76c6aecd501455ac83f037f3",
            "file": "src/app/service/price.service.ts",
            "properties": [
                {
                    "name": "currencyRates",
                    "defaultValue": "{}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Record<string | Record<string, number>>",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 22,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methods": [
                {
                    "name": "convert",
                    "args": [
                        {
                            "name": "amount",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "from",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "to",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<number>",
                    "typeParameters": [],
                    "line": 24,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        125
                    ],
                    "jsdoctags": [
                        {
                            "name": "amount",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "from",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "to",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getPrices",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<Record<string, Record<string, number>>>",
                    "typeParameters": [],
                    "line": 36,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { map } from 'rxjs/operators';\nimport { HttpDownloadService } from './http.download.service';\nimport { Observable, of } from 'rxjs';\n\nexport interface CurrencyRates {\n  ergo: {\n    eur: number;\n    usd: number;\n  };\n  'rosen-bridge': {\n    eur: number;\n    usd: number;\n  };\n}\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class PriceService {\n  constructor(private downloadService: HttpDownloadService) {}\n  private currencyRates: Record<string, Record<string, number>> = {};\n\n  public convert(amount: number, from: string, to: string): Observable<number> {\n    return this.getPrices().pipe(\n      map((rates: Record<string, Record<string, number>>) => {\n        if (rates[from][to] || rates[from][to] == 0) {\n          return rates[from][to] * amount;\n        } else {\n          return (rates[from]['EUR'] / rates[to]['EUR']) * amount;\n        }\n      }),\n    );\n  }\n\n  private getPrices(): Observable<Record<string, Record<string, number>>> {\n    const pricesUrl = `https://api.coingecko.com/api/v3/simple/price?ids=rosen-bridge,ergo&vs_currencies=eur,usd`;\n\n    if (this.currencyRates['ERG']) {\n      return of(this.currencyRates);\n    }\n\n    this.currencyRates = {\n      ERG: { EUR: 0, USD: 0 },\n      RSN: { EUR: 0, USD: 0 },\n    };\n\n    return this.downloadService.downloadStream<CurrencyRates>(pricesUrl).pipe(\n      map((data: CurrencyRates) => {\n        this.currencyRates['ERG']['EUR'] = data.ergo.eur;\n        this.currencyRates['ERG']['USD'] = data.ergo.usd;\n        this.currencyRates['RSN']['EUR'] = data['rosen-bridge'].eur;\n        this.currencyRates['RSN']['USD'] = data['rosen-bridge'].usd;\n        return this.currencyRates;\n      }),\n    );\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "downloadService",
                        "type": "HttpDownloadService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 20,
                "jsdoctags": [
                    {
                        "name": "downloadService",
                        "type": "HttpDownloadService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "type": "injectable"
        },
        {
            "name": "ServiceWorkerService",
            "id": "injectable-ServiceWorkerService-9e1e99115174b6e3db1ec22b03036ffb4aa6c3bd524d743a9a23a1665fb605759c77eefbc815f154ff4520c6bd3a057d7463772b36ab4be22331d218a73fdfb3",
            "file": "src/app/service/service.worker.service.ts",
            "properties": [
                {
                    "name": "avoidServiceWorker",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 31,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "isElementsActive",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 36,
                    "decorators": [
                        {
                            "name": "Inject",
                            "stringifiedArguments": "IS_ELEMENTS_ACTIVE"
                        }
                    ],
                    "modifierKind": [
                        170,
                        125
                    ]
                }
            ],
            "methods": [
                {
                    "name": "checkForVersionDiscrepancy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 72,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "getVersion",
                    "args": [],
                    "optional": false,
                    "returnType": "string | null",
                    "typeParameters": [],
                    "line": 103,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "handleServiceWorkerMessage",
                    "args": [
                        {
                            "name": "message",
                            "type": "ServiceWorkerMessage",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 163,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "message",
                            "type": "ServiceWorkerMessage",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "initialize",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 42,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        125,
                        134
                    ]
                },
                {
                    "name": "listenForServiceWorkerMessages",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 126,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "sendMessageToServiceWorker",
                    "args": [
                        {
                            "name": "message",
                            "type": "ServiceWorkerMessage",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 108,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "message",
                            "type": "ServiceWorkerMessage",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Inject, Injectable } from '@angular/core';\nimport { EventData, EventService, EventType } from './event.service';\nimport { HttpClient } from '@angular/common/http';\nimport { IS_ELEMENTS_ACTIVE } from './tokens';\n\n// Define a type for the messages being sent to the service worker\ninterface ServiceWorkerMessage {\n  type: string;\n  data?: object;\n  payload?: object;\n}\n\nclass AngularEventSender implements EventSender {\n  constructor(private eventService: EventService) {}\n\n  async sendEvent<T>(event: EventPayload<T>): Promise<void> {\n    this.eventService.sendEventWithData(event.type as EventType, event.data ?? '');\n  }\n}\n\nexport function initializeServiceWorkerService(serviceWorkerService: ServiceWorkerService) {\n  return (): Promise<void> => {\n    return serviceWorkerService.initialize();\n  };\n}\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class ServiceWorkerService {\n  private avoidServiceWorker = true;\n\n  constructor(\n    private eventService: EventService,\n    private http: HttpClient,\n    @Inject(IS_ELEMENTS_ACTIVE) public isElementsActive: boolean,\n  ) {\n    this.checkForVersionDiscrepancy();\n    this.listenForServiceWorkerMessages();\n  }\n\n  public async initialize() {\n    this.eventService.subscribeToAllEvents((eventType, eventData) => {\n      if (\n        eventType == EventType.PerformanceScreenLoaded ||\n        eventType == EventType.StatisticsScreenLoaded ||\n        eventType == EventType.RequestInputsDownload\n      ) {\n        console.log(eventData);\n\n        if (this.avoidServiceWorker) {\n          console.log('Avoiding service worker, sending event ' + eventType + 'to angular worker');\n          const processEventService = new ProcessEventService(\n            new AngularEventSender(this.eventService),\n          );\n\n          processEventService.processEvent({\n            data: eventData as object | undefined,\n            type: eventType,\n          });\n        } else {\n          console.log('Sending to service worker, event ' + eventType);\n          this.sendMessageToServiceWorker({\n            type: eventType,\n            data: eventData,\n          } as ServiceWorkerMessage);\n        }\n      }\n    });\n  }\n\n  checkForVersionDiscrepancy(): void {\n    if (this.isElementsActive) {\n      console.log('Elements are active, avoiding service worker');\n      this.avoidServiceWorker = true;\n      return;\n    }\n\n    this.http\n      .get<{ appData?: { version?: string } }>('ngsw.json', { responseType: 'json' })\n      .subscribe(\n        (data) => {\n          console.log('Current Service Worker Version(ngsw.json) :', data.appData?.version);\n          console.log(\n            'localStorage rosenWatcherServiceVersion:',\n            localStorage.getItem('rosenWatcherServiceVersion'),\n          );\n\n          if (data.appData?.version == localStorage.getItem('rosenWatcherServiceVersion')) {\n            console.log('sw versions in sync');\n            this.avoidServiceWorker = false;\n          } else {\n            console.log('sw versions not in sync');\n            this.avoidServiceWorker = true;\n          }\n        },\n        (error: unknown) => {\n          console.error('Error fetching SW version', error);\n        },\n      );\n  }\n\n  getVersion(): string | null {\n    const version = localStorage.getItem('rosenWatcherServiceVersion');\n    return version;\n  }\n\n  sendMessageToServiceWorker(message: ServiceWorkerMessage) {\n    if (navigator.serviceWorker) {\n      navigator.serviceWorker.ready\n        .then((registration) => {\n          if (registration.active) {\n            registration.active.postMessage(message);\n          } else {\n            console.error('Service worker is not active yet');\n          }\n        })\n        .catch((error) => {\n          console.error('Error waiting for service worker to become ready:', error);\n        });\n    } else {\n      console.error('No service worker found');\n    }\n  }\n\n  listenForServiceWorkerMessages() {\n    if (navigator.serviceWorker) {\n      navigator.serviceWorker.addEventListener('controllerchange', () => {\n        console.log('New service worker has taken control. Reloading the page.');\n        //window.location.reload();\n      });\n\n      navigator.serviceWorker.ready.then((registration) => {\n        if (registration.installing) {\n          console.log('Service worker installing new version.');\n        }\n        registration.addEventListener('updatefound', () => {\n          console.log('updatefound: Service worker installing new version.');\n        });\n      });\n\n      navigator.serviceWorker.addEventListener('message', (event) => {\n        const message = event.data as ServiceWorkerMessage;\n\n        console.log(\n          'Received message from service worker of type ' + message.type + ', data ' + message.data,\n        );\n\n        this.handleServiceWorkerMessage(message);\n\n        const v = event?.data?.version?.appData?.version;\n\n        if (v) {\n          this.eventService.sendEventWithData(EventType.VersionUpdated, v);\n          localStorage.setItem('rosenWatcherServiceVersion', v);\n        }\n      });\n    } else {\n      console.error('Service worker is not supported in this browser.');\n    }\n  }\n\n  handleServiceWorkerMessage(message: ServiceWorkerMessage) {\n    console.log('Handling message from service worker:', message);\n\n    if ((Object.values(EventType) as string[]).includes(message.type)) {\n      if (message.data) {\n        this.eventService.sendEventWithData(message.type as EventType, message.data as EventData);\n      } else {\n        this.eventService.sendEvent(message.type as EventType);\n      }\n    }\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "eventService",
                        "type": "EventService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "isElementsActive",
                        "type": "boolean",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 31,
                "jsdoctags": [
                    {
                        "name": "eventService",
                        "type": "EventService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "isElementsActive",
                        "type": "boolean",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "type": "injectable"
        },
        {
            "name": "StorageService",
            "id": "injectable-StorageService-ac57297f46c88d741330c77cfef8920da5a745ac2400b79ccd4682f7178f331ca6d9068e4a940d14915bbd3898f214525cff9e11e097dc5e267fe4a818a9be67",
            "file": "src/app/service/storage.service.ts",
            "properties": [
                {
                    "name": "dbPromise",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Promise<IDBDatabase>",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "inputsCache",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Input[]",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 10
                }
            ],
            "methods": [
                {
                    "name": "clearAddressStore",
                    "args": [],
                    "optional": false,
                    "returnType": "Promise<void>",
                    "typeParameters": [],
                    "line": 65,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        134
                    ]
                },
                {
                    "name": "clearInputsStore",
                    "args": [],
                    "optional": false,
                    "returnType": "Promise<void>",
                    "typeParameters": [],
                    "line": 84,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        134
                    ]
                },
                {
                    "name": "getAddressData",
                    "args": [],
                    "optional": false,
                    "returnType": "Promise<Address[]>",
                    "typeParameters": [],
                    "line": 109,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        134
                    ]
                },
                {
                    "name": "getData",
                    "args": [
                        {
                            "name": "storeName",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<T[]>",
                    "typeParameters": [
                        "T"
                    ],
                    "line": 113,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123,
                        134
                    ],
                    "jsdoctags": [
                        {
                            "name": "storeName",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getDB",
                    "args": [],
                    "optional": false,
                    "returnType": "Promise<IDBDatabase>",
                    "typeParameters": [],
                    "line": 61,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        134
                    ]
                },
                {
                    "name": "getInputs",
                    "args": [],
                    "optional": false,
                    "returnType": "Promise<Input[]>",
                    "typeParameters": [],
                    "line": 103,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        134
                    ]
                },
                {
                    "name": "initIndexedDB",
                    "args": [],
                    "optional": false,
                    "returnType": "Promise<void>",
                    "typeParameters": [],
                    "line": 16,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        134
                    ]
                },
                {
                    "name": "putAddressData",
                    "args": [
                        {
                            "name": "addressData",
                            "type": "Address[] | undefined",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<void>",
                    "typeParameters": [],
                    "line": 133,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        134
                    ],
                    "jsdoctags": [
                        {
                            "name": "addressData",
                            "type": "Address[] | undefined",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { Input } from '../../service/ts/models/input';\nimport { Address } from '../../service/ts/models/address';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class StorageService {\n  dbPromise!: Promise<IDBDatabase>;\n  inputsCache: Input[] = [];\n\n  constructor() {\n    this.initIndexedDB();\n  }\n\n  async initIndexedDB(): Promise<void> {\n    let dbName = rs_DbName;\n\n    this.dbPromise = new Promise((resolve, reject) => {\n      const request = window.indexedDB.open(dbName, rs_DbVersion);\n\n      request.onupgradeneeded = (event: Event) => {\n        const db = (event.target as IDBOpenDBRequest).result;\n\n        if (db.objectStoreNames.contains(rs_InputsStoreName)) {\n          db.deleteObjectStore(rs_InputsStoreName);\n        }\n        db.createObjectStore(rs_InputsStoreName, { keyPath: rs_Input_Key });\n\n        if (db.objectStoreNames.contains(rs_PerfTxStoreName)) {\n          db.deleteObjectStore(rs_PerfTxStoreName);\n        }\n        db.createObjectStore(rs_PerfTxStoreName, { keyPath: rs_PerfTx_Key });\n\n        if (!db.objectStoreNames.contains(rs_AddressDataStoreName)) {\n          db.createObjectStore(rs_AddressDataStoreName, {\n            keyPath: rs_Address_Key,\n          });\n        }\n\n        if (!db.objectStoreNames.contains(rs_DownloadStatusStoreName)) {\n          db.createObjectStore(rs_DownloadStatusStoreName, {\n            keyPath: rs_Address_Key,\n          });\n        }\n      };\n\n      request.onsuccess = async (event: Event) => {\n        const db = (event.target as IDBOpenDBRequest).result;\n\n        resolve(db);\n      };\n\n      request.onerror = (event: Event) => {\n        console.error('Error opening IndexedDB:', event.target);\n        reject(event.target);\n      };\n    });\n  }\n\n  async getDB(): Promise<IDBDatabase> {\n    return await this.dbPromise;\n  }\n\n  async clearAddressStore(): Promise<void> {\n    const db = await this.getDB();\n    return new Promise<void>((resolve) => {\n      const transaction = db.transaction([rs_AddressDataStoreName], 'readwrite');\n      const objectStore = transaction.objectStore(rs_AddressDataStoreName);\n      const request = objectStore.clear();\n\n      request.onsuccess = () => {\n        console.log('IndexedDB cleared successfully.');\n        resolve();\n      };\n\n      request.onerror = (event: Event) => {\n        console.error('Error clearing IndexedDB:', event.target);\n        resolve();\n      };\n    });\n  }\n\n  async clearInputsStore(): Promise<void> {\n    const db = await this.getDB();\n    return new Promise<void>((resolve) => {\n      const transaction = db.transaction([rs_InputsStoreName], 'readwrite');\n      const objectStore = transaction.objectStore(rs_InputsStoreName);\n      const request = objectStore.clear();\n\n      request.onsuccess = () => {\n        console.log('IndexedDB cleared successfully.');\n        resolve();\n      };\n\n      request.onerror = (event: Event) => {\n        console.error('Error clearing IndexedDB:', event.target);\n        resolve();\n      };\n    });\n  }\n\n  async getInputs(): Promise<Input[]> {\n    console.log('Getting inputs from database');\n    this.inputsCache = await this.getData<Input>(rs_InputsStoreName);\n    return this.inputsCache;\n  }\n\n  async getAddressData(): Promise<Address[]> {\n    return await this.getData<Address>(rs_AddressDataStoreName);\n  }\n\n  private async getData<T>(storeName: string): Promise<T[]> {\n    const db = await this.getDB();\n\n    return new Promise((resolve, reject) => {\n      const transaction = db.transaction([storeName], 'readonly');\n\n      const objectStore = transaction.objectStore(storeName);\n\n      const request = objectStore.getAll();\n\n      request.onsuccess = () => {\n        resolve(request.result);\n      };\n\n      request.onerror = (event: Event) => {\n        reject(event.target);\n      };\n    });\n  }\n\n  async putAddressData(addressData: Address[] | undefined): Promise<void> {\n    if (!addressData) {\n      return;\n    }\n    await this.clearAddressStore();\n    const db = await this.getDB();\n\n    addressData.forEach((a) => {\n      const transaction = db.transaction([rs_AddressDataStoreName], 'readwrite');\n      const objectStore = transaction.objectStore(rs_AddressDataStoreName);\n      a.Address = a.address;\n      objectStore.put(a);\n    });\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 10
            },
            "extends": [],
            "type": "injectable"
        },
        {
            "name": "SwipeService",
            "id": "injectable-SwipeService-8975bdeccd95cec0c9e804329cd9f026e3c75c3b164f6ac165762fe0b0b9bf50c4f063abb59e8ca8f9e1a34538d945b46484f3ca06de9f28f6c2c221d7bdb30c",
            "file": "src/app/service/swipe.service.ts",
            "properties": [
                {
                    "name": "detectHorizontal",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 10,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "detectVertical",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 11,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "swipeActive",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 12,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methods": [
                {
                    "name": "getSpeed",
                    "args": [],
                    "optional": false,
                    "returnType": "number",
                    "typeParameters": [],
                    "line": 40,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "getTouchSurface",
                    "args": [],
                    "optional": false,
                    "returnType": "HTMLElement",
                    "typeParameters": [],
                    "line": 36,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "hasVerticalScrollableContainerClass",
                    "args": [
                        {
                            "name": "element",
                            "type": "HTMLElement | null",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 83,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        125
                    ],
                    "jsdoctags": [
                        {
                            "name": "element",
                            "type": "HTMLElement | null",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "navigate",
                    "args": [
                        {
                            "name": "route",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 32,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        134
                    ],
                    "jsdoctags": [
                        {
                            "name": "route",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "registerSwipeDetect",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 93,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        125
                    ]
                },
                {
                    "name": "resetswipes",
                    "args": [
                        {
                            "name": "el",
                            "type": "HTMLElement",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 188,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "el",
                            "type": "HTMLElement",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "swipe",
                    "args": [
                        {
                            "name": "swipedir",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "route",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 44,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "swipedir",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "route",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { EventService, EventType } from './event.service';\nimport { Router } from '@angular/router';\nimport { NavigationService } from './navigation.service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class SwipeService {\n  private detectHorizontal = true;\n  private detectVertical = false;\n  private swipeActive = false;\n\n  constructor(\n    eventService: EventService,\n    private navigationService: NavigationService,\n    private router: Router,\n  ) {\n    this.registerSwipeDetect();\n\n    eventService.subscribeToEvent(EventType.SwipeActivated, () => {\n      console.log('swipe activated');\n      this.swipeActive = true;\n    });\n\n    eventService.subscribeToEvent(EventType.SwipeDeActivated, () => {\n      console.log('swipe deactivated');\n      this.swipeActive = false;\n    });\n  }\n\n  async navigate(route: string) {\n    await this.router.navigate([route]);\n  }\n\n  getTouchSurface(): HTMLElement {\n    return document.body.querySelector('.screen-div') as HTMLElement;\n  }\n\n  getSpeed(): number {\n    return 1;\n  }\n\n  swipe(swipedir: string, route: string) {\n    const touchsurface = this.getTouchSurface();\n    touchsurface.classList.add('swiping');\n\n    if (swipedir == 'left') {\n      touchsurface.classList.add('swipeleft');\n\n      setTimeout(() => {\n        touchsurface.classList.remove('swipeleft');\n        touchsurface.style.left = '100vw';\n        this.navigate(route);\n\n        setTimeout(() => {\n          touchsurface.classList.add('swipeleftin');\n        }, 25 * this.getSpeed());\n\n        setTimeout(() => {\n          this.resetswipes(touchsurface);\n        }, 250 * this.getSpeed());\n      }, 250 * this.getSpeed());\n    } else if (swipedir == 'right') {\n      touchsurface.classList.add('swiperight');\n\n      setTimeout(() => {\n        touchsurface.classList.remove('swiperight');\n        touchsurface.style.left = '-100vw';\n        this.navigate(route);\n\n        setTimeout(function () {\n          touchsurface.classList.add('swiperightin');\n        }, 25 * this.getSpeed());\n\n        setTimeout(() => {\n          this.resetswipes(touchsurface);\n        }, 250 * this.getSpeed());\n      }, 250 * this.getSpeed());\n    }\n  }\n\n  public hasVerticalScrollableContainerClass(element: HTMLElement | null) {\n    while (element) {\n      if (element.classList && element.classList.contains('verticalscrollablecontainer')) {\n        return true;\n      }\n      element = element.parentElement;\n    }\n    return false;\n  }\n\n  public registerSwipeDetect() {\n    const threshold = 10,\n      touchsurface = this.getTouchSurface();\n\n    if (!touchsurface) {\n      return;\n    }\n    let startX: number, startY: number, distX: number, distY: number;\n\n    touchsurface.addEventListener(\n      'touchstart',\n      (e) => {\n        if (!this.swipeActive) {\n          return;\n        }\n\n        const touchobj = e.changedTouches[0];\n        distX = 0;\n        startX = touchobj.pageX;\n        startY = touchobj.pageY;\n      },\n      { passive: false },\n    );\n\n    touchsurface.addEventListener(\n      'touchmove',\n      (e) => {\n        if (!this.swipeActive) {\n          return;\n        }\n\n        const hasVerticalScrollableParent = this.hasVerticalScrollableContainerClass(\n          e.target as HTMLElement,\n        );\n\n        const touchobj = e.changedTouches[0];\n        distX = touchobj.pageX - startX;\n        distY = touchobj.pageY - startY;\n\n        if (Math.abs(distX) > 20 || Math.abs(distY) > 20) {\n          if (this.detectHorizontal && Math.abs(distX) > Math.abs(distY)) {\n            const position = document.documentElement.scrollTop || document.body.scrollTop || 0;\n            touchsurface.style.transform = `translateX(${distX}px) translateY(${position}px)`;\n          }\n        }\n\n        if (!(distY != 0 && hasVerticalScrollableParent)) {\n          e.preventDefault();\n        }\n      },\n      { passive: false },\n    );\n\n    touchsurface.addEventListener(\n      'touchend',\n      (e) => {\n        if (!this.swipeActive) {\n          return;\n        }\n\n        touchsurface.style.removeProperty('transform');\n\n        let swipedir = null;\n        const touchobj = e.changedTouches[0];\n        distX = touchobj.pageX - startX;\n        distY = touchobj.pageY - startY;\n\n        if (\n          this.detectHorizontal &&\n          Math.abs(distX) >= threshold &&\n          Math.abs(distX) > Math.abs(distY)\n        ) {\n          swipedir = distX < 0 ? 'left' : 'right';\n        } else if (\n          this.detectVertical &&\n          Math.abs(distY) >= threshold &&\n          Math.abs(distY) > Math.abs(distX)\n        ) {\n          swipedir = distY < 0 ? 'up' : 'down';\n        }\n\n        if (swipedir) {\n          if (swipedir == 'left') {\n            this.swipe(swipedir, this.navigationService.navigateRight().route);\n          } else if (swipedir == 'right') {\n            this.swipe(swipedir, this.navigationService.navigateLeft().route);\n          }\n        } else {\n          this.resetswipes(touchsurface);\n        }\n      },\n      { passive: false },\n    );\n  }\n\n  private resetswipes(el: HTMLElement) {\n    el.style.left = 'inherit';\n    el.style.removeProperty('transform');\n\n    el.classList.remove('swipeleftin');\n    el.classList.remove('swiping');\n    el.classList.remove('swiperightin');\n    el.classList.remove('swipeupin');\n    el.classList.remove('swipedownin');\n    el.classList.remove('swipeleft');\n    el.classList.remove('swiperight');\n    el.classList.remove('swipeup');\n    el.classList.remove('swipedown');\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "eventService",
                        "type": "EventService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "navigationService",
                        "type": "NavigationService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 12,
                "jsdoctags": [
                    {
                        "name": "eventService",
                        "type": "EventService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "navigationService",
                        "type": "NavigationService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "type": "injectable"
        },
        {
            "name": "WatchersDataService",
            "id": "injectable-WatchersDataService-8b3c3bb256f418d73cd7c352dbf0db04b83edd3d9e121b462fe7afde879f5412e6cd696d6f0c3d2a2697d8bd8b9034dafcb1e1ddbdc4fa0d3c88641a8a62ff45",
            "file": "src/app/service/watchers.data.service.ts",
            "properties": [
                {
                    "name": "busyCounter",
                    "defaultValue": "0",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 62
                },
                {
                    "name": "rsnToken",
                    "defaultValue": "'8b08cdd5449a9592a9e79711d7d79249d7a03c535d17efaee83e216e80a44c4b'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 58,
                    "modifierKind": [
                        148
                    ]
                },
                {
                    "name": "watchersStats",
                    "defaultValue": "new WatchersStats()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 60,
                    "modifierKind": [
                        148
                    ]
                },
                {
                    "name": "watchersStatsSignal",
                    "defaultValue": "signal<WatchersStats>(new WatchersStats())",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 59,
                    "modifierKind": [
                        148
                    ]
                },
                {
                    "name": "watcherUrl",
                    "defaultValue": "'https://' +\n    rs_ErgoExplorerHost +\n    '/api/v1/addresses/ChTbcUHgBNqNMVjzV1dvCb2UDrX9nh6rGGcURCFEYXuH5ykKh7Ea3FvpFhHb9AnxXJkgAZ6WASN7Rdn7VMgkFaqP5Z5RWp84cDTmsZkhYrgAVGN7mjeLs8UxqUvRi2ArZbm35Xqk8Y88Uq2MJzmDVHLHzCYRGym8XPxFM4YEVxqzHSKYYDvaMLgKvoskFXKrvceAqEiyih26hjpekCmefiF1VmrPwwShrYYxgHLFCZdigw5JWKV4DmewuR1FH3oNtGoFok859SXeuRbpQfrTjHhGVfDsbXEo3GYP2imAh1APKyLEsG9LcE5WZnJV8eseQnYA8sACLDKZ8Tbpp9KUE7QZNFpnwGnkYx7eybbrCeFDFjTGpsBzaS6fRKrWj2J4Wy3TTyTU1F8iMCrHBF8inZPw9Kg9YEZuJMdXDFNtuaK15u86mF2s2Z5B1vdL5MtZfWThFLnixKds8ABEmGbe8n75Dym5Wv3pkEXQ6XPpaMjUxHfRJB3EfcoFM5nsZHWSTfbFBcHxSRnEiiU67cgJsBUpQn7FvEvqNLiKM4fL3yyykMtQ6RjAS8rhycszphvQa5qFrDHie4vPuTq8/balance/confirmed'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 53,
                    "modifierKind": [
                        148
                    ]
                }
            ],
            "methods": [
                {
                    "name": "convertCurrencies",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 88,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "currencyUpdate",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 174,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "download",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 237,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "downloadPermitInfo",
                    "args": [
                        {
                            "name": "address",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "tokenId",
                            "type": "string | null",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "tokenName",
                            "type": "string | null",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 196,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "address",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "tokenId",
                            "type": "string | null",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "tokenName",
                            "type": "string | null",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getBulkPermitsInfo",
                    "args": [
                        {
                            "name": "chainType",
                            "type": "ChainType",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<Token | undefined>",
                    "typeParameters": [],
                    "line": 232,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "chainType",
                            "type": "ChainType",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getPermitsInfo",
                    "args": [
                        {
                            "name": "chainType",
                            "type": "ChainType",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<Token | undefined>",
                    "typeParameters": [],
                    "line": 79,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "chainType",
                            "type": "ChainType",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getTriggerPermitsInfo",
                    "args": [
                        {
                            "name": "chainType",
                            "type": "ChainType",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<Token | undefined>",
                    "typeParameters": [],
                    "line": 227,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "chainType",
                            "type": "ChainType",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getValue",
                    "args": [
                        {
                            "name": "map",
                            "type": "Record<ChainType | number | undefined>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "chainType",
                            "type": "ChainType",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "multiplier",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "number",
                    "typeParameters": [],
                    "line": 138,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "map",
                            "type": "Record<ChainType | number | undefined>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "chainType",
                            "type": "ChainType",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "multiplier",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getWatchersInfo",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<WatcherInfo>",
                    "typeParameters": [],
                    "line": 73,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "getWatcherStats",
                    "args": [],
                    "optional": false,
                    "returnType": "Signal<WatchersStats>",
                    "typeParameters": [],
                    "line": 69,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "setLockedAmounts",
                    "args": [
                        {
                            "name": "chainType",
                            "type": "ChainType",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 146,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "chainType",
                            "type": "ChainType",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "updateTotal",
                    "args": [
                        {
                            "name": "map",
                            "type": "Record<ChainType | number | undefined>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "number | undefined",
                    "typeParameters": [],
                    "line": 84,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "map",
                            "type": "Record<ChainType | number | undefined>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "updateTotalLocked",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 131,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable, Signal, signal } from '@angular/core';\nimport { map } from 'rxjs/operators';\nimport { HttpDownloadService } from './http.download.service';\nimport { Observable } from 'rxjs';\nimport { ChainType } from '../../service/ts/models/chaintype';\nimport { WatcherInfo } from '../../service/ts/models/watcher.info';\nimport { Token } from '../../service/ts/models/token';\nimport { PriceService } from './price.service';\n\nexport function createChainNumber(): Record<ChainType, number | undefined> {\n  return Object.fromEntries(Object.values(ChainType).map((key) => [key, undefined])) as Record<\n    ChainType,\n    number | undefined\n  >;\n}\n\nexport class WatchersAmounts {\n  ergCollateral: number | undefined;\n  permitValue: number | undefined;\n  rsnCollateral: number | undefined;\n  totalLocked: number | undefined;\n  totalLockedERG: number | undefined;\n  totalLockedRSN: number | undefined;\n  watcherValue: number | undefined;\n}\n\nexport class WatchersStats {\n  activePermitCount = createChainNumber();\n  bulkPermitCount = createChainNumber();\n  chainLockedERG = createChainNumber();\n  chainLockedRSN = createChainNumber();\n  chainPermitCount = createChainNumber();\n  chainWatcherCount = createChainNumber();\n  permitCost = rs_PermitCost;\n  totalActivePermitCount: number | undefined;\n  totalLockedERG: number | undefined;\n  totalLockedRSN: number | undefined;\n  totalPermitCount: number | undefined;\n  totalWatcherCount: number | undefined;\n  triggerPermitCount = createChainNumber();\n  watcherCollateralERG = rs_WatcherCollateralERG;\n  watcherCollateralRSN = rs_WatcherCollateralRSN;\n\n  watchersAmountsPerCurrency: Record<Currency, WatchersAmounts> = Object.fromEntries(\n    Object.values(Currency).map((currency) => [currency, new WatchersAmounts()]),\n  ) as Record<Currency, WatchersAmounts>;\n}\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class WatchersDataService {\n  readonly watcherUrl =\n    'https://' +\n    rs_ErgoExplorerHost +\n    '/api/v1/addresses/ChTbcUHgBNqNMVjzV1dvCb2UDrX9nh6rGGcURCFEYXuH5ykKh7Ea3FvpFhHb9AnxXJkgAZ6WASN7Rdn7VMgkFaqP5Z5RWp84cDTmsZkhYrgAVGN7mjeLs8UxqUvRi2ArZbm35Xqk8Y88Uq2MJzmDVHLHzCYRGym8XPxFM4YEVxqzHSKYYDvaMLgKvoskFXKrvceAqEiyih26hjpekCmefiF1VmrPwwShrYYxgHLFCZdigw5JWKV4DmewuR1FH3oNtGoFok859SXeuRbpQfrTjHhGVfDsbXEo3GYP2imAh1APKyLEsG9LcE5WZnJV8eseQnYA8sACLDKZ8Tbpp9KUE7QZNFpnwGnkYx7eybbrCeFDFjTGpsBzaS6fRKrWj2J4Wy3TTyTU1F8iMCrHBF8inZPw9Kg9YEZuJMdXDFNtuaK15u86mF2s2Z5B1vdL5MtZfWThFLnixKds8ABEmGbe8n75Dym5Wv3pkEXQ6XPpaMjUxHfRJB3EfcoFM5nsZHWSTfbFBcHxSRnEiiU67cgJsBUpQn7FvEvqNLiKM4fL3yyykMtQ6RjAS8rhycszphvQa5qFrDHie4vPuTq8/balance/confirmed';\n\n  readonly rsnToken = '8b08cdd5449a9592a9e79711d7d79249d7a03c535d17efaee83e216e80a44c4b';\n  readonly watchersStatsSignal = signal<WatchersStats>(new WatchersStats());\n  readonly watchersStats = new WatchersStats();\n\n  busyCounter = 0;\n\n  constructor(\n    private downloadService: HttpDownloadService,\n    private priceService: PriceService,\n  ) {}\n\n  getWatcherStats(): Signal<WatchersStats> {\n    return this.watchersStatsSignal;\n  }\n\n  getWatchersInfo(): Observable<WatcherInfo> {\n    const result = this.downloadService.downloadStream<WatcherInfo>(this.watcherUrl);\n\n    return result;\n  }\n\n  getPermitsInfo(chainType: ChainType): Observable<Token | undefined> {\n    const address = permitAddresses[chainType];\n    return this.downloadPermitInfo(address, this.rsnToken, null);\n  }\n\n  private updateTotal(map: Record<ChainType, number | undefined>): number | undefined {\n    return Object.values(map).reduce((acc, val) => (acc ?? 0) + (val ?? 0), 0);\n  }\n\n  private convertCurrencies(): void {\n    Object.values(Currency).forEach((currency) => {\n      const conversions = [\n        {\n          amount: rs_WatcherCollateralRSN,\n          from: 'RSN',\n          callback: (c: number) =>\n            (this.watchersStats.watchersAmountsPerCurrency[currency].rsnCollateral = c),\n        },\n        {\n          amount: rs_WatcherCollateralERG,\n          from: 'ERG',\n          callback: (c: number) =>\n            (this.watchersStats.watchersAmountsPerCurrency[currency].ergCollateral = c),\n        },\n        {\n          amount: rs_PermitCost,\n          from: 'RSN',\n          callback: (c: number) =>\n            (this.watchersStats.watchersAmountsPerCurrency[currency].permitValue = c),\n        },\n        {\n          amount: this.watchersStats.totalLockedERG ?? 0,\n          from: 'ERG',\n          callback: (l: number) =>\n            (this.watchersStats.watchersAmountsPerCurrency[currency].totalLockedERG = l),\n        },\n        {\n          amount:\n            (this.watchersStats.totalLockedRSN ?? 0) +\n            rs_PermitCost * (this.watchersStats.totalPermitCount ?? 0),\n          from: 'RSN',\n          callback: (l: number) =>\n            (this.watchersStats.watchersAmountsPerCurrency[currency].totalLockedRSN = l),\n        },\n      ];\n\n      conversions.forEach(({ amount, from, callback }) => {\n        this.priceService.convert(amount, from, currency ?? '').subscribe(callback);\n      });\n    });\n  }\n\n  private updateTotalLocked(): void {\n    Object.values(Currency).forEach((currency) => {\n      this.watchersStats.watchersAmountsPerCurrency[currency].totalLocked =\n        (this.watchersStats.watchersAmountsPerCurrency[currency].totalLockedERG ?? 0) +\n        (this.watchersStats.watchersAmountsPerCurrency[currency].totalLockedRSN ?? 0);\n    });\n  }\n  private getValue(\n    map: Record<ChainType, number | undefined>,\n    chainType: ChainType,\n    multiplier: number,\n  ): number {\n    return (map[chainType] ?? 0) * multiplier;\n  }\n\n  setLockedAmounts(chainType: ChainType): void {\n    this.watchersStats.chainLockedRSN[chainType] =\n      this.getValue(this.watchersStats.chainPermitCount, chainType, rs_PermitCost) +\n      this.getValue(this.watchersStats.chainWatcherCount, chainType, rs_WatcherCollateralRSN);\n\n    this.watchersStats.chainLockedERG[chainType] = this.getValue(\n      this.watchersStats.chainWatcherCount,\n      chainType,\n      rs_WatcherCollateralERG,\n    );\n\n    Object.values(ChainType).forEach((c) => {\n      this.watchersStats.activePermitCount[c] =\n        (this.watchersStats.bulkPermitCount[c] ?? 0) +\n        (this.watchersStats.triggerPermitCount[c] ?? 0);\n    });\n\n    this.watchersStats.totalWatcherCount = this.updateTotal(this.watchersStats.chainWatcherCount);\n    this.watchersStats.totalPermitCount = this.updateTotal(this.watchersStats.chainPermitCount);\n    this.watchersStats.totalActivePermitCount = this.updateTotal(\n      this.watchersStats.activePermitCount,\n    );\n    this.watchersStats.totalLockedRSN = this.updateTotal(this.watchersStats.chainLockedRSN);\n    this.watchersStats.totalLockedERG = this.updateTotal(this.watchersStats.chainLockedERG);\n\n    this.currencyUpdate();\n  }\n\n  currencyUpdate(): void {\n    Object.values(Currency).forEach((currency) => {\n      this.watchersStats.watchersAmountsPerCurrency[currency].watcherValue = 0;\n      this.watchersStats.watchersAmountsPerCurrency[currency].permitValue = 0;\n    });\n\n    this.convertCurrencies();\n    this.updateTotalLocked();\n\n    Object.values(Currency).forEach((currency) => {\n      this.watchersStats.watchersAmountsPerCurrency[currency].watcherValue =\n        (this.watchersStats.watchersAmountsPerCurrency[currency].rsnCollateral ?? 0) +\n        (this.watchersStats.watchersAmountsPerCurrency[currency].ergCollateral ?? 0);\n    });\n\n    const newStats = JSON.stringify(this.watchersStats);\n    if (JSON.stringify(this.watchersStatsSignal()) !== newStats) {\n      console.log('Settings watchers stats signal');\n      this.watchersStatsSignal.set(JSON.parse(newStats));\n    }\n  }\n\n  private downloadPermitInfo(address: string, tokenId: string | null, tokenName: string | null) {\n    const permitsUrl = `https://${rs_ErgoExplorerHost}/api/v1/addresses/${address}/balance/confirmed`;\n\n    return this.downloadService\n      .downloadStream<WatcherInfo>(permitsUrl)\n      .pipe(\n        map((data: { tokens: Token[] }) => {\n          if (data.tokens) {\n            const tokenData = data.tokens.find(\n              (token: Token) =>\n                (tokenId && token.tokenId === tokenId) || (tokenName && token.name === tokenName),\n            );\n            console.log(permitsUrl);\n            if (tokenData) {\n              tokenData.amount /= rs_PermitCost * Math.pow(10, tokenData.decimals);\n              tokenData.amount = Math.floor(tokenData.amount);\n            }\n          }\n          return data;\n        }),\n      )\n      .pipe(\n        map((result) => {\n          return result.tokens.find(\n            (token: Token) =>\n              (tokenId && token.tokenId === tokenId) || (tokenName && token.name === tokenName),\n          );\n        }),\n      );\n  }\n\n  getTriggerPermitsInfo(chainType: ChainType): Observable<Token | undefined> {\n    const address = permitTriggerAddresses[chainType];\n    return this.downloadPermitInfo(address, null, 'rspv2' + chainType + 'RWT');\n  }\n\n  getBulkPermitsInfo(chainType: ChainType): Observable<Token | undefined> {\n    const address = permitBulkAddresses[chainType];\n    return this.downloadPermitInfo(address, null, 'rspv2' + chainType + 'RWT');\n  }\n\n  download() {\n    Object.values(ChainType).forEach((c) => {\n      this.getTriggerPermitsInfo(c)\n        .pipe(map((permitsInfo) => permitsInfo?.amount))\n        .subscribe((amount) => {\n          this.watchersStats.triggerPermitCount[c] = amount;\n          this.setLockedAmounts(c);\n        });\n\n      this.getBulkPermitsInfo(c)\n        .pipe(map((permitsInfo) => permitsInfo?.amount))\n        .subscribe((amount) => {\n          this.watchersStats.bulkPermitCount[c] = amount;\n          this.setLockedAmounts(c);\n        });\n    });\n\n    const watcherInfo$ = this.getWatchersInfo();\n\n    watcherInfo$\n      .pipe(\n        map((watcherInfo) => {\n          Object.values(ChainType).forEach((c) => {\n            const amount =\n              watcherInfo.tokens.find((token: Token) => token.name === 'rspv2' + c + 'AWC')\n                ?.amount ?? 0;\n            this.watchersStats.chainWatcherCount[c] = amount;\n            this.setLockedAmounts(c);\n          });\n        }),\n      )\n      .subscribe();\n\n    Object.values(ChainType).forEach((c) => {\n      this.getPermitsInfo(c)\n        .pipe(map((permitsInfo) => permitsInfo?.amount))\n        .subscribe((amount) => {\n          this.watchersStats.chainPermitCount[c] = amount;\n          this.setLockedAmounts(c);\n        });\n    });\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "downloadService",
                        "type": "HttpDownloadService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "priceService",
                        "type": "PriceService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 62,
                "jsdoctags": [
                    {
                        "name": "downloadService",
                        "type": "HttpDownloadService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "priceService",
                        "type": "PriceService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "type": "injectable"
        }
    ],
    "guards": [],
    "interceptors": [],
    "classes": [
        {
            "name": "Address",
            "id": "class-Address-11cca38908cedb46397abf44059ee50640a74b0b1e2ae7047b6977e3c4b6255b70787670cafeec08f69c42f4b6accbda56c213cc6e74cbb328dae412e18a375f",
            "file": "src/service/ts/models/address.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import type { ChainType } from './chaintype';\n\nexport class Address {\n  address: string;\n  Address: string;\n  active = true;\n  chainType: ChainType | null | undefined;\n  smallAddressForDisplay: string;\n  largeAddressForDisplay: string;\n\n  constructor(address: string, chainType: ChainType | null | undefined, active = true) {\n    this.address = address;\n    this.Address = address;\n    this.smallAddressForDisplay = address.substring(0, 6) + '...';\n    this.largeAddressForDisplay =\n      address.substring(0, 6) + '...' + address.substring(address.length - 6, address.length);\n\n    this.chainType = chainType;\n    this.active = active;\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "address",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "chainType",
                        "type": "ChainType | null | undefined",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "active",
                        "type": "",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "defaultValue": "true"
                    }
                ],
                "line": 9,
                "jsdoctags": [
                    {
                        "name": "address",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "chainType",
                        "type": "ChainType | null | undefined",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "active",
                        "type": "",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "defaultValue": "true",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "inputsClass": [],
            "outputsClass": [],
            "properties": [
                {
                    "name": "active",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "address",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "Address",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "chainType",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ChainType | null | undefined",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "largeAddressForDisplay",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "smallAddressForDisplay",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 8
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "extends": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "AngularEventSender",
            "id": "class-AngularEventSender-9e1e99115174b6e3db1ec22b03036ffb4aa6c3bd524d743a9a23a1665fb605759c77eefbc815f154ff4520c6bd3a057d7463772b36ab4be22331d218a73fdfb3",
            "file": "src/app/service/service.worker.service.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { Inject, Injectable } from '@angular/core';\nimport { EventData, EventService, EventType } from './event.service';\nimport { HttpClient } from '@angular/common/http';\nimport { IS_ELEMENTS_ACTIVE } from './tokens';\n\n// Define a type for the messages being sent to the service worker\ninterface ServiceWorkerMessage {\n  type: string;\n  data?: object;\n  payload?: object;\n}\n\nclass AngularEventSender implements EventSender {\n  constructor(private eventService: EventService) {}\n\n  async sendEvent<T>(event: EventPayload<T>): Promise<void> {\n    this.eventService.sendEventWithData(event.type as EventType, event.data ?? '');\n  }\n}\n\nexport function initializeServiceWorkerService(serviceWorkerService: ServiceWorkerService) {\n  return (): Promise<void> => {\n    return serviceWorkerService.initialize();\n  };\n}\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class ServiceWorkerService {\n  private avoidServiceWorker = true;\n\n  constructor(\n    private eventService: EventService,\n    private http: HttpClient,\n    @Inject(IS_ELEMENTS_ACTIVE) public isElementsActive: boolean,\n  ) {\n    this.checkForVersionDiscrepancy();\n    this.listenForServiceWorkerMessages();\n  }\n\n  public async initialize() {\n    this.eventService.subscribeToAllEvents((eventType, eventData) => {\n      if (\n        eventType == EventType.PerformanceScreenLoaded ||\n        eventType == EventType.StatisticsScreenLoaded ||\n        eventType == EventType.RequestInputsDownload\n      ) {\n        console.log(eventData);\n\n        if (this.avoidServiceWorker) {\n          console.log('Avoiding service worker, sending event ' + eventType + 'to angular worker');\n          const processEventService = new ProcessEventService(\n            new AngularEventSender(this.eventService),\n          );\n\n          processEventService.processEvent({\n            data: eventData as object | undefined,\n            type: eventType,\n          });\n        } else {\n          console.log('Sending to service worker, event ' + eventType);\n          this.sendMessageToServiceWorker({\n            type: eventType,\n            data: eventData,\n          } as ServiceWorkerMessage);\n        }\n      }\n    });\n  }\n\n  checkForVersionDiscrepancy(): void {\n    if (this.isElementsActive) {\n      console.log('Elements are active, avoiding service worker');\n      this.avoidServiceWorker = true;\n      return;\n    }\n\n    this.http\n      .get<{ appData?: { version?: string } }>('ngsw.json', { responseType: 'json' })\n      .subscribe(\n        (data) => {\n          console.log('Current Service Worker Version(ngsw.json) :', data.appData?.version);\n          console.log(\n            'localStorage rosenWatcherServiceVersion:',\n            localStorage.getItem('rosenWatcherServiceVersion'),\n          );\n\n          if (data.appData?.version == localStorage.getItem('rosenWatcherServiceVersion')) {\n            console.log('sw versions in sync');\n            this.avoidServiceWorker = false;\n          } else {\n            console.log('sw versions not in sync');\n            this.avoidServiceWorker = true;\n          }\n        },\n        (error: unknown) => {\n          console.error('Error fetching SW version', error);\n        },\n      );\n  }\n\n  getVersion(): string | null {\n    const version = localStorage.getItem('rosenWatcherServiceVersion');\n    return version;\n  }\n\n  sendMessageToServiceWorker(message: ServiceWorkerMessage) {\n    if (navigator.serviceWorker) {\n      navigator.serviceWorker.ready\n        .then((registration) => {\n          if (registration.active) {\n            registration.active.postMessage(message);\n          } else {\n            console.error('Service worker is not active yet');\n          }\n        })\n        .catch((error) => {\n          console.error('Error waiting for service worker to become ready:', error);\n        });\n    } else {\n      console.error('No service worker found');\n    }\n  }\n\n  listenForServiceWorkerMessages() {\n    if (navigator.serviceWorker) {\n      navigator.serviceWorker.addEventListener('controllerchange', () => {\n        console.log('New service worker has taken control. Reloading the page.');\n        //window.location.reload();\n      });\n\n      navigator.serviceWorker.ready.then((registration) => {\n        if (registration.installing) {\n          console.log('Service worker installing new version.');\n        }\n        registration.addEventListener('updatefound', () => {\n          console.log('updatefound: Service worker installing new version.');\n        });\n      });\n\n      navigator.serviceWorker.addEventListener('message', (event) => {\n        const message = event.data as ServiceWorkerMessage;\n\n        console.log(\n          'Received message from service worker of type ' + message.type + ', data ' + message.data,\n        );\n\n        this.handleServiceWorkerMessage(message);\n\n        const v = event?.data?.version?.appData?.version;\n\n        if (v) {\n          this.eventService.sendEventWithData(EventType.VersionUpdated, v);\n          localStorage.setItem('rosenWatcherServiceVersion', v);\n        }\n      });\n    } else {\n      console.error('Service worker is not supported in this browser.');\n    }\n  }\n\n  handleServiceWorkerMessage(message: ServiceWorkerMessage) {\n    console.log('Handling message from service worker:', message);\n\n    if ((Object.values(EventType) as string[]).includes(message.type)) {\n      if (message.data) {\n        this.eventService.sendEventWithData(message.type as EventType, message.data as EventData);\n      } else {\n        this.eventService.sendEvent(message.type as EventType);\n      }\n    }\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "eventService",
                        "type": "EventService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 13,
                "jsdoctags": [
                    {
                        "name": "eventService",
                        "type": "EventService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "inputsClass": [],
            "outputsClass": [],
            "properties": [],
            "methods": [
                {
                    "name": "sendEvent",
                    "args": [
                        {
                            "name": "event",
                            "type": "EventPayload<T>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<void>",
                    "typeParameters": [
                        "T"
                    ],
                    "line": 16,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        134
                    ],
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "EventPayload<T>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "indexSignatures": [],
            "extends": [],
            "hostBindings": [],
            "hostListeners": [],
            "implements": [
                "EventSender"
            ]
        },
        {
            "name": "Asset",
            "id": "class-Asset-57e05e2d3384f3adf7ff34091e85ae7447302c692c495009f944cf6d644b3854b301867df4037234b5a439ea6f944ab14205037ada170581569212b7e620d0bd",
            "file": "src/service/ts/models/asset.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "export class Asset {\n  index: number;\n  amount: number;\n  name: string;\n  decimals: number;\n  type: string;\n\n  constructor(index: number, amount: number, name: string, decimals: number, type: string) {\n    this.index = index;\n    this.amount = amount;\n    this.name = name;\n    this.decimals = decimals;\n    this.type = type;\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "index",
                        "type": "number",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "amount",
                        "type": "number",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "name",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "decimals",
                        "type": "number",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "type",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 6,
                "jsdoctags": [
                    {
                        "name": "index",
                        "type": "number",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "amount",
                        "type": "number",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "name",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "decimals",
                        "type": "number",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "type",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "inputsClass": [],
            "outputsClass": [],
            "properties": [
                {
                    "name": "amount",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 3
                },
                {
                    "name": "decimals",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "index",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 2
                },
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "type",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 6
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "extends": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "ChainChartPerformance",
            "id": "class-ChainChartPerformance-e5c4a49d90cd306341980bf583b0c9e32dbf4d4c64f018b0c30baa978a61d951ef3bdbfebf47169b868a2e05b2bc211f08a02dc0318acbdad18bc2316da5ea53",
            "file": "src/service/ts/models/chart.performance.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import type { ChainType } from './chaintype';\nimport type { ChartPoint } from './chart.point';\n\nexport class ChartPerformance {\n  address: string;\n  addressForDisplay: string;\n  chart: ChartPoint[];\n  chainType: ChainType | null;\n  color: string;\n\n  constructor(\n    address: string,\n    addressForDisplay: string,\n    chart: ChartPoint[],\n    color: string,\n    chainType: ChainType | null,\n  ) {\n    this.address = address;\n    this.addressForDisplay = addressForDisplay;\n    this.chart = chart;\n    this.chainType = chainType;\n    this.color = color;\n  }\n}\n\nexport class ChainChartPerformance {\n  address: string;\n  addressForDisplay: string;\n  chart: number;\n  chainType: ChainType | null;\n  color: string;\n\n  constructor(\n    address: string,\n    addressForDisplay: string,\n    chart: number,\n    color: string,\n    chainType: ChainType | null,\n  ) {\n    this.address = address;\n    this.addressForDisplay = addressForDisplay;\n    this.chart = chart;\n    this.chainType = chainType;\n    this.color = color;\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "address",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "addressForDisplay",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "chart",
                        "type": "number",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "color",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "chainType",
                        "type": "ChainType | null",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 31,
                "jsdoctags": [
                    {
                        "name": "address",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "addressForDisplay",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "chart",
                        "type": "number",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "color",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "chainType",
                        "type": "ChainType | null",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "inputsClass": [],
            "outputsClass": [],
            "properties": [
                {
                    "name": "address",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 27
                },
                {
                    "name": "addressForDisplay",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 28
                },
                {
                    "name": "chainType",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ChainType | null",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 30
                },
                {
                    "name": "chart",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 29
                },
                {
                    "name": "color",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 31
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "extends": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "ChainPerfChartDataSet",
            "id": "class-ChainPerfChartDataSet-0eba2e1d6031f68a759bc70b4e0aeae0f6a584e3e9a452327aed59b2fbe3cea960431e0ad9c8c9029d2c6cfe5465d403402c991cf509bdfda98d30a07731ce29",
            "file": "src/service/ts/models/chart.dataset.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import type { ChartPoint } from './chart.point';\n\nexport class ChartDataSet {\n  label: string;\n  data: ChartPoint[];\n  backgroundColor: string;\n  pointBackgroundColor: string;\n  borderColor: string;\n  borderWidth: number;\n  borderSkipped: boolean;\n\n  constructor(chartColor: string) {\n    this.label = '';\n    this.data = [];\n    this.backgroundColor = chartColor;\n    this.pointBackgroundColor = chartColor;\n    this.borderColor = chartColor;\n    this.borderWidth = 0;\n    this.borderSkipped = false;\n  }\n}\n\nexport class ChainPerfChartDataSet {\n  label: string;\n  data: { x: string; y: number }[];\n  backgroundColor: string;\n  pointBackgroundColor: string;\n  borderColor: string;\n  borderWidth: number;\n  borderSkipped: boolean;\n\n  constructor(chartColor: string) {\n    this.label = '';\n    this.data = [];\n    this.backgroundColor = chartColor;\n    this.pointBackgroundColor = chartColor;\n    this.borderColor = chartColor;\n    this.borderWidth = 0;\n    this.borderSkipped = false;\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "chartColor",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 30,
                "jsdoctags": [
                    {
                        "name": "chartColor",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "inputsClass": [],
            "outputsClass": [],
            "properties": [
                {
                    "name": "backgroundColor",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 26
                },
                {
                    "name": "borderColor",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 28
                },
                {
                    "name": "borderSkipped",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 30
                },
                {
                    "name": "borderWidth",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 29
                },
                {
                    "name": "data",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type[]",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 25
                },
                {
                    "name": "label",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 24
                },
                {
                    "name": "pointBackgroundColor",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 27
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "extends": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "ChainPerfChartPoint",
            "id": "class-ChainPerfChartPoint-3253a5a3f909eef3d581d45d778ca34cb6684d5b9199376b07120a1f2df8ae5a1b18def38323ed7135fe8cc7bd50794351d5996e85f9a6de753f34b594e0ca7d",
            "file": "src/service/ts/models/chainperf.chart.point.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "export class ChainPerfChartPoint {\n  x: string;\n  y: number;\n\n  constructor(x: string, y: number) {\n    this.x = x;\n    this.y = y;\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "x",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "y",
                        "type": "number",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 3,
                "jsdoctags": [
                    {
                        "name": "x",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "y",
                        "type": "number",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "inputsClass": [],
            "outputsClass": [],
            "properties": [
                {
                    "name": "x",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 2
                },
                {
                    "name": "y",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 3
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "extends": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "ChainPerformanceDataService",
            "id": "class-ChainPerformanceDataService-105d27e866472bea5550120d47e8fcaa45662aca194b277035e48ea3228f362d3226bb54673ba62b70f0425d76006fa9436ee4f3782a079d7cc0a209366dd2b4",
            "file": "src/shared/ts/chain.performance.data.service.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "interface PerfTx {\n  id: string;\n  timestamp: string;\n  chainType?: string;\n  amount: number;\n  decimals?: number;\n}\n\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nclass ChainPerformanceDataService extends DataService<PerfTx> {\n  override async getExistingData(transaction: TransactionItem): Promise<PerfTx | null> {\n    return new Promise((resolve, reject) => {\n      const dbTtransaction: IDBTransaction = this.db.transaction([rs_PerfTxStoreName], 'readonly');\n      const objectStore: IDBObjectStore = dbTtransaction.objectStore(rs_PerfTxStoreName);\n      const request: IDBRequest = objectStore.get(transaction.id);\n\n      request.onsuccess = () => {\n        const result: PerfTx | null = request.result as PerfTx | null;\n        resolve(result);\n      };\n\n      request.onerror = (event: Event) => reject((event.target as IDBRequest).error);\n    });\n  }\n  override async addData(\n    _address: string,\n    transactions: TransactionItem[],\n    db: IDBDatabase,\n  ): Promise<void> {\n    return new Promise((resolve, reject) => {\n      const tempData: PerfTx[] = [];\n\n      transactions.forEach((item: TransactionItem) => {\n        const chainTokensCount: Record<string, number> = {};\n        const eRSNTotal = item.outputs.reduce((total, output) => {\n          output.assets.forEach((asset) => {\n            if (Object.values(chainTypeTokens).includes(asset.name)) {\n              if (!chainTokensCount[asset.name]) {\n                chainTokensCount[asset.name] = 1;\n              } else {\n                chainTokensCount[asset.name]++;\n              }\n            }\n          });\n\n          const assets = output.assets.filter(\n            (a) => a.name === 'eRSN' && Object.values(rewardAddresses).includes(output.address),\n          );\n\n          return (\n            total +\n            assets.reduce((acc, asset) => acc + asset.amount / Math.pow(10, asset.decimals), 0)\n          );\n        }, 0);\n\n        const maxKey = Object.entries(chainTokensCount).reduce(\n          (max, [key, value]) => (value > chainTokensCount[max] ? key : max),\n          Object.keys(chainTokensCount)[0],\n        );\n\n        const chainType = Object.entries(chainTypeTokens).find(\n          ([, value]) => value === maxKey,\n        )?.[0];\n\n        const dbPerfTx: PerfTx = {\n          id: item.id,\n          timestamp: item.timestamp,\n          amount: eRSNTotal,\n          chainType: chainType,\n        };\n\n        tempData.push(dbPerfTx);\n      });\n\n      const transaction: IDBTransaction = db.transaction([rs_PerfTxStoreName], 'readwrite');\n      const objectStore: IDBObjectStore = transaction.objectStore(rs_PerfTxStoreName);\n\n      const putPromises = tempData.map((dbPerfTx: PerfTx) => {\n        return new Promise<void>((putResolve, putReject) => {\n          console.log('Trying to add dbPerfTx to db with id ' + dbPerfTx.id);\n          const request: IDBRequest = objectStore.put(dbPerfTx);\n          request.onsuccess = () => putResolve();\n          request.onerror = (event: Event) => putReject((event.target as IDBRequest).error);\n        });\n      });\n\n      Promise.all(putPromises)\n        .then(async () => {\n          const perfTxs = await this.getPerfTxs();\n          this.eventSender.sendEvent({\n            type: 'PerfChartChanged',\n            data: perfTxs,\n          });\n\n          resolve();\n        })\n        .catch(reject);\n    });\n  }\n  public async getPerfTxs(): Promise<Record<ChainType, { chart: number }>> {\n    const perfTxsPromise = this.getData<PerfTx>(rs_PerfTxStoreName);\n\n    console.log('Retrieving PerfTxs');\n\n    try {\n      let perfTxs = await perfTxsPromise;\n      perfTxs = perfTxs.filter(\n        (p) =>\n          this.getMaxDownloadDateDifference() >\n          new Date().getTime() - new Date(p.timestamp).getTime(),\n      );\n\n      const result = perfTxs.reduce(\n        (acc, tx) => {\n          if (tx.chainType !== undefined && tx.chainType !== null) {\n            const chainKey = tx.chainType as ChainType;\n\n            if (!acc[chainKey]) {\n              acc[chainKey] = { chart: 0 };\n            }\n\n            acc[chainKey].chart += tx.amount ?? 0;\n          }\n          return acc;\n        },\n        {} as Record<ChainType, { chart: number }>,\n      );\n\n      return Object.fromEntries(\n        Object.values(ChainType).map((chain) => [chain, result[chain] || { chart: 0 }]),\n      ) as Record<ChainType, { chart: number }>;\n    } catch (error) {\n      console.error(error);\n      return {} as Record<ChainType, { chart: number }>;\n    }\n  }\n\n  constructor(\n    public override db: IDBDatabase,\n    private eventSender: EventSender,\n  ) {\n    super(db);\n  }\n\n  override getMaxDownloadDateDifference(): number {\n    return 604800000;\n  }\n\n  getDataType(): string {\n    return 'performance_chart';\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "db",
                        "type": "IDBDatabase",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "eventSender",
                        "type": "EventSender",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 136,
                "jsdoctags": [
                    {
                        "name": "db",
                        "type": "IDBDatabase",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "eventSender",
                        "type": "EventSender",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "inputsClass": [],
            "outputsClass": [],
            "properties": [
                {
                    "name": "db",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IDBDatabase",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 139,
                    "modifierKind": [
                        125,
                        164
                    ],
                    "inheritance": {
                        "file": "DataService"
                    }
                }
            ],
            "methods": [
                {
                    "name": "addData",
                    "args": [
                        {
                            "name": "_address",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "transactions",
                            "type": "TransactionItem[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "db",
                            "type": "IDBDatabase",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<void>",
                    "typeParameters": [],
                    "line": 25,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        164,
                        134
                    ],
                    "jsdoctags": [
                        {
                            "name": "_address",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "transactions",
                            "type": "TransactionItem[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "db",
                            "type": "IDBDatabase",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "DataService"
                    }
                },
                {
                    "name": "getDataType",
                    "args": [],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 149,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "inheritance": {
                        "file": "DataService"
                    }
                },
                {
                    "name": "getExistingData",
                    "args": [
                        {
                            "name": "transaction",
                            "type": "TransactionItem",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<PerfTx | null>",
                    "typeParameters": [],
                    "line": 11,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        164,
                        134
                    ],
                    "jsdoctags": [
                        {
                            "name": "transaction",
                            "type": "TransactionItem",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "DataService"
                    }
                },
                {
                    "name": "getMaxDownloadDateDifference",
                    "args": [],
                    "optional": false,
                    "returnType": "number",
                    "typeParameters": [],
                    "line": 145,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        164
                    ],
                    "inheritance": {
                        "file": "DataService"
                    }
                },
                {
                    "name": "getPerfTxs",
                    "args": [],
                    "optional": false,
                    "returnType": "Promise<Record<ChainType, literal type>>",
                    "typeParameters": [],
                    "line": 100,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        125,
                        134
                    ]
                },
                {
                    "name": "getData",
                    "args": [
                        {
                            "name": "storeName",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<T[]>",
                    "typeParameters": [
                        "T"
                    ],
                    "line": 50,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        134
                    ],
                    "jsdoctags": [
                        {
                            "name": "storeName",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "DataService"
                    }
                }
            ],
            "indexSignatures": [],
            "extends": [
                "DataService"
            ],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "ChartDataSet",
            "id": "class-ChartDataSet-0eba2e1d6031f68a759bc70b4e0aeae0f6a584e3e9a452327aed59b2fbe3cea960431e0ad9c8c9029d2c6cfe5465d403402c991cf509bdfda98d30a07731ce29",
            "file": "src/service/ts/models/chart.dataset.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import type { ChartPoint } from './chart.point';\n\nexport class ChartDataSet {\n  label: string;\n  data: ChartPoint[];\n  backgroundColor: string;\n  pointBackgroundColor: string;\n  borderColor: string;\n  borderWidth: number;\n  borderSkipped: boolean;\n\n  constructor(chartColor: string) {\n    this.label = '';\n    this.data = [];\n    this.backgroundColor = chartColor;\n    this.pointBackgroundColor = chartColor;\n    this.borderColor = chartColor;\n    this.borderWidth = 0;\n    this.borderSkipped = false;\n  }\n}\n\nexport class ChainPerfChartDataSet {\n  label: string;\n  data: { x: string; y: number }[];\n  backgroundColor: string;\n  pointBackgroundColor: string;\n  borderColor: string;\n  borderWidth: number;\n  borderSkipped: boolean;\n\n  constructor(chartColor: string) {\n    this.label = '';\n    this.data = [];\n    this.backgroundColor = chartColor;\n    this.pointBackgroundColor = chartColor;\n    this.borderColor = chartColor;\n    this.borderWidth = 0;\n    this.borderSkipped = false;\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "chartColor",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 10,
                "jsdoctags": [
                    {
                        "name": "chartColor",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "inputsClass": [],
            "outputsClass": [],
            "properties": [
                {
                    "name": "backgroundColor",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "borderColor",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "borderSkipped",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 10
                },
                {
                    "name": "borderWidth",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "data",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ChartPoint[]",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "label",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "pointBackgroundColor",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 7
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "extends": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "ChartPerformance",
            "id": "class-ChartPerformance-e5c4a49d90cd306341980bf583b0c9e32dbf4d4c64f018b0c30baa978a61d951ef3bdbfebf47169b868a2e05b2bc211f08a02dc0318acbdad18bc2316da5ea53",
            "file": "src/service/ts/models/chart.performance.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import type { ChainType } from './chaintype';\nimport type { ChartPoint } from './chart.point';\n\nexport class ChartPerformance {\n  address: string;\n  addressForDisplay: string;\n  chart: ChartPoint[];\n  chainType: ChainType | null;\n  color: string;\n\n  constructor(\n    address: string,\n    addressForDisplay: string,\n    chart: ChartPoint[],\n    color: string,\n    chainType: ChainType | null,\n  ) {\n    this.address = address;\n    this.addressForDisplay = addressForDisplay;\n    this.chart = chart;\n    this.chainType = chainType;\n    this.color = color;\n  }\n}\n\nexport class ChainChartPerformance {\n  address: string;\n  addressForDisplay: string;\n  chart: number;\n  chainType: ChainType | null;\n  color: string;\n\n  constructor(\n    address: string,\n    addressForDisplay: string,\n    chart: number,\n    color: string,\n    chainType: ChainType | null,\n  ) {\n    this.address = address;\n    this.addressForDisplay = addressForDisplay;\n    this.chart = chart;\n    this.chainType = chainType;\n    this.color = color;\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "address",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "addressForDisplay",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "chart",
                        "type": "ChartPoint[]",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "color",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "chainType",
                        "type": "ChainType | null",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 9,
                "jsdoctags": [
                    {
                        "name": "address",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "addressForDisplay",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "chart",
                        "type": "ChartPoint[]",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "color",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "chainType",
                        "type": "ChainType | null",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "inputsClass": [],
            "outputsClass": [],
            "properties": [
                {
                    "name": "address",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "addressForDisplay",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "chainType",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ChainType | null",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "chart",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ChartPoint[]",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "color",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 9
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "extends": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "ChartPoint",
            "id": "class-ChartPoint-a2bd6807d0f9b8554acd4a5e0ddec7a5e52fe0174e6fd6ca8c7a981284f8e2e09e4c10b57e6d9c61805f58996b463cf5e952ed4802ebdf39b3e69a0aa9c32d66",
            "file": "src/service/ts/models/chart.point.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "export class ChartPoint {\n  x: Date;\n  y: number;\n\n  constructor(x: Date, y: number) {\n    this.x = x;\n    this.y = y;\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "x",
                        "type": "Date",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "y",
                        "type": "number",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 3,
                "jsdoctags": [
                    {
                        "name": "x",
                        "type": "Date",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "y",
                        "type": "number",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "inputsClass": [],
            "outputsClass": [],
            "properties": [
                {
                    "name": "x",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Date",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 2
                },
                {
                    "name": "y",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 3
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "extends": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "ChartService",
            "id": "class-ChartService-89e37bb68463cc379571cd00d342c6ee75e9cb3401548920b8652d1234a0289aafe61b56175b6fdabafd5c46a2ad1ff46c01bbc4d725ba0337e5d34155c02f96",
            "file": "src/shared/ts/chart.service.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "class ChartService {\n  async getAddressCharts(\n    inputs: Input[],\n  ): Promise<Record<string, { chainType: ChainType | null; charts: Record<number, number> }>> {\n    const addressCharts: Record<\n      string,\n      { chainType: ChainType | null; charts: Record<number, number> }\n    > = {};\n\n    inputs.forEach((input: Input) => {\n      input.assets.forEach((asset: Asset) => {\n        if (!addressCharts[input.outputAddress]) {\n          addressCharts[input.outputAddress] = { charts: {}, chainType: null };\n        }\n\n        const currentDate = new Date();\n        const halfYearAgo = new Date(\n          currentDate.getFullYear(),\n          currentDate.getMonth() - 6,\n          currentDate.getDate(),\n        );\n\n        if (input.inputDate > halfYearAgo) {\n          const dt = new Date(\n            input.inputDate.getFullYear(),\n            input.inputDate.getMonth(),\n            input.inputDate.getDate() - input.inputDate.getDay(),\n          ).getTime();\n          if (!addressCharts[input.outputAddress].charts[dt]) {\n            addressCharts[input.outputAddress].charts[dt] = 0;\n          }\n\n          addressCharts[input.outputAddress].charts[dt] +=\n            asset.amount / Math.pow(10, asset.decimals);\n          addressCharts[input.outputAddress].chainType =\n            (input.chainType as ChainType) ?? getChainType(input.address);\n        }\n      });\n    });\n\n    return addressCharts;\n  }\n\n  async getAmountsByDate(inputs: Input[], period: Period) {\n    const reducedInputs = this.reduceData(inputs, period);\n\n    const amounts = reducedInputs.map((s) => {\n      return { x: s.inputDate, y: s.amount } as DateNumberPoint;\n    });\n\n    return amounts;\n  }\n\n  private reduceData(inputs: Input[], period: Period): Input[] {\n    const date = new Date();\n\n    switch (period) {\n      case Period.Day:\n        date.setDate(date.getDate() - 1);\n        break;\n      case Period.Week:\n        date.setDate(date.getDate() - 7);\n        break;\n      case Period.Month:\n        date.setMonth(date.getMonth() - 1);\n        break;\n      case Period.Year:\n        date.setFullYear(date.getFullYear() - 1);\n        break;\n      default:\n        date.setFullYear(date.getFullYear() - 100);\n    }\n\n    inputs = inputs.filter((r) => r.inputDate >= date);\n\n    return inputs;\n  }\n}\n",
            "inputsClass": [],
            "outputsClass": [],
            "properties": [],
            "methods": [
                {
                    "name": "getAddressCharts",
                    "args": [
                        {
                            "name": "inputs",
                            "type": "Input[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<Record<string, literal type>>",
                    "typeParameters": [],
                    "line": 3,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        134
                    ],
                    "jsdoctags": [
                        {
                            "name": "inputs",
                            "type": "Input[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getAmountsByDate",
                    "args": [
                        {
                            "name": "inputs",
                            "type": "Input[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "period",
                            "type": "Period",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "unknown",
                    "typeParameters": [],
                    "line": 45,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        134
                    ],
                    "jsdoctags": [
                        {
                            "name": "inputs",
                            "type": "Input[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "period",
                            "type": "Period",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "reduceData",
                    "args": [
                        {
                            "name": "inputs",
                            "type": "Input[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "period",
                            "type": "Period",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Input[]",
                    "typeParameters": [],
                    "line": 55,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "inputs",
                            "type": "Input[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "period",
                            "type": "Period",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "indexSignatures": [],
            "extends": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "CsvUtils",
            "id": "class-CsvUtils-b687c3ed1c7e83136ab03d52991c40960a78b617c36dc7683b3d52c5f34c87eef596072e82ccce396d5e07f23ca7c6454c247035d0d85aa5fbe07a928410609c",
            "file": "src/app/statistics/csv.utils.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { Input } from '../../service/ts/models/input';\n\nexport class CsvUtils {\n  public static csvExportInputs(inputs: Input[]) {\n    const content = inputs.map((i) => `\"${i.chainType}\",\"${i.inputDate}\",\"${i.amount}\"`).join('\\n');\n\n    const blob = new Blob([content], { type: 'text/csv;charset=utf-8;' });\n\n    const url = URL.createObjectURL(blob);\n\n    const a = document.createElement('a');\n    a.href = url;\n    a.download = 'export.csv';\n    a.click();\n\n    URL.revokeObjectURL(url);\n  }\n}\n",
            "inputsClass": [],
            "outputsClass": [],
            "properties": [],
            "methods": [
                {
                    "name": "csvExportInputs",
                    "args": [
                        {
                            "name": "inputs",
                            "type": "Input[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 5,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        126
                    ],
                    "jsdoctags": [
                        {
                            "name": "inputs",
                            "type": "Input[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "indexSignatures": [],
            "extends": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "DataService",
            "id": "class-DataService-fc84b9c8de9c067aa13489c6f50dbddab401c283a01e212eb981acffc4a49b262929e75b3bd85e6779eb00e173438c0f2f7d04579a7cba8d0785c6180fdf7ab4",
            "file": "src/shared/ts/data.service.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "interface Asset {\n  id: string;\n  name: string;\n  quantity: number;\n  amount: number;\n  decimals: number;\n  tokenId: string | null;\n}\n\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\ninterface DbInput {\n  outputAddress: string;\n  inputDate: Date;\n  boxId: string;\n  assets: Asset[];\n  address?: string;\n  chainType?: string;\n}\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\ninterface Input {\n  boxId: string;\n  outputAddress: string;\n  inputDate: Date;\n  assets: Asset[];\n  address: string;\n  amount?: number;\n  accumulatedAmount?: number;\n  chainType?: ChainType | null;\n}\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\ninterface Output {\n  assets: Asset[];\n  address: string;\n}\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nabstract class DataService<T> {\n  constructor(public db: IDBDatabase) {}\n  abstract addData(\n    address: string,\n    transactions: TransactionItem[],\n    db: IDBDatabase,\n  ): Promise<void>;\n  abstract getDataType(): string;\n  getMaxDownloadDateDifference(): number {\n    return 3155760000000;\n  }\n\n  abstract getExistingData(transaction: TransactionItem, address: string): Promise<T | null>;\n\n  async getData<T>(storeName: string): Promise<T[]> {\n    return new Promise((resolve, reject) => {\n      const transaction: IDBTransaction = this.db.transaction([storeName], 'readonly');\n      const objectStore: IDBObjectStore = transaction.objectStore(storeName);\n      const request: IDBRequest = objectStore.getAll();\n\n      request.onsuccess = () => resolve(request.result as T[]);\n      request.onerror = (event: Event) => reject((event.target as IDBRequest).error);\n    });\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "db",
                        "type": "IDBDatabase",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 36,
                "jsdoctags": [
                    {
                        "name": "db",
                        "type": "IDBDatabase",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "inputsClass": [],
            "outputsClass": [],
            "properties": [
                {
                    "name": "db",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IDBDatabase",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 37,
                    "modifierKind": [
                        125
                    ]
                }
            ],
            "methods": [
                {
                    "name": "addData",
                    "args": [
                        {
                            "name": "address",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "transactions",
                            "type": "TransactionItem[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "db",
                            "type": "IDBDatabase",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<void>",
                    "typeParameters": [],
                    "line": 38,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        128
                    ],
                    "jsdoctags": [
                        {
                            "name": "address",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "transactions",
                            "type": "TransactionItem[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "db",
                            "type": "IDBDatabase",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getData",
                    "args": [
                        {
                            "name": "storeName",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<T[]>",
                    "typeParameters": [
                        "T"
                    ],
                    "line": 50,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        134
                    ],
                    "jsdoctags": [
                        {
                            "name": "storeName",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getDataType",
                    "args": [],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 43,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        128
                    ]
                },
                {
                    "name": "getExistingData",
                    "args": [
                        {
                            "name": "transaction",
                            "type": "TransactionItem",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "address",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<T | null>",
                    "typeParameters": [],
                    "line": 48,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        128
                    ],
                    "jsdoctags": [
                        {
                            "name": "transaction",
                            "type": "TransactionItem",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "address",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getMaxDownloadDateDifference",
                    "args": [],
                    "optional": false,
                    "returnType": "number",
                    "typeParameters": [],
                    "line": 44,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "indexSignatures": [],
            "extends": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "DateUtils",
            "id": "class-DateUtils-7822e97e57b9d190f329c5ba493795deeaadf309d49444328910f6e895e12982315f86ec34cfb3e481e2f511314a06f4880b88e47f570543f549b963d8c29380",
            "file": "src/app/statistics/date.utils.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { Input } from '../../service/ts/models/input';\n\nexport class DateUtils {\n  static formatDate(utcDate: Date): string {\n    const day = utcDate.getUTCDate().toString().padStart(2, '0');\n    const monthNames = [\n      'Jan',\n      'Feb',\n      'Mar',\n      'Apr',\n      'May',\n      'Jun',\n      'Jul',\n      'Aug',\n      'Sep',\n      'Oct',\n      'Nov',\n      'Dec',\n    ];\n    const month = monthNames[utcDate.getUTCMonth()];\n    const year = utcDate.getUTCFullYear();\n\n    return `${day} ${month} ${year}`;\n  }\n\n  static formatTime(utcDate: Date): string {\n    const hours = utcDate.getUTCHours().toString().padStart(2, '0');\n    const minutes = utcDate.getUTCMinutes().toString().padStart(2, '0');\n    const seconds = utcDate.getUTCSeconds().toString().padStart(2, '0');\n\n    return `${hours}:${minutes}:${seconds}`;\n  }\n\n  static convertToUTCWithSameFields(date: Date | null): Date | null {\n    if (!date) {\n      return null;\n    }\n    return new Date(\n      Date.UTC(\n        date.getFullYear(),\n        date.getMonth(),\n        date.getDate(),\n        date.getHours(),\n        date.getMinutes(),\n        date.getSeconds(),\n        date.getMilliseconds(),\n      ),\n    );\n  }\n\n  public static filterByPeriod(inputs: Input[], period: Period): Input[] {\n    const date = new Date();\n\n    switch (period) {\n      case Period.Day:\n        date.setDate(date.getDate() - 1);\n        break;\n      case Period.Week:\n        date.setDate(date.getDate() - 7);\n        break;\n      case Period.Month:\n        date.setMonth(date.getMonth() - 1);\n        break;\n      case Period.Year:\n        date.setFullYear(date.getFullYear() - 1);\n        break;\n      default:\n        date.setFullYear(date.getFullYear() - 100);\n    }\n\n    inputs = inputs.filter((r) => r.inputDate >= date);\n\n    return inputs;\n  }\n\n  static StripTimeUTC() {\n    return (date: Date | null): Date | null => {\n      if (!date) return null;\n      return new Date(Date.UTC(date.getUTCFullYear(), date.getUTCMonth(), date.getUTCDate()));\n    };\n  }\n}\n",
            "inputsClass": [],
            "outputsClass": [],
            "properties": [],
            "methods": [
                {
                    "name": "convertToUTCWithSameFields",
                    "args": [
                        {
                            "name": "date",
                            "type": "Date | null",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Date | null",
                    "typeParameters": [],
                    "line": 35,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        126
                    ],
                    "jsdoctags": [
                        {
                            "name": "date",
                            "type": "Date | null",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "filterByPeriod",
                    "args": [
                        {
                            "name": "inputs",
                            "type": "Input[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "period",
                            "type": "Period",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Input[]",
                    "typeParameters": [],
                    "line": 52,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        126
                    ],
                    "jsdoctags": [
                        {
                            "name": "inputs",
                            "type": "Input[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "period",
                            "type": "Period",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "formatDate",
                    "args": [
                        {
                            "name": "utcDate",
                            "type": "Date",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 5,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        126
                    ],
                    "jsdoctags": [
                        {
                            "name": "utcDate",
                            "type": "Date",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "formatTime",
                    "args": [
                        {
                            "name": "utcDate",
                            "type": "Date",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 27,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        126
                    ],
                    "jsdoctags": [
                        {
                            "name": "utcDate",
                            "type": "Date",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "StripTimeUTC",
                    "args": [],
                    "optional": false,
                    "returnType": "(date: any) => any",
                    "typeParameters": [],
                    "line": 77,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        126
                    ]
                }
            ],
            "indexSignatures": [],
            "extends": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "DownloadService",
            "id": "class-DownloadService-0516426d8e20c4b6339f9fdc3bb21d06f8cc54c9be0d530bb788639bf0a531f3067cebad105048e92f1fb067111ec6ae4ce5c1df038cef7349792c6ccb512426",
            "file": "src/shared/ts/download.service.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "interface AddressData {\n  address: string;\n}\n\ninterface TransactionItem {\n  outputCreatedAt: string | number | Date;\n  timestamp: string;\n  inputs: Input[];\n  outputs: Output[];\n  id: string;\n}\n\ninterface FetchTransactionsResponse {\n  transactions: TransactionItem[];\n  items: TransactionItem[];\n  total: number;\n}\n\ninterface DownloadStatus {\n  address: string;\n  Address: string;\n  status: string;\n  lastDownloadDate: Date | undefined;\n}\n\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nclass DownloadService<T> {\n  private busyCounter = 0;\n  private downloadFullSize = rs_FullDownloadsBatchSize;\n  private downloadInitialSize = rs_InitialNDownloads;\n  //private static addressDownloadDateMap = new Map<string, Date>();\n\n  constructor(\n    downloadFullSize: number,\n    downloadInitialSize: number,\n    private dataService: DataService<T>,\n    private eventSender: EventSender,\n    private db: IDBDatabase,\n  ) {\n    this.downloadFullSize = downloadFullSize;\n    this.downloadInitialSize = downloadInitialSize;\n  }\n\n  async fetchTransactions(url: string): Promise<FetchTransactionsResponse> {\n    try {\n      const response: Response = await fetch(url);\n      if (!response.ok) throw new Error(`Server returned code: ${response.status}`);\n      return (await response.json()) as FetchTransactionsResponse;\n    } catch (error) {\n      console.error(`An error occurred: ${error}`);\n      throw error;\n    }\n  }\n\n  async downloadTransactions(\n    address: string,\n    offset = 0,\n    limit = 500,\n  ): Promise<FetchTransactionsResponse> {\n    const url = `https://${rs_ErgoExplorerHost}/api/v1/addresses/${address}/transactions?offset=${offset}&limit=${limit}`;\n    console.log(`Downloading from: ${url}`);\n\n    const response: FetchTransactionsResponse = await this.fetchTransactions(url);\n    const result: FetchTransactionsResponse = {\n      transactions: response.items,\n      total: response.total,\n      items: [],\n    };\n\n    for (const item of response.items) {\n      const inputDate: Date = new Date(item.timestamp);\n      if (inputDate < rs_StartFrom) {\n        return result;\n      }\n    }\n\n    return result;\n  }\n\n  async downloadForAddresses(): Promise<void> {\n    try {\n      const addresses: AddressData[] =\n        await this.dataService.getData<AddressData>(rs_AddressDataStoreName);\n\n      const downloadPromises: Promise<void>[] = addresses.map(async (addressObj: AddressData) => {\n        await this.downloadForAddress(addressObj.address);\n      });\n\n      await Promise.all(downloadPromises);\n    } catch (e) {\n      console.error('Error downloading for addresses:', e);\n    }\n  }\n\n  // Busy Counter\n  private increaseBusyCounter(address: string): void {\n    if (this.busyCounter === 0) {\n      this.eventSender.sendEvent({\n        type: 'StartFullDownload',\n        data: address,\n      });\n    }\n    this.busyCounter++;\n  }\n\n  private decreaseBusyCounter(address: string): void {\n    this.busyCounter--;\n    if (this.busyCounter === 0) {\n      this.eventSender.sendEvent({\n        type: 'EndFullDownload',\n        data: address,\n      });\n    }\n  }\n\n  // Download All for Address (recursive)\n  async downloadAllForAddress(address: string, offset: number, db: IDBDatabase): Promise<void> {\n    this.increaseBusyCounter(address);\n    console.log(this.busyCounter);\n\n    try {\n      const result: FetchTransactionsResponse = await this.downloadTransactions(\n        address,\n        offset,\n        this.downloadFullSize + 10,\n      );\n      console.log(\n        `Processing full download(offset = ${offset}, size = ${this.downloadFullSize}) for: ${address}`,\n      );\n\n      //const t = this.processItems(result.transactions);\n      //console.log('permit amount ' + t);\n\n      if (!result.transactions || result.transactions.length === 0 || offset > 100000) {\n        await this.setDownloadStatus(address, 'true', db);\n        console.log(this.busyCounter);\n        return;\n      }\n\n      await this.dataService.addData(address, result.transactions, db);\n      //await this.dataService.compressInputs();\n\n      if (\n        this.dataService.getMaxDownloadDateDifference() >\n        new Date().getTime() -\n          new Date(result.transactions[result.transactions.length - 1].timestamp).getTime()\n      ) {\n        await this.downloadAllForAddress(address, offset + this.downloadFullSize, db);\n      } else {\n        await this.setDownloadStatus(address, 'true', db);\n      }\n    } catch (e) {\n      console.error(e);\n    } finally {\n      this.decreaseBusyCounter(address);\n      console.log(this.busyCounter);\n    }\n  }\n  /*\n  processItems(items: TransactionItem[]): number {\n    let r = 0;\n    items.forEach((item) => {\n      \n      item.inputs.forEach((i) => {\n        i.assets.forEach((a) => {\n          if (a.name == 'rspv2CardanoRWT') {\n            r -= a.amount;\n          }\n        });\n      });\n      \n\n      item.outputs.forEach((o) => {\n        if (!getChainType(o.address)) {\n          o.assets.forEach((a) => {\n            if (a.name == 'rspv2CardanoRWT') {\n              r += a.amount;\n              if (a.amount > 30000000) {\n                console.log('wtfffffffffffffff ' + a.amount);\n              }\n            }\n          });\n        }\n      });\n    });\n\n    return r / 3000000;\n  }\n  */\n\n  // Get Download Status for Address from IndexedDB\n  async getDownloadStatus(address: string, db: IDBDatabase): Promise<DownloadStatus> {\n    return new Promise((resolve, reject) => {\n      const transaction: IDBTransaction = db.transaction([rs_DownloadStatusStoreName], 'readonly');\n      const objectStore: IDBObjectStore = transaction.objectStore(rs_DownloadStatusStoreName);\n      const request: IDBRequest = objectStore.get(address + '_' + this.dataService.getDataType());\n\n      request.onsuccess = () => resolve(request.result as DownloadStatus);\n      request.onerror = (event: Event) => reject((event.target as IDBRequest).error);\n    });\n  }\n\n  // Set Download Status for Address in IndexedDB\n  async setDownloadStatus(address: string, status: string, db: IDBDatabase): Promise<void> {\n    let dbStatus: DownloadStatus | undefined = await this.getDownloadStatus(address, db);\n\n    if (!dbStatus) {\n      dbStatus = {\n        address: address + '_' + this.dataService.getDataType(),\n        Address: address,\n        status: status,\n        lastDownloadDate: undefined,\n      };\n    } else {\n      dbStatus.status = status;\n      dbStatus.address = address + '_' + this.dataService.getDataType();\n      dbStatus.Address = address;\n    }\n\n    await this.saveDownloadStatus(dbStatus, db);\n  }\n\n  async saveDownloadStatus(downloadStatus: DownloadStatus, db: IDBDatabase): Promise<void> {\n    return new Promise((resolve, reject) => {\n      const transaction: IDBTransaction = db.transaction([rs_DownloadStatusStoreName], 'readwrite');\n      const objectStore: IDBObjectStore = transaction.objectStore(rs_DownloadStatusStoreName);\n\n      const request: IDBRequest = objectStore.put(downloadStatus);\n\n      request.onsuccess = () => resolve();\n      request.onerror = (event: Event) => reject((event.target as IDBRequest).error);\n    });\n  }\n\n  async downloadForAddress(address: string): Promise<void> {\n    /*const downloadStatus = await this.getDownloadStatus(address, this.db);\n\n    \n    if (downloadStatus?.lastDownloadDate) {\n      const lastDownloadDate: Date | undefined = downloadStatus.lastDownloadDate;\n      if (lastDownloadDate && lastDownloadDate.getTime() > new Date().getTime() - 1000 * 120) {\n        return;\n      }\n    }\n\n    if (downloadStatus) {\n      downloadStatus.lastDownloadDate = new Date();\n      await this.saveDownloadStatus(downloadStatus, this.db);\n    }\n*/\n    this.increaseBusyCounter(address);\n    console.log(this.busyCounter);\n\n    try {\n      const result: FetchTransactionsResponse = await this.downloadTransactions(\n        address,\n        0,\n        this.downloadInitialSize,\n      );\n      console.log(\n        `Processing initial download(size = ${this.downloadInitialSize}) for: ${address}`,\n      );\n\n      const itemsz: number = result.transactions.length;\n\n      let existingData: T | null = null;\n\n      if (itemsz > this.downloadInitialSize / 4) {\n        for (let i = Math.floor(itemsz / 4); i < itemsz - Math.floor(itemsz / 4); i++) {\n          const item: TransactionItem = result.transactions[i];\n\n          existingData = await this.dataService.getExistingData(item, address);\n          if (existingData) {\n            break;\n          }\n        }\n      }\n\n      console.log('Add bunch of data');\n      await this.dataService.addData(address, result.transactions, this.db);\n      const downloadStatus: string =\n        (await this.getDownloadStatus(address, this.db))?.status || 'false';\n      if (existingData && downloadStatus === 'true') {\n        console.log(`Found existing boxId in db for ${address}, no need to download more.`);\n      } else if (itemsz >= this.downloadInitialSize) {\n        await this.setDownloadStatus(address, 'false', this.db);\n        console.log(`Downloading all tx's for : ${address}`);\n        await this.downloadAllForAddress(address, 0, this.db);\n      }\n    } catch (e) {\n      console.error(e);\n    } finally {\n      this.decreaseBusyCounter(address);\n      console.log(this.busyCounter);\n    }\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "downloadFullSize",
                        "type": "number",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "downloadInitialSize",
                        "type": "number",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "dataService",
                        "type": "DataService<T>",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "eventSender",
                        "type": "EventSender",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "db",
                        "type": "IDBDatabase",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 30,
                "jsdoctags": [
                    {
                        "name": "downloadFullSize",
                        "type": "number",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "downloadInitialSize",
                        "type": "number",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "dataService",
                        "type": "DataService<T>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "eventSender",
                        "type": "EventSender",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "db",
                        "type": "IDBDatabase",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "inputsClass": [],
            "outputsClass": [],
            "properties": [
                {
                    "name": "busyCounter",
                    "defaultValue": "0",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 28,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "downloadFullSize",
                    "defaultValue": "rs_FullDownloadsBatchSize",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 29,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "downloadInitialSize",
                    "defaultValue": "rs_InitialNDownloads",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 30,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methods": [
                {
                    "name": "decreaseBusyCounter",
                    "args": [
                        {
                            "name": "address",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 106,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "address",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "downloadAllForAddress",
                    "args": [
                        {
                            "name": "address",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "offset",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "db",
                            "type": "IDBDatabase",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<void>",
                    "typeParameters": [],
                    "line": 117,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        134
                    ],
                    "jsdoctags": [
                        {
                            "name": "address",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "offset",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "db",
                            "type": "IDBDatabase",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "downloadForAddress",
                    "args": [
                        {
                            "name": "address",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<void>",
                    "typeParameters": [],
                    "line": 235,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        134
                    ],
                    "jsdoctags": [
                        {
                            "name": "address",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "downloadForAddresses",
                    "args": [],
                    "optional": false,
                    "returnType": "Promise<void>",
                    "typeParameters": [],
                    "line": 80,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        134
                    ]
                },
                {
                    "name": "downloadTransactions",
                    "args": [
                        {
                            "name": "address",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "offset",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "0"
                        },
                        {
                            "name": "limit",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "500"
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<FetchTransactionsResponse>",
                    "typeParameters": [],
                    "line": 55,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        134
                    ],
                    "jsdoctags": [
                        {
                            "name": "address",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "offset",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "0",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "limit",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "500",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "fetchTransactions",
                    "args": [
                        {
                            "name": "url",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<FetchTransactionsResponse>",
                    "typeParameters": [],
                    "line": 44,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        134
                    ],
                    "jsdoctags": [
                        {
                            "name": "url",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getDownloadStatus",
                    "args": [
                        {
                            "name": "address",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "db",
                            "type": "IDBDatabase",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<DownloadStatus>",
                    "typeParameters": [],
                    "line": 192,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        134
                    ],
                    "jsdoctags": [
                        {
                            "name": "address",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "db",
                            "type": "IDBDatabase",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "increaseBusyCounter",
                    "args": [
                        {
                            "name": "address",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 96,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "address",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "saveDownloadStatus",
                    "args": [
                        {
                            "name": "downloadStatus",
                            "type": "DownloadStatus",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "db",
                            "type": "IDBDatabase",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<void>",
                    "typeParameters": [],
                    "line": 223,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        134
                    ],
                    "jsdoctags": [
                        {
                            "name": "downloadStatus",
                            "type": "DownloadStatus",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "db",
                            "type": "IDBDatabase",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setDownloadStatus",
                    "args": [
                        {
                            "name": "address",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "status",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "db",
                            "type": "IDBDatabase",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<void>",
                    "typeParameters": [],
                    "line": 204,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        134
                    ],
                    "jsdoctags": [
                        {
                            "name": "address",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "status",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "db",
                            "type": "IDBDatabase",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "indexSignatures": [],
            "extends": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "Input",
            "id": "class-Input-ab2a59619487c6e17d027ab42ddc7cbcf359ef3b68bc30590e04e42b4b090e329af4e78df0d9491b60803196a24ef52eefe1072d25dfa52488f2ce19e348f7f7",
            "file": "src/service/ts/models/input.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import type { ChainType } from './chaintype';\nimport type { Asset } from './asset';\n\nexport class Input {\n  outputAddress: string;\n  inputDate: Date;\n  boxId: string;\n  assets: Asset[];\n  outputCreatedAt: number;\n  address: string;\n  accumulatedAmount?: number;\n  amount?: number;\n  chainType?: ChainType | null;\n\n  constructor(\n    inputDate: Date,\n    address: string,\n    outputCreatedAt: number,\n    assets: Asset[],\n    outputAddress: string,\n    boxId: string,\n    accumulatedAmount?: number,\n    amount?: number,\n    chainType?: ChainType | null,\n  ) {\n    this.outputAddress = outputAddress;\n    this.inputDate = inputDate;\n    this.assets = assets;\n    this.boxId = boxId;\n    this.outputCreatedAt = outputCreatedAt;\n    this.address = address;\n    this.accumulatedAmount = accumulatedAmount;\n    this.amount = amount;\n    this.chainType = chainType;\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "inputDate",
                        "type": "Date",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "address",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "outputCreatedAt",
                        "type": "number",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "assets",
                        "type": "Asset[]",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "outputAddress",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "boxId",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "accumulatedAmount",
                        "type": "number",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true
                    },
                    {
                        "name": "amount",
                        "type": "number",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true
                    },
                    {
                        "name": "chainType",
                        "type": "ChainType | null",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true
                    }
                ],
                "line": 13,
                "jsdoctags": [
                    {
                        "name": "inputDate",
                        "type": "Date",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "address",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "outputCreatedAt",
                        "type": "number",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "assets",
                        "type": "Asset[]",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "outputAddress",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "boxId",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "accumulatedAmount",
                        "type": "number",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true,
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "amount",
                        "type": "number",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true,
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "chainType",
                        "type": "ChainType | null",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true,
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "inputsClass": [],
            "outputsClass": [],
            "properties": [
                {
                    "name": "accumulatedAmount",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 11
                },
                {
                    "name": "address",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 10
                },
                {
                    "name": "amount",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 12
                },
                {
                    "name": "assets",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Asset[]",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "boxId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "chainType",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ChainType | null",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 13
                },
                {
                    "name": "inputDate",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Date",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "outputAddress",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "outputCreatedAt",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 9
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "extends": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "NavigationItem",
            "id": "class-NavigationItem-ed68a5e6712bbbd41dc16ec0863652cd4f2fa55c3e1308f7e681d2636a0ce4eccad6a4d27bf63bcec4dce04ca0be46a4294b22ae53fd28cf873ceee363ac2b87",
            "file": "src/app/service/navigation.service.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { Router, NavigationEnd } from '@angular/router';\nimport { filter } from 'rxjs/operators';\nimport { EventService, EventType } from './event.service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class NavigationService {\n  public currentNavigationIndex = 0;\n\n  navigationItems: NavigationItem[] = [];\n  latestVersionUpdate: string | null = null;\n\n  constructor(\n    private router: Router,\n    private eventService: EventService,\n  ) {\n    this.navigationItems.push({ route: '/statistics' });\n    this.navigationItems.push({ route: '/performance' });\n    this.navigationItems.push({ route: '/watchers' });\n    this.navigationItems.push({ route: '/chainperformance' });\n\n    this.router.events\n      .pipe(\n        filter((event): event is NavigationEnd => event instanceof NavigationEnd), // Type guard for NavigationEnd\n      )\n      .subscribe((event) => {\n        const url = event.urlAfterRedirects;\n        this.updateCurrentNavigationIndex(url);\n      });\n\n    this.eventService.subscribeToEvent<string>(EventType.VersionUpdated, (v) => {\n      this.latestVersionUpdate = v;\n      //this.checkForReload();\n    });\n\n    const performanceItem = localStorage.getItem('performanceScreen');\n    if (performanceItem?.startsWith('/chainperformance')) {\n      this.swapPerformanceItems();\n    }\n  }\n\n  /*\n  private checkForReload() {\n    if (\n      this.latestVersionUpdate &&\n      localStorage.getItem('versionReload') != this.latestVersionUpdate\n    ) {\n      localStorage.setItem('versionReload', this.latestVersionUpdate);\n      this.latestVersionUpdate = null;\n      console.log('Application has been updated, reloading screen.');\n      setTimeout(() => {\n        console.log('Doing the reload...');\n        window.location.reload();\n      }, 1000);\n    }\n  }*/\n\n  private updateCurrentNavigationIndex(url: string): void {\n    if (url.startsWith('/chainperformance')) {\n      this.currentNavigationIndex = 1;\n      return;\n    }\n\n    let index = this.navigationItems.findIndex((item) => url.startsWith(item.route));\n    if (index == -1) {\n      index = 0;\n    }\n    this.currentNavigationIndex = index;\n    //this.checkForReload();\n  }\n\n  public getCurrentNavigationItem(): NavigationItem {\n    return this.navigationItems[this.currentNavigationIndex];\n  }\n\n  public getNavigationItems(): NavigationItem[] {\n    return this.navigationItems;\n  }\n\n  public getLeftItem(): NavigationItem {\n    return this.navigationItems[\n      (this.currentNavigationIndex - 1 + this.navigationItems.length) % 3\n    ];\n  }\n\n  public getRightItem(): NavigationItem {\n    return this.navigationItems[(this.currentNavigationIndex + 1) % 3];\n  }\n\n  public navigate(to: string): void {\n    if (to.startsWith('/performance') && !this.router.url.startsWith('/performance')) {\n      this.swapPerformanceItems();\n    } else if (\n      to.startsWith('/chainperformance') &&\n      !this.router.url.startsWith('/chainperformance')\n    ) {\n      this.swapPerformanceItems();\n    }\n\n    localStorage.setItem('performanceScreen', this.navigationItems[1].route);\n\n    this.router.navigate([to]);\n  }\n\n  private swapPerformanceItems() {\n    const t = this.navigationItems[1];\n    this.navigationItems[1] = this.navigationItems[3];\n    this.navigationItems[3] = t;\n  }\n\n  public navigateTo(to: number): NavigationItem {\n    this.currentNavigationIndex = to;\n    return this.getCurrentNavigationItem();\n  }\n\n  public navigateRight(): NavigationItem {\n    const l = 3;\n    this.currentNavigationIndex = (this.currentNavigationIndex + 1) % l;\n    return this.getCurrentNavigationItem();\n  }\n\n  public navigateLeft(): NavigationItem {\n    const l = 3;\n    this.currentNavigationIndex = (this.currentNavigationIndex - 1 + l) % l;\n    return this.getCurrentNavigationItem();\n  }\n}\nexport class NavigationItem {\n  route!: string;\n}\n",
            "inputsClass": [],
            "outputsClass": [],
            "properties": [
                {
                    "name": "route",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 131
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "extends": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "ProcessEventService",
            "id": "class-ProcessEventService-01d17c2c611d5aef37ae184b63bf3c4571ba39641b78dbb0cbe851a0e090cee60a4870db0ee25ed2a3179ec5b86072de5ea1ec6ac64c13b761da8f27e40e62fd",
            "file": "src/shared/ts/process.event.service.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "interface EventPayload<T> {\n  type: string;\n  data?: T;\n}\n\ninterface EventSender {\n  sendEvent<T>(event: EventPayload<T>): Promise<void>;\n}\n\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nclass ServiceWorkerEventSender implements EventSender {\n  async sendEvent<T>(event: EventPayload<T>): Promise<void> {\n    const clientsList = await (self as unknown as ServiceWorkerGlobalScope).clients.matchAll({\n      type: 'window',\n      includeUncontrolled: true,\n    });\n    for (const client of clientsList) {\n      client.postMessage(event);\n    }\n  }\n}\n\nclass ProcessEventService {\n  constructor(private eventSender: EventSender) {}\n  private async initServices() {\n    const db: IDBDatabase = await this.initIndexedDB();\n    const chartService: ChartService = new ChartService();\n    const rewardDataService: RewardDataService = new RewardDataService(\n      db,\n      chartService,\n      this.eventSender,\n    );\n    const chainPerformanceDataService: ChainPerformanceDataService =\n      new ChainPerformanceDataService(db, this.eventSender);\n    const downloadService: DownloadService<DbInput> = new DownloadService<DbInput>(\n      rs_FullDownloadsBatchSize,\n      rs_InitialNDownloads,\n      rewardDataService,\n      this.eventSender,\n      db,\n    );\n    const downloadPerfService: DownloadService<PerfTx> = new DownloadService<PerfTx>(\n      rs_PerfFullDownloadsBatchSize,\n      rs_PerfInitialNDownloads,\n      chainPerformanceDataService,\n      this.eventSender,\n      db,\n    );\n    return {\n      dataService: rewardDataService,\n      chainPerformanceDataService: chainPerformanceDataService,\n      downloadService,\n      chartService,\n      downloadPerfService: downloadPerfService,\n    };\n  }\n\n  public async processEvent(event: EventPayload<object>) {\n    if (\n      event.type === 'StatisticsScreenLoaded' ||\n      event.type === 'PerformanceScreenLoaded' ||\n      event.type === 'RequestInputsDownload'\n    ) {\n      const {\n        dataService,\n        downloadService,\n        downloadPerfService,\n        chartService,\n        chainPerformanceDataService,\n      }: {\n        dataService: RewardDataService;\n        downloadService: DownloadService<DbInput>;\n        downloadPerfService: DownloadService<PerfTx>;\n        chartService: ChartService;\n        chainPerformanceDataService: ChainPerformanceDataService;\n      } = await this.initServices();\n\n      if (event.type === 'RequestInputsDownload') {\n        console.log(\n          'Rosen service worker received RequestInputsDownload initiating syncing of data by downloading from blockchain, event.data: ' +\n            event.data,\n        );\n\n        try {\n          const addressCharts = await chartService.getAddressCharts(\n            await dataService.getSortedInputs(),\n          );\n\n          this.eventSender.sendEvent({\n            type: 'AddressChartChanged',\n            data: addressCharts,\n          });\n\n          if (event.data) {\n            await downloadService.downloadForAddress(event.data as unknown as string);\n          } else {\n            await downloadService.downloadForAddresses();\n          }\n        } catch (error) {\n          console.error('Error initializing IndexedDB or downloading addresses:', error);\n        }\n      } else if (event.type === 'StatisticsScreenLoaded') {\n        console.log(\n          'Rosen service worker received StatisticsScreenLoaded initiating syncing of data by downloading from blockchain',\n        );\n\n        try {\n          const inputs = await dataService.getSortedInputs();\n          this.eventSender.sendEvent({\n            type: 'InputsChanged',\n            data: inputs,\n          });\n\n          await downloadService.downloadForAddresses();\n        } catch (error) {\n          console.error('Error initializing IndexedDB or downloading addresses:', error);\n        }\n      } else if (event.type === 'PerformanceScreenLoaded') {\n        console.log('Rosen service worker received PerformanceScreenLoaded');\n\n        try {\n          console.log('Downloading perftxs.');\n          const perfTxs = await chainPerformanceDataService.getPerfTxs();\n\n          this.eventSender.sendEvent({\n            type: 'PerfChartChanged',\n            data: perfTxs,\n          });\n\n          downloadPerfService.downloadForAddress(hotWalletAddress);\n        } catch (error) {\n          console.error('Error initializing IndexedDB or downloading addresses:', error);\n        }\n      }\n    }\n  }\n\n  // IndexedDB Initialization\n  private async initIndexedDB(): Promise<IDBDatabase> {\n    return new Promise((resolve, reject) => {\n      let dbName = rs_DbName;\n\n      const request: IDBOpenDBRequest = indexedDB.open(dbName);\n\n      request.onsuccess = (event: Event) => {\n        const db: IDBDatabase = (event.target as IDBOpenDBRequest).result;\n        resolve(db);\n      };\n\n      request.onerror = (event: Event) => {\n        console.error('Error opening IndexedDB:', (event.target as IDBOpenDBRequest).error);\n        reject((event.target as IDBOpenDBRequest).error);\n      };\n    });\n  }\n}\n\n/* eslint-disable @typescript-eslint/no-explicit-any */\nif (typeof window !== 'undefined') {\n  (window as any).ProcessEventService = ProcessEventService;\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "eventSender",
                        "type": "EventSender",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 23,
                "jsdoctags": [
                    {
                        "name": "eventSender",
                        "type": "EventSender",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "inputsClass": [],
            "outputsClass": [],
            "properties": [],
            "methods": [
                {
                    "name": "initIndexedDB",
                    "args": [],
                    "optional": false,
                    "returnType": "Promise<IDBDatabase>",
                    "typeParameters": [],
                    "line": 139,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123,
                        134
                    ]
                },
                {
                    "name": "initServices",
                    "args": [],
                    "optional": false,
                    "returnType": "unknown",
                    "typeParameters": [],
                    "line": 25,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123,
                        134
                    ]
                },
                {
                    "name": "processEvent",
                    "args": [
                        {
                            "name": "event",
                            "type": "EventPayload<object>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 58,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        125,
                        134
                    ],
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "EventPayload<object>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "indexSignatures": [],
            "extends": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "RewardDataService",
            "id": "class-RewardDataService-769f5d969406ad8b10186b801bc3650d6304f14193bdb770958ed1a4e9e847b733b8c14fa0991f8815f2beaacf24a4a8f65b06bcf1de6bec69dfea5659bff9c1",
            "file": "src/shared/ts/reward.data.service.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "class RewardDataService extends DataService<DbInput> {\n  override async getExistingData(\n    transaction: TransactionItem,\n    address: string,\n  ): Promise<DbInput | null> {\n    for (const input of transaction.inputs) {\n      if (input.boxId && getChainType(input.address)) {\n        const data = await this.getDataByBoxId(input.boxId, address, this.db);\n        if (data) {\n          return data;\n        }\n      }\n    }\n\n    return null;\n  }\n  constructor(\n    public override db: IDBDatabase,\n    private chartService: ChartService,\n    private eventSender: EventSender,\n  ) {\n    super(db);\n  }\n\n  getDataType(): string {\n    return 'reward';\n  }\n\n  private async getWatcherInputs(): Promise<DbInput[]> {\n    const inputsPromise = this.getData<DbInput>(rs_InputsStoreName);\n\n    console.log('Retrieving watcher inputs and such');\n\n    try {\n      const inputs = await inputsPromise;\n\n      const filteredInputs = inputs.filter(\n        (i: DbInput) => i.chainType != null || getChainType(i.address) != null,\n      );\n\n      filteredInputs.forEach((input: DbInput) => {\n        input.assets = input.assets\n          .filter((asset: Asset) => asset.name === 'RSN' || asset.name === 'eRSN')\n          .map((asset_1: Asset) => {\n            return asset_1;\n          });\n      });\n      filteredInputs.sort((a, b) => a.inputDate.getTime() - b.inputDate.getTime());\n\n      return await new Promise<DbInput[]>((resolve) => {\n        resolve(filteredInputs);\n      });\n    } catch (error) {\n      console.error(error);\n      return [];\n    }\n  }\n  /*\n  async compressInputs(): Promise<void> {\n    const existingInputs = await this.getWatcherInputs(this.db);\n    const transaction: IDBTransaction = this.db.transaction([rs_InputsStoreName], 'readwrite');\n    const objectStore: IDBObjectStore = transaction.objectStore(rs_InputsStoreName);\n    objectStore.clear();\n\n    const addresses = Array.from(new Set(existingInputs.map((e) => e.outputAddress)));\n\n    addresses.forEach((a) => {\n      this.compressChainInputs(\n        existingInputs.filter((e) => e.outputAddress == a),\n        objectStore,\n      );\n    });\n  }\n\n  private compressChainInputs(existingInputs: DbInput[], objectStore: IDBObjectStore) {\n    const compressedInputs = new Map<number, DbInput>();\n\n    let notCompressabeInputs = [];\n\n    if (existingInputs.length > rs_InitialNDownloads) {\n      notCompressabeInputs = existingInputs.slice(\n        existingInputs.length - rs_InitialNDownloads,\n        existingInputs.length,\n      );\n      existingInputs = existingInputs.slice(0, existingInputs.length - rs_InitialNDownloads);\n    } else {\n      existingInputs.forEach((dbInput: DbInput) => {\n        objectStore.put(dbInput);\n      });\n      return;\n    }\n\n    existingInputs.forEach((existingInput: DbInput) => {\n      const currentDate = new Date();\n      const twoMonthsAgo = new Date();\n      twoMonthsAgo.setMonth(currentDate.getMonth() - 2);\n\n      const input = {\n        outputAddress: existingInput.outputAddress,\n        inputDate: existingInput.inputDate,\n        boxId: existingInput.boxId,\n        address: existingInput.address,\n        chainType: existingInput.chainType ?? getChainType(existingInput.address),\n      } as DbInput;\n\n      if (input.inputDate >= twoMonthsAgo) {\n        input.assets = existingInput.assets;\n        objectStore.put(input);\n      } else {\n        input.inputDate = this.convertDbInputDateForCompression(input.inputDate);\n\n        let compressedInput = compressedInputs.get(input.inputDate.getTime());\n\n        if (!compressedInput) {\n          compressedInput = input;\n        }\n\n        if (!compressedInput.assets) {\n          compressedInput.assets = [];\n        }\n\n        existingInput.assets.forEach((a) => {\n          if (compressedInput.assets.length == 0) {\n            compressedInput.assets.push({\n              amount: a.amount,\n              decimals: a.decimals,\n              tokenId: a.tokenId,\n              quantity: a.quantity,\n              name: a.name,\n            } as Asset);\n          } else {\n            compressedInput.assets[0].amount += a.amount;\n          }\n        });\n\n        compressedInputs.set(input.inputDate.getTime(), compressedInput);\n      }\n    });\n\n    compressedInputs.forEach((dbInput: DbInput) => {\n      objectStore.put(dbInput);\n    });\n\n    notCompressabeInputs.forEach((dbInput: DbInput) => {\n      objectStore.put(dbInput);\n    });\n  }\n\n  convertDbInputDateForCompression(dt: Date) {\n    const currentDate = new Date();\n    const twoMonthsAgo = new Date();\n    twoMonthsAgo.setMonth(currentDate.getMonth() - 2);\n\n    if (dt < twoMonthsAgo) {\n      const day = dt.getDate() - dt.getDay();\n      dt.setDate(day);\n    }\n    dt.setHours(0, 0, 0, 0);\n    return dt;\n  }*/\n\n  async addData(address: string, transactions: TransactionItem[], db: IDBDatabase): Promise<void> {\n    return new Promise((resolve, reject) => {\n      // Create a temporary array to hold DbInput items before bulk insertion\n      const tempData: DbInput[] = [];\n\n      // Populate tempData with processed inputs\n      transactions.forEach((item: TransactionItem) => {\n        item.inputs.forEach((input: Input) => {\n          input.outputAddress = address;\n          input.inputDate = new Date(item.timestamp);\n\n          input.assets = input.assets.filter((a) => a.name === 'eRSN' || a.name === 'RSN');\n          input.assets.forEach((a) => {\n            a.tokenId = null;\n          });\n\n          const dbInput: DbInput = {\n            outputAddress: input.outputAddress,\n            inputDate: input.inputDate,\n            boxId: input.boxId,\n            assets: input.assets || [],\n            chainType: getChainType(input.address) as ChainType,\n          };\n\n          if (dbInput.chainType && dbInput.assets.length > 0) {\n            tempData.push(dbInput);\n          }\n        });\n      });\n\n      const transaction: IDBTransaction = db.transaction([rs_InputsStoreName], 'readwrite');\n      const objectStore: IDBObjectStore = transaction.objectStore(rs_InputsStoreName);\n\n      const putPromises = tempData.map((dbInput: DbInput) => {\n        return new Promise<void>((putResolve, putReject) => {\n          const request: IDBRequest = objectStore.put(dbInput);\n          request.onsuccess = () => putResolve();\n          request.onerror = (event: Event) => putReject((event.target as IDBRequest).error);\n        });\n      });\n\n      Promise.all(putPromises)\n        .then(async () => {\n          const inputs = await this.getSortedInputs();\n\n          this.eventSender.sendEvent({\n            type: 'InputsChanged',\n            data: inputs,\n          });\n\n          this.eventSender.sendEvent({\n            type: 'AddressChartChanged',\n            data: await this.chartService.getAddressCharts(inputs),\n          });\n\n          resolve();\n        })\n        .catch(reject);\n    });\n  }\n\n  // Get Data by BoxId from IndexedDB\n  private async getDataByBoxId(\n    boxId: string,\n    addressId: string,\n    db: IDBDatabase,\n  ): Promise<DbInput | null> {\n    return new Promise((resolve, reject) => {\n      const transaction: IDBTransaction = db.transaction([rs_InputsStoreName], 'readonly');\n      const objectStore: IDBObjectStore = transaction.objectStore(rs_InputsStoreName);\n      const request: IDBRequest = objectStore.get([\n        boxId,\n        addressId,\n      ]); /* ?? objectStore.get([boxId.slice(0, 12), addressId])*/\n\n      request.onsuccess = () => {\n        const result: DbInput | undefined = request.result as DbInput | undefined;\n        if (!result || result.outputAddress !== addressId) {\n          resolve(null);\n        } else {\n          resolve(result);\n        }\n      };\n\n      request.onerror = (event: Event) => reject((event.target as IDBRequest).error);\n    });\n  }\n\n  async getSortedInputs(): Promise<Input[]> {\n    const inputsPromise = await this.getWatcherInputs();\n    let amount = 0;\n    const sortedInputs: Input[] = [];\n    console.log('start retrieving chart from database');\n    try {\n      const inputs = await inputsPromise;\n\n      inputs.forEach((input: DbInput) => {\n        input.assets.forEach((asset: Asset) => {\n          amount += asset.amount;\n          sortedInputs.push({\n            inputDate: input.inputDate,\n            address: input.address ?? '',\n            assets: input.assets,\n            outputAddress: input.outputAddress,\n            boxId: input.boxId,\n            accumulatedAmount: amount,\n            amount: asset.amount / Math.pow(10, asset.decimals),\n            chainType: (input.chainType as ChainType) ?? getChainType(input.address),\n          });\n        });\n      });\n      console.log('done retrieving chart from database ' + inputs.length + ' inputs');\n      return await new Promise<Input[]>((resolve) => {\n        resolve(sortedInputs);\n      });\n    } catch (error) {\n      console.error(error);\n      return sortedInputs;\n    }\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "db",
                        "type": "IDBDatabase",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "chartService",
                        "type": "ChartService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "eventSender",
                        "type": "EventSender",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 17,
                "jsdoctags": [
                    {
                        "name": "db",
                        "type": "IDBDatabase",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "chartService",
                        "type": "ChartService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "eventSender",
                        "type": "EventSender",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "inputsClass": [],
            "outputsClass": [],
            "properties": [
                {
                    "name": "db",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IDBDatabase",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 19,
                    "modifierKind": [
                        125,
                        164
                    ],
                    "inheritance": {
                        "file": "DataService"
                    }
                }
            ],
            "methods": [
                {
                    "name": "addData",
                    "args": [
                        {
                            "name": "address",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "transactions",
                            "type": "TransactionItem[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "db",
                            "type": "IDBDatabase",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<void>",
                    "typeParameters": [],
                    "line": 163,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        134
                    ],
                    "jsdoctags": [
                        {
                            "name": "address",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "transactions",
                            "type": "TransactionItem[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "db",
                            "type": "IDBDatabase",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "DataService"
                    }
                },
                {
                    "name": "getDataByBoxId",
                    "args": [
                        {
                            "name": "boxId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "addressId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "db",
                            "type": "IDBDatabase",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<DbInput | null>",
                    "typeParameters": [],
                    "line": 225,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123,
                        134
                    ],
                    "jsdoctags": [
                        {
                            "name": "boxId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "addressId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "db",
                            "type": "IDBDatabase",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getDataType",
                    "args": [],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 26,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "inheritance": {
                        "file": "DataService"
                    }
                },
                {
                    "name": "getExistingData",
                    "args": [
                        {
                            "name": "transaction",
                            "type": "TransactionItem",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "address",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<DbInput | null>",
                    "typeParameters": [],
                    "line": 3,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        164,
                        134
                    ],
                    "jsdoctags": [
                        {
                            "name": "transaction",
                            "type": "TransactionItem",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "address",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "DataService"
                    }
                },
                {
                    "name": "getSortedInputs",
                    "args": [],
                    "optional": false,
                    "returnType": "Promise<Input[]>",
                    "typeParameters": [],
                    "line": 251,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        134
                    ]
                },
                {
                    "name": "getWatcherInputs",
                    "args": [],
                    "optional": false,
                    "returnType": "Promise<DbInput[]>",
                    "typeParameters": [],
                    "line": 30,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123,
                        134
                    ]
                },
                {
                    "name": "getData",
                    "args": [
                        {
                            "name": "storeName",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<T[]>",
                    "typeParameters": [
                        "T"
                    ],
                    "line": 50,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        134
                    ],
                    "jsdoctags": [
                        {
                            "name": "storeName",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "DataService"
                    }
                },
                {
                    "name": "getMaxDownloadDateDifference",
                    "args": [],
                    "optional": false,
                    "returnType": "number",
                    "typeParameters": [],
                    "line": 44,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "inheritance": {
                        "file": "DataService"
                    }
                }
            ],
            "indexSignatures": [],
            "extends": [
                "DataService"
            ],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "ServiceWorkerEventSender",
            "id": "class-ServiceWorkerEventSender-01d17c2c611d5aef37ae184b63bf3c4571ba39641b78dbb0cbe851a0e090cee60a4870db0ee25ed2a3179ec5b86072de5ea1ec6ac64c13b761da8f27e40e62fd",
            "file": "src/shared/ts/process.event.service.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "interface EventPayload<T> {\n  type: string;\n  data?: T;\n}\n\ninterface EventSender {\n  sendEvent<T>(event: EventPayload<T>): Promise<void>;\n}\n\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nclass ServiceWorkerEventSender implements EventSender {\n  async sendEvent<T>(event: EventPayload<T>): Promise<void> {\n    const clientsList = await (self as unknown as ServiceWorkerGlobalScope).clients.matchAll({\n      type: 'window',\n      includeUncontrolled: true,\n    });\n    for (const client of clientsList) {\n      client.postMessage(event);\n    }\n  }\n}\n\nclass ProcessEventService {\n  constructor(private eventSender: EventSender) {}\n  private async initServices() {\n    const db: IDBDatabase = await this.initIndexedDB();\n    const chartService: ChartService = new ChartService();\n    const rewardDataService: RewardDataService = new RewardDataService(\n      db,\n      chartService,\n      this.eventSender,\n    );\n    const chainPerformanceDataService: ChainPerformanceDataService =\n      new ChainPerformanceDataService(db, this.eventSender);\n    const downloadService: DownloadService<DbInput> = new DownloadService<DbInput>(\n      rs_FullDownloadsBatchSize,\n      rs_InitialNDownloads,\n      rewardDataService,\n      this.eventSender,\n      db,\n    );\n    const downloadPerfService: DownloadService<PerfTx> = new DownloadService<PerfTx>(\n      rs_PerfFullDownloadsBatchSize,\n      rs_PerfInitialNDownloads,\n      chainPerformanceDataService,\n      this.eventSender,\n      db,\n    );\n    return {\n      dataService: rewardDataService,\n      chainPerformanceDataService: chainPerformanceDataService,\n      downloadService,\n      chartService,\n      downloadPerfService: downloadPerfService,\n    };\n  }\n\n  public async processEvent(event: EventPayload<object>) {\n    if (\n      event.type === 'StatisticsScreenLoaded' ||\n      event.type === 'PerformanceScreenLoaded' ||\n      event.type === 'RequestInputsDownload'\n    ) {\n      const {\n        dataService,\n        downloadService,\n        downloadPerfService,\n        chartService,\n        chainPerformanceDataService,\n      }: {\n        dataService: RewardDataService;\n        downloadService: DownloadService<DbInput>;\n        downloadPerfService: DownloadService<PerfTx>;\n        chartService: ChartService;\n        chainPerformanceDataService: ChainPerformanceDataService;\n      } = await this.initServices();\n\n      if (event.type === 'RequestInputsDownload') {\n        console.log(\n          'Rosen service worker received RequestInputsDownload initiating syncing of data by downloading from blockchain, event.data: ' +\n            event.data,\n        );\n\n        try {\n          const addressCharts = await chartService.getAddressCharts(\n            await dataService.getSortedInputs(),\n          );\n\n          this.eventSender.sendEvent({\n            type: 'AddressChartChanged',\n            data: addressCharts,\n          });\n\n          if (event.data) {\n            await downloadService.downloadForAddress(event.data as unknown as string);\n          } else {\n            await downloadService.downloadForAddresses();\n          }\n        } catch (error) {\n          console.error('Error initializing IndexedDB or downloading addresses:', error);\n        }\n      } else if (event.type === 'StatisticsScreenLoaded') {\n        console.log(\n          'Rosen service worker received StatisticsScreenLoaded initiating syncing of data by downloading from blockchain',\n        );\n\n        try {\n          const inputs = await dataService.getSortedInputs();\n          this.eventSender.sendEvent({\n            type: 'InputsChanged',\n            data: inputs,\n          });\n\n          await downloadService.downloadForAddresses();\n        } catch (error) {\n          console.error('Error initializing IndexedDB or downloading addresses:', error);\n        }\n      } else if (event.type === 'PerformanceScreenLoaded') {\n        console.log('Rosen service worker received PerformanceScreenLoaded');\n\n        try {\n          console.log('Downloading perftxs.');\n          const perfTxs = await chainPerformanceDataService.getPerfTxs();\n\n          this.eventSender.sendEvent({\n            type: 'PerfChartChanged',\n            data: perfTxs,\n          });\n\n          downloadPerfService.downloadForAddress(hotWalletAddress);\n        } catch (error) {\n          console.error('Error initializing IndexedDB or downloading addresses:', error);\n        }\n      }\n    }\n  }\n\n  // IndexedDB Initialization\n  private async initIndexedDB(): Promise<IDBDatabase> {\n    return new Promise((resolve, reject) => {\n      let dbName = rs_DbName;\n\n      const request: IDBOpenDBRequest = indexedDB.open(dbName);\n\n      request.onsuccess = (event: Event) => {\n        const db: IDBDatabase = (event.target as IDBOpenDBRequest).result;\n        resolve(db);\n      };\n\n      request.onerror = (event: Event) => {\n        console.error('Error opening IndexedDB:', (event.target as IDBOpenDBRequest).error);\n        reject((event.target as IDBOpenDBRequest).error);\n      };\n    });\n  }\n}\n\n/* eslint-disable @typescript-eslint/no-explicit-any */\nif (typeof window !== 'undefined') {\n  (window as any).ProcessEventService = ProcessEventService;\n}\n",
            "inputsClass": [],
            "outputsClass": [],
            "properties": [],
            "methods": [
                {
                    "name": "sendEvent",
                    "args": [
                        {
                            "name": "event",
                            "type": "EventPayload<T>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<void>",
                    "typeParameters": [
                        "T"
                    ],
                    "line": 12,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        134
                    ],
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "EventPayload<T>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "indexSignatures": [],
            "extends": [],
            "hostBindings": [],
            "hostListeners": [],
            "implements": [
                "EventSender"
            ]
        },
        {
            "name": "Token",
            "id": "class-Token-2b63695bc11b97b2df486d9edc82f8dd34cc39e8d85255f50292c6a6bd4d872bae9347967ef4a57c5adb6eeaea9f60fc84f0169f39b3b7e67721816f84e1233f",
            "file": "src/service/ts/models/token.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "export class Token {\n  constructor(\n    public tokenId: string,\n    public amount: number,\n    public decimals: number,\n    public name: string,\n    public tokenType: string,\n  ) {}\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "tokenId",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "amount",
                        "type": "number",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "decimals",
                        "type": "number",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "name",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "tokenType",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 1,
                "jsdoctags": [
                    {
                        "name": "tokenId",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "amount",
                        "type": "number",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "decimals",
                        "type": "number",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "name",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "tokenType",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "inputsClass": [],
            "outputsClass": [],
            "properties": [
                {
                    "name": "amount",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 4,
                    "modifierKind": [
                        125
                    ]
                },
                {
                    "name": "decimals",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 5,
                    "modifierKind": [
                        125
                    ]
                },
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 6,
                    "modifierKind": [
                        125
                    ]
                },
                {
                    "name": "tokenId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 3,
                    "modifierKind": [
                        125
                    ]
                },
                {
                    "name": "tokenType",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 7,
                    "modifierKind": [
                        125
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "extends": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "Transaction",
            "id": "class-Transaction-6f2e858c37f18e9734d38dec2d5b417a1359df4f84e1b048cf128c48c3ea73f15542f071f1cdb4608aece435294441dff4fc4e409fa54b53c61543de10ab6650",
            "file": "src/service/ts/models/transaction.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import type { Input } from './input';\n\nexport class Transaction {\n  constructor(\n    public timestamp: number,\n    public inputs: Input[],\n  ) {}\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "timestamp",
                        "type": "number",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "inputs",
                        "type": "Input[]",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 3,
                "jsdoctags": [
                    {
                        "name": "timestamp",
                        "type": "number",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "inputs",
                        "type": "Input[]",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "inputsClass": [],
            "outputsClass": [],
            "properties": [
                {
                    "name": "inputs",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Input[]",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 6,
                    "modifierKind": [
                        125
                    ]
                },
                {
                    "name": "timestamp",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 5,
                    "modifierKind": [
                        125
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "extends": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "WatcherInfo",
            "id": "class-WatcherInfo-9eec6bb0ceaa1638c7fd9454ce40c3c4d74157ba3f8ce737b25b5492d2c89c26e530d2f8e96ff3c0bfc69ac25f524ac7251b9a8f32502676ab178d33b2c2b920",
            "file": "src/service/ts/models/watcher.info.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import type { Token } from './token';\n\nexport class WatcherInfo {\n  constructor(public tokens: Token[]) {}\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "tokens",
                        "type": "Token[]",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 3,
                "jsdoctags": [
                    {
                        "name": "tokens",
                        "type": "Token[]",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "inputsClass": [],
            "outputsClass": [],
            "properties": [
                {
                    "name": "tokens",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Token[]",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 4,
                    "modifierKind": [
                        125
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "extends": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "WatchersAmounts",
            "id": "class-WatchersAmounts-8b3c3bb256f418d73cd7c352dbf0db04b83edd3d9e121b462fe7afde879f5412e6cd696d6f0c3d2a2697d8bd8b9034dafcb1e1ddbdc4fa0d3c88641a8a62ff45",
            "file": "src/app/service/watchers.data.service.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { Injectable, Signal, signal } from '@angular/core';\nimport { map } from 'rxjs/operators';\nimport { HttpDownloadService } from './http.download.service';\nimport { Observable } from 'rxjs';\nimport { ChainType } from '../../service/ts/models/chaintype';\nimport { WatcherInfo } from '../../service/ts/models/watcher.info';\nimport { Token } from '../../service/ts/models/token';\nimport { PriceService } from './price.service';\n\nexport function createChainNumber(): Record<ChainType, number | undefined> {\n  return Object.fromEntries(Object.values(ChainType).map((key) => [key, undefined])) as Record<\n    ChainType,\n    number | undefined\n  >;\n}\n\nexport class WatchersAmounts {\n  ergCollateral: number | undefined;\n  permitValue: number | undefined;\n  rsnCollateral: number | undefined;\n  totalLocked: number | undefined;\n  totalLockedERG: number | undefined;\n  totalLockedRSN: number | undefined;\n  watcherValue: number | undefined;\n}\n\nexport class WatchersStats {\n  activePermitCount = createChainNumber();\n  bulkPermitCount = createChainNumber();\n  chainLockedERG = createChainNumber();\n  chainLockedRSN = createChainNumber();\n  chainPermitCount = createChainNumber();\n  chainWatcherCount = createChainNumber();\n  permitCost = rs_PermitCost;\n  totalActivePermitCount: number | undefined;\n  totalLockedERG: number | undefined;\n  totalLockedRSN: number | undefined;\n  totalPermitCount: number | undefined;\n  totalWatcherCount: number | undefined;\n  triggerPermitCount = createChainNumber();\n  watcherCollateralERG = rs_WatcherCollateralERG;\n  watcherCollateralRSN = rs_WatcherCollateralRSN;\n\n  watchersAmountsPerCurrency: Record<Currency, WatchersAmounts> = Object.fromEntries(\n    Object.values(Currency).map((currency) => [currency, new WatchersAmounts()]),\n  ) as Record<Currency, WatchersAmounts>;\n}\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class WatchersDataService {\n  readonly watcherUrl =\n    'https://' +\n    rs_ErgoExplorerHost +\n    '/api/v1/addresses/ChTbcUHgBNqNMVjzV1dvCb2UDrX9nh6rGGcURCFEYXuH5ykKh7Ea3FvpFhHb9AnxXJkgAZ6WASN7Rdn7VMgkFaqP5Z5RWp84cDTmsZkhYrgAVGN7mjeLs8UxqUvRi2ArZbm35Xqk8Y88Uq2MJzmDVHLHzCYRGym8XPxFM4YEVxqzHSKYYDvaMLgKvoskFXKrvceAqEiyih26hjpekCmefiF1VmrPwwShrYYxgHLFCZdigw5JWKV4DmewuR1FH3oNtGoFok859SXeuRbpQfrTjHhGVfDsbXEo3GYP2imAh1APKyLEsG9LcE5WZnJV8eseQnYA8sACLDKZ8Tbpp9KUE7QZNFpnwGnkYx7eybbrCeFDFjTGpsBzaS6fRKrWj2J4Wy3TTyTU1F8iMCrHBF8inZPw9Kg9YEZuJMdXDFNtuaK15u86mF2s2Z5B1vdL5MtZfWThFLnixKds8ABEmGbe8n75Dym5Wv3pkEXQ6XPpaMjUxHfRJB3EfcoFM5nsZHWSTfbFBcHxSRnEiiU67cgJsBUpQn7FvEvqNLiKM4fL3yyykMtQ6RjAS8rhycszphvQa5qFrDHie4vPuTq8/balance/confirmed';\n\n  readonly rsnToken = '8b08cdd5449a9592a9e79711d7d79249d7a03c535d17efaee83e216e80a44c4b';\n  readonly watchersStatsSignal = signal<WatchersStats>(new WatchersStats());\n  readonly watchersStats = new WatchersStats();\n\n  busyCounter = 0;\n\n  constructor(\n    private downloadService: HttpDownloadService,\n    private priceService: PriceService,\n  ) {}\n\n  getWatcherStats(): Signal<WatchersStats> {\n    return this.watchersStatsSignal;\n  }\n\n  getWatchersInfo(): Observable<WatcherInfo> {\n    const result = this.downloadService.downloadStream<WatcherInfo>(this.watcherUrl);\n\n    return result;\n  }\n\n  getPermitsInfo(chainType: ChainType): Observable<Token | undefined> {\n    const address = permitAddresses[chainType];\n    return this.downloadPermitInfo(address, this.rsnToken, null);\n  }\n\n  private updateTotal(map: Record<ChainType, number | undefined>): number | undefined {\n    return Object.values(map).reduce((acc, val) => (acc ?? 0) + (val ?? 0), 0);\n  }\n\n  private convertCurrencies(): void {\n    Object.values(Currency).forEach((currency) => {\n      const conversions = [\n        {\n          amount: rs_WatcherCollateralRSN,\n          from: 'RSN',\n          callback: (c: number) =>\n            (this.watchersStats.watchersAmountsPerCurrency[currency].rsnCollateral = c),\n        },\n        {\n          amount: rs_WatcherCollateralERG,\n          from: 'ERG',\n          callback: (c: number) =>\n            (this.watchersStats.watchersAmountsPerCurrency[currency].ergCollateral = c),\n        },\n        {\n          amount: rs_PermitCost,\n          from: 'RSN',\n          callback: (c: number) =>\n            (this.watchersStats.watchersAmountsPerCurrency[currency].permitValue = c),\n        },\n        {\n          amount: this.watchersStats.totalLockedERG ?? 0,\n          from: 'ERG',\n          callback: (l: number) =>\n            (this.watchersStats.watchersAmountsPerCurrency[currency].totalLockedERG = l),\n        },\n        {\n          amount:\n            (this.watchersStats.totalLockedRSN ?? 0) +\n            rs_PermitCost * (this.watchersStats.totalPermitCount ?? 0),\n          from: 'RSN',\n          callback: (l: number) =>\n            (this.watchersStats.watchersAmountsPerCurrency[currency].totalLockedRSN = l),\n        },\n      ];\n\n      conversions.forEach(({ amount, from, callback }) => {\n        this.priceService.convert(amount, from, currency ?? '').subscribe(callback);\n      });\n    });\n  }\n\n  private updateTotalLocked(): void {\n    Object.values(Currency).forEach((currency) => {\n      this.watchersStats.watchersAmountsPerCurrency[currency].totalLocked =\n        (this.watchersStats.watchersAmountsPerCurrency[currency].totalLockedERG ?? 0) +\n        (this.watchersStats.watchersAmountsPerCurrency[currency].totalLockedRSN ?? 0);\n    });\n  }\n  private getValue(\n    map: Record<ChainType, number | undefined>,\n    chainType: ChainType,\n    multiplier: number,\n  ): number {\n    return (map[chainType] ?? 0) * multiplier;\n  }\n\n  setLockedAmounts(chainType: ChainType): void {\n    this.watchersStats.chainLockedRSN[chainType] =\n      this.getValue(this.watchersStats.chainPermitCount, chainType, rs_PermitCost) +\n      this.getValue(this.watchersStats.chainWatcherCount, chainType, rs_WatcherCollateralRSN);\n\n    this.watchersStats.chainLockedERG[chainType] = this.getValue(\n      this.watchersStats.chainWatcherCount,\n      chainType,\n      rs_WatcherCollateralERG,\n    );\n\n    Object.values(ChainType).forEach((c) => {\n      this.watchersStats.activePermitCount[c] =\n        (this.watchersStats.bulkPermitCount[c] ?? 0) +\n        (this.watchersStats.triggerPermitCount[c] ?? 0);\n    });\n\n    this.watchersStats.totalWatcherCount = this.updateTotal(this.watchersStats.chainWatcherCount);\n    this.watchersStats.totalPermitCount = this.updateTotal(this.watchersStats.chainPermitCount);\n    this.watchersStats.totalActivePermitCount = this.updateTotal(\n      this.watchersStats.activePermitCount,\n    );\n    this.watchersStats.totalLockedRSN = this.updateTotal(this.watchersStats.chainLockedRSN);\n    this.watchersStats.totalLockedERG = this.updateTotal(this.watchersStats.chainLockedERG);\n\n    this.currencyUpdate();\n  }\n\n  currencyUpdate(): void {\n    Object.values(Currency).forEach((currency) => {\n      this.watchersStats.watchersAmountsPerCurrency[currency].watcherValue = 0;\n      this.watchersStats.watchersAmountsPerCurrency[currency].permitValue = 0;\n    });\n\n    this.convertCurrencies();\n    this.updateTotalLocked();\n\n    Object.values(Currency).forEach((currency) => {\n      this.watchersStats.watchersAmountsPerCurrency[currency].watcherValue =\n        (this.watchersStats.watchersAmountsPerCurrency[currency].rsnCollateral ?? 0) +\n        (this.watchersStats.watchersAmountsPerCurrency[currency].ergCollateral ?? 0);\n    });\n\n    const newStats = JSON.stringify(this.watchersStats);\n    if (JSON.stringify(this.watchersStatsSignal()) !== newStats) {\n      console.log('Settings watchers stats signal');\n      this.watchersStatsSignal.set(JSON.parse(newStats));\n    }\n  }\n\n  private downloadPermitInfo(address: string, tokenId: string | null, tokenName: string | null) {\n    const permitsUrl = `https://${rs_ErgoExplorerHost}/api/v1/addresses/${address}/balance/confirmed`;\n\n    return this.downloadService\n      .downloadStream<WatcherInfo>(permitsUrl)\n      .pipe(\n        map((data: { tokens: Token[] }) => {\n          if (data.tokens) {\n            const tokenData = data.tokens.find(\n              (token: Token) =>\n                (tokenId && token.tokenId === tokenId) || (tokenName && token.name === tokenName),\n            );\n            console.log(permitsUrl);\n            if (tokenData) {\n              tokenData.amount /= rs_PermitCost * Math.pow(10, tokenData.decimals);\n              tokenData.amount = Math.floor(tokenData.amount);\n            }\n          }\n          return data;\n        }),\n      )\n      .pipe(\n        map((result) => {\n          return result.tokens.find(\n            (token: Token) =>\n              (tokenId && token.tokenId === tokenId) || (tokenName && token.name === tokenName),\n          );\n        }),\n      );\n  }\n\n  getTriggerPermitsInfo(chainType: ChainType): Observable<Token | undefined> {\n    const address = permitTriggerAddresses[chainType];\n    return this.downloadPermitInfo(address, null, 'rspv2' + chainType + 'RWT');\n  }\n\n  getBulkPermitsInfo(chainType: ChainType): Observable<Token | undefined> {\n    const address = permitBulkAddresses[chainType];\n    return this.downloadPermitInfo(address, null, 'rspv2' + chainType + 'RWT');\n  }\n\n  download() {\n    Object.values(ChainType).forEach((c) => {\n      this.getTriggerPermitsInfo(c)\n        .pipe(map((permitsInfo) => permitsInfo?.amount))\n        .subscribe((amount) => {\n          this.watchersStats.triggerPermitCount[c] = amount;\n          this.setLockedAmounts(c);\n        });\n\n      this.getBulkPermitsInfo(c)\n        .pipe(map((permitsInfo) => permitsInfo?.amount))\n        .subscribe((amount) => {\n          this.watchersStats.bulkPermitCount[c] = amount;\n          this.setLockedAmounts(c);\n        });\n    });\n\n    const watcherInfo$ = this.getWatchersInfo();\n\n    watcherInfo$\n      .pipe(\n        map((watcherInfo) => {\n          Object.values(ChainType).forEach((c) => {\n            const amount =\n              watcherInfo.tokens.find((token: Token) => token.name === 'rspv2' + c + 'AWC')\n                ?.amount ?? 0;\n            this.watchersStats.chainWatcherCount[c] = amount;\n            this.setLockedAmounts(c);\n          });\n        }),\n      )\n      .subscribe();\n\n    Object.values(ChainType).forEach((c) => {\n      this.getPermitsInfo(c)\n        .pipe(map((permitsInfo) => permitsInfo?.amount))\n        .subscribe((amount) => {\n          this.watchersStats.chainPermitCount[c] = amount;\n          this.setLockedAmounts(c);\n        });\n    });\n  }\n}\n",
            "inputsClass": [],
            "outputsClass": [],
            "properties": [
                {
                    "name": "ergCollateral",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number | undefined",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 18
                },
                {
                    "name": "permitValue",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number | undefined",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 19
                },
                {
                    "name": "rsnCollateral",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number | undefined",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 20
                },
                {
                    "name": "totalLocked",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number | undefined",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 21
                },
                {
                    "name": "totalLockedERG",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number | undefined",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 22
                },
                {
                    "name": "totalLockedRSN",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number | undefined",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 23
                },
                {
                    "name": "watcherValue",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number | undefined",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 24
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "extends": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "WatchersStats",
            "id": "class-WatchersStats-8b3c3bb256f418d73cd7c352dbf0db04b83edd3d9e121b462fe7afde879f5412e6cd696d6f0c3d2a2697d8bd8b9034dafcb1e1ddbdc4fa0d3c88641a8a62ff45",
            "file": "src/app/service/watchers.data.service.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { Injectable, Signal, signal } from '@angular/core';\nimport { map } from 'rxjs/operators';\nimport { HttpDownloadService } from './http.download.service';\nimport { Observable } from 'rxjs';\nimport { ChainType } from '../../service/ts/models/chaintype';\nimport { WatcherInfo } from '../../service/ts/models/watcher.info';\nimport { Token } from '../../service/ts/models/token';\nimport { PriceService } from './price.service';\n\nexport function createChainNumber(): Record<ChainType, number | undefined> {\n  return Object.fromEntries(Object.values(ChainType).map((key) => [key, undefined])) as Record<\n    ChainType,\n    number | undefined\n  >;\n}\n\nexport class WatchersAmounts {\n  ergCollateral: number | undefined;\n  permitValue: number | undefined;\n  rsnCollateral: number | undefined;\n  totalLocked: number | undefined;\n  totalLockedERG: number | undefined;\n  totalLockedRSN: number | undefined;\n  watcherValue: number | undefined;\n}\n\nexport class WatchersStats {\n  activePermitCount = createChainNumber();\n  bulkPermitCount = createChainNumber();\n  chainLockedERG = createChainNumber();\n  chainLockedRSN = createChainNumber();\n  chainPermitCount = createChainNumber();\n  chainWatcherCount = createChainNumber();\n  permitCost = rs_PermitCost;\n  totalActivePermitCount: number | undefined;\n  totalLockedERG: number | undefined;\n  totalLockedRSN: number | undefined;\n  totalPermitCount: number | undefined;\n  totalWatcherCount: number | undefined;\n  triggerPermitCount = createChainNumber();\n  watcherCollateralERG = rs_WatcherCollateralERG;\n  watcherCollateralRSN = rs_WatcherCollateralRSN;\n\n  watchersAmountsPerCurrency: Record<Currency, WatchersAmounts> = Object.fromEntries(\n    Object.values(Currency).map((currency) => [currency, new WatchersAmounts()]),\n  ) as Record<Currency, WatchersAmounts>;\n}\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class WatchersDataService {\n  readonly watcherUrl =\n    'https://' +\n    rs_ErgoExplorerHost +\n    '/api/v1/addresses/ChTbcUHgBNqNMVjzV1dvCb2UDrX9nh6rGGcURCFEYXuH5ykKh7Ea3FvpFhHb9AnxXJkgAZ6WASN7Rdn7VMgkFaqP5Z5RWp84cDTmsZkhYrgAVGN7mjeLs8UxqUvRi2ArZbm35Xqk8Y88Uq2MJzmDVHLHzCYRGym8XPxFM4YEVxqzHSKYYDvaMLgKvoskFXKrvceAqEiyih26hjpekCmefiF1VmrPwwShrYYxgHLFCZdigw5JWKV4DmewuR1FH3oNtGoFok859SXeuRbpQfrTjHhGVfDsbXEo3GYP2imAh1APKyLEsG9LcE5WZnJV8eseQnYA8sACLDKZ8Tbpp9KUE7QZNFpnwGnkYx7eybbrCeFDFjTGpsBzaS6fRKrWj2J4Wy3TTyTU1F8iMCrHBF8inZPw9Kg9YEZuJMdXDFNtuaK15u86mF2s2Z5B1vdL5MtZfWThFLnixKds8ABEmGbe8n75Dym5Wv3pkEXQ6XPpaMjUxHfRJB3EfcoFM5nsZHWSTfbFBcHxSRnEiiU67cgJsBUpQn7FvEvqNLiKM4fL3yyykMtQ6RjAS8rhycszphvQa5qFrDHie4vPuTq8/balance/confirmed';\n\n  readonly rsnToken = '8b08cdd5449a9592a9e79711d7d79249d7a03c535d17efaee83e216e80a44c4b';\n  readonly watchersStatsSignal = signal<WatchersStats>(new WatchersStats());\n  readonly watchersStats = new WatchersStats();\n\n  busyCounter = 0;\n\n  constructor(\n    private downloadService: HttpDownloadService,\n    private priceService: PriceService,\n  ) {}\n\n  getWatcherStats(): Signal<WatchersStats> {\n    return this.watchersStatsSignal;\n  }\n\n  getWatchersInfo(): Observable<WatcherInfo> {\n    const result = this.downloadService.downloadStream<WatcherInfo>(this.watcherUrl);\n\n    return result;\n  }\n\n  getPermitsInfo(chainType: ChainType): Observable<Token | undefined> {\n    const address = permitAddresses[chainType];\n    return this.downloadPermitInfo(address, this.rsnToken, null);\n  }\n\n  private updateTotal(map: Record<ChainType, number | undefined>): number | undefined {\n    return Object.values(map).reduce((acc, val) => (acc ?? 0) + (val ?? 0), 0);\n  }\n\n  private convertCurrencies(): void {\n    Object.values(Currency).forEach((currency) => {\n      const conversions = [\n        {\n          amount: rs_WatcherCollateralRSN,\n          from: 'RSN',\n          callback: (c: number) =>\n            (this.watchersStats.watchersAmountsPerCurrency[currency].rsnCollateral = c),\n        },\n        {\n          amount: rs_WatcherCollateralERG,\n          from: 'ERG',\n          callback: (c: number) =>\n            (this.watchersStats.watchersAmountsPerCurrency[currency].ergCollateral = c),\n        },\n        {\n          amount: rs_PermitCost,\n          from: 'RSN',\n          callback: (c: number) =>\n            (this.watchersStats.watchersAmountsPerCurrency[currency].permitValue = c),\n        },\n        {\n          amount: this.watchersStats.totalLockedERG ?? 0,\n          from: 'ERG',\n          callback: (l: number) =>\n            (this.watchersStats.watchersAmountsPerCurrency[currency].totalLockedERG = l),\n        },\n        {\n          amount:\n            (this.watchersStats.totalLockedRSN ?? 0) +\n            rs_PermitCost * (this.watchersStats.totalPermitCount ?? 0),\n          from: 'RSN',\n          callback: (l: number) =>\n            (this.watchersStats.watchersAmountsPerCurrency[currency].totalLockedRSN = l),\n        },\n      ];\n\n      conversions.forEach(({ amount, from, callback }) => {\n        this.priceService.convert(amount, from, currency ?? '').subscribe(callback);\n      });\n    });\n  }\n\n  private updateTotalLocked(): void {\n    Object.values(Currency).forEach((currency) => {\n      this.watchersStats.watchersAmountsPerCurrency[currency].totalLocked =\n        (this.watchersStats.watchersAmountsPerCurrency[currency].totalLockedERG ?? 0) +\n        (this.watchersStats.watchersAmountsPerCurrency[currency].totalLockedRSN ?? 0);\n    });\n  }\n  private getValue(\n    map: Record<ChainType, number | undefined>,\n    chainType: ChainType,\n    multiplier: number,\n  ): number {\n    return (map[chainType] ?? 0) * multiplier;\n  }\n\n  setLockedAmounts(chainType: ChainType): void {\n    this.watchersStats.chainLockedRSN[chainType] =\n      this.getValue(this.watchersStats.chainPermitCount, chainType, rs_PermitCost) +\n      this.getValue(this.watchersStats.chainWatcherCount, chainType, rs_WatcherCollateralRSN);\n\n    this.watchersStats.chainLockedERG[chainType] = this.getValue(\n      this.watchersStats.chainWatcherCount,\n      chainType,\n      rs_WatcherCollateralERG,\n    );\n\n    Object.values(ChainType).forEach((c) => {\n      this.watchersStats.activePermitCount[c] =\n        (this.watchersStats.bulkPermitCount[c] ?? 0) +\n        (this.watchersStats.triggerPermitCount[c] ?? 0);\n    });\n\n    this.watchersStats.totalWatcherCount = this.updateTotal(this.watchersStats.chainWatcherCount);\n    this.watchersStats.totalPermitCount = this.updateTotal(this.watchersStats.chainPermitCount);\n    this.watchersStats.totalActivePermitCount = this.updateTotal(\n      this.watchersStats.activePermitCount,\n    );\n    this.watchersStats.totalLockedRSN = this.updateTotal(this.watchersStats.chainLockedRSN);\n    this.watchersStats.totalLockedERG = this.updateTotal(this.watchersStats.chainLockedERG);\n\n    this.currencyUpdate();\n  }\n\n  currencyUpdate(): void {\n    Object.values(Currency).forEach((currency) => {\n      this.watchersStats.watchersAmountsPerCurrency[currency].watcherValue = 0;\n      this.watchersStats.watchersAmountsPerCurrency[currency].permitValue = 0;\n    });\n\n    this.convertCurrencies();\n    this.updateTotalLocked();\n\n    Object.values(Currency).forEach((currency) => {\n      this.watchersStats.watchersAmountsPerCurrency[currency].watcherValue =\n        (this.watchersStats.watchersAmountsPerCurrency[currency].rsnCollateral ?? 0) +\n        (this.watchersStats.watchersAmountsPerCurrency[currency].ergCollateral ?? 0);\n    });\n\n    const newStats = JSON.stringify(this.watchersStats);\n    if (JSON.stringify(this.watchersStatsSignal()) !== newStats) {\n      console.log('Settings watchers stats signal');\n      this.watchersStatsSignal.set(JSON.parse(newStats));\n    }\n  }\n\n  private downloadPermitInfo(address: string, tokenId: string | null, tokenName: string | null) {\n    const permitsUrl = `https://${rs_ErgoExplorerHost}/api/v1/addresses/${address}/balance/confirmed`;\n\n    return this.downloadService\n      .downloadStream<WatcherInfo>(permitsUrl)\n      .pipe(\n        map((data: { tokens: Token[] }) => {\n          if (data.tokens) {\n            const tokenData = data.tokens.find(\n              (token: Token) =>\n                (tokenId && token.tokenId === tokenId) || (tokenName && token.name === tokenName),\n            );\n            console.log(permitsUrl);\n            if (tokenData) {\n              tokenData.amount /= rs_PermitCost * Math.pow(10, tokenData.decimals);\n              tokenData.amount = Math.floor(tokenData.amount);\n            }\n          }\n          return data;\n        }),\n      )\n      .pipe(\n        map((result) => {\n          return result.tokens.find(\n            (token: Token) =>\n              (tokenId && token.tokenId === tokenId) || (tokenName && token.name === tokenName),\n          );\n        }),\n      );\n  }\n\n  getTriggerPermitsInfo(chainType: ChainType): Observable<Token | undefined> {\n    const address = permitTriggerAddresses[chainType];\n    return this.downloadPermitInfo(address, null, 'rspv2' + chainType + 'RWT');\n  }\n\n  getBulkPermitsInfo(chainType: ChainType): Observable<Token | undefined> {\n    const address = permitBulkAddresses[chainType];\n    return this.downloadPermitInfo(address, null, 'rspv2' + chainType + 'RWT');\n  }\n\n  download() {\n    Object.values(ChainType).forEach((c) => {\n      this.getTriggerPermitsInfo(c)\n        .pipe(map((permitsInfo) => permitsInfo?.amount))\n        .subscribe((amount) => {\n          this.watchersStats.triggerPermitCount[c] = amount;\n          this.setLockedAmounts(c);\n        });\n\n      this.getBulkPermitsInfo(c)\n        .pipe(map((permitsInfo) => permitsInfo?.amount))\n        .subscribe((amount) => {\n          this.watchersStats.bulkPermitCount[c] = amount;\n          this.setLockedAmounts(c);\n        });\n    });\n\n    const watcherInfo$ = this.getWatchersInfo();\n\n    watcherInfo$\n      .pipe(\n        map((watcherInfo) => {\n          Object.values(ChainType).forEach((c) => {\n            const amount =\n              watcherInfo.tokens.find((token: Token) => token.name === 'rspv2' + c + 'AWC')\n                ?.amount ?? 0;\n            this.watchersStats.chainWatcherCount[c] = amount;\n            this.setLockedAmounts(c);\n          });\n        }),\n      )\n      .subscribe();\n\n    Object.values(ChainType).forEach((c) => {\n      this.getPermitsInfo(c)\n        .pipe(map((permitsInfo) => permitsInfo?.amount))\n        .subscribe((amount) => {\n          this.watchersStats.chainPermitCount[c] = amount;\n          this.setLockedAmounts(c);\n        });\n    });\n  }\n}\n",
            "inputsClass": [],
            "outputsClass": [],
            "properties": [
                {
                    "name": "activePermitCount",
                    "defaultValue": "createChainNumber()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 28
                },
                {
                    "name": "bulkPermitCount",
                    "defaultValue": "createChainNumber()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 29
                },
                {
                    "name": "chainLockedERG",
                    "defaultValue": "createChainNumber()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 30
                },
                {
                    "name": "chainLockedRSN",
                    "defaultValue": "createChainNumber()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 31
                },
                {
                    "name": "chainPermitCount",
                    "defaultValue": "createChainNumber()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 32
                },
                {
                    "name": "chainWatcherCount",
                    "defaultValue": "createChainNumber()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 33
                },
                {
                    "name": "permitCost",
                    "defaultValue": "rs_PermitCost",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 34
                },
                {
                    "name": "totalActivePermitCount",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number | undefined",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 35
                },
                {
                    "name": "totalLockedERG",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number | undefined",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 36
                },
                {
                    "name": "totalLockedRSN",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number | undefined",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 37
                },
                {
                    "name": "totalPermitCount",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number | undefined",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 38
                },
                {
                    "name": "totalWatcherCount",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number | undefined",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 39
                },
                {
                    "name": "triggerPermitCount",
                    "defaultValue": "createChainNumber()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 40
                },
                {
                    "name": "watcherCollateralERG",
                    "defaultValue": "rs_WatcherCollateralERG",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 41
                },
                {
                    "name": "watcherCollateralRSN",
                    "defaultValue": "rs_WatcherCollateralRSN",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 42
                },
                {
                    "name": "watchersAmountsPerCurrency",
                    "defaultValue": "Object.fromEntries(\n    Object.values(Currency).map((currency) => [currency, new WatchersAmounts()]),\n  ) as Record<Currency, WatchersAmounts>",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Record<Currency | WatchersAmounts>",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 44
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "extends": [],
            "hostBindings": [],
            "hostListeners": []
        }
    ],
    "directives": [],
    "components": [
        {
            "name": "AppComponent",
            "id": "component-AppComponent-36c04aaf3252a38bc9bf1076870af2e986e02a1bc4d0acd874c116e98a885ef802a46fa5af2b1dc2c18fa3158ddfe782188ccf81f990513b5ce5c3de86248052",
            "file": "src/app/app.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-root",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./app.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "title",
                    "defaultValue": "'rosen-watcher-pwa'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 12
                }
            ],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "RouterOutlet"
                },
                {
                    "name": "NavigationComponent",
                    "type": "component"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\nimport { RouterOutlet } from '@angular/router';\nimport { NavigationComponent } from './statistics/navigation.component';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  standalone: true,\n  imports: [RouterOutlet, NavigationComponent],\n})\nexport class AppComponent {\n  title = 'rosen-watcher-pwa';\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": [],
            "templateData": "<div class=\"screen-div\">\n  <router-outlet></router-outlet>\n</div>\n<app-navigation />\n"
        },
        {
            "name": "BaseWatcherComponent",
            "id": "component-BaseWatcherComponent-6b4147655ed75201856a5d59e87ccd2b18316601d1ed108ffc7cdd5233212f36361b9dfe36dbc87aa949597f9937ef520456acf25d7dc5e02f9fa0d93590168c",
            "file": "src/app/basewatchercomponent.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-root",
            "styleUrls": [],
            "styles": [],
            "template": "",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "addresses",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Address[]",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "browserService",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "BrowserService",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 23,
                    "modifierKind": [
                        124
                    ]
                },
                {
                    "name": "busyCounter",
                    "defaultValue": "1",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 15,
                    "modifierKind": [
                        125
                    ]
                },
                {
                    "name": "chainService",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ChainService",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 20,
                    "modifierKind": [
                        124
                    ]
                },
                {
                    "name": "dataService",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ChainDataService",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 22,
                    "modifierKind": [
                        124
                    ]
                },
                {
                    "name": "eventService",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "EventService",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 19,
                    "modifierKind": [
                        124
                    ]
                },
                {
                    "name": "loaderLogs",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string[]",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 16
                },
                {
                    "name": "noAddresses",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 18
                },
                {
                    "name": "route",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ActivatedRoute | undefined",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 24,
                    "modifierKind": [
                        124
                    ]
                },
                {
                    "name": "storageService",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "StorageService",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 21,
                    "modifierKind": [
                        124
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "checkAddressParams",
                    "args": [
                        {
                            "name": "params",
                            "type": "Params",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<boolean>",
                    "typeParameters": [],
                    "line": 63,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        125,
                        134
                    ],
                    "jsdoctags": [
                        {
                            "name": "params",
                            "type": "Params",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "Promise<void>",
                    "typeParameters": [],
                    "line": 52,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        134
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "Promise<void>",
                    "typeParameters": [],
                    "line": 44,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        134
                    ]
                },
                {
                    "name": "resetHeight",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 39,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "SetupRoute",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 57,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        124
                    ]
                },
                {
                    "name": "subscribeToEvent",
                    "args": [
                        {
                            "name": "eventType",
                            "type": "EventType",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "callback",
                            "type": "function",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "function": [
                                {
                                    "name": "args",
                                    "type": "T[]",
                                    "deprecated": false,
                                    "deprecationMessage": "",
                                    "dotDotDotToken": true
                                }
                            ]
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [
                        "T"
                    ],
                    "line": 103,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        134
                    ],
                    "jsdoctags": [
                        {
                            "name": "eventType",
                            "type": "EventType",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "callback",
                            "type": "function",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "function": [
                                {
                                    "name": "args",
                                    "type": "T[]",
                                    "deprecated": false,
                                    "deprecationMessage": "",
                                    "dotDotDotToken": true
                                }
                            ],
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "subscribeToEvents",
                    "args": [
                        {
                            "name": "eventTypes",
                            "type": "EventType[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "callback",
                            "type": "function",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "function": []
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 110,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        134
                    ],
                    "jsdoctags": [
                        {
                            "name": "eventTypes",
                            "type": "EventType[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "callback",
                            "type": "function",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "function": [],
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit, OnDestroy, Injector } from '@angular/core';\nimport { EventData, EventService, EventType } from './service/event.service';\nimport { ActivatedRoute, Params } from '@angular/router';\nimport { ChainService } from './service/chain.service';\nimport { Address } from '../service/ts/models/address';\nimport { StorageService } from './service/storage.service';\nimport { ChainDataService } from './service/chain.data.service';\nimport { BrowserService } from './service/browser.service';\n\n@Component({\n  selector: 'app-root',\n  template: '',\n})\nexport class BaseWatcherComponent implements OnInit, OnDestroy {\n  public busyCounter = 1;\n  loaderLogs: string[] = [];\n  addresses: Address[] = [];\n  noAddresses = false;\n  protected eventService: EventService;\n  protected chainService: ChainService;\n  protected storageService: StorageService;\n  protected dataService: ChainDataService;\n  protected browserService: BrowserService;\n  protected route: ActivatedRoute | undefined;\n\n  constructor(protected injector: Injector) {\n    this.eventService = this.injector.get(EventService);\n    this.chainService = this.injector.get(ChainService);\n    this.storageService = this.injector.get(StorageService);\n    this.dataService = this.injector.get(ChainDataService);\n    this.browserService = this.injector.get(BrowserService);\n    try {\n      this.route = this.injector.get(ActivatedRoute);\n    } catch {\n      this.route = undefined;\n    }\n  }\n\n  resetHeight(): void {\n    document.body.style.height = window.innerHeight + 'px';\n    document.documentElement.style.height = window.innerHeight + 'px';\n  }\n\n  async ngOnInit(): Promise<void> {\n    this.eventService.sendEvent(EventType.SwipeActivated);\n\n    window.addEventListener('resize', this.resetHeight);\n\n    this.resetHeight();\n  }\n\n  async ngOnDestroy(): Promise<void> {\n    this.eventService.sendEvent(EventType.SwipeDeActivated);\n    await this.eventService.unSubscribeAll([EventType.RefreshInputs]);\n  }\n\n  protected SetupRoute() {\n    this.route?.queryParams.subscribe(async (params) => {\n      await this.checkAddressParams(params);\n    });\n  }\n\n  public async checkAddressParams(params: Params): Promise<boolean> {\n    if (params['addresses'] || Object.keys(params).some((key) => key.startsWith('address'))) {\n      const addressesParam = params['addresses'];\n      console.log(addressesParam);\n\n      this.addresses = [];\n\n      if (addressesParam != null) {\n        this.addresses = JSON.parse(decodeURIComponent(addressesParam));\n      }\n\n      const individualAddresses = Object.keys(params)\n        .filter((key) => key.startsWith('address') && !key.startsWith('addresses'))\n        .map((key) => new Address(params[key], this.chainService.getChainType(params[key])))\n        .filter((addr) => addr !== undefined && addr !== null);\n\n      individualAddresses.forEach((i) => this.addresses.push(i));\n\n      this.browserService.replacePath();\n\n      await this.storageService.putAddressData(this.addresses);\n\n      await this.storageService.clearInputsStore();\n      if (this.addresses.length == 0) {\n        this.noAddresses = true;\n      }\n      await this.eventService.sendEventWithData(\n        EventType.StatisticsScreenLoaded,\n        null as unknown as EventData,\n      );\n      return true;\n    } else {\n      this.addresses = await this.dataService.getAddresses();\n      if (this.addresses.length == 0) {\n        this.noAddresses = true;\n      }\n      return false;\n    }\n  }\n\n  async subscribeToEvent<T>(eventType: EventType, callback: (...args: T[]) => void) {\n    const eventCallBack: (...args: EventData[]) => void = callback as (\n      ...args: EventData[]\n    ) => void;\n    await this.eventService.subscribeToEvent(eventType, eventCallBack);\n  }\n\n  async subscribeToEvents(eventTypes: EventType[], callback: () => void) {\n    eventTypes.forEach(async (eventType) => {\n      await this.eventService.subscribeToEvent(eventType, callback);\n    });\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "injector",
                        "type": "Injector",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 24,
                "jsdoctags": [
                    {
                        "name": "injector",
                        "type": "Injector",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "implements": [
                "OnInit",
                "OnDestroy"
            ]
        },
        {
            "name": "ButtonComponent",
            "id": "component-ButtonComponent-d7bf0323e6da130e2609e2af0117b4a8d7cd874132206af50bf43dfc37044485fe50f2867ea76525730dd195b9b95a43802a12dadc6ad5cd7bf2faa07f19f0da",
            "file": "src/stories/button.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "storybook-button",
            "styleUrls": [
                "./button.css"
            ],
            "styles": [],
            "template": " <button  type=\"button\"\n  (click)=\"onClick.emit($event)\"\n  [ngClass]=\"classes\"\n  [ngStyle]=\"{ 'background-color': backgroundColor }\"\n>\n  {{ label }}\n</button>",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "backgroundColor",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nWhat background color to use",
                    "description": "<p>What background color to use</p>\n",
                    "line": 25,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "label",
                    "defaultValue": "'Button'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "pos": 760,
                            "end": 773,
                            "kind": 327,
                            "id": 0,
                            "flags": 16842752,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "tagName": {
                                "pos": 761,
                                "end": 769,
                                "kind": 80,
                                "id": 0,
                                "flags": 16842752,
                                "transformFlags": 0,
                                "escapedText": "required"
                            },
                            "comment": ""
                        }
                    ],
                    "rawdescription": "\n\nButton contents\n\n",
                    "description": "<p>Button contents</p>\n",
                    "line": 37,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "primary",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nIs this the principal call to action on the page?",
                    "description": "<p>Is this the principal call to action on the page?</p>\n",
                    "line": 21,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "size",
                    "defaultValue": "'medium'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nHow large should the button be?",
                    "description": "<p>How large should the button be?</p>\n",
                    "line": 29,
                    "type": "\"small\" | \"medium\" | \"large\"",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "onClick",
                    "defaultValue": "new EventEmitter<Event>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nOptional click handler",
                    "description": "<p>Optional click handler</p>\n",
                    "line": 41,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { CommonModule } from '@angular/common';\nimport { Component, Input, Output, EventEmitter } from '@angular/core';\n\n@Component({\n  selector: 'storybook-button',\n  standalone: true,\n  imports: [CommonModule],\n  template: ` <button\n  type=\"button\"\n  (click)=\"onClick.emit($event)\"\n  [ngClass]=\"classes\"\n  [ngStyle]=\"{ 'background-color': backgroundColor }\"\n>\n  {{ label }}\n</button>`,\n  styleUrls: ['./button.css'],\n})\nexport class ButtonComponent {\n  /** Is this the principal call to action on the page? */\n  @Input()\n  primary = false;\n\n  /** What background color to use */\n  @Input()\n  backgroundColor?: string;\n\n  /** How large should the button be? */\n  @Input()\n  size: 'small' | 'medium' | 'large' = 'medium';\n\n  /**\n   * Button contents\n   *\n   * @required\n   */\n  @Input()\n  label = 'Button';\n\n  /** Optional click handler */\n  @Output()\n  onClick = new EventEmitter<Event>();\n\n  public get classes(): string[] {\n    const mode = this.primary ? 'storybook-button--primary' : 'storybook-button--secondary';\n\n    return ['storybook-button', `storybook-button--${this.size}`, mode];\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".storybook-button {\n  display: inline-block;\n  cursor: pointer;\n  border: 0;\n  border-radius: 3em;\n  font-weight: 700;\n  line-height: 1;\n  font-family: 'Nunito Sans', 'Helvetica Neue', Helvetica, Arial, sans-serif;\n}\n.storybook-button--primary {\n  background-color: #555ab9;\n  color: white;\n}\n.storybook-button--secondary {\n  box-shadow: rgba(0, 0, 0, 0.15) 0px 0px 0px 1px inset;\n  background-color: transparent;\n  color: #333;\n}\n.storybook-button--small {\n  padding: 10px 16px;\n  font-size: 12px;\n}\n.storybook-button--medium {\n  padding: 11px 20px;\n  font-size: 14px;\n}\n.storybook-button--large {\n  padding: 12px 24px;\n  font-size: 16px;\n}\n",
                    "styleUrl": "./button.css"
                }
            ],
            "stylesData": "",
            "extends": [],
            "accessors": {
                "classes": {
                    "name": "classes",
                    "getSignature": {
                        "name": "classes",
                        "type": "[]",
                        "returnType": "string[]",
                        "line": 43
                    }
                }
            }
        },
        {
            "name": "ChainPerformanceComponent",
            "id": "component-ChainPerformanceComponent-6b921737112ac536f67f7c48cd0a7755bf7b7d91164e6332756e85aaa224ca1b4b7ef53deec4816db4177c568b9861c16da6402a8b66308df5619d3275d49256",
            "file": "src/app/statistics/chain.performance.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-chain-performance",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./chain.performance.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "renderHtml",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 26,
                    "type": "string | boolean",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "_renderHtml",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 23,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "chainWatcherCount",
                    "defaultValue": "createChainNumber()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 41
                },
                {
                    "name": "isElementsActive",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 45,
                    "decorators": [
                        {
                            "name": "Inject",
                            "stringifiedArguments": "IS_ELEMENTS_ACTIVE"
                        }
                    ],
                    "modifierKind": [
                        170,
                        125
                    ]
                },
                {
                    "name": "performanceChart",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Chart<bar | literal type[] | > | undefined",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 39
                },
                {
                    "name": "performanceCharts",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ChainChartPerformance[]",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 38
                },
                {
                    "name": "title",
                    "defaultValue": "'rosen-watcher-pwa'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 158
                },
                {
                    "name": "addresses",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Address[]",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 17,
                    "inheritance": {
                        "file": "BaseWatcherComponent"
                    }
                },
                {
                    "name": "browserService",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "BrowserService",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 23,
                    "modifierKind": [
                        124
                    ],
                    "inheritance": {
                        "file": "BaseWatcherComponent"
                    }
                },
                {
                    "name": "busyCounter",
                    "defaultValue": "1",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 15,
                    "modifierKind": [
                        125
                    ],
                    "inheritance": {
                        "file": "BaseWatcherComponent"
                    }
                },
                {
                    "name": "chainService",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ChainService",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 20,
                    "modifierKind": [
                        124
                    ],
                    "inheritance": {
                        "file": "BaseWatcherComponent"
                    }
                },
                {
                    "name": "dataService",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ChainDataService",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 22,
                    "modifierKind": [
                        124
                    ],
                    "inheritance": {
                        "file": "BaseWatcherComponent"
                    }
                },
                {
                    "name": "eventService",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "EventService",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 19,
                    "modifierKind": [
                        124
                    ],
                    "inheritance": {
                        "file": "BaseWatcherComponent"
                    }
                },
                {
                    "name": "loaderLogs",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string[]",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 16,
                    "inheritance": {
                        "file": "BaseWatcherComponent"
                    }
                },
                {
                    "name": "noAddresses",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 18,
                    "inheritance": {
                        "file": "BaseWatcherComponent"
                    }
                },
                {
                    "name": "route",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ActivatedRoute | undefined",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 24,
                    "modifierKind": [
                        124
                    ],
                    "inheritance": {
                        "file": "BaseWatcherComponent"
                    }
                },
                {
                    "name": "storageService",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "StorageService",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 21,
                    "modifierKind": [
                        124
                    ],
                    "inheritance": {
                        "file": "BaseWatcherComponent"
                    }
                }
            ],
            "methodsClass": [
                {
                    "name": "createDataSet",
                    "args": [
                        {
                            "name": "i",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "ChainPerfChartDataSet",
                    "typeParameters": [],
                    "line": 118,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "i",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getPerformanceChart",
                    "args": [],
                    "optional": false,
                    "returnType": "Promise<ChainChartPerformance[]>",
                    "typeParameters": [],
                    "line": 103,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123,
                        134
                    ]
                },
                {
                    "name": "getWatchers",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 85,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "isHtmlRenderEnabled",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 34,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "Promise<void>",
                    "typeParameters": [],
                    "line": 65,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        164,
                        134
                    ],
                    "inheritance": {
                        "file": "BaseWatcherComponent"
                    }
                },
                {
                    "name": "retrieveData",
                    "args": [],
                    "optional": false,
                    "returnType": "Promise<void>",
                    "typeParameters": [],
                    "line": 57,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        134
                    ]
                },
                {
                    "name": "selectTab",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 53,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "updateChart",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 131,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "checkAddressParams",
                    "args": [
                        {
                            "name": "params",
                            "type": "Params",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<boolean>",
                    "typeParameters": [],
                    "line": 63,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        125,
                        134
                    ],
                    "jsdoctags": [
                        {
                            "name": "params",
                            "type": "Params",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseWatcherComponent"
                    }
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "Promise<void>",
                    "typeParameters": [],
                    "line": 52,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        134
                    ],
                    "inheritance": {
                        "file": "BaseWatcherComponent"
                    }
                },
                {
                    "name": "resetHeight",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 39,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "inheritance": {
                        "file": "BaseWatcherComponent"
                    }
                },
                {
                    "name": "SetupRoute",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 57,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        124
                    ],
                    "inheritance": {
                        "file": "BaseWatcherComponent"
                    }
                },
                {
                    "name": "subscribeToEvent",
                    "args": [
                        {
                            "name": "eventType",
                            "type": "EventType",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "callback",
                            "type": "function",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "function": [
                                {
                                    "name": "args",
                                    "type": "T[]",
                                    "deprecated": false,
                                    "deprecationMessage": "",
                                    "dotDotDotToken": true
                                }
                            ]
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [
                        "T"
                    ],
                    "line": 103,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        134
                    ],
                    "jsdoctags": [
                        {
                            "name": "eventType",
                            "type": "EventType",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "callback",
                            "type": "function",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "function": [
                                {
                                    "name": "args",
                                    "type": "T[]",
                                    "deprecated": false,
                                    "deprecationMessage": "",
                                    "dotDotDotToken": true
                                }
                            ],
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseWatcherComponent"
                    }
                },
                {
                    "name": "subscribeToEvents",
                    "args": [
                        {
                            "name": "eventTypes",
                            "type": "EventType[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "callback",
                            "type": "function",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "function": []
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 110,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        134
                    ],
                    "jsdoctags": [
                        {
                            "name": "eventTypes",
                            "type": "EventType[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "callback",
                            "type": "function",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "function": [],
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseWatcherComponent"
                    }
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Inject, Injector, Input, OnInit } from '@angular/core';\nimport { EventData, EventType } from '../service/event.service';\nimport { BaseWatcherComponent } from '../basewatchercomponent';\nimport { ChainChartService } from '../service/chain.chart.service';\n\nimport { ChainPerfChartDataSet } from '../../service/ts/models/chart.dataset';\nimport { ChainChartPerformance } from '../../service/ts/models/chart.performance';\nimport { Chart } from 'chart.js';\nimport { NavigationService } from '../service/navigation.service';\nimport { createChainNumber, WatchersDataService } from '../service/watchers.data.service';\nimport { map } from 'rxjs';\nimport { Token } from '../../service/ts/models/token';\nimport { IS_ELEMENTS_ACTIVE } from '../service/tokens';\nimport { CommonModule } from '@angular/common';\n\n@Component({\n  selector: 'app-chain-performance',\n  templateUrl: './chain.performance.html',\n  standalone: true,\n  imports: [CommonModule],\n})\nexport class ChainPerformanceComponent extends BaseWatcherComponent implements OnInit {\n  private _renderHtml = true;\n\n  @Input()\n  set renderHtml(value: string | boolean) {\n    this._renderHtml = value === false || value === 'false' ? false : true;\n  }\n\n  get renderHtml(): boolean {\n    return this._renderHtml;\n  }\n\n  isHtmlRenderEnabled(): boolean {\n    return this._renderHtml;\n  }\n\n  performanceCharts: ChainChartPerformance[] = [];\n  performanceChart: Chart<'bar', { x: string | number | Date; y: number }[], unknown> | undefined;\n\n  chainWatcherCount = createChainNumber();\n\n  constructor(\n    injector: Injector,\n    @Inject(IS_ELEMENTS_ACTIVE) public isElementsActive: boolean,\n    private chartService: ChainChartService,\n    private navigationService: NavigationService,\n    private watchersDataService: WatchersDataService,\n  ) {\n    super(injector);\n  }\n\n  selectTab(): void {\n    this.navigationService.navigate('/performance');\n  }\n\n  async retrieveData(): Promise<void> {\n    this.performanceCharts = await this.getPerformanceChart();\n    this.eventService.sendEventWithData(\n      EventType.ChainPerformanceChartsChanged,\n      this.performanceCharts as EventData,\n    );\n  }\n\n  override async ngOnInit(): Promise<void> {\n    super.ngOnInit();\n\n    this.getWatchers();\n\n    window.addEventListener('beforeinstallprompt', (event) => {\n      event.preventDefault();\n    });\n\n    await this.retrieveData();\n    this.updateChart();\n\n    this.eventService.sendEvent(EventType.PerformanceScreenLoaded);\n\n    await this.subscribeToEvent(EventType.RefreshInputs, async () => {\n      await this.retrieveData();\n      this.updateChart();\n    });\n  }\n\n  private getWatchers() {\n    const watcherInfo$ = this.watchersDataService.getWatchersInfo();\n\n    watcherInfo$\n      .pipe(\n        map((watcherInfo) => {\n          Object.values(ChainType).forEach((c) => {\n            const amount =\n              watcherInfo.tokens.find((token: Token) => token.name === 'rspv2' + c + 'AWC')\n                ?.amount ?? 0;\n            this.chainWatcherCount[c] = amount;\n          });\n          this.updateChart();\n        }),\n      )\n      .subscribe();\n  }\n\n  private async getPerformanceChart(): Promise<ChainChartPerformance[]> {\n    console.log('start retrieving chart from database');\n    const chainChart = this.dataService.getChainChart();\n    console.log('done retrieving chart from database');\n\n    return Object.entries(chainChart).map(([chainType, value], index) => ({\n      color: this.chartService.chartColors[index % this.chartService.chartColors.length],\n      chainType: chainType as ChainType,\n      chart: value.chart,\n      index: index,\n      address: '',\n      addressForDisplay: '',\n    }));\n  }\n\n  private createDataSet(i: number): ChainPerfChartDataSet {\n    const chartColor = this.chartService.chartColors[i % 10];\n    return {\n      label: '',\n      data: [],\n      backgroundColor: chartColor,\n      pointBackgroundColor: chartColor,\n      borderColor: chartColor,\n      borderWidth: 0,\n      borderSkipped: false,\n    };\n  }\n\n  updateChart(): void {\n    if (!this._renderHtml) {\n      return;\n    }\n    const dataSet = this.createDataSet(0);\n\n    dataSet.data = this.performanceCharts.map((p) => {\n      if (p.chainType && this.chainWatcherCount[p.chainType]) {\n        return {\n          x: p.chainType as string,\n          y: p.chart / (this.chainWatcherCount[p.chainType] ?? 1),\n        };\n      } else {\n        return { x: p.chainType as string, y: 0 };\n      }\n    });\n\n    if (!this.performanceChart) {\n      this.performanceChart = this.chartService.createChainPerformanceChart(dataSet);\n    } else {\n      this.performanceChart.data.datasets[0].data = dataSet.data;\n\n      this.performanceChart.data.datasets[0].backgroundColor = this.chartService.chartColors;\n      this.performanceChart.update();\n    }\n  }\n\n  title = 'rosen-watcher-pwa';\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "injector",
                        "type": "Injector",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "isElementsActive",
                        "type": "boolean",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "chartService",
                        "type": "ChainChartService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "navigationService",
                        "type": "NavigationService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "watchersDataService",
                        "type": "WatchersDataService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 41,
                "jsdoctags": [
                    {
                        "name": "injector",
                        "type": "Injector",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "isElementsActive",
                        "type": "boolean",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "chartService",
                        "type": "ChainChartService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "navigationService",
                        "type": "NavigationService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "watchersDataService",
                        "type": "WatchersDataService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [
                "BaseWatcherComponent"
            ],
            "implements": [
                "OnInit"
            ],
            "accessors": {
                "renderHtml": {
                    "name": "renderHtml",
                    "setSignature": {
                        "name": "renderHtml",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "value",
                                "type": "string | boolean",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 26,
                        "jsdoctags": [
                            {
                                "name": "value",
                                "type": "string | boolean",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    },
                    "getSignature": {
                        "name": "renderHtml",
                        "type": "boolean",
                        "returnType": "boolean",
                        "line": 30
                    }
                }
            },
            "templateData": "@if (isHtmlRenderEnabled() ? !isElementsActive : false) {\n<div class=\"headercontainer\">\n  <div class=\"headerblock\">\n    Performance&nbsp;\n    <div class=\"header\">Compare chains</div>\n  </div>\n</div>\n}\n\n<div\n  [ngClass]=\"{  'performancecontainer': true,  'main-content': true,    'elementsActive': isElementsActive}\"\n>\n  @if (!isElementsActive) {\n  <div class=\"performancetab\">\n    <a\n      tabindex=\"0\"\n      class=\"tab\"\n      [class.active]=\"false\"\n      (click)=\"selectTab()\"\n      (keypress)=\"selectTab()\"\n    >\n      My watchers\n    </a>\n    <a tabindex=\"0\" class=\"tab\" [class.active]=\"true\">Compare chains</a>\n  </div>\n  } @if (!isElementsActive) {\n  <div class=\"info-description\">\n    Avarage earnings in RSN per chain type over the last week for a single watcher.\n  </div>\n  } @if (isHtmlRenderEnabled()) {\n  <div class=\"addressescontainer\">\n    @for (address of performanceCharts; track address; let i = $index; let isLast = $last) {\n    <div class=\"performancelegend\">\n      <div class=\"chart-legend\" [style.background-color]=\"address.color\"></div>\n      <div class=\"performance-chart-address mainaddressdispl {{address.chainType}}\">\n        - {{ address.chainType }}\n      </div>\n      @if (!isLast) {\n      <span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span>\n      }\n    </div>\n    }\n  </div>\n  }\n\n  <div class=\"chartcontainer\" [style.display]=\"isHtmlRenderEnabled() ? null : 'none'\">\n    <div class=\"chart-container\">\n      <canvas id=\"PerformanceChart\"></canvas>\n    </div>\n  </div>\n</div>\n"
        },
        {
            "name": "FilterAddressComponent",
            "id": "component-FilterAddressComponent-befb2014f4031d6dc63f53c561f3419029244881117fbdae029f797751a6a250e12afafeffcfb77f4cbafa5dcd7f10ab4cef05e7400d34a7d5431258cf81bc2d",
            "file": "src/app/statistics/filter.address.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-filter-address",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./filter.address.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "addresses",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 16,
                    "type": "Address[] | null",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "addressesCanceled",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 18,
                    "type": "EventEmitter"
                },
                {
                    "name": "addressesChanged",
                    "defaultValue": "new EventEmitter<Address[] | null>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 17,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "handleClickOutside",
                    "args": [
                        {
                            "name": "event",
                            "type": "MouseEvent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 21,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "decorators": [
                        {
                            "name": "HostListener",
                            "stringifiedArguments": "'document:click', ['$event']"
                        }
                    ],
                    "modifierKind": [
                        170
                    ],
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "MouseEvent",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onCancel",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 35,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onOk",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 31,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [
                {
                    "name": "document:click",
                    "args": [
                        {
                            "name": "event",
                            "type": "MouseEvent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "argsDecorator": [
                        "$event"
                    ],
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 21
                }
            ],
            "standalone": true,
            "imports": [
                {
                    "name": "MatInputModule",
                    "type": "module"
                },
                {
                    "name": "FormsModule",
                    "type": "module"
                },
                {
                    "name": "MatCheckboxModule",
                    "type": "module"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, ElementRef, EventEmitter, HostListener, Input, Output } from '@angular/core';\nimport { MatInputModule } from '@angular/material/input';\nimport { MatCheckboxModule } from '@angular/material/checkbox';\nimport { FormsModule } from '@angular/forms';\nimport { Address } from '../../service/ts/models/address';\n\n@Component({\n  selector: 'app-filter-address',\n  templateUrl: './filter.address.html',\n  standalone: true,\n  imports: [MatInputModule, FormsModule, MatCheckboxModule],\n})\nexport class FilterAddressComponent {\n  constructor(private eRef: ElementRef) {}\n\n  @Input() addresses: Address[] | null = null;\n  @Output() addressesChanged = new EventEmitter<Address[] | null>();\n  @Output() addressesCanceled = new EventEmitter();\n\n  @HostListener('document:click', ['$event'])\n  handleClickOutside(event: MouseEvent) {\n    if (\n      event.target instanceof HTMLElement &&\n      !this.eRef.nativeElement.contains(event.target) &&\n      !event.target.classList.contains('rsn_filter')\n    ) {\n      this.onCancel();\n    }\n  }\n\n  onOk() {\n    this.addressesChanged.emit(this.addresses);\n  }\n\n  onCancel() {\n    this.addressesChanged.emit(this.addresses);\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "eRef",
                        "type": "ElementRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 13,
                "jsdoctags": [
                    {
                        "name": "eRef",
                        "type": "ElementRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "templateData": "<div class=\"context-menu\" style=\"display: flex; flex-direction: column\">\n  Select address @for (address of addresses; track address; let i = $index; let isLast = $last) {\n  <div>\n    <mat-checkbox [(ngModel)]=\"address.active\" [name]=\"'checkbox' + i\">\n      {{ address.largeAddressForDisplay }}\n    </mat-checkbox>\n  </div>\n  }\n\n  <div>\n    <button (click)=\"onOk()\" style=\"margin: 10px\">Ok</button>\n    &nbsp;\n    <button (click)=\"onCancel()\" cdkFocusInitial style=\"margin: 10px\">Cancel</button>\n  </div>\n</div>\n"
        },
        {
            "name": "FilterDateComponent",
            "id": "component-FilterDateComponent-1c709849e97fa6003093294971aaec0f803c1dcc10e49a9350cc9d25e62e4885b6815868fd45f967be811c458f6fc8107352967fb3807581968255a28020a4ff",
            "file": "src/app/statistics/filter.date.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-filter-date",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./filter.date.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "fromDate",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 16,
                    "type": "Date | null",
                    "decorators": []
                },
                {
                    "name": "toDate",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 17,
                    "type": "Date | null",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "dateRangeCanceled",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 19,
                    "type": "EventEmitter"
                },
                {
                    "name": "dateRangeChanged",
                    "defaultValue": "new EventEmitter<{ from: Date | null; to: Date | null }>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 18,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "handleClickOutside",
                    "args": [
                        {
                            "name": "event",
                            "type": "MouseEvent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 22,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "decorators": [
                        {
                            "name": "HostListener",
                            "stringifiedArguments": "'document:click', ['$event']"
                        }
                    ],
                    "modifierKind": [
                        170
                    ],
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "MouseEvent",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onCancel",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 40,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onOk",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 33,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [
                {
                    "name": "document:click",
                    "args": [
                        {
                            "name": "event",
                            "type": "MouseEvent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "argsDecorator": [
                        "$event"
                    ],
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 22
                }
            ],
            "standalone": true,
            "imports": [
                {
                    "name": "MatDatepickerModule",
                    "type": "module"
                },
                {
                    "name": "MatInputModule",
                    "type": "module"
                },
                {
                    "name": "MatNativeDateModule",
                    "type": "module"
                },
                {
                    "name": "FormsModule",
                    "type": "module"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, ElementRef, EventEmitter, HostListener, Input, Output } from '@angular/core';\nimport { MatDatepickerModule } from '@angular/material/datepicker';\nimport { MatInputModule } from '@angular/material/input';\nimport { MatNativeDateModule } from '@angular/material/core';\nimport { FormsModule } from '@angular/forms';\n\n@Component({\n  selector: 'app-filter-date',\n  templateUrl: './filter.date.html',\n  standalone: true,\n  imports: [MatDatepickerModule, MatInputModule, MatNativeDateModule, FormsModule],\n})\nexport class FilterDateComponent {\n  constructor(private eRef: ElementRef) {}\n\n  @Input() fromDate: Date | null = null;\n  @Input() toDate: Date | null = null;\n  @Output() dateRangeChanged = new EventEmitter<{ from: Date | null; to: Date | null }>();\n  @Output() dateRangeCanceled = new EventEmitter();\n\n  @HostListener('document:click', ['$event'])\n  handleClickOutside(event: MouseEvent) {\n    if (\n      event.target instanceof HTMLElement &&\n      !this.eRef.nativeElement.contains(event.target) &&\n      !event.target.closest('.datepicker-panel') && // <- NEW line to allow clicks inside datepicker\n      !event.target.classList.contains('rsn_filter')\n    ) {\n      this.onCancel();\n    }\n  }\n\n  onOk() {\n    this.dateRangeChanged.emit({\n      from: this.fromDate,\n      to: this.toDate,\n    });\n  }\n\n  onCancel() {\n    this.dateRangeCanceled.emit({\n      from: this.fromDate,\n      to: this.toDate,\n    });\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "eRef",
                        "type": "ElementRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 13,
                "jsdoctags": [
                    {
                        "name": "eRef",
                        "type": "ElementRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "templateData": "<div class=\"context-menu date-selection\" style=\"display: flex; flex-direction: column\">\n  <div style=\"display: flex; gap: 1rem\">\n    <mat-form-field appearance=\"fill\">\n      <mat-label>From date</mat-label>\n      <input matInput [matDatepicker]=\"fromPicker\" [(ngModel)]=\"fromDate\" />\n      <mat-datepicker-toggle matSuffix [for]=\"fromPicker\"></mat-datepicker-toggle>\n      <mat-datepicker #fromPicker panelClass=\"datepicker-panel\"></mat-datepicker>\n    </mat-form-field>\n\n    <mat-form-field appearance=\"fill\">\n      <mat-label>To date</mat-label>\n      <input matInput [matDatepicker]=\"toPicker\" [(ngModel)]=\"toDate\" />\n      <mat-datepicker-toggle matSuffix [for]=\"toPicker\"></mat-datepicker-toggle>\n      <mat-datepicker #toPicker panelClass=\"datepicker-panel\"></mat-datepicker>\n    </mat-form-field>\n  </div>\n\n  <div>\n    <button (click)=\"onOk()\" style=\"margin: 10px\">Ok</button>\n    &nbsp;\n    <button (click)=\"onCancel()\" cdkFocusInitial style=\"margin: 10px\">Cancel</button>\n  </div>\n</div>\n"
        },
        {
            "name": "HeaderComponent",
            "id": "component-HeaderComponent-48b9abe37706bc42f20cfa97ed9f943678344ea7d254c0c82183c657750c2191b43486fe730c778627b2ea6aa0e2f33a7abcf3ce08b68ad18b062ad99ea97acb",
            "file": "src/stories/header.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "storybook-header",
            "styleUrls": [
                "./header.css"
            ],
            "styles": [],
            "template": "<header>  <div class=\"storybook-header\">\n    <div>\n      <svg width=\"32\" height=\"32\" viewBox=\"0 0 32 32\" xmlns=\"http://www.w3.org/2000/svg\">\n        <g fill=\"none\" fillRule=\"evenodd\">\n          <path\n            d=\"M10 0h12a10 10 0 0110 10v12a10 10 0 01-10 10H10A10 10 0 010 22V10A10 10 0 0110 0z\"\n            fill=\"#FFF\"\n          />\n          <path\n            d=\"M5.3 10.6l10.4 6v11.1l-10.4-6v-11zm11.4-6.2l9.7 5.5-9.7 5.6V4.4z\"\n            fill=\"#555AB9\"\n          />\n          <path d=\"M27.2 10.6v11.2l-10.5 6V16.5l10.5-6zM15.7 4.4v11L6 10l9.7-5.5z\" fill=\"#91BAF8\" />\n        </g>\n      </svg>\n      <h1>Acme</h1>\n    </div>\n    <div>\n      <div *ngIf=\"user\">\n        <span class=\"welcome\">\n          Welcome, <b>{{ user.name }}</b\n          >!\n        </span>\n        <storybook-button\n          *ngIf=\"user\"\n          size=\"small\"\n          (onClick)=\"onLogout.emit($event)\"\n          label=\"Log out\"\n        ></storybook-button>\n      </div>\n      <div *ngIf=\"!user\">\n        <storybook-button\n          *ngIf=\"!user\"\n          size=\"small\"\n          class=\"margin-left\"\n          (onClick)=\"onLogin.emit($event)\"\n          label=\"Log in\"\n        ></storybook-button>\n        <storybook-button\n          *ngIf=\"!user\"\n          size=\"small\"\n          [primary]=\"true\"\n          class=\"margin-left\"\n          (onClick)=\"onCreateAccount.emit($event)\"\n          label=\"Sign up\"\n        ></storybook-button>\n      </div>\n    </div>\n  </div>\n</header>",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "user",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 66,
                    "type": "User | null",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "onCreateAccount",
                    "defaultValue": "new EventEmitter<Event>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 75,
                    "type": "EventEmitter"
                },
                {
                    "name": "onLogin",
                    "defaultValue": "new EventEmitter<Event>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 69,
                    "type": "EventEmitter"
                },
                {
                    "name": "onLogout",
                    "defaultValue": "new EventEmitter<Event>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 72,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "ButtonComponent",
                    "type": "component"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input, Output, EventEmitter } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { ButtonComponent } from './button.component';\nimport type { User } from './user';\n\n@Component({\n  selector: 'storybook-header',\n  standalone: true,\n  imports: [CommonModule, ButtonComponent],\n  template: `<header>\n  <div class=\"storybook-header\">\n    <div>\n      <svg width=\"32\" height=\"32\" viewBox=\"0 0 32 32\" xmlns=\"http://www.w3.org/2000/svg\">\n        <g fill=\"none\" fillRule=\"evenodd\">\n          <path\n            d=\"M10 0h12a10 10 0 0110 10v12a10 10 0 01-10 10H10A10 10 0 010 22V10A10 10 0 0110 0z\"\n            fill=\"#FFF\"\n          />\n          <path\n            d=\"M5.3 10.6l10.4 6v11.1l-10.4-6v-11zm11.4-6.2l9.7 5.5-9.7 5.6V4.4z\"\n            fill=\"#555AB9\"\n          />\n          <path d=\"M27.2 10.6v11.2l-10.5 6V16.5l10.5-6zM15.7 4.4v11L6 10l9.7-5.5z\" fill=\"#91BAF8\" />\n        </g>\n      </svg>\n      <h1>Acme</h1>\n    </div>\n    <div>\n      <div *ngIf=\"user\">\n        <span class=\"welcome\">\n          Welcome, <b>{{ user.name }}</b\n          >!\n        </span>\n        <storybook-button\n          *ngIf=\"user\"\n          size=\"small\"\n          (onClick)=\"onLogout.emit($event)\"\n          label=\"Log out\"\n        ></storybook-button>\n      </div>\n      <div *ngIf=\"!user\">\n        <storybook-button\n          *ngIf=\"!user\"\n          size=\"small\"\n          class=\"margin-left\"\n          (onClick)=\"onLogin.emit($event)\"\n          label=\"Log in\"\n        ></storybook-button>\n        <storybook-button\n          *ngIf=\"!user\"\n          size=\"small\"\n          [primary]=\"true\"\n          class=\"margin-left\"\n          (onClick)=\"onCreateAccount.emit($event)\"\n          label=\"Sign up\"\n        ></storybook-button>\n      </div>\n    </div>\n  </div>\n</header>`,\n  styleUrls: ['./header.css'],\n})\nexport class HeaderComponent {\n  @Input()\n  user: User | null = null;\n\n  @Output()\n  onLogin = new EventEmitter<Event>();\n\n  @Output()\n  onLogout = new EventEmitter<Event>();\n\n  @Output()\n  onCreateAccount = new EventEmitter<Event>();\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".storybook-header {\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  border-bottom: 1px solid rgba(0, 0, 0, 0.1);\n  padding: 15px 20px;\n  font-family: 'Nunito Sans', 'Helvetica Neue', Helvetica, Arial, sans-serif;\n}\n\n.storybook-header svg {\n  display: inline-block;\n  vertical-align: top;\n}\n\n.storybook-header h1 {\n  display: inline-block;\n  vertical-align: top;\n  margin: 6px 0 6px 10px;\n  font-weight: 700;\n  font-size: 20px;\n  line-height: 1;\n}\n\n.storybook-header button + button {\n  margin-left: 10px;\n}\n\n.storybook-header .welcome {\n  margin-right: 10px;\n  color: #333;\n  font-size: 14px;\n}\n",
                    "styleUrl": "./header.css"
                }
            ],
            "stylesData": "",
            "extends": []
        },
        {
            "name": "NavigationComponent",
            "id": "component-NavigationComponent-f97410f2832bdb12e6989f4cefc8a1c84c030a4a3e8a228c5d98079bacec6ed14c60ee15537c10e5aad3ceac618e5dba49aac57eabcb6ac310bd7209fc357626",
            "file": "src/app/statistics/navigation.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-navigation",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./navigation.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "downloads",
                    "defaultValue": "0",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 20,
                    "modifierKind": [
                        125
                    ]
                },
                {
                    "name": "logging",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 17,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "logLines",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string[]",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 19,
                    "modifierKind": [
                        125
                    ]
                },
                {
                    "name": "navigationHistory",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 18,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "visible",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 16,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "getNavigationItems",
                    "args": [],
                    "optional": false,
                    "returnType": "NavigationItem[]",
                    "typeParameters": [],
                    "line": 124,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        125
                    ]
                },
                {
                    "name": "isPerformanceActive",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 105,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "isStatisticsActive",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 101,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "isVisible",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 72,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "isWatchersActive",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 108,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "navigate",
                    "args": [
                        {
                            "name": "to",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 84,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "to",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "navPerformance",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 120,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "navRewards",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 112,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "navWatchers",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 116,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "Promise<void>",
                    "typeParameters": [],
                    "line": 27,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        134
                    ]
                },
                {
                    "name": "overrideLogging",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 54,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "showLogging",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 68,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "swipeLeft",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 80,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "swipeRight",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 76,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "FormsModule",
                    "type": "module"
                },
                {
                    "name": "CommonModule",
                    "type": "module"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport 'chartjs-adapter-date-fns';\nimport { FormsModule } from '@angular/forms';\nimport { NavigationItem, NavigationService } from '../service/navigation.service';\nimport { SwipeService } from '../service/swipe.service';\nimport { EventService, EventType } from '../service/event.service';\n\n@Component({\n  selector: 'app-navigation',\n  templateUrl: './navigation.html',\n  standalone: true,\n  imports: [FormsModule, CommonModule],\n})\nexport class NavigationComponent implements OnInit {\n  private visible = true;\n  private logging = false;\n  private navigationHistory = '';\n  public logLines: string[] = [];\n  public downloads = 0;\n  constructor(\n    private navigationService: NavigationService,\n    private swipeService: SwipeService,\n    private eventService: EventService,\n  ) {}\n\n  async ngOnInit(): Promise<void> {\n    await this.eventService.subscribeToEvent(EventType.StatisticsScreenLoaded, () => {\n      this.visible = true;\n    });\n    await this.eventService.subscribeToEvent(EventType.WatchersScreenLoaded, () => {\n      this.visible = true;\n    });\n    await this.eventService.subscribeToEvent(EventType.PerformanceScreenLoaded, () => {\n      this.visible = true;\n    });\n    await this.eventService.subscribeToEvent(EventType.SettingsScreenLoaded, () => {\n      this.visible = false;\n    });\n\n    await this.eventService.subscribeToEvent(EventType.StartFullDownload, () => {\n      this.downloads++;\n    });\n\n    await this.eventService.subscribeToEvent(EventType.EndFullDownload, () => {\n      this.downloads--;\n      if (this.downloads < 0) {\n        this.downloads = 0;\n      }\n    });\n    this.overrideLogging();\n  }\n\n  overrideLogging() {\n    const logLines = this.logLines;\n    const originalConsoleLog = console.log;\n\n    console.log = function (...args: string[]) {\n      const timestamp = new Date().toISOString();\n\n      const logMessage = `[Intercepted] ${timestamp} - ${args.join(' ')}`;\n      logLines.push(logMessage);\n\n      originalConsoleLog.apply(console, [`[Intercepted] ${timestamp}`, ...args]);\n    };\n  }\n\n  showLogging(): boolean {\n    return this.logging;\n  }\n\n  isVisible(): boolean {\n    return this.visible;\n  }\n\n  swipeRight(): void {\n    this.swipeService.swipe('right', this.navigationService.navigateLeft().route);\n  }\n\n  swipeLeft(): void {\n    this.swipeService.swipe('left', this.navigationService.navigateRight().route);\n  }\n\n  navigate(to: number) {\n    if (to == this.navigationService.currentNavigationIndex) {\n      return;\n    }\n\n    if (to < this.navigationService.currentNavigationIndex) {\n      this.swipeService.swipe('right', this.navigationService.navigateTo(to).route);\n    } else {\n      this.swipeService.swipe('left', this.navigationService.navigateTo(to).route);\n    }\n\n    this.navigationHistory = this.navigationHistory + to;\n    if (this.navigationHistory.indexOf('01210121012101210') >= 0) {\n      this.logging = true;\n    }\n  }\n\n  isStatisticsActive(): boolean {\n    return this.navigationService.currentNavigationIndex == 0;\n  }\n\n  isPerformanceActive(): boolean {\n    return this.navigationService.currentNavigationIndex == 1;\n  }\n  isWatchersActive(): boolean {\n    return this.navigationService.currentNavigationIndex == 2;\n  }\n\n  navRewards(): void {\n    this.navigate(0);\n  }\n\n  navWatchers(): void {\n    this.navigate(2);\n  }\n\n  navPerformance(): void {\n    this.navigate(1);\n  }\n\n  public getNavigationItems(): NavigationItem[] {\n    return this.navigationService.getNavigationItems();\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "navigationService",
                        "type": "NavigationService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "swipeService",
                        "type": "SwipeService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "eventService",
                        "type": "EventService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 20,
                "jsdoctags": [
                    {
                        "name": "navigationService",
                        "type": "NavigationService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "swipeService",
                        "type": "SwipeService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "eventService",
                        "type": "EventService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "implements": [
                "OnInit"
            ],
            "templateData": "@if (downloads > 0) {\n<div class=\"progress-bar\">\n  <div class=\"progress-bar-value\"></div>\n</div>\n} @if (showLogging()) {\n<div class=\"logging\">\n  @for (log of logLines; track log) {\n  <div class=\"log\">{{ log }}</div>\n  }\n</div>\n} @if (isVisible()) {\n<div class=\"navbar\">\n  <div [ngClass]=\"{ 'navbuttons': true, 'active': isStatisticsActive() }\">\n    <a tabindex=\"0\" (click)=\"navRewards()\" (keypress)=\"navRewards()\">\n      <div class=\"nav-icon\">\n        <div class=\"fa-brands fa-btc\"></div>\n        <div>Rewards</div>\n      </div>\n    </a>\n  </div>\n  <div [ngClass]=\"{ 'navbuttons': true, 'active': isPerformanceActive() }\">\n    <a tabindex=\"0\" (click)=\"navPerformance()\" (keypress)=\"navPerformance()\">\n      <div class=\"nav-icon\">\n        <div class=\"fas fa-chart-bar\"></div>\n        <div>Performance</div>\n      </div>\n    </a>\n  </div>\n  <div [ngClass]=\"{ 'navbuttons': true, 'active': isWatchersActive() }\">\n    <a tabindex=\"0\" (click)=\"navWatchers()\" (keypress)=\"navWatchers()\">\n      <div class=\"nav-icon\">\n        <div class=\"fas fa-eye\"></div>\n        <div>Watchers</div>\n      </div>\n    </a>\n  </div>\n</div>\n}\n"
        },
        {
            "name": "PageComponent",
            "id": "component-PageComponent-21dd6eb370b4983b5c21c84d40e6f54d266a9d9af9889e6e76b35c43058bd53b3e451bad089d5adf4bea46647ba10265a2fa8cb15630398e75636307d4817fc6",
            "file": "src/stories/page.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "storybook-page",
            "styleUrls": [
                "./page.css"
            ],
            "styles": [],
            "template": "<article>  <storybook-header\n    [user]=\"user\"\n    (onLogout)=\"doLogout()\"\n    (onLogin)=\"doLogin()\"\n    (onCreateAccount)=\"doCreateAccount()\"\n  ></storybook-header>\n  <section class=\"storybook-page\">\n    <h2>Pages in Storybook</h2>\n    <p>\n      We recommend building UIs with a\n      <a href=\"https://componentdriven.org\" target=\"_blank\" rel=\"noopener noreferrer\">\n        <strong>component-driven</strong>\n      </a>\n      process starting with atomic components and ending with pages.\n    </p>\n    <p>\n      Render pages with mock data. This makes it easy to build and review page states without\n      needing to navigate to them in your app. Here are some handy patterns for managing page data\n      in Storybook:\n    </p>\n    <ul>\n      <li>\n        Use a higher-level connected component. Storybook helps you compose such data from the\n        \"args\" of child component stories\n      </li>\n      <li>\n        Assemble data in the page component from your services. You can mock these services out\n        using Storybook.\n      </li>\n    </ul>\n    <p>\n      Get a guided tutorial on component-driven development at\n      <a href=\"https://storybook.js.org/tutorials/\" target=\"_blank\" rel=\"noopener noreferrer\">\n        Storybook tutorials\n      </a>\n      . Read more in the\n      <a href=\"https://storybook.js.org/docs\" target=\"_blank\" rel=\"noopener noreferrer\"> docs </a>\n      .\n    </p>\n    <div class=\"tip-wrapper\">\n      <span class=\"tip\">Tip</span> Adjust the width of the canvas with the\n      <svg width=\"10\" height=\"10\" viewBox=\"0 0 12 12\" xmlns=\"http://www.w3.org/2000/svg\">\n        <g fill=\"none\" fillRule=\"evenodd\">\n          <path\n            d=\"M1.5 5.2h4.8c.3 0 .5.2.5.4v5.1c-.1.2-.3.3-.4.3H1.4a.5.5 0 01-.5-.4V5.7c0-.3.2-.5.5-.5zm0-2.1h6.9c.3 0 .5.2.5.4v7a.5.5 0 01-1 0V4H1.5a.5.5 0 010-1zm0-2.1h9c.3 0 .5.2.5.4v9.1a.5.5 0 01-1 0V2H1.5a.5.5 0 010-1zm4.3 5.2H2V10h3.8V6.2z\"\n            id=\"a\"\n            fill=\"#999\"\n          />\n        </g>\n      </svg>\n      Viewports addon in the toolbar\n    </div>\n  </section>\n</article>",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "user",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "User | null",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 69
                }
            ],
            "methodsClass": [
                {
                    "name": "doCreateAccount",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 79,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "doLogin",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 75,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "doLogout",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 71,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "HeaderComponent",
                    "type": "component"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { HeaderComponent } from './header.component';\nimport type { User } from './user';\n\n@Component({\n  selector: 'storybook-page',\n  standalone: true,\n  imports: [CommonModule, HeaderComponent],\n  template: `<article>\n  <storybook-header\n    [user]=\"user\"\n    (onLogout)=\"doLogout()\"\n    (onLogin)=\"doLogin()\"\n    (onCreateAccount)=\"doCreateAccount()\"\n  ></storybook-header>\n  <section class=\"storybook-page\">\n    <h2>Pages in Storybook</h2>\n    <p>\n      We recommend building UIs with a\n      <a href=\"https://componentdriven.org\" target=\"_blank\" rel=\"noopener noreferrer\">\n        <strong>component-driven</strong>\n      </a>\n      process starting with atomic components and ending with pages.\n    </p>\n    <p>\n      Render pages with mock data. This makes it easy to build and review page states without\n      needing to navigate to them in your app. Here are some handy patterns for managing page data\n      in Storybook:\n    </p>\n    <ul>\n      <li>\n        Use a higher-level connected component. Storybook helps you compose such data from the\n        \"args\" of child component stories\n      </li>\n      <li>\n        Assemble data in the page component from your services. You can mock these services out\n        using Storybook.\n      </li>\n    </ul>\n    <p>\n      Get a guided tutorial on component-driven development at\n      <a href=\"https://storybook.js.org/tutorials/\" target=\"_blank\" rel=\"noopener noreferrer\">\n        Storybook tutorials\n      </a>\n      . Read more in the\n      <a href=\"https://storybook.js.org/docs\" target=\"_blank\" rel=\"noopener noreferrer\"> docs </a>\n      .\n    </p>\n    <div class=\"tip-wrapper\">\n      <span class=\"tip\">Tip</span> Adjust the width of the canvas with the\n      <svg width=\"10\" height=\"10\" viewBox=\"0 0 12 12\" xmlns=\"http://www.w3.org/2000/svg\">\n        <g fill=\"none\" fillRule=\"evenodd\">\n          <path\n            d=\"M1.5 5.2h4.8c.3 0 .5.2.5.4v5.1c-.1.2-.3.3-.4.3H1.4a.5.5 0 01-.5-.4V5.7c0-.3.2-.5.5-.5zm0-2.1h6.9c.3 0 .5.2.5.4v7a.5.5 0 01-1 0V4H1.5a.5.5 0 010-1zm0-2.1h9c.3 0 .5.2.5.4v9.1a.5.5 0 01-1 0V2H1.5a.5.5 0 010-1zm4.3 5.2H2V10h3.8V6.2z\"\n            id=\"a\"\n            fill=\"#999\"\n          />\n        </g>\n      </svg>\n      Viewports addon in the toolbar\n    </div>\n  </section>\n</article>`,\n  styleUrls: ['./page.css'],\n})\nexport class PageComponent {\n  user: User | null = null;\n\n  doLogout() {\n    this.user = null;\n  }\n\n  doLogin() {\n    this.user = { name: 'Jane Doe' };\n  }\n\n  doCreateAccount() {\n    this.user = { name: 'Jane Doe' };\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".storybook-page {\n  margin: 0 auto;\n  padding: 48px 20px;\n  max-width: 600px;\n  color: #333;\n  font-size: 14px;\n  line-height: 24px;\n  font-family: 'Nunito Sans', 'Helvetica Neue', Helvetica, Arial, sans-serif;\n}\n\n.storybook-page h2 {\n  display: inline-block;\n  vertical-align: top;\n  margin: 0 0 4px;\n  font-weight: 700;\n  font-size: 32px;\n  line-height: 1;\n}\n\n.storybook-page p {\n  margin: 1em 0;\n}\n\n.storybook-page a {\n  color: inherit;\n}\n\n.storybook-page ul {\n  margin: 1em 0;\n  padding-left: 30px;\n}\n\n.storybook-page li {\n  margin-bottom: 8px;\n}\n\n.storybook-page .tip {\n  display: inline-block;\n  vertical-align: top;\n  margin-right: 10px;\n  border-radius: 1em;\n  background: #e7fdd8;\n  padding: 4px 12px;\n  color: #357a14;\n  font-weight: 700;\n  font-size: 11px;\n  line-height: 12px;\n}\n\n.storybook-page .tip-wrapper {\n  margin-top: 40px;\n  margin-bottom: 40px;\n  font-size: 13px;\n  line-height: 20px;\n}\n\n.storybook-page .tip-wrapper svg {\n  display: inline-block;\n  vertical-align: top;\n  margin-top: 3px;\n  margin-right: 4px;\n  width: 12px;\n  height: 12px;\n}\n\n.storybook-page .tip-wrapper svg path {\n  fill: #1ea7fd;\n}\n",
                    "styleUrl": "./page.css"
                }
            ],
            "stylesData": "",
            "extends": []
        },
        {
            "name": "PerformanceComponent",
            "id": "component-PerformanceComponent-57c8fe2fd0268b4c1520963afd417a2633304e8d5dad44b1b712fb75887587f9e0f95b2b3623bf45b56df0d47d27b31d8336c690d1186b34fa58a70ddfa00806",
            "file": "src/app/statistics/performance.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-performance",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./performance.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "data",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 20
                },
                {
                    "name": "performanceChart",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Chart<bar | literal type[] | > | undefined",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 22
                },
                {
                    "name": "performanceCharts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ChartPerformance[]",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 21
                },
                {
                    "name": "title",
                    "defaultValue": "'rosen-watcher-pwa'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 145
                },
                {
                    "name": "addresses",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Address[]",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 17,
                    "inheritance": {
                        "file": "BaseWatcherComponent"
                    }
                },
                {
                    "name": "browserService",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "BrowserService",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 23,
                    "modifierKind": [
                        124
                    ],
                    "inheritance": {
                        "file": "BaseWatcherComponent"
                    }
                },
                {
                    "name": "busyCounter",
                    "defaultValue": "1",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 15,
                    "modifierKind": [
                        125
                    ],
                    "inheritance": {
                        "file": "BaseWatcherComponent"
                    }
                },
                {
                    "name": "chainService",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ChainService",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 20,
                    "modifierKind": [
                        124
                    ],
                    "inheritance": {
                        "file": "BaseWatcherComponent"
                    }
                },
                {
                    "name": "dataService",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ChainDataService",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 22,
                    "modifierKind": [
                        124
                    ],
                    "inheritance": {
                        "file": "BaseWatcherComponent"
                    }
                },
                {
                    "name": "eventService",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "EventService",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 19,
                    "modifierKind": [
                        124
                    ],
                    "inheritance": {
                        "file": "BaseWatcherComponent"
                    }
                },
                {
                    "name": "loaderLogs",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string[]",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 16,
                    "inheritance": {
                        "file": "BaseWatcherComponent"
                    }
                },
                {
                    "name": "noAddresses",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 18,
                    "inheritance": {
                        "file": "BaseWatcherComponent"
                    }
                },
                {
                    "name": "route",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ActivatedRoute | undefined",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 24,
                    "modifierKind": [
                        124
                    ],
                    "inheritance": {
                        "file": "BaseWatcherComponent"
                    }
                },
                {
                    "name": "storageService",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "StorageService",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 21,
                    "modifierKind": [
                        124
                    ],
                    "inheritance": {
                        "file": "BaseWatcherComponent"
                    }
                }
            ],
            "methodsClass": [
                {
                    "name": "createDataSet",
                    "args": [
                        {
                            "name": "i",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "ChartDataSet",
                    "typeParameters": [],
                    "line": 101,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "i",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getPerformanceChart",
                    "args": [],
                    "optional": false,
                    "returnType": "Promise<ChartPerformance[]>",
                    "typeParameters": [],
                    "line": 57,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123,
                        134
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "Promise<void>",
                    "typeParameters": [],
                    "line": 39,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        164,
                        134
                    ],
                    "inheritance": {
                        "file": "BaseWatcherComponent"
                    }
                },
                {
                    "name": "retrieveData",
                    "args": [],
                    "optional": false,
                    "returnType": "Promise<void>",
                    "typeParameters": [],
                    "line": 35,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        134
                    ]
                },
                {
                    "name": "selectTab",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 114,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "updateChart",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 118,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "checkAddressParams",
                    "args": [
                        {
                            "name": "params",
                            "type": "Params",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<boolean>",
                    "typeParameters": [],
                    "line": 63,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        125,
                        134
                    ],
                    "jsdoctags": [
                        {
                            "name": "params",
                            "type": "Params",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseWatcherComponent"
                    }
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "Promise<void>",
                    "typeParameters": [],
                    "line": 52,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        134
                    ],
                    "inheritance": {
                        "file": "BaseWatcherComponent"
                    }
                },
                {
                    "name": "resetHeight",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 39,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "inheritance": {
                        "file": "BaseWatcherComponent"
                    }
                },
                {
                    "name": "SetupRoute",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 57,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        124
                    ],
                    "inheritance": {
                        "file": "BaseWatcherComponent"
                    }
                },
                {
                    "name": "subscribeToEvent",
                    "args": [
                        {
                            "name": "eventType",
                            "type": "EventType",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "callback",
                            "type": "function",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "function": [
                                {
                                    "name": "args",
                                    "type": "T[]",
                                    "deprecated": false,
                                    "deprecationMessage": "",
                                    "dotDotDotToken": true
                                }
                            ]
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [
                        "T"
                    ],
                    "line": 103,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        134
                    ],
                    "jsdoctags": [
                        {
                            "name": "eventType",
                            "type": "EventType",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "callback",
                            "type": "function",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "function": [
                                {
                                    "name": "args",
                                    "type": "T[]",
                                    "deprecated": false,
                                    "deprecationMessage": "",
                                    "dotDotDotToken": true
                                }
                            ],
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseWatcherComponent"
                    }
                },
                {
                    "name": "subscribeToEvents",
                    "args": [
                        {
                            "name": "eventTypes",
                            "type": "EventType[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "callback",
                            "type": "function",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "function": []
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 110,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        134
                    ],
                    "jsdoctags": [
                        {
                            "name": "eventTypes",
                            "type": "EventType[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "callback",
                            "type": "function",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "function": [],
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseWatcherComponent"
                    }
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Injector, OnInit } from '@angular/core';\nimport { EventType } from '../service/event.service';\nimport { BaseWatcherComponent } from '../basewatchercomponent';\nimport { ChainChartService } from '../service/chain.chart.service';\n\nimport { ChartDataSet } from '../../service/ts/models/chart.dataset';\nimport { ChartPoint } from '../../service/ts/models/chart.point';\nimport { ChartPerformance } from '../../service/ts/models/chart.performance';\nimport { Chart } from 'chart.js';\n\nimport { NavigationService } from '../service/navigation.service';\n\n@Component({\n  selector: 'app-performance',\n  templateUrl: './performance.html',\n  standalone: true,\n  imports: [],\n})\nexport class PerformanceComponent extends BaseWatcherComponent implements OnInit {\n  data: string;\n  performanceCharts: ChartPerformance[];\n  performanceChart: Chart<'bar', { x: string | number | Date; y: number }[], unknown> | undefined;\n\n  constructor(\n    injector: Injector,\n    private chartService: ChainChartService,\n    private navigationService: NavigationService,\n  ) {\n    super(injector);\n    this.data = '';\n    this.addresses = [];\n    this.performanceCharts = [];\n  }\n\n  async retrieveData(): Promise<void> {\n    this.performanceCharts = await this.getPerformanceChart();\n  }\n\n  override async ngOnInit(): Promise<void> {\n    super.ngOnInit();\n\n    window.addEventListener('beforeinstallprompt', (event) => {\n      event.preventDefault();\n    });\n\n    await this.retrieveData();\n    this.updateChart();\n\n    this.eventService.sendEvent(EventType.RequestInputsDownload);\n\n    await this.subscribeToEvent(EventType.RefreshInputs, async () => {\n      await this.retrieveData();\n      this.updateChart();\n    });\n  }\n\n  private async getPerformanceChart(): Promise<ChartPerformance[]> {\n    let performanceChart: ChartPerformance[] = [];\n\n    console.log('start retrieving chart from database');\n\n    const addressCharts = this.dataService.getAddressCharts();\n\n    performanceChart = [];\n\n    for (const key in addressCharts) {\n      if (Object.prototype.hasOwnProperty.call(addressCharts, key)) {\n        const chart: ChartPoint[] = [];\n        for (const ckey in addressCharts[key].charts) {\n          chart.push({\n            x: new Date(Number(ckey)),\n            y: addressCharts[key].charts[ckey],\n          });\n        }\n        const addressForDisplay =\n          key.substring(0, 6) + '...' + key.substring(key.length - 6, key.length);\n        performanceChart.push({\n          address: key,\n          addressForDisplay: addressForDisplay,\n          chart: chart,\n          chainType: addressCharts[key].chainType,\n          color: '',\n        });\n      }\n    }\n\n    performanceChart.sort((a: ChartPerformance, b: ChartPerformance) =>\n      (a.chainType == null ? '' : a.chainType).localeCompare(\n        b.chainType == null ? '' : b.chainType,\n      ),\n    );\n\n    console.log('done retrieving chart from database');\n\n    return performanceChart.map((c: ChartPerformance, index: number) => ({\n      ...c,\n      color: this.chartService.chartColors[index % this.chartService.chartColors.length],\n    }));\n  }\n\n  private createDataSet(i: number): ChartDataSet {\n    const chartColor = this.chartService.chartColors[i % 10];\n    return {\n      label: '',\n      data: [],\n      backgroundColor: chartColor,\n      pointBackgroundColor: chartColor,\n      borderColor: chartColor,\n      borderWidth: 0,\n      borderSkipped: false,\n    };\n  }\n\n  selectTab(): void {\n    this.navigationService.navigate('/chainperformance');\n  }\n\n  updateChart(): void {\n    const dataSets = [];\n    const cnt = this.performanceCharts.length;\n    for (let i = 0; i < cnt; i++) {\n      dataSets.push(this.createDataSet(i));\n    }\n\n    for (let i = 0; i < this.performanceCharts.length; i++) {\n      dataSets[i].data = this.performanceCharts[i].chart;\n      dataSets[i].label = 'Address: ' + this.performanceCharts[i].addressForDisplay;\n    }\n\n    if (!this.performanceChart) {\n      this.performanceChart = this.chartService.createPerformanceChart(dataSets);\n    } else {\n      if (this.performanceCharts.length != this.performanceChart.data.datasets.length) {\n        this.performanceChart.data.datasets = dataSets;\n      } else {\n        for (let i = 0; i < this.performanceCharts.length; i++) {\n          this.performanceChart.data.datasets[i].data = dataSets[i].data;\n        }\n      }\n\n      this.performanceChart.update();\n    }\n  }\n\n  title = 'rosen-watcher-pwa';\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "injector",
                        "type": "Injector",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "chartService",
                        "type": "ChainChartService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "navigationService",
                        "type": "NavigationService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 22,
                "jsdoctags": [
                    {
                        "name": "injector",
                        "type": "Injector",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "chartService",
                        "type": "ChainChartService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "navigationService",
                        "type": "NavigationService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [
                "BaseWatcherComponent"
            ],
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"headercontainer\">\n  <div class=\"headerblock\">\n    Performance&nbsp;\n    <div class=\"header\">RSN per week</div>\n  </div>\n</div>\n\n<div class=\"performancecontainer mywatchers main-content\">\n  <div class=\"performancetab\">\n    <a tabindex=\"0\" class=\"tab\" [class.active]=\"true\">My watchers</a>\n    <a\n      tabindex=\"0\"\n      class=\"tab\"\n      [class.active]=\"false\"\n      (click)=\"selectTab()\"\n      (keypress)=\"selectTab()\"\n    >\n      Compare chains\n    </a>\n  </div>\n\n  <div class=\"addressescontainer\">\n    @for (address of performanceCharts; track address; let i = $index; let isLast = $last) {\n    <div class=\"performancelegend\">\n      <div class=\"chart-legend\" [style.background-color]=\"address.color\"></div>\n      <div class=\"performance-chart-address mainaddressdispl {{address.chainType}}\">\n        - [{{ address.addressForDisplay }}]\n      </div>\n      @if (!isLast) {\n      <span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span>\n      }\n    </div>\n    }\n  </div>\n\n  <div class=\"chartcontainer\">\n    <div class=\"chart-container\">\n      <canvas id=\"PerformanceChart\"></canvas>\n    </div>\n  </div>\n</div>\n"
        },
        {
            "name": "QRDialogComponent",
            "id": "component-QRDialogComponent-c209a5be38b20523bcb2b4441af34cb4bd6777c0071fb87b557431045fc43dadc49e6cae43b16f6884f286fc142c06dd29592ad3d3aa97ee4a79c4b53fa7d018",
            "file": "src/app/statistics/qrdialog.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-qr-dialog",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./qrdialog.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "data",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "QRDialogData",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 20,
                    "decorators": [
                        {
                            "name": "Inject",
                            "stringifiedArguments": "MAT_DIALOG_DATA"
                        }
                    ],
                    "modifierKind": [
                        170,
                        125
                    ]
                },
                {
                    "name": "dialogRef",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "MatDialogRef<QRDialogComponent>",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 19,
                    "modifierKind": [
                        125
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "onCancelClick",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 23,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "QRCodeComponent",
                    "type": "component"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Inject } from '@angular/core';\nimport { MatDialogRef, MAT_DIALOG_DATA } from '@angular/material/dialog';\nimport { QRCodeComponent } from 'angularx-qrcode';\n\ninterface QRDialogData {\n  title: string;\n  content: string;\n  qrData: string;\n}\n\n@Component({\n  selector: 'app-qr-dialog',\n  templateUrl: './qrdialog.html',\n  standalone: true,\n  imports: [QRCodeComponent],\n})\nexport class QRDialogComponent {\n  constructor(\n    public dialogRef: MatDialogRef<QRDialogComponent>,\n    @Inject(MAT_DIALOG_DATA) public data: QRDialogData,\n  ) {}\n\n  onCancelClick(): void {\n    this.dialogRef.close();\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "dialogRef",
                        "type": "MatDialogRef<QRDialogComponent>",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "data",
                        "type": "QRDialogData",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 17,
                "jsdoctags": [
                    {
                        "name": "dialogRef",
                        "type": "MatDialogRef<QRDialogComponent>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "data",
                        "type": "QRDialogData",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "templateData": "<div tabindex=\"0\" class=\"qrdialog\" (click)=\"onCancelClick()\" (keypress)=\"onCancelClick()\">\n  <qrcode [qrdata]=\"data['qrData']\" errorCorrectionLevel=\"M\"></qrcode>\n\n  <button (click)=\"onCancelClick()\" (keypress)=\"onCancelClick()\">Cancel</button>\n\n  <div class=\"linkicon\" id=\"close\">\n    <a tabindex=\"0\" (click)=\"onCancelClick()\" (keypress)=\"onCancelClick()\">\n      <div class=\"fas fa-close\"></div>\n    </a>\n  </div>\n</div>\n"
        },
        {
            "name": "RewardChartComponent",
            "id": "component-RewardChartComponent-7ec81afb46eba72353b550fa0bf44ed6d138d89a6a02ad7bf1448e54caee0534e63e2a2de01fbf0f91e428884af9b0eeda7fd95c64f066998fb09e9e4b17c849",
            "file": "src/app/statistics/reward.chart.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-reward-chart",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./reward.chart.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "chartTitle",
                    "defaultValue": "'Total Rewards Earned (RSN)'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 22,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "color",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 23,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "rewardsChart",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 20,
                    "type": "DateNumberPoint[]",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "accumulatedRewardsChart",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "DateNumberPoint[]",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 21
                },
                {
                    "name": "chart",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "LineChart | null",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "chartCanvas",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ElementRef<HTMLCanvasElement>",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 19,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'chartCanvas'"
                        }
                    ],
                    "modifierKind": [
                        170
                    ]
                },
                {
                    "name": "previousLength",
                    "defaultValue": "0",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 16
                }
            ],
            "methodsClass": [
                {
                    "name": "ngAfterViewInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 43,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnChanges",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 38,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "observeVisibility",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 99,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "setupRewardChart",
                    "args": [
                        {
                            "name": "amounts",
                            "type": "DateNumberPoint[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 78,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "amounts",
                            "type": "DateNumberPoint[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "updateChart",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 47,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "MatDatepickerModule",
                    "type": "module"
                },
                {
                    "name": "MatInputModule",
                    "type": "module"
                },
                {
                    "name": "MatNativeDateModule",
                    "type": "module"
                },
                {
                    "name": "FormsModule",
                    "type": "module"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input, OnChanges, ElementRef, AfterViewInit, ViewChild } from '@angular/core';\nimport { MatDatepickerModule } from '@angular/material/datepicker';\nimport { MatInputModule } from '@angular/material/input';\nimport { MatNativeDateModule } from '@angular/material/core';\nimport { FormsModule } from '@angular/forms';\nimport { ChainChartService, LineChart } from '../service/chain.chart.service';\nimport { EventService, EventType } from '../service/event.service';\n\n@Component({\n  selector: 'app-reward-chart',\n  templateUrl: './reward.chart.html',\n  standalone: true,\n  imports: [MatDatepickerModule, MatInputModule, MatNativeDateModule, FormsModule],\n})\nexport class RewardChartComponent implements OnChanges, AfterViewInit {\n  previousLength = 0;\n  chart: LineChart | null = null;\n\n  @ViewChild('chartCanvas') chartCanvas!: ElementRef<HTMLCanvasElement>;\n  @Input() rewardsChart: DateNumberPoint[] = [];\n  accumulatedRewardsChart: DateNumberPoint[] = [];\n  @Input() chartTitle? = 'Total Rewards Earned (RSN)';\n  @Input() color?: string;\n\n  constructor(\n    private chartService: ChainChartService,\n    private eventService: EventService,\n    private elementRef: ElementRef,\n  ) {\n    this.eventService.subscribeToEvent(EventType.WindowResized, () => {\n      if (this.chart) {\n        this.chart.resize();\n      }\n      this.updateChart();\n    });\n  }\n\n  ngOnChanges(): void {\n    this.setupRewardChart(this.rewardsChart);\n    this.updateChart();\n  }\n\n  ngAfterViewInit(): void {\n    this.observeVisibility();\n  }\n\n  updateChart(): void {\n    if (!this.chart) {\n      if (!this.chartCanvas || !this.chartCanvas.nativeElement) {\n        return;\n      }\n      const canvas = this.chartCanvas.nativeElement;\n      this.chart = this.chartService.createStatisticsChart(\n        canvas,\n        this.accumulatedRewardsChart,\n        1,\n        [0.4],\n        this.chartTitle || 'Total Rewards Earned (RSN)',\n        this.color,\n      );\n    } else {\n      this.chartService.updateStatisticsChart(\n        this.chart,\n        this.chartTitle || 'Total Rewards Earned (RSN)',\n        this.color,\n      );\n    }\n\n    this.chart.data.datasets[0].data = this.chartService.reduceChartData(\n      this.accumulatedRewardsChart,\n      20,\n      true,\n    );\n\n    this.chart.update();\n  }\n\n  private setupRewardChart(amounts: DateNumberPoint[]) {\n    if (\n      this.rewardsChart.length !== 0 &&\n      this.previousLength !== 0 &&\n      this.previousLength !== this.rewardsChart.length &&\n      this.chart\n    ) {\n      this.chart.options.animation = {\n        duration: 1000,\n      };\n    }\n\n    this.previousLength = this.rewardsChart.length;\n\n    let accumulatedAmount = 0;\n    this.accumulatedRewardsChart = amounts.map((s) => {\n      accumulatedAmount += s.y;\n      return { x: s.x, y: accumulatedAmount } as DateNumberPoint;\n    });\n  }\n\n  private observeVisibility(): void {\n    const observer = new IntersectionObserver(\n      (entries) => {\n        entries.forEach((entry) => {\n          if (entry.isIntersecting) {\n            if (this.chart) {\n              this.chart.resize();\n            }\n            this.updateChart();\n          }\n        });\n      },\n      { threshold: 0.1 },\n    );\n\n    observer.observe(this.elementRef.nativeElement);\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "chartService",
                        "type": "ChainChartService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "eventService",
                        "type": "EventService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "elementRef",
                        "type": "ElementRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 23,
                "jsdoctags": [
                    {
                        "name": "chartService",
                        "type": "ChainChartService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "eventService",
                        "type": "EventService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "elementRef",
                        "type": "ElementRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "implements": [
                "OnChanges",
                "AfterViewInit"
            ],
            "templateData": "<canvas #chartCanvas class=\"RewardChart\"></canvas>\n"
        },
        {
            "name": "RosenWatcherComponent",
            "id": "component-RosenWatcherComponent-2a3a4dfb9ae53978a7f710a4edddd367b79400dd6d38897d524f47805092017a91604a4873902e6a35d0f14281eb076267ae86fb303cf34fb2899178507f9dc0",
            "file": "src/app/elements/rosen.watcher.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "rosen-watcher-component",
            "styleUrls": [],
            "styles": [
                "\n      :host ::ng-deep .elementsActive #PerformanceChart,\n      :host ::ng-deep .elementsActive .RewardChart,\n      :host ::ng-deep .elementsActive .chart-container,\n      :host ::ng-deep app-chain-performance.elementsActive,\n      :host ::ng-deep app-statistics-chart.elementsActive,\n      :host ::ng-deep .elementsActive app-reward-chart,\n      :host ::ng-deep .elementsActive .chartcontainer,\n      :host ::ng-deep .performancecontainer.elementsActive {\n        width: inherit;\n        height: inherit;\n        display: block;\n      }\n    "
            ],
            "templateUrl": [
                "./rosen.watcher.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "address1",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 60,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "address10",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 69,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "address11",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 70,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "address12",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 71,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "address13",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 72,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "address14",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 73,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "address15",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 74,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "address16",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 75,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "address17",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 76,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "address18",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 77,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "address19",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 78,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "address2",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 61,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "address20",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 79,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "address3",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 62,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "address4",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 63,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "address5",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 64,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "address6",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 65,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "address7",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 66,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "address8",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 67,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "address9",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 68,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "chartTitle",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 58,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "color",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 81,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "component",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 98,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "period",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 57,
                    "type": "Period",
                    "decorators": []
                },
                {
                    "name": "renderHtml",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 45,
                    "type": "string | boolean",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "notifyChainPerformanceChartsChanged",
                    "defaultValue": "new EventEmitter<\n    { chainType: ChainType | null; chart: number }[]\n  >()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 40,
                    "type": "EventEmitter"
                },
                {
                    "name": "notifyWatchersStatsChanged",
                    "defaultValue": "new EventEmitter<WatchersStats>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 39,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [
                {
                    "name": "_component",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 96,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "_renderHtml",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 37,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "isElementsActive",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 114,
                    "decorators": [
                        {
                            "name": "Inject",
                            "stringifiedArguments": "IS_ELEMENTS_ACTIVE"
                        }
                    ],
                    "modifierKind": [
                        170,
                        125
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "appChainPerformanceActive",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 105,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        125
                    ]
                },
                {
                    "name": "appStatisticsActive",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 109,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        125
                    ]
                },
                {
                    "name": "appWatchersActive",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 101,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        125
                    ]
                },
                {
                    "name": "getFilledAddresses",
                    "args": [],
                    "optional": false,
                    "returnType": "string[]",
                    "typeParameters": [],
                    "line": 83,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "isHtmlRenderEnabled",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 53,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "WatchersComponent",
                    "type": "component"
                },
                {
                    "name": "ChainPerformanceComponent",
                    "type": "component"
                },
                {
                    "name": "StatisticsChartComponent",
                    "type": "component"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, EventEmitter, Inject, Input, Output } from '@angular/core';\nimport { IS_ELEMENTS_ACTIVE } from '../service/tokens';\nimport { WatchersComponent } from '../statistics/watchers.component';\nimport { ChainPerformanceComponent } from '../statistics/chain.performance.component';\nimport { CUSTOM_ELEMENTS_SCHEMA } from '@angular/core';\nimport { WatchersStats } from '../service/watchers.data.service';\nimport { EventService, EventType } from '../service/event.service';\nimport { ChainChartPerformance } from '../../service/ts/models/chart.performance';\nimport { StatisticsChartComponent } from './statistics.chart.component';\nimport { CommonModule } from '@angular/common';\n\n/* eslint-disable @angular-eslint/component-selector */\n@Component({\n  selector: 'rosen-watcher-component',\n  templateUrl: './rosen.watcher.component.html',\n  standalone: true,\n  imports: [CommonModule, WatchersComponent, ChainPerformanceComponent, StatisticsChartComponent],\n  schemas: [CUSTOM_ELEMENTS_SCHEMA],\n  styles: [\n    `\n      :host ::ng-deep .elementsActive #PerformanceChart,\n      :host ::ng-deep .elementsActive .RewardChart,\n      :host ::ng-deep .elementsActive .chart-container,\n      :host ::ng-deep app-chain-performance.elementsActive,\n      :host ::ng-deep app-statistics-chart.elementsActive,\n      :host ::ng-deep .elementsActive app-reward-chart,\n      :host ::ng-deep .elementsActive .chartcontainer,\n      :host ::ng-deep .performancecontainer.elementsActive {\n        width: inherit;\n        height: inherit;\n        display: block;\n      }\n    `,\n  ],\n})\nexport class RosenWatcherComponent {\n  private _renderHtml = true;\n\n  @Output() notifyWatchersStatsChanged = new EventEmitter<WatchersStats>();\n  @Output() notifyChainPerformanceChartsChanged = new EventEmitter<\n    { chainType: ChainType | null; chart: number }[]\n  >();\n\n  @Input()\n  set renderHtml(value: string | boolean) {\n    this._renderHtml = value === false || value === 'false' ? false : true;\n  }\n\n  get renderHtml(): boolean {\n    return this._renderHtml;\n  }\n\n  isHtmlRenderEnabled(): boolean {\n    return this._renderHtml;\n  }\n\n  @Input() period?: Period;\n  @Input() chartTitle?: string;\n\n  @Input() address1?: string;\n  @Input() address2?: string;\n  @Input() address3?: string;\n  @Input() address4?: string;\n  @Input() address5?: string;\n  @Input() address6?: string;\n  @Input() address7?: string;\n  @Input() address8?: string;\n  @Input() address9?: string;\n  @Input() address10?: string;\n  @Input() address11?: string;\n  @Input() address12?: string;\n  @Input() address13?: string;\n  @Input() address14?: string;\n  @Input() address15?: string;\n  @Input() address16?: string;\n  @Input() address17?: string;\n  @Input() address18?: string;\n  @Input() address19?: string;\n  @Input() address20?: string;\n\n  @Input() color?: string;\n\n  getFilledAddresses(): string[] {\n    const filledAddresses: string[] = [];\n\n    for (let i = 1; i <= 20; i++) {\n      const address = this[`address${i}` as keyof this] as string | undefined;\n      if (typeof address === 'string' && address.trim() !== '') {\n        filledAddresses.push(address);\n      }\n    }\n\n    return filledAddresses;\n  }\n\n  private _component = '';\n  @Input()\n  set component(value: string) {\n    this._component = value;\n  }\n  public appWatchersActive(): boolean {\n    return this._component === 'watchers';\n  }\n\n  public appChainPerformanceActive(): boolean {\n    return this._component === 'chain-performance';\n  }\n\n  public appStatisticsActive(): boolean {\n    return this._component === 'statistics';\n  }\n\n  constructor(\n    @Inject(IS_ELEMENTS_ACTIVE) public isElementsActive: boolean,\n    private eventService: EventService,\n  ) {\n    this.eventService.subscribeToEvent(EventType.WatchersStatsChanged, (data: WatchersStats) => {\n      console.log(\n        'Received watchers stats changed event, sending through notifyWatchersStatsChanged',\n      );\n      this.notifyWatchersStatsChanged.emit(data);\n    });\n\n    this.eventService.subscribeToEvent(\n      EventType.ChainPerformanceChartsChanged,\n      (data: ChainChartPerformance[]) => {\n        console.log(\n          'Received watchers stats changed event, sending through notifyWatchersStatsChanged',\n        );\n        this.notifyChainPerformanceChartsChanged.emit(\n          data.map(({ chainType, chart }) => ({ chainType, chart })),\n        );\n      },\n    );\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "\n      :host ::ng-deep .elementsActive #PerformanceChart,\n      :host ::ng-deep .elementsActive .RewardChart,\n      :host ::ng-deep .elementsActive .chart-container,\n      :host ::ng-deep app-chain-performance.elementsActive,\n      :host ::ng-deep app-statistics-chart.elementsActive,\n      :host ::ng-deep .elementsActive app-reward-chart,\n      :host ::ng-deep .elementsActive .chartcontainer,\n      :host ::ng-deep .performancecontainer.elementsActive {\n        width: inherit;\n        height: inherit;\n        display: block;\n      }\n    \n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "isElementsActive",
                        "type": "boolean",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "eventService",
                        "type": "EventService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 111,
                "jsdoctags": [
                    {
                        "name": "isElementsActive",
                        "type": "boolean",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "eventService",
                        "type": "EventService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "accessors": {
                "renderHtml": {
                    "name": "renderHtml",
                    "setSignature": {
                        "name": "renderHtml",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "value",
                                "type": "string | boolean",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 45,
                        "jsdoctags": [
                            {
                                "name": "value",
                                "type": "string | boolean",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    },
                    "getSignature": {
                        "name": "renderHtml",
                        "type": "boolean",
                        "returnType": "boolean",
                        "line": 49
                    }
                },
                "component": {
                    "name": "component",
                    "setSignature": {
                        "name": "component",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "value",
                                "type": "string",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 98,
                        "jsdoctags": [
                            {
                                "name": "value",
                                "type": "string",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    }
                }
            },
            "templateData": "<app-watchers\n  *ngIf=\"appWatchersActive() && renderHtml\"\n  class=\"elementsActive\"\n  [renderHtml]=\"renderHtml\"\n></app-watchers>\n\n<app-chain-performance\n  *ngIf=\"appChainPerformanceActive() && renderHtml\"\n  class=\"elementsActive\"\n  [renderHtml]=\"renderHtml\"\n></app-chain-performance>\n\n<app-statistics-chart\n  *ngIf=\"appStatisticsActive() && renderHtml\"\n  class=\"elementsActive\"\n  [renderHtml]=\"renderHtml\"\n  [period]=\"period\"\n  [chartTitle]=\"chartTitle\"\n  [period]=\"period\"\n  [filledAddresses]=\"getFilledAddresses()\"\n  [color]=\"color\"\n></app-statistics-chart>\n"
        },
        {
            "name": "SettingsComponent",
            "id": "component-SettingsComponent-c7c6e9736c41deea1ad9a4403009815acbcf942f18cee74c8948b6e88dccda377c65e0e5d08c17d5a8f9931c2eb772e3c1708bf7b0c399c71ab1230c60169223",
            "file": "src/app/settings/settings.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-settings",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./settings.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "addresses",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Address[]",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 18
                },
                {
                    "name": "dialog",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "MatDialog",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 25,
                    "modifierKind": [
                        125
                    ]
                },
                {
                    "name": "title",
                    "defaultValue": "'settings'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 123
                }
            ],
            "methodsClass": [
                {
                    "name": "addaddress",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 54,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "cancel",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 87,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "deleteaddress",
                    "args": [
                        {
                            "name": "index",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 65,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "index",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "editaddress",
                    "args": [
                        {
                            "name": "index",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 34,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "index",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "Promise<void>",
                    "typeParameters": [],
                    "line": 91,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        134
                    ]
                },
                {
                    "name": "pasteData",
                    "args": [
                        {
                            "name": "index",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 69,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "index",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "save",
                    "args": [],
                    "optional": false,
                    "returnType": "Promise<void>",
                    "typeParameters": [],
                    "line": 80,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        134
                    ]
                },
                {
                    "name": "trackByFn",
                    "args": [
                        {
                            "name": "_",
                            "type": "Address",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "index",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "number",
                    "typeParameters": [],
                    "line": 30,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "_",
                            "type": "Address",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "index",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\nimport { ChainDataService } from '../service/chain.data.service';\nimport { StorageService } from '../service/storage.service';\nimport { Router } from '@angular/router';\nimport { SettingsDialogComponent } from './settings.dialog';\nimport { MatDialog } from '@angular/material/dialog';\n\nimport { Address } from '../../service/ts/models/address';\nimport { EventService, EventType } from '../service/event.service';\n\n@Component({\n  selector: 'app-settings',\n  templateUrl: './settings.html',\n  standalone: true,\n  imports: [],\n})\nexport class SettingsComponent implements OnInit {\n  addresses: Address[];\n\n  constructor(\n    private router: Router,\n    private dataService: ChainDataService,\n    private storageService: StorageService,\n    private eventService: EventService,\n    public dialog: MatDialog,\n  ) {\n    this.addresses = [];\n  }\n\n  trackByFn(_: Address, index: number) {\n    return index;\n  }\n\n  editaddress(index: number): void {\n    const dialogRef = this.dialog.open(SettingsDialogComponent, {\n      data: {\n        title: 'Edit Address',\n        address: this.addresses[index].address,\n      },\n    });\n    dialogRef.afterClosed().subscribe((result) => {\n      if (result) {\n        this.addresses[index].address = result.address;\n        const editAddress = this.addresses.find((a) => a.address == result.address);\n        if (editAddress == null) {\n          this.addresses.push({\n            address: result.address,\n          } as Address);\n        }\n      }\n    });\n  }\n\n  addaddress(): void {\n    const dialogRef = this.dialog.open(SettingsDialogComponent, {\n      data: { title: 'Add Address', address: '', watcherUrl: '' },\n    });\n    dialogRef.afterClosed().subscribe((result) => {\n      if (result) {\n        this.addresses.push({ address: result.address } as Address);\n      }\n    });\n  }\n\n  deleteaddress(index: number): void {\n    this.addresses.splice(index, 1);\n  }\n\n  pasteData(index: number): void {\n    navigator.clipboard\n      .readText()\n      .then((pastedText) => {\n        this.addresses[index].address = pastedText;\n      })\n      .catch((err) => {\n        console.error('Failed to read clipboard contents: ', err);\n      });\n  }\n\n  async save(): Promise<void> {\n    await this.storageService.putAddressData(this.addresses);\n    this.router.navigate(['main'], {\n      queryParams: { addresses: JSON.stringify(this.addresses) },\n    });\n  }\n\n  cancel(): void {\n    this.router.navigate(['statistics']);\n  }\n\n  async ngOnInit(): Promise<void> {\n    const inputs = await this.dataService.getInputs();\n\n    const dataServiceAddresses = this.dataService.getAddressesFromInputs(inputs);\n    // combine addresses from address store,\n    // but also from input data for backwards compatibility reasons\n\n    return this.storageService.getAddressData().then((storageServiceAddresses) => {\n      const addressMap = new Map<string, Address>();\n\n      dataServiceAddresses.forEach((address: Address) => {\n        addressMap.set(address.address, address);\n      });\n\n      storageServiceAddresses.forEach((address: Address) => {\n        if (addressMap.has(address.address)) {\n          const existingAddress = addressMap.get(address.address);\n          addressMap.set(address.address, {\n            ...existingAddress,\n            ...address,\n          });\n        } else {\n          addressMap.set(address.address, address);\n        }\n      });\n\n      this.addresses = Array.from(addressMap.values());\n    });\n\n    this.eventService.sendEvent(EventType.SettingsScreenLoaded);\n  }\n\n  title = 'settings';\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "dataService",
                        "type": "ChainDataService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "storageService",
                        "type": "StorageService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "eventService",
                        "type": "EventService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "dialog",
                        "type": "MatDialog",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 18,
                "jsdoctags": [
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "dataService",
                        "type": "ChainDataService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "storageService",
                        "type": "StorageService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "eventService",
                        "type": "EventService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "dialog",
                        "type": "MatDialog",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"watcherscreen settings\">\n  <button (click)=\"addaddress()\">Add Address</button>\n  <br />\n  <br />\n  <br />\n\n  <div class=\"settingscontainer watchergrid container addressdispl\">\n    @for (address of addresses; track trackByFn(address, i); let i = $index) {\n    <div class=\"watcheritem first-column\">{{ address.address }}</div>\n    <div class=\"watcheritem\">\n      <button (click)=\"editaddress(i)\">Edit</button>\n    </div>\n    <div class=\"watcheritem\">\n      <button (click)=\"deleteaddress(i)\">Delete</button>\n    </div>\n    }\n  </div>\n\n  <div class=\"container\">\n    <button (click)=\"save()\">Save</button>\n    &nbsp;\n    <button (click)=\"cancel()\">Cancel</button>\n  </div>\n</div>\n"
        },
        {
            "name": "SettingsDialogComponent",
            "id": "component-SettingsDialogComponent-43901bd211a9dfaaae1c611f47d16d78c92c3f2d92b20911a72c85fe65c79d980824de46c57577d029ccf1692c6000b2a4d0ffebacdb0c4e91dba8b0cddbb7a8",
            "file": "src/app/settings/settings.dialog.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-dialog",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./dialog.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "data",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "DialogData",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 20,
                    "decorators": [
                        {
                            "name": "Inject",
                            "stringifiedArguments": "MAT_DIALOG_DATA"
                        }
                    ],
                    "modifierKind": [
                        170,
                        125
                    ]
                },
                {
                    "name": "dialogRef",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "MatDialogRef<SettingsDialogComponent>",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 19,
                    "modifierKind": [
                        125
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "onCancelClick",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 23,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "pasteData",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 27,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "FormsModule",
                    "type": "module"
                },
                {
                    "name": "MatDialogClose"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Inject } from '@angular/core';\nimport { MatDialogRef, MAT_DIALOG_DATA, MatDialogClose } from '@angular/material/dialog';\nimport { FormsModule } from '@angular/forms';\n\ninterface DialogData {\n  title: string;\n  content: string;\n  address: string;\n}\n\n@Component({\n  selector: 'app-dialog',\n  templateUrl: './dialog.html',\n  standalone: true,\n  imports: [FormsModule, MatDialogClose],\n})\nexport class SettingsDialogComponent {\n  constructor(\n    public dialogRef: MatDialogRef<SettingsDialogComponent>,\n    @Inject(MAT_DIALOG_DATA) public data: DialogData,\n  ) {}\n\n  onCancelClick(): void {\n    this.dialogRef.close();\n  }\n\n  pasteData(): void {\n    navigator.clipboard\n      .readText()\n      .then((pastedText) => {\n        this.data.address = pastedText;\n      })\n      .catch((err) => {\n        console.error('Failed to read clipboard contents: ', err);\n      });\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "dialogRef",
                        "type": "MatDialogRef<SettingsDialogComponent>",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "data",
                        "type": "DialogData",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 17,
                "jsdoctags": [
                    {
                        "name": "dialogRef",
                        "type": "MatDialogRef<SettingsDialogComponent>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "data",
                        "type": "DialogData",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "templateData": "<div class=\"settingsdialog\">\n  <div class=\"settings\">\n    <h2>{{data.title}}</h2>\n    <div class=\"container\">\n      <input class=\"addressinput\" type=\"text\" [(ngModel)]=\"data.address\" placeholder=\"Address\" />\n      <button (click)=\"pasteData()\">\n        <div class=\"fas fa-paste\"></div>\n      </button>\n    </div>\n\n    <div class=\"container\">\n      <button [mat-dialog-close]=\"data\" cdkFocusInitial>Save</button>\n      &nbsp;\n      <button (click)=\"onCancelClick()\">Cancel</button>\n    </div>\n  </div>\n</div>\n"
        },
        {
            "name": "StatisticsChartComponent",
            "id": "component-StatisticsChartComponent-2f644b55b02869292c615ba67a2e6a4a04eaffaf0d64bfa83823f2d99aaf3e70e5de6af5517b92ddc534360c409fa96a0c804f17a1635d3cbd59f5c731b35d6c",
            "file": "src/app/elements/statistics.chart.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-statistics-chart",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./statistics.chart.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "amounts",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "DateNumberPoint[]",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 30
                },
                {
                    "name": "chartFullTitle",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 22
                },
                {
                    "name": "chartTitle",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 21,
                    "decorators": [
                        {
                            "name": "AngularInput",
                            "stringifiedArguments": ""
                        }
                    ],
                    "modifierKind": [
                        170
                    ]
                },
                {
                    "name": "color",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 28,
                    "decorators": [
                        {
                            "name": "AngularInput",
                            "stringifiedArguments": ""
                        }
                    ],
                    "modifierKind": [
                        170
                    ]
                },
                {
                    "name": "DateUtils",
                    "defaultValue": "DateUtils",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 16
                },
                {
                    "name": "detailInputs",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Input[]",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 18
                },
                {
                    "name": "downloadInProgress",
                    "defaultValue": "{}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Record<string | boolean>",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 23
                },
                {
                    "name": "filledAddresses",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string[]",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 25,
                    "decorators": [
                        {
                            "name": "AngularInput",
                            "stringifiedArguments": ""
                        }
                    ],
                    "modifierKind": [
                        170
                    ]
                },
                {
                    "name": "period",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Period",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 19,
                    "decorators": [
                        {
                            "name": "AngularInput",
                            "stringifiedArguments": ""
                        }
                    ],
                    "modifierKind": [
                        170
                    ]
                },
                {
                    "name": "prevFilledAddresses",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string[]",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 26
                },
                {
                    "name": "previousPeriod",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Period",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 20
                },
                {
                    "name": "sortedInputs",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Input[]",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 17
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnChanges",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 40,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "Promise<void>",
                    "typeParameters": [],
                    "line": 70,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        134
                    ]
                },
                {
                    "name": "retrieveData",
                    "args": [],
                    "optional": false,
                    "returnType": "Promise<void>",
                    "typeParameters": [],
                    "line": 57,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        134
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "RewardChartComponent",
                    "type": "component"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit, Input as AngularInput, OnChanges } from '@angular/core';\nimport { EventService, EventType } from '../service/event.service';\nimport 'chartjs-adapter-date-fns';\nimport { Input } from '../../service/ts/models/input';\nimport { DateUtils } from '../statistics/date.utils';\nimport { RewardChartComponent } from '../statistics/reward.chart.component';\nimport { ChainDataService } from '../service/chain.data.service';\n\n@Component({\n  selector: 'app-statistics-chart',\n  templateUrl: './statistics.chart.html',\n  standalone: true,\n  imports: [RewardChartComponent],\n})\nexport class StatisticsChartComponent implements OnInit, OnChanges {\n  DateUtils = DateUtils;\n  sortedInputs: Input[];\n  detailInputs: Input[];\n  @AngularInput() period?: Period;\n  previousPeriod?: Period;\n  @AngularInput() chartTitle?: string;\n  chartFullTitle?: string;\n  downloadInProgress: Record<string, boolean> = {};\n  @AngularInput()\n  filledAddresses: string[] = [];\n  prevFilledAddresses: string[] = [];\n  @AngularInput()\n  color?: string;\n\n  amounts: DateNumberPoint[] = [];\n\n  constructor(\n    private dataService: ChainDataService,\n    private eventService: EventService,\n  ) {\n    this.sortedInputs = [];\n    this.detailInputs = [];\n  }\n\n  ngOnChanges(): void {\n    if (this.previousPeriod !== this.period) {\n      this.previousPeriod = this.period;\n      this.retrieveData();\n      return;\n    }\n\n    if (\n      !this.prevFilledAddresses ||\n      this.filledAddresses.length !== this.prevFilledAddresses.length ||\n      !this.filledAddresses.every((addr, i) => addr === this.prevFilledAddresses![i])\n    ) {\n      this.prevFilledAddresses = [...this.filledAddresses];\n      this.retrieveData();\n    }\n  }\n\n  async retrieveData(): Promise<void> {\n    this.sortedInputs = DateUtils.filterByPeriod(\n      this.dataService.getSortedInputs(true, null, null) ?? [],\n      this.period || Period.All,\n    );\n\n    this.amounts = this.sortedInputs\n      .filter((s) => this.filledAddresses.includes(s.outputAddress))\n      .map((s) => {\n        return { x: s.inputDate, y: s.amount } as DateNumberPoint;\n      });\n  }\n\n  async ngOnInit(): Promise<void> {\n    this.chartFullTitle = this.chartTitle;\n    await this.eventService.subscribeToEvent<Input[]>(EventType.RefreshInputs, async () => {\n      await this.retrieveData();\n    });\n\n    await this.eventService.sendEvent(EventType.StatisticsScreenLoaded);\n\n    for (const address of this.filledAddresses) {\n      await this.eventService.sendEventWithData(EventType.RequestInputsDownload, address);\n    }\n    /*\n    await this.eventService.subscribeToEvent(EventType.StartFullDownload, (address: string) => {\n      console.log('Starting full download for statistics chart for address:', address);\n      this.downloadInProgress[address] = true;\n      this.chartFullTitle = this.chartTitle + ' (Downloading...)';\n    });\n\n    await this.eventService.subscribeToEvent(EventType.EndFullDownload, (address: string) => {\n      console.log('Ending full download for statistics chart for address:', address);\n      this.downloadInProgress[address] = false;\n\n      if (Object.values(this.downloadInProgress).some((inProgress) => inProgress)) {\n        return;\n      }\n      this.chartFullTitle = this.chartTitle;\n    });*/\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "dataService",
                        "type": "ChainDataService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "eventService",
                        "type": "EventService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 30,
                "jsdoctags": [
                    {
                        "name": "dataService",
                        "type": "ChainDataService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "eventService",
                        "type": "EventService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "implements": [
                "OnInit",
                "OnChanges"
            ],
            "templateData": "<app-reward-chart\n  [rewardsChart]=\"amounts\"\n  [chartTitle]=\"chartFullTitle\"\n  [color]=\"color\"\n></app-reward-chart>\n"
        },
        {
            "name": "StatisticsComponent",
            "id": "component-StatisticsComponent-05d06ac83593613f6c0209f868ad45c208ee325734f64618001f0162aa47cbd234359dbb5be05c3ee078b653e731f791e10bd2a43ae283274979831a73bca63b",
            "file": "src/app/statistics/statistics.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-statistics",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./statistics.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "addressesForDisplay",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Address[]",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 43
                },
                {
                    "name": "amounts",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "DateNumberPoint[]",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 50
                },
                {
                    "name": "DateUtils",
                    "defaultValue": "DateUtils",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 34
                },
                {
                    "name": "detailInputs",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Input[]",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 38
                },
                {
                    "name": "detailInputsSize",
                    "defaultValue": "100",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 40
                },
                {
                    "name": "detailsContainer",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ElementRef",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 46,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'detailsContainer'"
                        }
                    ],
                    "modifierKind": [
                        170
                    ]
                },
                {
                    "name": "filterAddressActive",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 51
                },
                {
                    "name": "filterDateActive",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 47
                },
                {
                    "name": "fromDate",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Date | null",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 48
                },
                {
                    "name": "selectedPeriod",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Period | null",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 42
                },
                {
                    "name": "selectedTab",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 36
                },
                {
                    "name": "shareSupport",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 44
                },
                {
                    "name": "sortedInputs",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Input[]",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 37
                },
                {
                    "name": "title",
                    "defaultValue": "'rosen-watcher-pwa'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 180
                },
                {
                    "name": "toDate",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Date | null",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 49
                },
                {
                    "name": "totalRewards",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 35
                },
                {
                    "name": "version",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string | null",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 41
                },
                {
                    "name": "window",
                    "defaultValue": "document.body",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "HTMLElement",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 39
                },
                {
                    "name": "addresses",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Address[]",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 17,
                    "inheritance": {
                        "file": "BaseWatcherComponent"
                    }
                },
                {
                    "name": "browserService",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "BrowserService",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 23,
                    "modifierKind": [
                        124
                    ],
                    "inheritance": {
                        "file": "BaseWatcherComponent"
                    }
                },
                {
                    "name": "busyCounter",
                    "defaultValue": "1",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 15,
                    "modifierKind": [
                        125
                    ],
                    "inheritance": {
                        "file": "BaseWatcherComponent"
                    }
                },
                {
                    "name": "chainService",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ChainService",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 20,
                    "modifierKind": [
                        124
                    ],
                    "inheritance": {
                        "file": "BaseWatcherComponent"
                    }
                },
                {
                    "name": "dataService",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ChainDataService",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 22,
                    "modifierKind": [
                        124
                    ],
                    "inheritance": {
                        "file": "BaseWatcherComponent"
                    }
                },
                {
                    "name": "eventService",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "EventService",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 19,
                    "modifierKind": [
                        124
                    ],
                    "inheritance": {
                        "file": "BaseWatcherComponent"
                    }
                },
                {
                    "name": "loaderLogs",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string[]",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 16,
                    "inheritance": {
                        "file": "BaseWatcherComponent"
                    }
                },
                {
                    "name": "noAddresses",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 18,
                    "inheritance": {
                        "file": "BaseWatcherComponent"
                    }
                },
                {
                    "name": "route",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ActivatedRoute | undefined",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 24,
                    "modifierKind": [
                        124
                    ],
                    "inheritance": {
                        "file": "BaseWatcherComponent"
                    }
                },
                {
                    "name": "storageService",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "StorageService",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 21,
                    "modifierKind": [
                        124
                    ],
                    "inheritance": {
                        "file": "BaseWatcherComponent"
                    }
                }
            ],
            "methodsClass": [
                {
                    "name": "filterAddressClick",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 120,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "filterDateClick",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 116,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "getDetailInputs",
                    "args": [
                        {
                            "name": "size",
                            "type": "number | null",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Input[]",
                    "typeParameters": [],
                    "line": 72,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "size",
                            "type": "number | null",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "installApp",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 144,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "loadMoreInputs",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 67,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "Promise<void>",
                    "typeParameters": [],
                    "line": 161,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        164,
                        134
                    ],
                    "inheritance": {
                        "file": "BaseWatcherComponent"
                    }
                },
                {
                    "name": "onAddressesChanged",
                    "args": [
                        {
                            "name": "addresses",
                            "type": "Address[] | null",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 135,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "addresses",
                            "type": "Address[] | null",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onDateRangeChanged",
                    "args": [
                        {
                            "name": "range",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 128,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "range",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onExportClick",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 124,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onPeriodChange",
                    "args": [],
                    "optional": false,
                    "returnType": "Promise<void>",
                    "typeParameters": [],
                    "line": 148,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        134
                    ]
                },
                {
                    "name": "retrieveData",
                    "args": [],
                    "optional": false,
                    "returnType": "Promise<void>",
                    "typeParameters": [],
                    "line": 91,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        134
                    ]
                },
                {
                    "name": "selectTab",
                    "args": [
                        {
                            "name": "tab",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 87,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "tab",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "share",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 157,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "showHomeLink",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 83,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "showQR",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 153,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "checkAddressParams",
                    "args": [
                        {
                            "name": "params",
                            "type": "Params",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<boolean>",
                    "typeParameters": [],
                    "line": 63,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        125,
                        134
                    ],
                    "jsdoctags": [
                        {
                            "name": "params",
                            "type": "Params",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseWatcherComponent"
                    }
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "Promise<void>",
                    "typeParameters": [],
                    "line": 52,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        134
                    ],
                    "inheritance": {
                        "file": "BaseWatcherComponent"
                    }
                },
                {
                    "name": "resetHeight",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 39,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "inheritance": {
                        "file": "BaseWatcherComponent"
                    }
                },
                {
                    "name": "SetupRoute",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 57,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        124
                    ],
                    "inheritance": {
                        "file": "BaseWatcherComponent"
                    }
                },
                {
                    "name": "subscribeToEvent",
                    "args": [
                        {
                            "name": "eventType",
                            "type": "EventType",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "callback",
                            "type": "function",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "function": [
                                {
                                    "name": "args",
                                    "type": "T[]",
                                    "deprecated": false,
                                    "deprecationMessage": "",
                                    "dotDotDotToken": true
                                }
                            ]
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [
                        "T"
                    ],
                    "line": 103,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        134
                    ],
                    "jsdoctags": [
                        {
                            "name": "eventType",
                            "type": "EventType",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "callback",
                            "type": "function",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "function": [
                                {
                                    "name": "args",
                                    "type": "T[]",
                                    "deprecated": false,
                                    "deprecationMessage": "",
                                    "dotDotDotToken": true
                                }
                            ],
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseWatcherComponent"
                    }
                },
                {
                    "name": "subscribeToEvents",
                    "args": [
                        {
                            "name": "eventTypes",
                            "type": "EventType[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "callback",
                            "type": "function",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "function": []
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 110,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        134
                    ],
                    "jsdoctags": [
                        {
                            "name": "eventTypes",
                            "type": "EventType[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "callback",
                            "type": "function",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "function": [],
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseWatcherComponent"
                    }
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "NgStyle"
                },
                {
                    "name": "RouterLink"
                },
                {
                    "name": "RouterLinkActive"
                },
                {
                    "name": "FormsModule",
                    "type": "module"
                },
                {
                    "name": "InfiniteScrollDirective",
                    "type": "directive"
                },
                {
                    "name": "FilterDateComponent",
                    "type": "component"
                },
                {
                    "name": "RewardChartComponent",
                    "type": "component"
                },
                {
                    "name": "FilterAddressComponent",
                    "type": "component"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit, ViewChild, ElementRef, Injector } from '@angular/core';\nimport { EventType } from '../service/event.service';\nimport { BaseWatcherComponent } from '../basewatchercomponent';\nimport { RouterLink, RouterLinkActive } from '@angular/router';\nimport { NgStyle } from '@angular/common';\nimport 'chartjs-adapter-date-fns';\nimport { Input } from '../../service/ts/models/input';\nimport { Address } from '../../service/ts/models/address';\nimport { ServiceWorkerService } from '../service/service.worker.service';\nimport { FormsModule } from '@angular/forms';\nimport { FilterDateComponent } from './filter.date.component';\nimport { FilterAddressComponent } from './filter.address.component';\nimport { InfiniteScrollDirective } from 'ngx-infinite-scroll';\nimport { DateUtils } from './date.utils';\nimport { CsvUtils } from './csv.utils';\nimport { RewardChartComponent } from './reward.chart.component';\n\n@Component({\n  selector: 'app-statistics',\n  templateUrl: './statistics.html',\n  standalone: true,\n  imports: [\n    NgStyle,\n    RouterLink,\n    RouterLinkActive,\n    FormsModule,\n    InfiniteScrollDirective,\n    FilterDateComponent,\n    RewardChartComponent,\n    FilterAddressComponent,\n  ],\n})\nexport class StatisticsComponent extends BaseWatcherComponent implements OnInit {\n  DateUtils = DateUtils;\n  totalRewards: string;\n  selectedTab: string;\n  sortedInputs: Input[];\n  detailInputs: Input[];\n  window: HTMLElement = document.body;\n  detailInputsSize = 100;\n  version: string | null;\n  selectedPeriod: Period | null;\n  addressesForDisplay: Address[];\n  shareSupport = false;\n\n  @ViewChild('detailsContainer') detailsContainer!: ElementRef;\n  filterDateActive = false;\n  fromDate: Date | null = null;\n  toDate: Date | null = null;\n  amounts: DateNumberPoint[] = [];\n  filterAddressActive = false;\n\n  constructor(\n    injector: Injector,\n    private serviceWorkerService: ServiceWorkerService,\n  ) {\n    super(injector);\n    this.totalRewards = '';\n    this.selectedTab = 'chart';\n    this.addressesForDisplay = [];\n    this.sortedInputs = [];\n    this.detailInputs = [];\n    this.version = '';\n    this.selectedPeriod = null;\n  }\n\n  loadMoreInputs() {\n    this.detailInputsSize += 100;\n    this.detailInputs = this.getDetailInputs(this.detailInputsSize);\n  }\n\n  getDetailInputs(size: number | null): Input[] {\n    const result = this.dataService.getInputsPart(\n      size,\n      this.fromDate,\n      this.toDate,\n      this.addressesForDisplay,\n    );\n\n    return result ? result : [];\n  }\n\n  showHomeLink(): boolean {\n    return this.browserService.showHomeLink() ?? false;\n  }\n\n  selectTab(tab: string): void {\n    this.selectedTab = tab;\n  }\n\n  async retrieveData(): Promise<void> {\n    this.selectedPeriod =\n      this.selectedPeriod ?? (localStorage.getItem('statisticsPeriod') as Period) ?? Period.All;\n\n    this.sortedInputs = DateUtils.filterByPeriod(\n      this.dataService.getSortedInputs(true, null, null) ?? [],\n      this.selectedPeriod,\n    );\n\n    this.amounts = this.sortedInputs.map((s) => {\n      return { x: s.inputDate, y: s.amount } as DateNumberPoint;\n    });\n\n    if (this.amounts.length > 0) {\n      const total = this.amounts.reduce((sum, item) => sum + item.y, 0);\n      this.totalRewards = total.toFixed(3).toString();\n    }\n\n    this.detailInputs = this.getDetailInputs(this.detailInputsSize);\n\n    this.addressesForDisplay = await this.dataService.getAddressesForDisplay(\n      this.dataService.rsnInputs,\n    );\n  }\n\n  filterDateClick() {\n    this.filterDateActive = true;\n  }\n\n  filterAddressClick() {\n    this.filterAddressActive = true;\n  }\n\n  onExportClick() {\n    CsvUtils.csvExportInputs(this.getDetailInputs(null));\n  }\n\n  onDateRangeChanged(range: { from: Date | null; to: Date | null }) {\n    this.fromDate = range.from;\n    this.toDate = range.to;\n    this.detailInputs = this.getDetailInputs(this.detailInputsSize);\n    this.filterDateActive = false;\n  }\n\n  onAddressesChanged(addresses: Address[] | null) {\n    if (addresses) {\n      this.addresses = addresses;\n    }\n\n    this.detailInputs = this.getDetailInputs(this.detailInputsSize);\n    this.filterAddressActive = false;\n  }\n\n  installApp(): void {\n    this.browserService.installApp();\n  }\n\n  async onPeriodChange(): Promise<void> {\n    localStorage.setItem('statisticsPeriod', this.selectedPeriod as string);\n    await this.retrieveData();\n  }\n\n  showQR(): void {\n    this.browserService.showQR(this.addresses);\n  }\n\n  share(): void {\n    this.browserService.share(this.addresses);\n  }\n\n  override async ngOnInit(): Promise<void> {\n    super.ngOnInit();\n\n    this.selectedPeriod = localStorage.getItem('statisticsPeriod') as Period;\n    this.SetupRoute();\n    this.shareSupport = navigator.share != null && navigator.share != undefined;\n\n    await this.subscribeToEvent<Input[]>(EventType.RefreshInputs, async () => {\n      await this.retrieveData();\n    });\n\n    this.version = this.serviceWorkerService.getVersion();\n    await this.subscribeToEvent<string>(EventType.VersionUpdated, async (v) => {\n      this.version = v;\n    });\n\n    await this.eventService.sendEvent(EventType.StatisticsScreenLoaded);\n  }\n\n  title = 'rosen-watcher-pwa';\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "injector",
                        "type": "Injector",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "serviceWorkerService",
                        "type": "ServiceWorkerService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 51,
                "jsdoctags": [
                    {
                        "name": "injector",
                        "type": "Injector",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "serviceWorkerService",
                        "type": "ServiceWorkerService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [
                "BaseWatcherComponent"
            ],
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"headercontainer\">\n  <div class=\"headerblock\">\n    Total rewards:\n    <div class=\"header\">{{totalRewards}} RSN</div>\n  </div>\n</div>\n\n<div class=\"stats-container main-content\">\n  <a\n    tabindex=\"0\"\n    class=\"tab\"\n    [class.active]=\"selectedTab === 'chart'\"\n    (click)=\"selectTab('chart')\"\n    (keypress)=\"selectTab('chart')\"\n  >\n    Graph\n  </a>\n  <a\n    tabindex=\"0\"\n    class=\"tab\"\n    [class.active]=\"selectedTab === 'details'\"\n    (click)=\"selectTab('details')\"\n    (keypress)=\"selectTab('details')\"\n  >\n    Details\n  </a>\n\n  @if (selectedTab === 'chart') {\n  <div class=\"period\">\n    <label for=\"periodSelect\">Period:</label>\n    <select id=\"periodSelect\" [(ngModel)]=\"selectedPeriod\" (change)=\"onPeriodChange()\">\n      <option value=\"Day\">Last day</option>\n      <option value=\"Week\">Last week</option>\n      <option value=\"Month\">Last month</option>\n      <option value=\"Year\">Last year</option>\n      <option value=\"All\">All</option>\n    </select>\n  </div>\n  } @if (selectedTab !== 'chart') {\n  <div class=\"period\">\n    <button (click)=\"onExportClick()\" (keypress)=\"onExportClick()\">Export to csv</button>\n  </div>\n  }\n</div>\n\n<div class=\"chartcontainer\" [ngStyle]=\"{'display': selectedTab === 'chart' ? 'block' : 'none'}\">\n  <div class=\"version-container\" style=\"position: absolute\">\n    <div class=\"version\">version: {{version}}</div>\n  </div>\n  <div class=\"chart-container\">\n    <app-reward-chart [rewardsChart]=\"amounts\"></app-reward-chart>\n  </div>\n</div>\n\n<div\n  infiniteScroll\n  [infiniteScrollDistance]=\"2\"\n  [infiniteScrollThrottle]=\"150\"\n  [infiniteScrollContainer]=\"window\"\n  (scrolled)=\"loadMoreInputs()\"\n  class=\"detailscontainer verticalscrollablecontainer\"\n  [ngStyle]=\"{'display': selectedTab === 'details' ? 'block' : 'none'}\"\n>\n  @if (filterDateActive) {\n  <app-filter-date\n    [fromDate]=\"fromDate\"\n    [toDate]=\"toDate\"\n    (dateRangeCanceled)=\"filterDateActive = false\"\n    (dateRangeChanged)=\"onDateRangeChanged($event)\"\n  ></app-filter-date>\n  } @if (filterAddressActive) {\n  <app-filter-address\n    [addresses]=\"addressesForDisplay\"\n    (addressesCanceled)=\"filterAddressActive = false\"\n    (addressesChanged)=\"onAddressesChanged($event)\"\n  ></app-filter-address>\n  }\n\n  <div #detailsContainer class=\"details-container\">\n    <div>\n      <div class=\"statdetaildispl\">\n        <div class=\"chainType\">\n          <a\n            tabindex=\"0\"\n            class=\"fas fa-filter rsn_filter\"\n            (click)=\"filterAddressClick()\"\n            (keypress)=\"filterAddressClick()\"\n          >\n            &nbsp;\n          </a>\n        </div>\n        <div class=\"inputDate\">\n          Date\n          <a\n            tabindex=\"0\"\n            class=\"fas fa-filter rsn_filter\"\n            (click)=\"filterDateClick()\"\n            (keypress)=\"filterDateClick()\"\n          >\n            &nbsp;\n          </a>\n        </div>\n        <div class=\"inputTime\">Time</div>\n        <div class=\"amount\">Reward</div>\n      </div>\n    </div>\n\n    <ng-container>\n      @for (input of detailInputs; track input) {\n      <div>\n        <div class=\"statdetaildispl\">\n          <div class=\"{{input.chainType}} chainType\"></div>\n          <div class=\"inputDate\">{{ DateUtils.formatDate(input.inputDate) }}</div>\n          <div class=\"inputTime\">{{ DateUtils.formatTime(input.inputDate) }}</div>\n          <div class=\"amount\">{{ input.amount }} RSN</div>\n        </div>\n      </div>\n      }\n    </ng-container>\n  </div>\n</div>\n\n<div class=\"statistics-footer\">\n  <div class=\"addressescontainer\">\n    Addresses: &nbsp;&nbsp; @for (address of addressesForDisplay; track address; let i = $index; let\n    isLast = $last) {\n    <div class=\"mainaddressdispl {{address.chainType}}\">\n      - [{{ address.smallAddressForDisplay }}] @if (!isLast) {\n      <span>,&nbsp;&nbsp;</span>\n      }\n    </div>\n    }\n  </div>\n\n  <br />\n\n  <div class=\"linkcontainer\">\n    <div class=\"linkicon\">\n      <a tabindex=\"0\" routerLink=\"/settings\" routerLinkActive=\"active\">\n        <div class=\"fas fa-edit\"></div>\n      </a>\n    </div>\n    &nbsp;\n    <div class=\"link\">\n      <a tabindex=\"0\" routerLink=\"/settings\" routerLinkActive=\"active\">Modify addresses</a>\n    </div>\n  </div>\n\n  @if (showHomeLink()) {\n  <div class=\"linkcontainer\">\n    <div class=\"linkicon\" id=\"homelink\">\n      <a tabindex=\"0\" (click)=\"installApp()\" (keypress)=\"installApp()\">\n        <div class=\"fas fa-home\"></div>\n      </a>\n    </div>\n    &nbsp;\n    <div class=\"link\">\n      <a tabindex=\"0\" (click)=\"installApp()\" (keypress)=\"installApp()\">Add to home</a>\n    </div>\n  </div>\n  } @if (shareSupport) {\n  <div class=\"linkcontainer\">\n    <div class=\"linkicon\" id=\"sharelink\">\n      <a tabindex=\"0\" (click)=\"share()\" (keypress)=\"share()\">\n        <div class=\"fas fa-share-nodes\"></div>\n      </a>\n    </div>\n    &nbsp;\n    <div class=\"link\">\n      <a tabindex=\"0\" (click)=\"share()\" (keypress)=\"share()\">Share</a>\n    </div>\n  </div>\n  }\n\n  <div class=\"linkcontainer\">\n    <div class=\"linkicon\" id=\"qrlink\">\n      <a tabindex=\"0\" (click)=\"showQR()\" (keypress)=\"showQR()\">\n        <div class=\"fas fa-qrcode\"></div>\n      </a>\n    </div>\n    &nbsp;\n    <div class=\"link\">\n      <a tabindex=\"0\" (click)=\"showQR()\" (keypress)=\"showQR()\">QR</a>\n    </div>\n  </div>\n</div>\n"
        },
        {
            "name": "WatchersComponent",
            "id": "component-WatchersComponent-58121e4037bd42b0c8c90eebbd1186d9278bb187a41208e1af62d9325e0cb9c22b8b41f220eb1b10b33741618f306afbeef942bf7e2cacf213b9cb2bd999d25e",
            "file": "src/app/statistics/watchers.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-watchers",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./watchers.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "renderHtml",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 29,
                    "type": "string | boolean",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "notifyWatchersStatsChanged",
                    "defaultValue": "new EventEmitter<WatchersStats>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 41,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [
                {
                    "name": "_renderHtml",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 26,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "isElementsActive",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 49,
                    "decorators": [
                        {
                            "name": "Inject",
                            "stringifiedArguments": "IS_ELEMENTS_ACTIVE"
                        }
                    ],
                    "modifierKind": [
                        170,
                        125
                    ]
                },
                {
                    "name": "selectedCurrency",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 44
                },
                {
                    "name": "watchersStats",
                    "defaultValue": "new WatchersStats()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "WatchersStats",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 43
                },
                {
                    "name": "addresses",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Address[]",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 17,
                    "inheritance": {
                        "file": "BaseWatcherComponent"
                    }
                },
                {
                    "name": "browserService",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "BrowserService",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 23,
                    "modifierKind": [
                        124
                    ],
                    "inheritance": {
                        "file": "BaseWatcherComponent"
                    }
                },
                {
                    "name": "busyCounter",
                    "defaultValue": "1",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 15,
                    "modifierKind": [
                        125
                    ],
                    "inheritance": {
                        "file": "BaseWatcherComponent"
                    }
                },
                {
                    "name": "chainService",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ChainService",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 20,
                    "modifierKind": [
                        124
                    ],
                    "inheritance": {
                        "file": "BaseWatcherComponent"
                    }
                },
                {
                    "name": "dataService",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ChainDataService",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 22,
                    "modifierKind": [
                        124
                    ],
                    "inheritance": {
                        "file": "BaseWatcherComponent"
                    }
                },
                {
                    "name": "eventService",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "EventService",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 19,
                    "modifierKind": [
                        124
                    ],
                    "inheritance": {
                        "file": "BaseWatcherComponent"
                    }
                },
                {
                    "name": "loaderLogs",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string[]",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 16,
                    "inheritance": {
                        "file": "BaseWatcherComponent"
                    }
                },
                {
                    "name": "noAddresses",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 18,
                    "inheritance": {
                        "file": "BaseWatcherComponent"
                    }
                },
                {
                    "name": "route",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ActivatedRoute | undefined",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 24,
                    "modifierKind": [
                        124
                    ],
                    "inheritance": {
                        "file": "BaseWatcherComponent"
                    }
                },
                {
                    "name": "storageService",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "StorageService",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 21,
                    "modifierKind": [
                        124
                    ],
                    "inheritance": {
                        "file": "BaseWatcherComponent"
                    }
                }
            ],
            "methodsClass": [
                {
                    "name": "getChainTypes",
                    "args": [],
                    "optional": false,
                    "returnType": "ChainType[]",
                    "typeParameters": [],
                    "line": 66,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "getWatcherAmounts",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 70,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "isHtmlRenderEnabled",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 37,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "Promise<void>",
                    "typeParameters": [],
                    "line": 74,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        164,
                        134
                    ],
                    "inheritance": {
                        "file": "BaseWatcherComponent"
                    }
                },
                {
                    "name": "onCurrencyChange",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 62,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "checkAddressParams",
                    "args": [
                        {
                            "name": "params",
                            "type": "Params",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<boolean>",
                    "typeParameters": [],
                    "line": 63,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        125,
                        134
                    ],
                    "jsdoctags": [
                        {
                            "name": "params",
                            "type": "Params",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseWatcherComponent"
                    }
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "Promise<void>",
                    "typeParameters": [],
                    "line": 52,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        134
                    ],
                    "inheritance": {
                        "file": "BaseWatcherComponent"
                    }
                },
                {
                    "name": "resetHeight",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 39,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "inheritance": {
                        "file": "BaseWatcherComponent"
                    }
                },
                {
                    "name": "SetupRoute",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 57,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        124
                    ],
                    "inheritance": {
                        "file": "BaseWatcherComponent"
                    }
                },
                {
                    "name": "subscribeToEvent",
                    "args": [
                        {
                            "name": "eventType",
                            "type": "EventType",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "callback",
                            "type": "function",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "function": [
                                {
                                    "name": "args",
                                    "type": "T[]",
                                    "deprecated": false,
                                    "deprecationMessage": "",
                                    "dotDotDotToken": true
                                }
                            ]
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [
                        "T"
                    ],
                    "line": 103,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        134
                    ],
                    "jsdoctags": [
                        {
                            "name": "eventType",
                            "type": "EventType",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "callback",
                            "type": "function",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "function": [
                                {
                                    "name": "args",
                                    "type": "T[]",
                                    "deprecated": false,
                                    "deprecationMessage": "",
                                    "dotDotDotToken": true
                                }
                            ],
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseWatcherComponent"
                    }
                },
                {
                    "name": "subscribeToEvents",
                    "args": [
                        {
                            "name": "eventTypes",
                            "type": "EventType[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "callback",
                            "type": "function",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "function": []
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 110,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        134
                    ],
                    "jsdoctags": [
                        {
                            "name": "eventTypes",
                            "type": "EventType[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "callback",
                            "type": "function",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "function": [],
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseWatcherComponent"
                    }
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "FormsModule",
                    "type": "module"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\n  Component,\n  effect,\n  EventEmitter,\n  Inject,\n  Injector,\n  Input,\n  OnInit,\n  Output,\n} from '@angular/core';\nimport { EventType } from '../service/event.service';\nimport { WatchersDataService, WatchersStats } from '../service/watchers.data.service';\nimport { BaseWatcherComponent } from '../basewatchercomponent';\nimport { ChainType } from '../../service/ts/models/chaintype';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule } from '@angular/forms';\nimport { IS_ELEMENTS_ACTIVE } from '../service/tokens';\n\n@Component({\n  selector: 'app-watchers',\n  templateUrl: './watchers.html',\n  standalone: true,\n  imports: [CommonModule, FormsModule],\n})\nexport class WatchersComponent extends BaseWatcherComponent implements OnInit {\n  private _renderHtml = true;\n\n  @Input()\n  set renderHtml(value: string | boolean) {\n    this._renderHtml = value === false || value === 'false' ? false : true;\n  }\n\n  get renderHtml(): boolean {\n    return this._renderHtml;\n  }\n\n  isHtmlRenderEnabled(): boolean {\n    return this._renderHtml;\n  }\n\n  @Output() notifyWatchersStatsChanged = new EventEmitter<WatchersStats>();\n\n  watchersStats: WatchersStats = new WatchersStats();\n  selectedCurrency = '';\n\n  constructor(\n    injector: Injector,\n    private watchersDataService: WatchersDataService,\n    @Inject(IS_ELEMENTS_ACTIVE) public isElementsActive: boolean,\n  ) {\n    super(injector);\n\n    const watcherStats = this.watchersDataService.getWatcherStats();\n\n    effect(() => {\n      this.watchersStats = watcherStats();\n      console.log('Sending watchers stats changed event');\n      this.eventService.sendEventWithData(EventType.WatchersStatsChanged, this.watchersStats);\n    });\n  }\n\n  onCurrencyChange(): void {\n    localStorage.setItem('selectedCurrency', this.selectedCurrency as string);\n  }\n\n  getChainTypes(): ChainType[] {\n    return Object.values(ChainType);\n  }\n\n  getWatcherAmounts() {\n    return this.watchersStats.watchersAmountsPerCurrency[this.selectedCurrency as Currency];\n  }\n\n  override async ngOnInit(): Promise<void> {\n    super.ngOnInit();\n\n    this.selectedCurrency = localStorage.getItem('selectedCurrency') as Currency;\n    this.selectedCurrency = this.selectedCurrency == null ? Currency.EUR : this.selectedCurrency;\n    this.watchersDataService.download();\n    this.eventService.sendEvent(EventType.WatchersScreenLoaded);\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "injector",
                        "type": "Injector",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "watchersDataService",
                        "type": "WatchersDataService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "isElementsActive",
                        "type": "boolean",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 44,
                "jsdoctags": [
                    {
                        "name": "injector",
                        "type": "Injector",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "watchersDataService",
                        "type": "WatchersDataService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "isElementsActive",
                        "type": "boolean",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [
                "BaseWatcherComponent"
            ],
            "implements": [
                "OnInit"
            ],
            "accessors": {
                "renderHtml": {
                    "name": "renderHtml",
                    "setSignature": {
                        "name": "renderHtml",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "value",
                                "type": "string | boolean",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 29,
                        "jsdoctags": [
                            {
                                "name": "value",
                                "type": "string | boolean",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    },
                    "getSignature": {
                        "name": "renderHtml",
                        "type": "boolean",
                        "returnType": "boolean",
                        "line": 33
                    }
                }
            },
            "templateData": "@if (isHtmlRenderEnabled() ? !isElementsActive : false) {\n<div class=\"headercontainer\">\n  <div class=\"headerblock\">\n    Number of watchers:\n    <div class=\"header\">{{ watchersStats.totalWatcherCount }}</div>\n  </div>\n</div>\n} @if (isHtmlRenderEnabled()) {\n<div class=\"watchersmaincontainer main-content\">\n  <div class=\"watcherscontainer\">\n    <div class=\"currencyrow\">\n      <div class=\"watcherrequirements\">Watcher requirements:</div>\n      <div class=\"currency\">\n        <label for=\"currencySelect\">Currency:</label>\n        <select id=\"currencySelect\" [(ngModel)]=\"selectedCurrency\" (change)=\"onCurrencyChange()\">\n          <option value=\"EUR\">Euro</option>\n          <option value=\"USD\">US Dollar</option>\n          <option value=\"ERG\">Ergo</option>\n          <option value=\"RSN\">Rosen</option>\n        </select>\n      </div>\n    </div>\n    <div class=\"watchervaluerow collateralvalues\">\n      Watcher collateral: {{watchersStats.watcherCollateralRSN | number: '1.0-0'}} RSN +\n      {{watchersStats.watcherCollateralERG}} ERG = {{getWatcherAmounts().watcherValue | number:\n      '1.0-0'}} {{this.selectedCurrency}}\n      <br />\n      Permit value: {{watchersStats.permitCost | number: '1.0-0'}} RSN =\n      {{getWatcherAmounts().permitValue | number: '1.0-0'}} {{this.selectedCurrency}}\n    </div>\n    <div class=\"fullrow\">Watchers stats:</div>\n    <div class=\"watcherheader first\"></div>\n    <div class=\"watcherheader\">Chain</div>\n    <div class=\"watcherheader\">Watchers</div>\n    <div class=\"watcherheader\">Permits (Active)</div>\n    <div class=\"watcherheader\">Locked RSN</div>\n    <div class=\"watcherheader\">Locked ERG</div>\n    @for (chainType of getChainTypes(); track chainType) {\n    <div class=\"{{ chainType }} watchersdispl\"></div>\n    <div>{{ chainType }}</div>\n    <div>{{ watchersStats.chainWatcherCount[chainType] }}</div>\n    <div>\n      {{ watchersStats.chainPermitCount[chainType] }} ({{ watchersStats.activePermitCount[chainType]\n      }})\n    </div>\n    <div>{{ watchersStats.chainLockedRSN[chainType] | number: '1.0-0' }}</div>\n    <div>{{ watchersStats.chainLockedERG[chainType] | number: '1.0-0' }}</div>\n    }\n    <div class=\"watchersdispl\"></div>\n    <div>&nbsp;</div>\n    <div>&nbsp;</div>\n    <div></div>\n    <div></div>\n    <div></div>\n    <div class=\"watchersdispl\"></div>\n    <div>Total</div>\n    <div>{{watchersStats.totalWatcherCount}}</div>\n    <div>{{watchersStats.totalPermitCount}} ({{watchersStats.totalActivePermitCount}})</div>\n    <div>{{watchersStats.totalLockedRSN | number: '1.0-0'}}</div>\n    <div>{{watchersStats.totalLockedERG | number: '1.0-0'}}</div>\n    <div class=\"watchersdispl\">&nbsp;</div>\n    <div class=\"fivecolumns\">&nbsp;</div>\n    <div class=\"watchersdispl\"></div>\n    <div class=\"fivecolumns\">\n      Total locked: {{getWatcherAmounts().totalLocked | number: '1.0-0'}} {{this.selectedCurrency}}\n      (permits + collateral)\n    </div>\n  </div>\n</div>\n}\n<div class=\"watchers-readme watchersmaincontainer\">\n  Want this on your own page? Check\n  <a\n    href=\"https://github.com/pwa-pages/pwa-pages.github.io/blob/main/rosen-watcher-pwa/web-component/README.md\"\n  >\n    Github README.md\n  </a>\n  <br />\n</div>\n"
        }
    ],
    "modules": [],
    "miscellaneous": {
        "variables": [
            {
                "name": "appConfig",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/app.config.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "ApplicationConfig",
                "defaultValue": "{\n  providers: [],\n}"
            },
            {
                "name": "chainTypeTokens",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/shared/ts/chain.service.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Object.fromEntries(\n  Object.values(ChainType).map((chain) => [chain, `rspv2${chain}RWT`]),\n)"
            },
            {
                "name": "dataServiceInitializer",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/webcomponents/rosen-web-component.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "object",
                "defaultValue": "{\n  provide: APP_INITIALIZER,\n  useFactory: initializeDataService,\n  deps: [ChainDataService],\n  multi: true,\n}"
            },
            {
                "name": "hotWalletAddress",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/shared/ts/chain.service.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "string",
                "defaultValue": "'nB3L2PD3J4rMmyGk7nnNdESpPXxhPRQ4t1chF8LTXtceMQjKCEgL2pFjPY6cehGjyEFZyHEomBTFXZyqfonvxDozrTtK5JzatD8SdmcPeJNWPvdRb5UxEMXE4WQtpAFzt2veT8Z6bmoWN'"
            },
            {
                "name": "IS_ELEMENTS_ACTIVE",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/service/tokens.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "new InjectionToken<boolean>('IS_ELEMENTS_ACTIVE', {\n  providedIn: 'root',\n  factory: () => false,\n})"
            },
            {
                "name": "permitAddresses",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/shared/ts/chain.service.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Record<ChainType, string>",
                "defaultValue": "{\n  [ChainType.Bitcoin]:\n    'NY4PEzZ7VfjtnTN697R7my9uAVkCYb6N71J2RSmJCFSdDqVf9aPvFQqKXujYDBtSA8hxYVUgkGgU9SP2Ss7JDUkHkdGLBqZwH4yDcPyVvbVbcre3o7nR59wiFDVtjzCjfZmVvMVJD9HiW4GKqVuZGTQCKns8tDe3sJoDNTL3VmhzRUPZf9JCN4TNji1ruXf5CxqWtDrCfoxE4xfbRWGmtBMdLMoRdL85V7z1fP5KxroWX5YgZQo28nTCU3WjPuY2YrjqYYGNHXvFZ9G8E85kCcseNtRWqViXGFzmwqHWKaYe4AdJzBbMKzJWYszsbiemNvisPtT2Yj3FjAmAErpW3gMeWyH3WtbipaAu9D31ggpLeLkLTGscJ9HB2oExpGWvv6u9mGdkTJMHYUuZJUGrcJPE3m7ZTEFxwkbeR9oD8nHHgW4SB46kHFbxzNoUksGPZQnxf95J3e5PUnhYgg7mrQLNpq6pphgGukFcHDgAN2rgFmUSDVsuzomhP735SMiveXSPzx6PZeP7CmrEHyXN6mFbBJuY17kvzzix1w9eFwryZDuZqnAANkYhF3TLkLyGZfSC4o9iAGynpivuNMUgbKAuj6D116tKoCq9PHELL8eTefmXNLFuhauQuKRjmWQKj9zYSd7qi6Zf49KX25PnWHkC3REc4abYpjtiQFefT2HkWRwneTCkJ8uMvoHs6kJzLg8NVzH8XwEZhTM2tNSDhBKZaURpYiQcHwLDgv5uFiwhasLAdZi2EJywBYX51NKc6m4MEsTiAJC9jkEydWcwyDzSHN18yEr4rvEgMNkUhLHJokgV2v3BNFhUTJqe58e2QXAmx9MytUDqzg3vwexEpMhueC2roYA27P1mmb85HKEz15a8LnuUT8ZjmG8kDbHuPYFyxcATytVuDrFDzqKBt9X36bocip4ZU4RRY8JcWjJvMcrBCjV3EhDVQ4it8bhoZnn79PsXazvDteua1NEYEJniPnNrRaiKTUWrseEUQ2vVjWy134jMxRbeiARhoj7MDxug2kFP8jRGSsxWt3Qqbv2SezT3xZ8jYxTyQ2CiyJ61CvUQwPtmoY3XKjrgrJKwnSzJRs4egKPYZKoSiSy6UdHMKuNDmys8wYo3Gi2EgVdUYRLLWcHh5Z2H91odSbTW2h5e6pZeY4a45TgihE6ZnZBhHGc75zJjukhPgP1wEp8GrreHA7ejvTEmpwNgj571x5JrvRD5TxWaFuZKBonGexovAK2L5v',\n  [ChainType.Cardano]:\n    'NY4PEzZ7VfjqPk9gZSNS6ERoYyYBEBebyeXUPs1sjEfdenV3Kq1QKWBSQ1Gfem47fPVRw5UXcYNXtgXNGqsD4DedukcYv5c5kviu94yWpyrh2tbXHea1tyfuEcb8njgvXkAxrXkjvgcPEQqy7BsR3KQPe8vzSaBG5V8WFHQqvHmpMXXYMvKDZzRbNjZUgYvVinGq6qx9hct1fFG15nFdcWZkzhBcu8ytydt3MmnkYEyL4L2rLD8Jp2Q16DfeaBBqmuyxpMoVxPrQzbPjq5GKTKrqnpisWVrubpAy5dg1oQ6tVZompLpwTWvX1xWspA9tWPmc3MCV2e6y313KzSosGLi2Sdv2ptDgJpKamQv6fNKmj3TWkNbPCDfjp2KXYcfYE1vQ5prRZCPCDhVgWP7bqpF3SeUTMJmvBaXjd1tBavjanquQDkYU4n5XBwJPvUa5kCAP1USTgP4cgPA6SzB8hg2RXmB4PmEWM2RWv2mrirYeTdZrzXCbpGCd9B9GK7bNknnYz1X8wVqyYxxQMZ7Rort4BVRNPNKzEMtdGKSmQpiWitfoAfphXL3SGMfwMT3sspgDcD93Ftiq9gf6kgawpFBKWJmV5jXmfiSCWkPW5x56L5hcc3NwJLYYjcMh81aXQBP4HguyudttZcF8QiDa6Ae3idS1BTegArbhZBFn1TQJGgWtuCubLC5Ja71FadEN1G1s4Uz4BapDu3WpNH4NJn3UeWavLd1EytGjevyJu8XjziAMYr6cPZsyhb95aj7LAHgwJ8YT42zWYoDxqhEzbuderVtfauVJxEo2Rt7p83hMtkFS8Dy3vNbdmGEhWEFfDEyquEHTLsYkehRMWTeTeoDpRhKpeXoDxTNriR6Fz6y3Koxwzg281gYhxxvew7TpvSa3cLvjBpNxuoUfhyT645u51cBsQzden3RB5LjJeToSctrx74nNGCm9sR7fQgzno2pETeit1mykq4eocy93EoTcypKitcbfhgAYwXrGcGUQyhsupFgPZMnms5VnWhCsGKkK93uy7z4BRgi9y2aU7zMUxPJN6q3kYhjcdgYhcgqLLmWo5pBRSxcuq3p3NhPnd2Tps5RztjtUS5ZkbRVsTri8Sy2J5xPLir6VB7uxcPCSYYGJaaVfENJ8tYLYH3m3TUoxRipyjNDDBmsRdujqFQvFoYiCyaPFgu9iqzMvuPDM7FDPAKV8V7A895N9SMMZkG7uAzVvLgrU8Wrxdby2CAX9ttmPJn',\n  [ChainType.Ergo]:\n    'NY4PEzZ7Vfjvo3AYu7dBh4ziatarsMAVPnwtHZL6BfoKeaots7P629HvVAmDZNdiVNUitWMqVJhgphUregwCXnhVNRddztP93qbtSWCMzVk1UQmCVUpvQyb25nyH1PrpRSjpFewJWeN3bjiVF6bTAm2t11X4d2fKGnAo3PX2BFVeyAUre7T5CZs2uikxZisyrJ1djE4UY1uwpTFkJv3RzZ3JMugNDeicf7qWqtCtNH8E9uG56VD2dMvmsr5YHQbrKgxa5foyA4K8cD59o2ub9ezbhjSgfXbc6VLaXmp5SzdP6n61MaePNexedifBWwAsHFcaaVXf7oUkePp5dDpc5mBbaAuidBAwH4SaxnUNjPw2bHVSXEk3ZJwwBrZRG7CYBCvEN6wFuPyzuhGsJQwdCtvUqxViGhxWrhRYKwixLhScVdGwCFCF9HjuCXt92FkEZKRk1kJuNzMUuc9AUbafbwhi8RC96TVQrtnsajhomptLKFmQXg4nZQao3jwHV8kfZeyF9BX5kiWUnC83Wa7X7seGUcECHRPLAapk7Lr1kUQ6Q62RpBKeGUsfmPcyNhaZ2bmdxMxxHAhdZdKVr78R5ch2BvG7ZtV6wkHB1hcVJGJmU4dskPPR5EFd8gED72eeUnNAsTknW7ePfNMj4DYWGqf2QhPHDZXsyRN2Mczv4tgyRsNA2HR3U9oZikejcuYhha9yNsXEdNn23B8wa5aDZwR6hwZ9hQ74yv29sbfBAfe9XWT2UZAVaeZeazQSSrvAhicEKnwmCAvfwcZNS57SHJ1EfZf1oEt66S6mGFdBzcKPLZzmJmCgMiBmMThqMemT1XS1ovES76LVcpXSkyiEdA17htR5HuPWdDVfWNQAK2jAM8BjKGtvsh93oMFGvMaBVBAvj1QcfTr17LdeeT7h78bKzyF5SQWuyu46xtDbmTZVrR1ZSpnffiD8TbWnae85Bw1VfttScQ8yfa26dsc9pwLrHhYhC4XKEVPWYUxLHZd959tLA2kGNkJBJR8PPThR8PugaUTq1sQpLg4ezPPUjYyWFvhFf6Rcw5rcJAwj99AUwoEhPaUnxT3TxiEJBbD3Zsna33mQD9Zg69Zzr9xiLA7GzhhA998dwkpbbgqFxyASwH6yav5qDbXPZH7GPtt3nTjUfRs87SGYgVGHoGhqaVUAfQKW4TtvFicdpvQws5kg1nZthd7WkWcR7HqLc1R4wBPFynFVGc457vhQwaP78yQsQDHq86',\n  [ChainType.Ethereum]:\n    'NY4PEzZ7Vfju59RSazdQK92s7PaLrnCh5D9yZBZx7fptQjQZ7Ra2Xiz1PFusrkij3YamVoqXNqoUzazpjnzwmX4zKvPwWGLdqk1RXvp82m7Km2nwtvL2d6tVVCfgiVzA392JszEtNDh9hNXn6wk8eXjXwUg1q1w4UJi6XzmscSH6iZ1BR6ghCp5fyrZBeUfnvbPsfgHmmoVQzmDJ5E9KjmCg53detrDH29gyZUKyqjC5ddnCKG5cvVmoZ7D2ix9KFa9RuLcpVTxnVnuoJnHL1yoGog11TB3eT5hRyiUzeBU688pMb1xyUaCw8bjh5wSsBRAWQnDiAaGuj6zsJEnKeMW94XLeaTASw4K2bwyWHr4BVN9XNSeopFoj6mXPrD2ZhGgPV4HeQp1qEQ2pemMiSecXYkghfnk1t8hnfDNMfXoyKXxEmN8Cf1p7M8pqtgo7H9uUi6xsfotsB2uHVSoT21nzERYMaej9YuYwgC2iUzrzeZNFu7LbMqBErDgHn4wfgppRnF6axDca7QJGNv3q7E2q1DGRpzmTXPfr9FeFxki9geAwsTAy1KTqU2u6TY2wcRC3GzQz83x6LatZLhf9HZnVWZ3SRWQ5AmKUfxhHVxVC9Hwiraqb7ciZBsrnXHWmFaHHHYxafZwoLUBqxeWnHNM211MUwJ2rD9pvrqREfYs4CKYJNDxe5nezL11TnsLyt6p6XkKgHXvvqnk9HQ27pMbpNVX33Y8iQpznFvL2YBCn6Dw9hBDgb8thcYkkAXyLRZskEmhXQFL9evXTstNoeJVJp7NAo7dejZRaKHzTvZnZpkybJGks44qFbGSuSXGegN1V1HWyYGnGSgEJm3yrapNC5tdTvHWXVDxjw1G2TwqKL8D4HZVsyWsu8PEErsaf593jscXKTRn2uqvdhp29rJKGV4v2Cfd8DDXzwhmVxcVFyUiXg9JDe8fCi2rxmFai7a6P6vTJrUkJRtKYBt5RUY3uzKXpX4J4fBWMHmnM2yTSgdaXb9MYULmsbWitqpxiTWh1iMQdXNHxU1A2hHvsqogqEhrG9bGmMU1m1EFSFAPocv3KUf5bPYUWmVUFaxa2MLmE4fs1EC3kCJz8434NrxD1YVA1iosiv5f2tDM8E3w15VRik2a3R1Y6C1D9uHAAT1XK1A27dnx6e586eghm5BuvCY9Di89bdYH5KX3sg4NzWAAJYd5DLZbtdXxzRrKiKwMcPjskhwyQRcv3qstVzPDfJdE8Ej',\n  [ChainType.Binance]:\n    'NY4PEzZ7VfjvyhUfALrnVnmbCo79cESCRMoD4m6TNTRdUnGR3B7EM3KRKxPh6BmdAsdArGV8DgAanEjs4QLYzYTBPGexkgMBPaRwAMSuVAG5rtzuN5qNmyAZsfdrR3cnBuspTqRkBQFp1oczXkCVNFdjpPwAFYLZgnnJFJVnZbp5TQSECTioxM1oJSKm7LBnEbPNrVWFqcShvqAjoyie7Bd471mNEq8y3mEeV7FH3AQCm4fKQgyfwYkRBC4jvFjWDaMshpFbV325g7n5rcyRsbXJ8EGMC2pKVGEbkx2JCgX4ba5dxx1uGibiHnuHiTNXLmrbEJ6BFtBFZB69Ye7U1C23uBEEvTRLteSbKzKAaGv7UbhVtvcgX91muR3sy7jXTW5FszKWej7knHLWJhbUf47fCVvmbXWEx6rHu3fj5hEqQyfVuER3J54yQAtP9ertP9hQX6GQ7mXfyUwmxTYiJS4GxLzeWZGwfSfRUDe6GN7qurja8kVeMrTwdo835yt4XUcemLK53TCkTLe61Bev6NtiUCSuNrhddXcdfMzqk1DWZCXhkcm51pnGmbmAntwC6AF7rL2LHtHi4et2edKAJHkYUp6t9a8Q57eL6fX3Q4JSfDrjfgn4x2fJaF1APdwbBVKoJyhDUkmV6xAaANYZifq54eFg1qBh54F6mu61U3Df5sZqsepzQJNYp6Y95afLuHGmG97mxhmmRsecKbamu4p6P3TPZEs5eYfHspVf85GNh2BztxxYn5hSsR9c8VRJjBhHR1qGHzX4mbRKWn2D41L7AHPnapSQyHCAPdhSbaAV3b6eLqLvc9QrFBAdnsHqN4NauYDPZc6sSrFuLEwNKFbjefc7pBDnA2pfTUUVqCTFuuaM8VmLKFxG2oVsi1k8GD5moSzQbEphVfWTjE9kTZR35oArptsctXGXRT6MXToom6m4cj465Xs9nsRY8t7FgSHsxetJafgogRjo8NRpgFkBpRgf69QuZbqYkrFMTsoDRkLYCLTF4XZwYzu3tqrzLkSZPKDzK1x7pySFdB56vAstU8HPHLqtzduvHt8Gvrkh1mAYQ1cEphCF1jfs5vZUDifLQYnZ2JiJeMdFZu8RhssWvwU2oL6wqx4Ey2iRaSrLSadYnWx47QvGZeZ8M5gupYMNiL7tTkpCjMjbuetqGcpQrtiwuBJ25DqfnWeLN2K6LS49Fb7GjW6Y3fMgdDYVhh7MFpLiyHMcC7wzdBJSMEcE1VNvo2',\n  [ChainType.Doge]:\n    'NY4PEzZ7VfjpDKVcQkzdi4CLcgbMvUX53reQKShv8wRAJ8cRsEi4zV8VwevNM5JPxi5UA77685CKHAQAEkE5HUX2jv5HoMoaZFqcYNBQmHxLA86pS3fHDhg6GvJ8SHssoUZX4uGcgEcRt118Bz8bR8sVAGC23UcafXEwmhfCRfrijjPxDx9ZLHN14uuCU9Gv8Upta65PkzbE3oTD3XDuq7RicN59bz8o6eHef9MfxZetNXrgGTkCJJVJrQ5ahqPLmCzkwv5iXLvRjebbPcen8FxPJ7RDE9rG5BW4uuyroqH6nsNcQKRDnvvnrt5PjghRfss4EswpEJXoxxf7VxYUxx2KgHy8W865bjV5Gvmd9nLPnRStwDV7t7HP2U98fMH3Qdp8PS2Vew5edCjjZTiu2k5kB8frNwSdhGvu91TpAhen474RoxWeoZErNRPpkBH3MN4vHo7EZYiJPjsYtLctVEDWZkvFuaFCYQbuF73JqT7673erYxjRu5o3bCHMgNLYPYuriHLyWtpAJvkFa2Xir54tNfMFyEcvPEWYWaB7J8JsBa8E1b6v9x3VsDyNrU3bGXz52Ax7dG5ziTX1DG2bZuRvGSejjeP8GVgUXTBvRARs8t4wKwdicHkZVie2zGBR5w6Ajo1wK8hNHi2ANYSX5VEFEAFgjwo8DNMUTXbyreeKTcJgcntoc1CbNaiDUvJEyRYaAS7mncPsAiuMjTiFUAzRU5gWdtgRTrkVfi638QrvsvKQgKNPxvGBQpEWtSnmDfRhFifDT716wZ22rca55i9V2ArmDRVZG966MSTYNewX96iwndT8PDhhR4xfysMrTdQMPBzFXGoaAyV54rZ37G1JHQjKQLdMXLP67wjqFMNDRjBUsUYpBYVgj4XpvA1nik8UDqGW5zHoEszpjFJNCSzoexM1zLk8q5vk73dfQ3zaME7tTjp7rdAH3tPtWVkrFSWyDe3rw4zZpSHE2iqH8dDvTVuS1QYsJ6G3iqE8nQbg9FipofqTEjihP9ojvcXgKa9ASce5JNsRKHUSeYkAtDs561sZyf5uY626GcsvMYKGHjEjxCYJUYfrDTFz8v14dNAzVAiYQS7M32otTzKeXhB6ZNSRsErvMfrjgW6Rc7joCL1umHo8c3n3nqxLjZqxnzTgBAXnUNDY2g6LLdVRbj41hxTmvVkwV8MV5N1tvTAALAiagxDKu5bWsfTYFHbiiA7tLxqhsUvATorTzU7nrN1hjpQT3i',\n}"
            },
            {
                "name": "permitBulkAddresses",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/shared/ts/chain.service.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Record<ChainType, string>",
                "defaultValue": "{\n  [ChainType.Bitcoin]:\n    'ZsPNMsGz8D8y11MAneZTVjJndCjgTUrBWezH77jKWr2KXMVRgs4gRkDdTLoUQq8xqtGoESTa7r3zr5E3SxQkE5CM2PaPDSHb5bQWeRtaL9eikJWw95bx4DSjCDcsECpjLxbEfahCHy2sDuXQg6potLhwVVADP5TNUxEDgWPR27x658qcHA54TPRhybb6z67cdmkPrQNXwumoGvoPNnqVcXsdXS71KpQViuk4wXBT156Nd7Tt9b3Dvx827QiLbjJXuajydCDFC6yp2sj5dk7uA5ArNfViybrVQaf71GNGwyh6USgVKBpTurrRBtxeGWNzXi4krd7XbseaU5Crnauk9fj5jEbVH88sPzuD6o4XReNW3odcKDkvqgUh9Vu6b2uGLJsV5wY44Kk3bf8PJmkTc6vQE7Mprkdi2jBfZrzffqoKC6hWLfSZNcUWFV821L43VkJbsaYLukMq1SBJ7y7rsnWcct1U8owQbDpboysHrxfeE84JMTterx8E8sxJqwQRRTxT7M',\n  [ChainType.Cardano]:\n    'ZsPNMsGz8D8y11MAneZTVjJndCjgTUnjAi7MBVhohaELkSWjyWJLdqw9DFRK5XJ5mS3TnP1cxLsjn38fsQ1FKDfXpczKLF38JVqUcTgTz4vWuQ3moQtya1Yb85tJXVnq2NgvDcuWJsRXQWyqBABL93WEFwT6TWiZeXVAQ7x3EhJGmFvUkbZqbtkHvbYACQ7PZVwVNXn44saome9v7QrCMqvxHHrdqaSc13dHXx2MGVut22sVvMsNXT5ody7hoAqmhfioxM6Yw238jUyturCgtbWdVr42Qv5t2aZ8YCdz6ifvqSbKmnNUBSiccfxr2G9Y4eceJ5jv7iJEaf3RAoYH9vTP1yiacpmFZLjtT38FUz5n95ubWfNg5kZAiefzyaFRpV8sRH147FoaQKFRUQRACivsVvXRBhZWYeA57VZ65E7E6d5RU4JJewNiQ5de5daAQXnC9aV2diVXw9obFC2aBYqHz3U14gHss9xvcVPuqFsJdQRLsejtnYxuoZcJF18vohmNKb',\n  [ChainType.Ergo]:\n    'ZsPNMsGz8D8y11MAneZTVjJndCjgTUjPFBh5wF6ZNmMySHVDcBmMx2VxGFNCcMxCKDPkdPEzZp4bt5pgwrpZyKV6nmzCAh6SaX5ZnN2fL2X2UTuLvmuk6t8BqrxoiKHmqASttYk6xJPNabuF9ZNMYQBikFWDmq2jrxZS1MG6gQQ2Mx1MgXVvPs9ZkDTe8TykK4MuvQwtjaatjugK3FC5gsB4e4KiTcMPzreUkHvC8mZQGTtGkmHSbq8hkUDfa8MUMAka4oV3unyhgvx9MHjSDNaKWtqrWJpHCsQqPxvzPKohoYSNQt6H3V6ddw1dzGbBz8eKSbno5tEaLSryLDeMAbXhivALPZ3uCyWvx9BKFxSpuqCuQs9aXH7zKedvxzE6XRrrC2TZcWn5UinvbMNu3S4i5oTK2Y8WeVfoy5XHRbK7AL9w9pimJBp5Dx2UnhhHrWbeg9XyVZP7uCEqcUK3iVFmdG2euUa84Jbr7XVaE8v3sBa8LvYdxc6wAVfgPNNbQNxK7Y',\n  [ChainType.Ethereum]:\n    'ZsPNMsGz8D8y11MAneZTVjJndCjgTUoSPbApCbagsfJ9WvbzbsgAbzHGNF5aNaoR2AyxnrCBH68d5TDEc8aBhVRBT4Q5UC5tdqi9JpMqC8CYFja9PYqMj7KZDjPyMHPxbqUSrq8pGVwe7f8dCV5brNYBCrNqcrC5TmYvp2HpoEUXVb7JsxCuPWQFJgXqYhzEbySQyZQGCdVX6XtjU7aQZK5bzijsXDJhuntTM7ntmdSBJjEhtkMrvrBH8RtTW2JHZw5ZW5QamM3MJbfYDExepJQeJtACiz5n36piDgebfWgjAgibjz6oXsky3mJk2rAETx25AMQSAkHz3cYnH5Gs6BorBka9qXK3U47Dk4tobZGbEZqVeFvuaoRb7VcGUvX8L4rQf72gXzVVCVvY9YEzVoFEfFGe392S5e7X6QpdBuap8maYY4RygToFx6fLeUggDP1gEQ2ptDXZoCcthQPR6ey1GtEju8jqujt2VvJ6A8VjCbU3JYvozB6kqGxLCLKHaN1zm1',\n  [ChainType.Binance]:\n    'ZsPNMsGz8D8y11MAneZTVjJndCjgTUmenzfjjRBRRAo2DZVkwmBZxuHGoNTFLLrmFhsvuagJbFxBVLFW2nnoSuDHhNckxkJhBKNVhfPghWoKTuCHsEdJcJ1RD6XTT2aWbGPwHkja29mj2RibYNyCqjkPWEmbRJhVvfN2DUZ9pExxBPTmghNa6tFQyLkkfHdmuXEXLdpmWndfdknawDuojQPGjx3p42ewB4eeV8Zs7dDCDLdUUghTcczqJAadPMroUpmifMTw1FrpU3jC3kMaSzYpcpPu4e44xEni3E9hrenfQePbFVe9Jq9bVyjsQBF8vC8UxqefzEFmMoHT9xkdRNsFmfLMAximM3nyNhTMgLimWvLcNddW11jK1FFPumgKRUUeRivjtnXiRsNedXpmHKhvSVvpS8wAJbuySw3bHqkrpgQHqAr6vUiXj5McjsYzVh7PZxrUgEGNe8uLk4UpxJGhW3TVLNcPHdEbq2AoyabVkK2ChbE9KZ2JJBdHah93VgZSVG',\n  [ChainType.Doge]:\n    'ZsPNMsGz8D8y11MAneZTVjJndCjgTUn38JxZpW4EiZgEoHt1Juw2od5nVwwx23kjav2ZzWjZAYrjAQnGwskZjCxmVagr3o3d8AfdQZySQigfqzTFjekNSHeQBuQPQ1y3ry6fN4w5ECxn9jrmho9pZFkBddZ2QLbAhvZVt8WrpduXniFkG27KsYo6ikCtgRsJyvzjE7kubBpsYfRf7tV8ZT2RyZaSGJp8Lo6SbrAMdDA1mke93sDDkP6B1cXi1UdSSg8nAi68b2HLJEdnw52KES4Xnh3Dg3s3n9Ur1mGf6WJ44oVVxwsBHoXWLhoAXJ6v6XSnX1rxBcqT344WHLrezqdGwzYAbKYqGtUiEZq6fcHVhL3Wu3pxkv2WbupVFpVAeFPxYzcwwf7vtibL7KG5RDuZ3rziqCgLC5jL9ckTS4KkZXH6YEJktNnUmULpcBdpGUHWzeea2SLMeiNYw1aoZ1k9QfmVK7TjxKJ5g8gSrSTwmfZHMPD5v6EBYyu4gBe31WXWVz',\n}"
            },
            {
                "name": "permitTriggerAddresses",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/shared/ts/chain.service.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Record<ChainType, string>",
                "defaultValue": "{\n  [ChainType.Bitcoin]:\n    '5ivrmzxYZZfH2wJRvogecZo1YYXm32CoKnSZdtwxbjNoogRakUFe56VrrcULZtCkvAzM2MNRMxPYSfZc2rB6tkLKLCirG14JPDMfqBoWMhyzzQLVsDukZupema1i8SvYUuoaiPL5rTyQmqgF3ftPbvM2dHY623B3KsKRTNDhkoMoRmKLzenNWqjXpkANpyc3TCkDuvBypXfbWVN55F2ZZUs8L3XkvaJKcb74GY7whJB8Zg31VgpmVW4uVEuqpcvPk5FYNiTdRakyYTUVFnAdCR6ZDjagBYMr3ks2uHMhQdjmoKmmwCocVm4SGZsA8rU8zj6zrEgpepLT5UPD9sZQWtvSi6C82fPEW9pvNXr4T3sFx2xNRv8meyNUhopUfiRzVoWfx6Q4ArqU3dnmRtN8pxkDfTZr7oGrzAFAb3DRhBUPhhfWY2USAw7LMqMAuW65pdUFcGnczQH3B6V4kALNaoGMD7ixKtkdMkrAPHkJmxKzeMEd6Y49PnHWxFkQbXwqGELjDppqmdbKceyrtjUp3JwcZ5qN7YcLg1yXhFUiWAHhnAwGkHsTHivXADhV81sDBVqM1GUB3piyt6gkJ5My3SaRRTsokrnJLoGL23GwjEfTzDsvXCoXww3MQcwUUCXehQConnMxYsK7HHGV4wf8kbctrFd2ekPkeHm5ksjagEVzKMraZJgrRSRWEHdYmUGkU6tLGZTUF4Xe4MkdzXC3sRtif4iUnZg6Tnt3DEx2i5fmPD4xasYkusc6thd77x5x7MZXMdkxuo9BWTG9iiYAaE4aLQ5yEbrYeVY85DCVFAKXTsiwUH1De3rDhRZfFfQRuDqiYomDFumxofAa9k89yLeCSRyQpAH55BXLqvppusJyDwYJKd5itao8z3Qi2Fsvt7oL77fDnbotPwp7EkFbQZdGi7aUU1SdyfhxNwx6dYcFe2zpj6Spj7zb98FR2HahXwXnqqZjuym7RjN55bqPt2FufJ7CwdgQmiBMid7E1sAVMxBZyAeNbhHEqRJCajpUyGXswJjQJ9S1u9c4rRHzdntMtr2RXDtdgrt6b69GpZgZNeAX3QG9W9kQK4SAHE2BULEmNSBZHHitrRYdx97AsDLFfLpzfsPa82ew9oBy3PacMAF2WP48yxQrAzSA2p5idB5QFbYoECBBLsCyApG37AMuPrr24JrWmZLqR5XEPYnKojYrMcciwkn3L6jRpC5c1D9KrsTGk5dGtqBji1FE9XAVxuVpdddJjBSjphPx2UWtvJnwcxB8CoRSsVDF8RoyPcVwMmSfL5arDGJxBUzVu',\n  [ChainType.Cardano]:\n    '5ivrmzxYZc1s5aYrsy9uMd3wphLaHx4Kqrw7wVDwQdtj967D3qYpAw15uAr1CK4RbXKFW7kersNNe9tXu22iut2zG7tCmAP9TzSNgHMSJFBzR9y7vmqpmTGyFmn6poS81E8MzwaJ2MxkULFoS2nj7CwVsCMGweg84sJShZkGm81jxw6N65GHddQ4sJsBJb6MYFcVXeLxrgnEMPd3eFH7XoVj5uM97P6rsUAztZmeaA9hdUkc9Bz497j5BKQaiXyrFj8ghEtL1cemwfnGrsybkuq132QT9qsW7dNaG95D5wSYNUoAP7mVcziPas1PvEa5xRgMKnvE4ByYPT6BfkAMijYfXSDLzi1EbksurZGfC6jX7jfSgwuugXMNbjrUwhzj6657H9MsytUxRW8kNUKN7mwUphQGFS3nWLG4hzyas5BF8MnK7usWD7MJko7FaUWwNPVrRdatwB5uu6rUrY8UeAW9DPQMrL6VZWMKMWFmoY722pVYHdMdCsehR3CnsRDGDpZtvdqJnGgn2czeZ4AfK8o6aykw3HMTvNP2e6pxNt6FYgr2WZhbXsmeqA6bG7t9JNCw6H7tA8KJPAN1X6CYeZMitX5RWCrMtrSy2NEDepNvMgH3n4GD3tvS5Rs94gFVWHfLu4JM5BaTwfRTcdfirnwPQhYhtH6SEc8b5SgGkraojn4JgkKGp2ftszDUNyaKrY8XJQusuMG64Aoe96wr2AaRKKtUhAKfk7kUXHtGoV3h4MhDy5Wnbgb6hXcmQoMQ8HnT7JMAFWUUeWyveNn3hdNucDf2WtmXBsRpwUidapBJPD9Xukw6uEsWdkzsCNcdhZM4EqnkadRKziCubVx52TYoxDYqupyLssPc6JdaLUWny1Nh2vsEdnuNYXj82iX7AeJRaHJeyn8wytA7G8NwQXp2THTniwF6hPCWTub5khfdJ2g4VDTv14GRL88NA6w49N5FaG2ZWxqgRKYxbEJqgBE91KWHoXfsB4qvo6cGfMwpeJU5g6FTiexmXZqrNpRwmnnx1NTGK4TdqnksfaXZPMfPBbdJnQu1vfGwLuMkP5f5EvyfQ4KzazA67AxoabFYkKJk4pvVkRqaWUps9b3nkZhErUMAgxYR4raNtKHSUT13c9RMaGQmtV8viR4b7Z2JoKjqiEP9xGVoZBANhDpJ3EpihvRmDuy7MAZfy1qEm59spvdgdPPEiffw8GBv9MyDfsAGNSzsMhiP1f8WKXduWy7AdEJZTrBJkLZFPTaRHHyU9XvbRyzrxhV87thVrfRhv88hN6Viw2CyRdMJUPmVt',\n  [ChainType.Ergo]:\n    '5ivrmzxYZTDDDoKD1urVYrXZG96ijTUYXQJzE6SCRJ2RR6Kj1UPWL1iN1xeHgYJEQjnQ7m3Ld9tBRRYqjzrAVAqHyGbZB3otUWZW4sUxN4E11fNUZEMQ3kVwnZxFmeSaxcXhQiTFH1cvBYWuFMRRFfaA2UMfpEgm2WoqeiJxPCojp9D7h6yMV4br5EtWTQJKRtcopBRoUgDg9mrKPAXGPZZKTZbYotgLKQ4nzD8QB5hjYJswhLmePaY3zK5eJq7NTcdoAgbNPK9nQ9UpBUgrc8RB76P8evPHMXg6HrVdQ2z3rkvYFVZqH9SmCkE8KGiLYGX7hwaXYGvPExdoVDp7qsSctsPjwgt9Vts2G76dzJzfBhEunJ33vdTEkEXX3wkjK4ZE8g5YKCwGpcED5PhtRQQtJZaZMYTZV3TpbPWy57U49cD3HVeUGR7efxUHZxYybWJ7q8i6NDm3PUwKFN63HmPYQn7TMYGkvSoizTuTAUJomiKgSnvoz2DSUzukRSRmUFA1cLqdR6s7FbeJfpbaKWX4kUGM2Xh38FdqNE94SjkQMY9bv3H5N8MgwGL2La12e1GXAdMCKJCWKRe27vjdaHJWmsKrBLuXQegGN8BaqNuvJbhrmreHAjR9tVwVkxcTUsr8u8TGUzkzN7coV8HiQV9KBMVgQ24NXPYyoCuedwfCiNwYX7PSSbvve7Dgyy5e1S6qbVpEpVtjy9NzWfRaqr5CyGDqhkfjizNG71NZu543vkacjXrrfPWqtNoXMtTRyM1pzwW9ze9aoRX6e92mVaCUB8hTnfH3Q8EstRLDJygLmp63y45tKwBVBDjog7Z6pWhTfBapMBz8Q28pMfPAR8ywfz8qvtkyQcv9SuEZWfvpZREaS5PGhBuqU79eR9bwNwS6TLu9BZV5Y1ahVFA1fMUxhXTvX69hKnNHFgZ35fZdrVrSeU4U5yGvYX7ViTqL2oFk16HLoTXgNs6KQz7PPZr373gDeRh7PfXpX5jWyxw6SRreE3jB5SUiQnZxmAbpJNVkPzFbZXcrsrS3JHSfiVeqp1tk5uNaZcX39tQTXtu4bGrpv6EiMvYPkiDhCiKd5oAVeZ8VxEGN7SP94vF9WhS2oWUMCVLU1XW2DDHejZ36Zo1Ho8fHbUEaKNbRBozY3HYnkYyJuF4wer8xJ6q4KcPppDrS5jqfAaZF6YWsdtqgse7qMeWVUPj23Vr5XG2S9sYmWA7femKuZki71S6BqZGNfit7F4vrzqNZd1L5oyLSVCtuiv3DybRnu2YEaUtrmCphsmrpAFSEwJWtFKqcC',\n  [ChainType.Ethereum]:\n    '5ivrmzxYZsMEcMTZnZnsQm6jutdmSRzVW7WZoqN2c82khPoBUwF6GRVZdd6XhnNf9gbi3fsoZRM3cHmvz3sgJEJmy61cRxTKrM4q9ZfxYKBtyfNXLwD4CCeMedd6pxYDbgT6h3W5Qce2DZX51sw7aP6hu73HxJvcAirXLCYdZxi1nnGUbZYd8WNkU9zZ5ZGLVasrL49hVLNoJsP3ZYLpqzXchCL8RKv42qnLJ2kHc9BZJyv3QAYqMZTZSHQyRnYj4GAbdB3aYP71ge2HXCb6Arc6upjU4cWJPrPY4f8QcMdhXTrUtWp9u443Ekqdd3S2y2jfWLjDLsd7S9y7ASHPqx3GnCcPK4i9YnCQhdM8i5f59nA5ENgo24BTJvyQiRssDrCPpHxeTUp5ae2E5D4vyAnFfWCFfD6f5Z6DEDQvFnu1JLjjLcunp3rehGTSNgjyNNzGkjf6GF2y6enPuNcfpyNWsY2QJot4r1yZWqzeHvMgjbhnjpcManj1ikT1FFeg1oKZCCNBUbed4jYnmM1qFFmTYaovRUuEFXKFU2fhpz3EfEB79PUd5g5YMu1MTkKdUzLrEnoTxz9GKNpXCsoFvwC82hEuwXPcPFuMHdBFa4jtqSueVFgCPHHiXMz2koe6FGmCzY67q8215taocoiEC8NjGNTJ6Bzz3apbT5JP2hLVi6z11kNDQgtTA4gNRoftjZBBNVaFFj1DwURqEBzdawony7FvSpQYzgFEz5PKN7rAAr8Dsd4phbesmeASSph4aQLzB7iuibFSZXxyBm1w8GUEodaWEhh2UeTCJx2XtocU9aLYrUSgA6PgBF5NWzWwXDihESwyboSKnDb2mfHeGyjkjKSfQP2oP8Las1CeMXPdnwXUggckB44f82qjE5ENnqYhah4s5WkgPzzSvx42uhxc8VTbySPgiDefVGuFCEATX6fgAs5ikKh38TYWzLbUi9qM5Ncz9G7Z7Mc8RTdKtRLSxLUoPpiabXtyfdBkNr5PYhznMd3TPy9EHKinSzPV3GiJHGEkfYAbGmf2imbG2LrGtCEnyft3vBXYVocEnAXZsVKSRMPvkWsA7J2LRuQHrZCbVwY4LBDpfrHriEGUnAd168HB7DKPqRtCsVLgd2h6JgSHS4xXvfSwhG371VfTxJgAAtHUgKttcZfpZGXffLCwP7zmQGNVz6FJLsTEN3VXaQMQ7ooCeGHFdL7nbB7ejitfnWzWqgwqi5kv3nZEcmx4YfcnyvAjBosChtBMNfkMSVqa42Mx1xat4eJvHD5Jm1AwYijVqQjcXYh1ZzHqD',\n  [ChainType.Binance]:\n    '5ivrmzxYZw1LAT2rQQY7Gkiuo36J5uzCTyMRoqee9QDzT4Wa1NnZaQ6zVLw3yw4ksfRCdfKiCYfjyiaJuAvdwi8WfVd2VJZo5VfoX7qNEELk34ZdvjCGsSdA3AWVfqSPy8NxPqm41xeccezcgRCVmyTHJa4pu38vtBvTZsnV4jzGTZsSstTQPGZMUUTys6VSBRUGqQjFpjVty3jTFudfJ4rRgyuGhyA1A3jgzY6wPSBXHniAi3c9rQLVEGNzpuyjXD1bFVemGdEmZp5tYLKb5BMsasJr6fa3P4xdyWryg6uUrxGiPZCRT4Z9DMmSyJdfVBFtnLaL7abqN3evRuHrGMn3KVVSFocUM9dLGZpU3XzzvWkgjwxB99FVJ4TzCSKphSgh3gPuCnwQWFhpuRuJJzV8je2jtYguEMNzcygK8WkvkuTsniW3zqJdGpHEqSKcQwnR7a5nP8yVyRRi26aYrNDjuJ2XoqnpLSSNAPmFZNApWcXGRqsqdaJBLsKPkkFXNYfcpwPNcpuExuFaeLhUaCbxdjWKBWMHPxqEhvK2dcs6uXhPjp4QX9XoMSiRqBGC7YAxhZkChKaxmBM3y2sTsyfW69LFM2VKs84FF7tXCGKPomVABQCgVbt5p9BKyPcL8ERa2LJrzfKJwfoXSAPrrK2QEd5zaDi7g6tSVy5QBFzrYARnncF2ZCuGR9Nmh6VAWumXpHfVq83iVVBWHKjSvKJuBEFUzg3G1dWmtwxqRZYFgdgd5FAZp5M6Nj6x4VMi4qcJe9S1exhMHKTDmKnmsJ7AX4YA4MdRGYXGJHRSUb842gqEYbqjjTSu8xRghbuxg9ghnr8NVx4uxwE56zJUMzhP4bVftTH6XhS1MDoRUPi451LcAbRr7QLR7gq8FS4H73FtJN4cni5mURRpNAnzEYFWcjmqaUuC9VSfkuD3Aqk7vSKpbJoSkcaZMXdqb9G4x6SGxjphx8kvxQDTJkmjkxNB5bADpRA7rfkSjRX9zekM8rb7NKu5doxYovb1qPgDuPPbD2eA279btntL8xzqTW2JWQdTPqdHG1ezxBsSWqWdFzzJYFh2VWuYB59A38EB9Mcihj995Y1DGfLt9vHMaw92ERCeqtk4MqX6WSBYc9QzTEA7wUtdYGXLydyRRxbLpYTfTX4sUvhCvg2YGix1L1G4nFaNRq28jiZjfKTCLr2TWDzFvX4jVWhFjFsBVRSCQhiKfDRpsUXm9CYXuk9tvnoVj2NN3e3SLyiWjCEUap84EhdyZn1zHHQSXnsSoSynR1kiWSDCuJCBcyM2MQ8wR',\n  [ChainType.Doge]:\n    '5ivrmzxYa3qBuYZ3teFTEJP1ziojbVZAYdZF528CNfT5tiycZoiqXfZEqgud81sBrXGyGoanY95RS1xwRSzc4nSGhvhg9Awr23q8vde4k7PWrErq42DeCwborsxAwKm1YrWJEwD8KZiKmSMR9jCD3pTxfsvoq4yMJeh4bscJKRj9iuy79tzWT3NU4L1vrVNjQd9ksz8V2mUeU7EXouDTHxAM5Vci3HgeC2CBqY23J3mpXryfb3UPha7a4zf2eF7Tv5viA7ayrGgu582W2ZttnLFHQTRn3gnTU715qzjk7NMer98y528FxXNZsjSFs72tZm4kL6zMthigXX1yNBtr5vXmYKcHUyAeRWuX2CK8jAFWYF4cJeceCN5E2KjoTK47Ge7q8B9MNZBVU83HPGzjVkqjvFDQsDZyt7hyCRhguwKibwyw1Y76ceNXrhzwPgukP6PsCWyipqSMVTAxB3QNR46mGi1v2S3MNKR9bThJU98yQntABweyLuqHVmALaU5s971p9SPi25gVnLsFD2FQnczLpHR2g8iJ2PcUZageyVyCxKbX3EvUoyQTymeaQuSwNgySKAs67YgUPFGcmXD33Fbs7vQvkrDbqUVprE2igGNZvCmStypiqZA6ijDzbaTX1XwFAehFT39WyGQ9NXzCtYn35fj95NLkDWugvEmqL5to8JFbCcHbV13WCJaVgvcerLKU922nuM54QXYNoSQHYdCypp3PXwaWBbsemt1cbH9mGM5JnYuhAm2gKctu7rUwCQ9P6qx7k4nC6ycUWLPsYeaYt23RXxF9cx31A9nUqSW4n4j46j3fVTkBX47C7X2TFF2VgHFJky4d3etKp5EQodYs2caNLgmmACErMCtJ1GuamHCfSEg3iLyLaPAmtRM9HFUVCsMEL3GwLzqEasH3fy9dpUrAh8FqAHPT16gAx7ePEPU8k9obwUyYqkxMBuyaMonoy37GejLXzpzM9DTacEuNCBKw9hVHnDCB5Zxkhuj5kkaH3794qur5GCF3XKFnWNuKf35DBwVeEq3SMMsWmcBB6ZqfJJxa4vCLS6aEhtDxnSxw1TS8T9bvu91dXLH6HoAfK5vnoGHKP387yTuJmcbacFtvBoT6EWDS6DvXQx9FptRgojeF9T1ZjCChE6igPL9WhWPvvCEm6BMR2Jtsxw16JJzqMW33W5CBJstoi8oSKE2yrw7i2hxsyY6UPDWZUe4Cex2tSfWSzSS3tXo5ahVMfoVHxUmmKJoE6St16U58ETVipwqU6WLJT6BGYboueetYfbzL37FPgQEruWWNT',\n}"
            },
            {
                "name": "rewardAddresses",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/shared/ts/chain.service.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Record<ChainType, string>",
                "defaultValue": "{\n  [ChainType.Bitcoin]:\n    '2Eit2LFRqu2Mo33z3pYTJRHNCPYS33MrU9QgeNcRsF9359pYMahqnLvKsHwwH72C6WDSZRj7G7WC5heVyUEawcSLSx821iJXT4xWf2F5fjVWDUpyGNdkxhFwQMhPKpx85Uu16put68V837wxDx19LRJ5uqi7xBa7EDFRU79Grzk8HDrfpUF3qct4xrQUvDofDroRQTuKueAbwybAfGDhNqG3jzKQchgjedBkbPAuDuNunehW4ZXUBLRSfqy3xofV76bxT5zpZjZcKud4XaRQvXUAVGunJzAs7RNZD5WZxenhmKzhiyuzWiq5QkWqxFw2h9vQ6Dd5PdYsWP3dPtaDC8WUjGz8tQ1tU9LuhqZ8QThQA5zBfoPFrk2iJ1repUuwZPjWnDRHLfWppqDQJGm2GEWHmYTQAfCJQFChUtSNstSATxw37xXjziKkPQRRVPr3VPapbHtGSoQyygzTHgcjxv3HSzwXkD7DScyA2iGDsd4B4WeXo4a6nM4CYpxa9f9FvabbNByhKsgq3ZoCsbUVXN99Pet93MFdxVmBBEsGYEYvtmMEDZEGb5z3JZDtVSdudFcm3bij82bdFzKSmmxxWZhscmLYpGGq1J5geqTiyTCgsmksAHumPFBmLkz8v843Jc3z5b6dwFgyXuBmQPTq6Nf8t95y1UYe8UYx3qNVfrHSGbToSgvCQyLKVv5ns8T2SZRWWr',\n  [ChainType.Cardano]:\n    '2Eit2LFRqu2Mo33z3pYTJRHNCPYS33MrU9QgeNcRsF9359pYMahqnLvKsHwwH72C6WDSZRj7G7WC5heVyUEawcSLSx821iJXT4xWf2F5fjVWDUskGdVdyYY5RBJnp3dfYC7iPoRNeopAFQWFwEbTieow347UhRyqvo2LntFpXzomvGwVTfq9YXS8Z1GGW5mUEioD5xC17Sz72NLbQrskSx7QZAxQTbMGh6vwM9J4q7NzRmQeHmWaHLpUHMU4Jdd5ccKumMvAY8d5C8RxB4iATySLY2N1wY84qNsWNaqkNofbUebf6LgmU9HTKAmU3nDoBfX7mhCjH8kXDhZeYdRsuLVFEYu83TkpwgHAYGmUoemxWAeA2BKMx8CBAy9jxbCyUjdnk9i7sLxuejrwLLh8W4tP81YkESjZ8BV65BhzPdvCaiX8vBSorgFfnvGKVzwfhhsSDwLY1GUwLTMLwTUTjSzEjsMX9hzsEEEmhxLsekabLmK3HZ1jssLrFryNuE59uS51hazJsi3gsT8SBk1J9YV6Dq6xto28nLqrMqK6raqLcAm2iU8hBtqdoSXqWzsrZHpqc2uLGhY52ee4k9TpFBvN1RovYUtY6KS4FncT4UgnbEFkzsnWYKX3CDn16tJs5CyZ97gKcvUonZ5EqTwabzni14CcQsTtKtEAqj1odvSyfJ94NnEjuiVPC3VmZbQvveN3bQ',\n  [ChainType.Ergo]:\n    '2Eit2LFRqu2Mo33z3pYTJRHNCPYS33MrU9QgeNcRsF9359pYMahqnLvKsHwwH72C6WDSZRj7G7WC5heVyUEawcSLSx821iJXT4xWf2F5fjVWDUmvtxr3QSv1aLwThLXxeqYCCc34xjxZDPqPyNGYvWLNeBZxATvBeDuQ6pSiiRFknqmvYVsm9eH4Et3eRHCyxDJEoqZsAahwfVSya34dZNHmjaPQkwWo3Coc17pxiEnWuWmG38wSJz1awE6cymzhojnjxDTbbXgjR1yfYU3AU2v9zttnT8Gz3gUzZNSwjiXSPu3G9zkDaFZVKqb5QwTWY3Pp6SFJgBQfx3C3sp4a9d3n9c98pfWFWAGQN5EfkoHosF8BQTDuzXG3NU8gVCNeNPXYA8iWCbvY3XpxQMvQUxqkjDv9VQfUNvAKVHLW43chi2rdBrQ7Teu6NnesLRWUKXpzSxpByWftkCCdBppjZtYmhhCHqpQGkQyTcMRoP2krFKe7xKbfnFkdkhaYH9TTdKuTuKtGb265RXxiqrc34KvkZpaBBQB5UvoCU4iLSDngNTjqkNPnWekDahzNHLd6CtcdC1B19jdGEXWeNADemDtdK4zrMNg7U8iVpyGYhLDnkeLVrcbhoxkHxrFwfrN19XvitDosQqmt9dseR6SWHBCDZJdmJecCiEwd2wBiwN5N5umEy3Dd4Hznv7kDr6eX7KtYxp',\n  [ChainType.Ethereum]:\n    '2Eit2LFRqu2Mo33z3pYTJRHNCPYS33MrU9QgeNcRsF9359pYMahqnLvKsHwwH72C6WDSZRj7G7WC5heVyUEawcSLSx821iJXT4xWf2F5fjVWDUpPyXf9D8PFkALkfhCu47xSApej3a8VHFCfLuQoMFV2LgTs6hEqRf2XQkDHzn3KYbGJ9b6gs2XcYf3ZQA2gJaWJXFErT11uifohMFFRJV7cb1eECubCbHCib3A434SJVrZee18QTRECrDirtC2GdZK6fiKGbGcKFTZWK4f3ChgnuZFCjRoCX2UquL25b2zkev34shFCspbYwYcyKmc5xxrvssUHgQmUZy7yu3RKJPXYuwH7SiittGsJ946spWJEp3cuBiMcpRvwbiCyrQqM1FtK3wZJKqy95bVDfj9zXwFfR1rE9wZADPs6xcJxi9P1z2iBXqPXGQHnKVaHJWEwNZfP2KAZeUi8etKnYSib68e5cuif3YNRVFdNtKAT2SJEsJCDmnUecmdCwvzMeH2EtNYsRBWVeTV4RBypRPi243qkFrct41bz6WZ8FhLFXU1tnExucXvQ48ZoQ4RQpNorEcGNDY8MC52yhkofS5b9wy6AYYjpQyTMmhD1QZF3VcQgPNT6x4yxPXYsjohYZh96h6M8T7m9gfVV3w8xowtVQVAB1kvJHMuZXxBkBNLwFbhxKuMwC2Dje3LZmuH9mhg94f7Uoe',\n  [ChainType.Binance]:\n    '2Eit2LFRqu2Mo33z3pYTJRHNCPYS33MrU9QgeNcRsF9359pYMahqnLvKsHwwH72C6WDSZRj7G7WC5heVyUEawcSLSx821iJXT4xWf2F5fjVWDUmAMWiE8WncsqsSRhckGHa5xwdGj7fCkypvX2Q9ypun1tUfQ8YwoXYgYCSF1M2t7WaUb2ZZzY9yETrdm8ywS3VzDFpirFEiLLgjE5vhsLkcW2PtiChF5npL3SFsxnSY92ZMmSw2U9GzhwDwTKXpPUD17dydf4CTbLATnCdiTkEYxCzVqh3XnBebDhEFSHWhCWVtqRniJJRqpRaAsv64qtBPabPG8HNRHT9TXFR4a58wH8VqdNuUSKHx1NQahaXTPYHfQX7H4mAzYU6fbH5uryhxqSh5HTBmCB8XrJcXCR41FeqjwrkwTiEHJkkyHVTeLdpyaUcHJ9M9nEsTbGbxMBLEc6CLtzRA5bDwFAKXN3i2mo86wUghaPMd72nd3pLDbhGYRntgYMrVWuVDzMhdJamVvFPbiEWiCs1BJ9NgJzasvJpJQxm1uBYskrWnULHQaJf8Kfoixaqcz6mcp2aAEAkoAmd3CcAddM4X1vCuapWeyaxLD7kXrHaafMsatugqJP4JQGFKEkXXBhthKScGLq5wcbYb2cVv6HuzyxyMg92UiLzTyFDB8QG2NwKgTfLGJ5iLDzzsFkPGtkxECDMVmiw21E',\n  [ChainType.Doge]:\n    '2Eit2LFRqu2Mo33z3pYTJRHNCPYS33MrU9QgeNcRsF9359pYMahqnLvKsHwwH72C6WDSZRj7G7WC5heVyUEawcSLSx821iJXT4xWf2F5fjVWDUkje1kCt7DSEufp9kN95BRzhkMTmgY2jmZ3gPH7hjfNkbPBkjLNifx5iH8wZ1EmiMFiWKozc1ZeT3QdnRhCtLZwHo5sBTek83753eK8YZNVgtykvcdLDbsgGyfCXZtJ2zxbNK7522JRormkeNkhLFBxC9u2tQ11EHyvcg8qHUhPA1GCXALUdtB1FkV2chfgewbDmtrpn7tqC7o3eaxQs3Ted3mo3TKmckYVWca7TqHnBCYGE1GRH2X3ZuWuSJXyi1AxKCyRi9JucVAGwpBhQPNR4viEZe5fo6kBiChWriCKmr7pti8685xoAz1ycFnLPKhbgdkwXmZtoLbYYrirEifkMJ1QXtaJStb86NQLQU2ThhqTzEkP22D8sRZ3Ud2b83KcxVvzzCvGeDRK7SkfjbmfhTCazJwwXiFTHBgT2tzfJvQTazwP6czcVC4taS55Ts2uKB4Z9Eu5MeWEvbBLBis8KxnkZkdMecxcBjRdAojCwyMBJUz8EPYo6x659TzbSJhjJiFaQ9f4kanVBV7nC9gK1rq5oY7bFH9MUcwGeu38HQk62kUbv7Q2dYx56CBVw6cHzdRJu6AXHY8dAy3BLqvHCV',\n}"
            },
            {
                "name": "rewardsBinanceAddress",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/shared/ts/chain.service.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "string",
                "defaultValue": "'2Eit2LFRqu2Mo33z3pYTJRHNCPYS33MrU9QgeNcRsF9359pYMahqnLvKsHwwH72C6WDSZRj7G7WC5heVyUEawcSLSx821iJXT4xWf2F5fjVWDUmAMWiE8WncsqsSRhckGHa5xwdGj7fCkypvX2Q9ypun1tUfQ8YwoXYgYCSF1M2t7WaUb2ZZzY9yETrdm8ywS3VzDFpirFEiLLgjE5vhsLkcW2PtiChF5npL3SFsxnSY92ZMmSw2U9GzhwDwTKXpPUD17dydf4CTbLATnCdiTkEYxCzVqh3XnBebDhEFSHWhCWVtqRniJJRqpRaAsv64qtBPabPG8HNRHT9TXFR4a58wH8VqdNuUSKHx1NQahaXTPYHfQX7H4mAzYU6fbH5uryhxqSh5HTBmCB8XrJcXCR41FeqjwrkwTiEHJkkyHVTeLdpyaUcHJ9M9nEsTbGbxMBLEc6CLtzRA5bDwFAKXN3i2mo86wUghaPMd72nd3pLDbhGYRntgYMrVWuVDzMhdJamVvFPbiEWiCs1BJ9NgJzasvJpJQxm1uBYskrWnULHQaJf8Kfoixaqcz6mcp2aAEAkoAmd3CcAddM4X1vCuapWeyaxLD7kXrHaafMsatugqJP4JQGFKEkXXBhthKScGLq5wcbYb2cVv6HuzyxyMg92UiLzTyFDB8QG2NwKgTfLGJ5iLDzzsFkPGtkxECDMVmiw21E'"
            },
            {
                "name": "rewardsBitcoinAddress",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/shared/ts/chain.service.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "string",
                "defaultValue": "'2Eit2LFRqu2Mo33z3pYTJRHNCPYS33MrU9QgeNcRsF9359pYMahqnLvKsHwwH72C6WDSZRj7G7WC5heVyUEawcSLSx821iJXT4xWf2F5fjVWDUpyGNdkxhFwQMhPKpx85Uu16put68V837wxDx19LRJ5uqi7xBa7EDFRU79Grzk8HDrfpUF3qct4xrQUvDofDroRQTuKueAbwybAfGDhNqG3jzKQchgjedBkbPAuDuNunehW4ZXUBLRSfqy3xofV76bxT5zpZjZcKud4XaRQvXUAVGunJzAs7RNZD5WZxenhmKzhiyuzWiq5QkWqxFw2h9vQ6Dd5PdYsWP3dPtaDC8WUjGz8tQ1tU9LuhqZ8QThQA5zBfoPFrk2iJ1repUuwZPjWnDRHLfWppqDQJGm2GEWHmYTQAfCJQFChUtSNstSATxw37xXjziKkPQRRVPr3VPapbHtGSoQyygzTHgcjxv3HSzwXkD7DScyA2iGDsd4B4WeXo4a6nM4CYpxa9f9FvabbNByhKsgq3ZoCsbUVXN99Pet93MFdxVmBBEsGYEYvtmMEDZEGb5z3JZDtVSdudFcm3bij82bdFzKSmmxxWZhscmLYpGGq1J5geqTiyTCgsmksAHumPFBmLkz8v843Jc3z5b6dwFgyXuBmQPTq6Nf8t95y1UYe8UYx3qNVfrHSGbToSgvCQyLKVv5ns8T2SZRWWr'"
            },
            {
                "name": "rewardsCardanoAddress",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/shared/ts/chain.service.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "string",
                "defaultValue": "'2Eit2LFRqu2Mo33z3pYTJRHNCPYS33MrU9QgeNcRsF9359pYMahqnLvKsHwwH72C6WDSZRj7G7WC5heVyUEawcSLSx821iJXT4xWf2F5fjVWDUskGdVdyYY5RBJnp3dfYC7iPoRNeopAFQWFwEbTieow347UhRyqvo2LntFpXzomvGwVTfq9YXS8Z1GGW5mUEioD5xC17Sz72NLbQrskSx7QZAxQTbMGh6vwM9J4q7NzRmQeHmWaHLpUHMU4Jdd5ccKumMvAY8d5C8RxB4iATySLY2N1wY84qNsWNaqkNofbUebf6LgmU9HTKAmU3nDoBfX7mhCjH8kXDhZeYdRsuLVFEYu83TkpwgHAYGmUoemxWAeA2BKMx8CBAy9jxbCyUjdnk9i7sLxuejrwLLh8W4tP81YkESjZ8BV65BhzPdvCaiX8vBSorgFfnvGKVzwfhhsSDwLY1GUwLTMLwTUTjSzEjsMX9hzsEEEmhxLsekabLmK3HZ1jssLrFryNuE59uS51hazJsi3gsT8SBk1J9YV6Dq6xto28nLqrMqK6raqLcAm2iU8hBtqdoSXqWzsrZHpqc2uLGhY52ee4k9TpFBvN1RovYUtY6KS4FncT4UgnbEFkzsnWYKX3CDn16tJs5CyZ97gKcvUonZ5EqTwabzni14CcQsTtKtEAqj1odvSyfJ94NnEjuiVPC3VmZbQvveN3bQ'"
            },
            {
                "name": "rewardsErgoAddress",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/shared/ts/chain.service.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "string",
                "defaultValue": "'2Eit2LFRqu2Mo33z3pYTJRHNCPYS33MrU9QgeNcRsF9359pYMahqnLvKsHwwH72C6WDSZRj7G7WC5heVyUEawcSLSx821iJXT4xWf2F5fjVWDUmvtxr3QSv1aLwThLXxeqYCCc34xjxZDPqPyNGYvWLNeBZxATvBeDuQ6pSiiRFknqmvYVsm9eH4Et3eRHCyxDJEoqZsAahwfVSya34dZNHmjaPQkwWo3Coc17pxiEnWuWmG38wSJz1awE6cymzhojnjxDTbbXgjR1yfYU3AU2v9zttnT8Gz3gUzZNSwjiXSPu3G9zkDaFZVKqb5QwTWY3Pp6SFJgBQfx3C3sp4a9d3n9c98pfWFWAGQN5EfkoHosF8BQTDuzXG3NU8gVCNeNPXYA8iWCbvY3XpxQMvQUxqkjDv9VQfUNvAKVHLW43chi2rdBrQ7Teu6NnesLRWUKXpzSxpByWftkCCdBppjZtYmhhCHqpQGkQyTcMRoP2krFKe7xKbfnFkdkhaYH9TTdKuTuKtGb265RXxiqrc34KvkZpaBBQB5UvoCU4iLSDngNTjqkNPnWekDahzNHLd6CtcdC1B19jdGEXWeNADemDtdK4zrMNg7U8iVpyGYhLDnkeLVrcbhoxkHxrFwfrN19XvitDosQqmt9dseR6SWHBCDZJdmJecCiEwd2wBiwN5N5umEy3Dd4Hznv7kDr6eX7KtYxp'"
            },
            {
                "name": "rewardsEthereumAddress",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/shared/ts/chain.service.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "string",
                "defaultValue": "'2Eit2LFRqu2Mo33z3pYTJRHNCPYS33MrU9QgeNcRsF9359pYMahqnLvKsHwwH72C6WDSZRj7G7WC5heVyUEawcSLSx821iJXT4xWf2F5fjVWDUpPyXf9D8PFkALkfhCu47xSApej3a8VHFCfLuQoMFV2LgTs6hEqRf2XQkDHzn3KYbGJ9b6gs2XcYf3ZQA2gJaWJXFErT11uifohMFFRJV7cb1eECubCbHCib3A434SJVrZee18QTRECrDirtC2GdZK6fiKGbGcKFTZWK4f3ChgnuZFCjRoCX2UquL25b2zkev34shFCspbYwYcyKmc5xxrvssUHgQmUZy7yu3RKJPXYuwH7SiittGsJ946spWJEp3cuBiMcpRvwbiCyrQqM1FtK3wZJKqy95bVDfj9zXwFfR1rE9wZADPs6xcJxi9P1z2iBXqPXGQHnKVaHJWEwNZfP2KAZeUi8etKnYSib68e5cuif3YNRVFdNtKAT2SJEsJCDmnUecmdCwvzMeH2EtNYsRBWVeTV4RBypRPi243qkFrct41bz6WZ8FhLFXU1tnExucXvQ48ZoQ4RQpNorEcGNDY8MC52yhkofS5b9wy6AYYjpQyTMmhD1QZF3VcQgPNT6x4yxPXYsjohYZh96h6M8T7m9gfVV3w8xowtVQVAB1kvJHMuZXxBkBNLwFbhxKuMwC2Dje3LZmuH9mhg94f7Uoe'"
            },
            {
                "name": "rs_Address_Key",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/shared/ts/constants.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "string",
                "defaultValue": "'address'"
            },
            {
                "name": "rs_AddressDataStoreName",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/shared/ts/constants.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "string",
                "defaultValue": "'addressData'"
            },
            {
                "name": "rs_DbName",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/shared/ts/constants.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "string",
                "defaultValue": "'rosenDatabase_1.1.5'"
            },
            {
                "name": "rs_DbVersion",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/shared/ts/constants.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "number",
                "defaultValue": "28"
            },
            {
                "name": "rs_DownloadStatusStoreName",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/shared/ts/constants.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "string",
                "defaultValue": "'downloadStatusStore'"
            },
            {
                "name": "rs_ErgoExplorerHost",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/shared/ts/constants.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "string",
                "defaultValue": "'api.ergoplatform.com'"
            },
            {
                "name": "rs_FullDownloadsBatchSize",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/shared/ts/constants.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "number",
                "defaultValue": "400"
            },
            {
                "name": "rs_InitialNDownloads",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/shared/ts/constants.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "number",
                "defaultValue": "20"
            },
            {
                "name": "rs_Input_Key",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/shared/ts/constants.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "[]",
                "defaultValue": "['boxId', 'outputAddress']"
            },
            {
                "name": "rs_InputsStoreName",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/shared/ts/constants.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "string",
                "defaultValue": "'inputBoxes'"
            },
            {
                "name": "rs_PerfFullDownloadsBatchSize",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/shared/ts/constants.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "number",
                "defaultValue": "40"
            },
            {
                "name": "rs_PerfInitialNDownloads",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/shared/ts/constants.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "number",
                "defaultValue": "10"
            },
            {
                "name": "rs_PerfTx_Key",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/shared/ts/constants.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "string",
                "defaultValue": "'id'"
            },
            {
                "name": "rs_PerfTxStoreName",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/shared/ts/constants.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "string",
                "defaultValue": "'perfTxs'"
            },
            {
                "name": "rs_PermitCost",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/shared/ts/constants.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "number",
                "defaultValue": "3000"
            },
            {
                "name": "rs_StartFrom",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/shared/ts/constants.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Date",
                "defaultValue": "new Date('2024-01-01')"
            },
            {
                "name": "rs_WatcherCollateralERG",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/shared/ts/constants.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "number",
                "defaultValue": "800"
            },
            {
                "name": "rs_WatcherCollateralRSN",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/shared/ts/constants.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "number",
                "defaultValue": "30000"
            },
            {
                "name": "serviceWorkerInitializer",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/webcomponents/rosen-web-component.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "object",
                "defaultValue": "{\n  provide: APP_INITIALIZER,\n  useFactory: initializeServiceWorkerService,\n  deps: [ServiceWorkerService],\n  multi: true,\n}"
            }
        ],
        "functions": [
            {
                "name": "createChainNumber",
                "file": "src/app/service/watchers.data.service.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [],
                "returnType": "Record<ChainType, number | undefined>"
            },
            {
                "name": "getChainType",
                "file": "src/shared/ts/chain.service.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "<p>Determines the ChainType based on the provided address.</p>\n",
                "args": [
                    {
                        "name": "address",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true
                    }
                ],
                "returnType": "ChainType | null | undefined",
                "jsdoctags": [
                    {
                        "name": {
                            "pos": 28026,
                            "end": 28033,
                            "kind": 80,
                            "id": 0,
                            "flags": 16777216,
                            "transformFlags": 0,
                            "escapedText": "address"
                        },
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true,
                        "tagName": {
                            "pos": 28020,
                            "end": 28025,
                            "kind": 80,
                            "id": 0,
                            "flags": 16777216,
                            "transformFlags": 0,
                            "escapedText": "param"
                        },
                        "comment": "<p>The address to evaluate.</p>\n"
                    },
                    {
                        "tagName": {
                            "pos": 28063,
                            "end": 28070,
                            "kind": 80,
                            "id": 0,
                            "flags": 16777216,
                            "transformFlags": 0,
                            "escapedText": "returns"
                        },
                        "comment": "<p>The corresponding ChainType or null if not found.</p>\n"
                    }
                ]
            },
            {
                "name": "getScriptFileName",
                "ctype": "miscellaneous",
                "subtype": "function",
                "file": "src/main.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [],
                "returnType": "string"
            },
            {
                "name": "initializeDataService",
                "file": "src/app/service/chain.data.service.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "dataService",
                        "type": "ChainDataService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "jsdoctags": [
                    {
                        "name": "dataService",
                        "type": "ChainDataService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "initializeServiceWorkerService",
                "file": "src/app/service/service.worker.service.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "serviceWorkerService",
                        "type": "ServiceWorkerService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "jsdoctags": [
                    {
                        "name": "serviceWorkerService",
                        "type": "ServiceWorkerService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            }
        ],
        "typealiases": [
            {
                "name": "EventData",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "string | Input | object",
                "file": "src/app/service/event.service.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 192
            },
            {
                "name": "LineChart",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "Chart<line | literal type[] | >",
                "file": "src/app/service/chain.chart.service.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 183
            }
        ],
        "enumerations": [
            {
                "name": "ChainType",
                "childs": [
                    {
                        "name": "Bitcoin",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "Bitcoin"
                    },
                    {
                        "name": "Cardano",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "Cardano"
                    },
                    {
                        "name": "Ergo",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "Ergo"
                    },
                    {
                        "name": "Ethereum",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "Ethereum"
                    },
                    {
                        "name": "Binance",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "Binance"
                    },
                    {
                        "name": "Doge",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "Doge"
                    }
                ],
                "ctype": "miscellaneous",
                "subtype": "enum",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "file": "src/shared/ts/chain.service.ts"
            },
            {
                "name": "ChainType",
                "childs": [
                    {
                        "name": "Binance",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "Binance"
                    },
                    {
                        "name": "Bitcoin",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "Bitcoin"
                    },
                    {
                        "name": "Cardano",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "Cardano"
                    },
                    {
                        "name": "Ergo",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "Ergo"
                    },
                    {
                        "name": "Ethereum",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "Ethereum"
                    },
                    {
                        "name": "Doge",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "Doge"
                    }
                ],
                "ctype": "miscellaneous",
                "subtype": "enum",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "file": "src/service/ts/models/chaintype.ts"
            },
            {
                "name": "Currency",
                "childs": [
                    {
                        "name": "EUR",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "EUR"
                    },
                    {
                        "name": "USD",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "USD"
                    },
                    {
                        "name": "ERG",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "ERG"
                    },
                    {
                        "name": "RSN",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "RSN"
                    }
                ],
                "ctype": "miscellaneous",
                "subtype": "enum",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "file": "src/shared/ts/constants.ts"
            },
            {
                "name": "EventType",
                "childs": [
                    {
                        "name": "StartFullDownload",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "StartFullDownload"
                    },
                    {
                        "name": "EndFullDownload",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "EndFullDownload"
                    },
                    {
                        "name": "RefreshInputs",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "RefreshInputs"
                    },
                    {
                        "name": "InputsChanged",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "InputsChanged"
                    },
                    {
                        "name": "PerfChartChanged",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "PerfChartChanged"
                    },
                    {
                        "name": "SwipeActivated",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "SwipeActivated"
                    },
                    {
                        "name": "SwipeDeActivated",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "SwipeDeActivated"
                    },
                    {
                        "name": "SwipeVertical",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "SwipeVertical"
                    },
                    {
                        "name": "StatisticsScreenLoaded",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "StatisticsScreenLoaded"
                    },
                    {
                        "name": "RequestInputsDownload",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "RequestInputsDownload"
                    },
                    {
                        "name": "WatchersScreenLoaded",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "WatchersScreenLoaded"
                    },
                    {
                        "name": "SettingsScreenLoaded",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "SettingsScreenLoaded"
                    },
                    {
                        "name": "PerformanceScreenLoaded",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "PerformanceScreenLoaded"
                    },
                    {
                        "name": "AddressChartChanged",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "AddressChartChanged"
                    },
                    {
                        "name": "WindowResized",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "WindowResized"
                    },
                    {
                        "name": "VersionUpdated",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "VersionUpdated"
                    },
                    {
                        "name": "WatchersStatsChanged",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "WatchersStatsChanged"
                    },
                    {
                        "name": "ChainPerformanceChartsChanged",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "ChainPerformanceChartsChanged"
                    }
                ],
                "ctype": "miscellaneous",
                "subtype": "enum",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "file": "src/app/service/event.service.ts"
            },
            {
                "name": "Period",
                "childs": [
                    {
                        "name": "Day",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "Day"
                    },
                    {
                        "name": "Week",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "Week"
                    },
                    {
                        "name": "Month",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "Month"
                    },
                    {
                        "name": "Year",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "year"
                    },
                    {
                        "name": "All",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "All"
                    }
                ],
                "ctype": "miscellaneous",
                "subtype": "enum",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "file": "src/shared/ts/constants.ts"
            }
        ],
        "groupedVariables": {
            "src/app/app.config.ts": [
                {
                    "name": "appConfig",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/app.config.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ApplicationConfig",
                    "defaultValue": "{\n  providers: [],\n}"
                }
            ],
            "src/shared/ts/chain.service.ts": [
                {
                    "name": "chainTypeTokens",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/shared/ts/chain.service.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Object.fromEntries(\n  Object.values(ChainType).map((chain) => [chain, `rspv2${chain}RWT`]),\n)"
                },
                {
                    "name": "hotWalletAddress",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/shared/ts/chain.service.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "defaultValue": "'nB3L2PD3J4rMmyGk7nnNdESpPXxhPRQ4t1chF8LTXtceMQjKCEgL2pFjPY6cehGjyEFZyHEomBTFXZyqfonvxDozrTtK5JzatD8SdmcPeJNWPvdRb5UxEMXE4WQtpAFzt2veT8Z6bmoWN'"
                },
                {
                    "name": "permitAddresses",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/shared/ts/chain.service.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Record<ChainType, string>",
                    "defaultValue": "{\n  [ChainType.Bitcoin]:\n    'NY4PEzZ7VfjtnTN697R7my9uAVkCYb6N71J2RSmJCFSdDqVf9aPvFQqKXujYDBtSA8hxYVUgkGgU9SP2Ss7JDUkHkdGLBqZwH4yDcPyVvbVbcre3o7nR59wiFDVtjzCjfZmVvMVJD9HiW4GKqVuZGTQCKns8tDe3sJoDNTL3VmhzRUPZf9JCN4TNji1ruXf5CxqWtDrCfoxE4xfbRWGmtBMdLMoRdL85V7z1fP5KxroWX5YgZQo28nTCU3WjPuY2YrjqYYGNHXvFZ9G8E85kCcseNtRWqViXGFzmwqHWKaYe4AdJzBbMKzJWYszsbiemNvisPtT2Yj3FjAmAErpW3gMeWyH3WtbipaAu9D31ggpLeLkLTGscJ9HB2oExpGWvv6u9mGdkTJMHYUuZJUGrcJPE3m7ZTEFxwkbeR9oD8nHHgW4SB46kHFbxzNoUksGPZQnxf95J3e5PUnhYgg7mrQLNpq6pphgGukFcHDgAN2rgFmUSDVsuzomhP735SMiveXSPzx6PZeP7CmrEHyXN6mFbBJuY17kvzzix1w9eFwryZDuZqnAANkYhF3TLkLyGZfSC4o9iAGynpivuNMUgbKAuj6D116tKoCq9PHELL8eTefmXNLFuhauQuKRjmWQKj9zYSd7qi6Zf49KX25PnWHkC3REc4abYpjtiQFefT2HkWRwneTCkJ8uMvoHs6kJzLg8NVzH8XwEZhTM2tNSDhBKZaURpYiQcHwLDgv5uFiwhasLAdZi2EJywBYX51NKc6m4MEsTiAJC9jkEydWcwyDzSHN18yEr4rvEgMNkUhLHJokgV2v3BNFhUTJqe58e2QXAmx9MytUDqzg3vwexEpMhueC2roYA27P1mmb85HKEz15a8LnuUT8ZjmG8kDbHuPYFyxcATytVuDrFDzqKBt9X36bocip4ZU4RRY8JcWjJvMcrBCjV3EhDVQ4it8bhoZnn79PsXazvDteua1NEYEJniPnNrRaiKTUWrseEUQ2vVjWy134jMxRbeiARhoj7MDxug2kFP8jRGSsxWt3Qqbv2SezT3xZ8jYxTyQ2CiyJ61CvUQwPtmoY3XKjrgrJKwnSzJRs4egKPYZKoSiSy6UdHMKuNDmys8wYo3Gi2EgVdUYRLLWcHh5Z2H91odSbTW2h5e6pZeY4a45TgihE6ZnZBhHGc75zJjukhPgP1wEp8GrreHA7ejvTEmpwNgj571x5JrvRD5TxWaFuZKBonGexovAK2L5v',\n  [ChainType.Cardano]:\n    'NY4PEzZ7VfjqPk9gZSNS6ERoYyYBEBebyeXUPs1sjEfdenV3Kq1QKWBSQ1Gfem47fPVRw5UXcYNXtgXNGqsD4DedukcYv5c5kviu94yWpyrh2tbXHea1tyfuEcb8njgvXkAxrXkjvgcPEQqy7BsR3KQPe8vzSaBG5V8WFHQqvHmpMXXYMvKDZzRbNjZUgYvVinGq6qx9hct1fFG15nFdcWZkzhBcu8ytydt3MmnkYEyL4L2rLD8Jp2Q16DfeaBBqmuyxpMoVxPrQzbPjq5GKTKrqnpisWVrubpAy5dg1oQ6tVZompLpwTWvX1xWspA9tWPmc3MCV2e6y313KzSosGLi2Sdv2ptDgJpKamQv6fNKmj3TWkNbPCDfjp2KXYcfYE1vQ5prRZCPCDhVgWP7bqpF3SeUTMJmvBaXjd1tBavjanquQDkYU4n5XBwJPvUa5kCAP1USTgP4cgPA6SzB8hg2RXmB4PmEWM2RWv2mrirYeTdZrzXCbpGCd9B9GK7bNknnYz1X8wVqyYxxQMZ7Rort4BVRNPNKzEMtdGKSmQpiWitfoAfphXL3SGMfwMT3sspgDcD93Ftiq9gf6kgawpFBKWJmV5jXmfiSCWkPW5x56L5hcc3NwJLYYjcMh81aXQBP4HguyudttZcF8QiDa6Ae3idS1BTegArbhZBFn1TQJGgWtuCubLC5Ja71FadEN1G1s4Uz4BapDu3WpNH4NJn3UeWavLd1EytGjevyJu8XjziAMYr6cPZsyhb95aj7LAHgwJ8YT42zWYoDxqhEzbuderVtfauVJxEo2Rt7p83hMtkFS8Dy3vNbdmGEhWEFfDEyquEHTLsYkehRMWTeTeoDpRhKpeXoDxTNriR6Fz6y3Koxwzg281gYhxxvew7TpvSa3cLvjBpNxuoUfhyT645u51cBsQzden3RB5LjJeToSctrx74nNGCm9sR7fQgzno2pETeit1mykq4eocy93EoTcypKitcbfhgAYwXrGcGUQyhsupFgPZMnms5VnWhCsGKkK93uy7z4BRgi9y2aU7zMUxPJN6q3kYhjcdgYhcgqLLmWo5pBRSxcuq3p3NhPnd2Tps5RztjtUS5ZkbRVsTri8Sy2J5xPLir6VB7uxcPCSYYGJaaVfENJ8tYLYH3m3TUoxRipyjNDDBmsRdujqFQvFoYiCyaPFgu9iqzMvuPDM7FDPAKV8V7A895N9SMMZkG7uAzVvLgrU8Wrxdby2CAX9ttmPJn',\n  [ChainType.Ergo]:\n    'NY4PEzZ7Vfjvo3AYu7dBh4ziatarsMAVPnwtHZL6BfoKeaots7P629HvVAmDZNdiVNUitWMqVJhgphUregwCXnhVNRddztP93qbtSWCMzVk1UQmCVUpvQyb25nyH1PrpRSjpFewJWeN3bjiVF6bTAm2t11X4d2fKGnAo3PX2BFVeyAUre7T5CZs2uikxZisyrJ1djE4UY1uwpTFkJv3RzZ3JMugNDeicf7qWqtCtNH8E9uG56VD2dMvmsr5YHQbrKgxa5foyA4K8cD59o2ub9ezbhjSgfXbc6VLaXmp5SzdP6n61MaePNexedifBWwAsHFcaaVXf7oUkePp5dDpc5mBbaAuidBAwH4SaxnUNjPw2bHVSXEk3ZJwwBrZRG7CYBCvEN6wFuPyzuhGsJQwdCtvUqxViGhxWrhRYKwixLhScVdGwCFCF9HjuCXt92FkEZKRk1kJuNzMUuc9AUbafbwhi8RC96TVQrtnsajhomptLKFmQXg4nZQao3jwHV8kfZeyF9BX5kiWUnC83Wa7X7seGUcECHRPLAapk7Lr1kUQ6Q62RpBKeGUsfmPcyNhaZ2bmdxMxxHAhdZdKVr78R5ch2BvG7ZtV6wkHB1hcVJGJmU4dskPPR5EFd8gED72eeUnNAsTknW7ePfNMj4DYWGqf2QhPHDZXsyRN2Mczv4tgyRsNA2HR3U9oZikejcuYhha9yNsXEdNn23B8wa5aDZwR6hwZ9hQ74yv29sbfBAfe9XWT2UZAVaeZeazQSSrvAhicEKnwmCAvfwcZNS57SHJ1EfZf1oEt66S6mGFdBzcKPLZzmJmCgMiBmMThqMemT1XS1ovES76LVcpXSkyiEdA17htR5HuPWdDVfWNQAK2jAM8BjKGtvsh93oMFGvMaBVBAvj1QcfTr17LdeeT7h78bKzyF5SQWuyu46xtDbmTZVrR1ZSpnffiD8TbWnae85Bw1VfttScQ8yfa26dsc9pwLrHhYhC4XKEVPWYUxLHZd959tLA2kGNkJBJR8PPThR8PugaUTq1sQpLg4ezPPUjYyWFvhFf6Rcw5rcJAwj99AUwoEhPaUnxT3TxiEJBbD3Zsna33mQD9Zg69Zzr9xiLA7GzhhA998dwkpbbgqFxyASwH6yav5qDbXPZH7GPtt3nTjUfRs87SGYgVGHoGhqaVUAfQKW4TtvFicdpvQws5kg1nZthd7WkWcR7HqLc1R4wBPFynFVGc457vhQwaP78yQsQDHq86',\n  [ChainType.Ethereum]:\n    'NY4PEzZ7Vfju59RSazdQK92s7PaLrnCh5D9yZBZx7fptQjQZ7Ra2Xiz1PFusrkij3YamVoqXNqoUzazpjnzwmX4zKvPwWGLdqk1RXvp82m7Km2nwtvL2d6tVVCfgiVzA392JszEtNDh9hNXn6wk8eXjXwUg1q1w4UJi6XzmscSH6iZ1BR6ghCp5fyrZBeUfnvbPsfgHmmoVQzmDJ5E9KjmCg53detrDH29gyZUKyqjC5ddnCKG5cvVmoZ7D2ix9KFa9RuLcpVTxnVnuoJnHL1yoGog11TB3eT5hRyiUzeBU688pMb1xyUaCw8bjh5wSsBRAWQnDiAaGuj6zsJEnKeMW94XLeaTASw4K2bwyWHr4BVN9XNSeopFoj6mXPrD2ZhGgPV4HeQp1qEQ2pemMiSecXYkghfnk1t8hnfDNMfXoyKXxEmN8Cf1p7M8pqtgo7H9uUi6xsfotsB2uHVSoT21nzERYMaej9YuYwgC2iUzrzeZNFu7LbMqBErDgHn4wfgppRnF6axDca7QJGNv3q7E2q1DGRpzmTXPfr9FeFxki9geAwsTAy1KTqU2u6TY2wcRC3GzQz83x6LatZLhf9HZnVWZ3SRWQ5AmKUfxhHVxVC9Hwiraqb7ciZBsrnXHWmFaHHHYxafZwoLUBqxeWnHNM211MUwJ2rD9pvrqREfYs4CKYJNDxe5nezL11TnsLyt6p6XkKgHXvvqnk9HQ27pMbpNVX33Y8iQpznFvL2YBCn6Dw9hBDgb8thcYkkAXyLRZskEmhXQFL9evXTstNoeJVJp7NAo7dejZRaKHzTvZnZpkybJGks44qFbGSuSXGegN1V1HWyYGnGSgEJm3yrapNC5tdTvHWXVDxjw1G2TwqKL8D4HZVsyWsu8PEErsaf593jscXKTRn2uqvdhp29rJKGV4v2Cfd8DDXzwhmVxcVFyUiXg9JDe8fCi2rxmFai7a6P6vTJrUkJRtKYBt5RUY3uzKXpX4J4fBWMHmnM2yTSgdaXb9MYULmsbWitqpxiTWh1iMQdXNHxU1A2hHvsqogqEhrG9bGmMU1m1EFSFAPocv3KUf5bPYUWmVUFaxa2MLmE4fs1EC3kCJz8434NrxD1YVA1iosiv5f2tDM8E3w15VRik2a3R1Y6C1D9uHAAT1XK1A27dnx6e586eghm5BuvCY9Di89bdYH5KX3sg4NzWAAJYd5DLZbtdXxzRrKiKwMcPjskhwyQRcv3qstVzPDfJdE8Ej',\n  [ChainType.Binance]:\n    'NY4PEzZ7VfjvyhUfALrnVnmbCo79cESCRMoD4m6TNTRdUnGR3B7EM3KRKxPh6BmdAsdArGV8DgAanEjs4QLYzYTBPGexkgMBPaRwAMSuVAG5rtzuN5qNmyAZsfdrR3cnBuspTqRkBQFp1oczXkCVNFdjpPwAFYLZgnnJFJVnZbp5TQSECTioxM1oJSKm7LBnEbPNrVWFqcShvqAjoyie7Bd471mNEq8y3mEeV7FH3AQCm4fKQgyfwYkRBC4jvFjWDaMshpFbV325g7n5rcyRsbXJ8EGMC2pKVGEbkx2JCgX4ba5dxx1uGibiHnuHiTNXLmrbEJ6BFtBFZB69Ye7U1C23uBEEvTRLteSbKzKAaGv7UbhVtvcgX91muR3sy7jXTW5FszKWej7knHLWJhbUf47fCVvmbXWEx6rHu3fj5hEqQyfVuER3J54yQAtP9ertP9hQX6GQ7mXfyUwmxTYiJS4GxLzeWZGwfSfRUDe6GN7qurja8kVeMrTwdo835yt4XUcemLK53TCkTLe61Bev6NtiUCSuNrhddXcdfMzqk1DWZCXhkcm51pnGmbmAntwC6AF7rL2LHtHi4et2edKAJHkYUp6t9a8Q57eL6fX3Q4JSfDrjfgn4x2fJaF1APdwbBVKoJyhDUkmV6xAaANYZifq54eFg1qBh54F6mu61U3Df5sZqsepzQJNYp6Y95afLuHGmG97mxhmmRsecKbamu4p6P3TPZEs5eYfHspVf85GNh2BztxxYn5hSsR9c8VRJjBhHR1qGHzX4mbRKWn2D41L7AHPnapSQyHCAPdhSbaAV3b6eLqLvc9QrFBAdnsHqN4NauYDPZc6sSrFuLEwNKFbjefc7pBDnA2pfTUUVqCTFuuaM8VmLKFxG2oVsi1k8GD5moSzQbEphVfWTjE9kTZR35oArptsctXGXRT6MXToom6m4cj465Xs9nsRY8t7FgSHsxetJafgogRjo8NRpgFkBpRgf69QuZbqYkrFMTsoDRkLYCLTF4XZwYzu3tqrzLkSZPKDzK1x7pySFdB56vAstU8HPHLqtzduvHt8Gvrkh1mAYQ1cEphCF1jfs5vZUDifLQYnZ2JiJeMdFZu8RhssWvwU2oL6wqx4Ey2iRaSrLSadYnWx47QvGZeZ8M5gupYMNiL7tTkpCjMjbuetqGcpQrtiwuBJ25DqfnWeLN2K6LS49Fb7GjW6Y3fMgdDYVhh7MFpLiyHMcC7wzdBJSMEcE1VNvo2',\n  [ChainType.Doge]:\n    'NY4PEzZ7VfjpDKVcQkzdi4CLcgbMvUX53reQKShv8wRAJ8cRsEi4zV8VwevNM5JPxi5UA77685CKHAQAEkE5HUX2jv5HoMoaZFqcYNBQmHxLA86pS3fHDhg6GvJ8SHssoUZX4uGcgEcRt118Bz8bR8sVAGC23UcafXEwmhfCRfrijjPxDx9ZLHN14uuCU9Gv8Upta65PkzbE3oTD3XDuq7RicN59bz8o6eHef9MfxZetNXrgGTkCJJVJrQ5ahqPLmCzkwv5iXLvRjebbPcen8FxPJ7RDE9rG5BW4uuyroqH6nsNcQKRDnvvnrt5PjghRfss4EswpEJXoxxf7VxYUxx2KgHy8W865bjV5Gvmd9nLPnRStwDV7t7HP2U98fMH3Qdp8PS2Vew5edCjjZTiu2k5kB8frNwSdhGvu91TpAhen474RoxWeoZErNRPpkBH3MN4vHo7EZYiJPjsYtLctVEDWZkvFuaFCYQbuF73JqT7673erYxjRu5o3bCHMgNLYPYuriHLyWtpAJvkFa2Xir54tNfMFyEcvPEWYWaB7J8JsBa8E1b6v9x3VsDyNrU3bGXz52Ax7dG5ziTX1DG2bZuRvGSejjeP8GVgUXTBvRARs8t4wKwdicHkZVie2zGBR5w6Ajo1wK8hNHi2ANYSX5VEFEAFgjwo8DNMUTXbyreeKTcJgcntoc1CbNaiDUvJEyRYaAS7mncPsAiuMjTiFUAzRU5gWdtgRTrkVfi638QrvsvKQgKNPxvGBQpEWtSnmDfRhFifDT716wZ22rca55i9V2ArmDRVZG966MSTYNewX96iwndT8PDhhR4xfysMrTdQMPBzFXGoaAyV54rZ37G1JHQjKQLdMXLP67wjqFMNDRjBUsUYpBYVgj4XpvA1nik8UDqGW5zHoEszpjFJNCSzoexM1zLk8q5vk73dfQ3zaME7tTjp7rdAH3tPtWVkrFSWyDe3rw4zZpSHE2iqH8dDvTVuS1QYsJ6G3iqE8nQbg9FipofqTEjihP9ojvcXgKa9ASce5JNsRKHUSeYkAtDs561sZyf5uY626GcsvMYKGHjEjxCYJUYfrDTFz8v14dNAzVAiYQS7M32otTzKeXhB6ZNSRsErvMfrjgW6Rc7joCL1umHo8c3n3nqxLjZqxnzTgBAXnUNDY2g6LLdVRbj41hxTmvVkwV8MV5N1tvTAALAiagxDKu5bWsfTYFHbiiA7tLxqhsUvATorTzU7nrN1hjpQT3i',\n}"
                },
                {
                    "name": "permitBulkAddresses",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/shared/ts/chain.service.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Record<ChainType, string>",
                    "defaultValue": "{\n  [ChainType.Bitcoin]:\n    'ZsPNMsGz8D8y11MAneZTVjJndCjgTUrBWezH77jKWr2KXMVRgs4gRkDdTLoUQq8xqtGoESTa7r3zr5E3SxQkE5CM2PaPDSHb5bQWeRtaL9eikJWw95bx4DSjCDcsECpjLxbEfahCHy2sDuXQg6potLhwVVADP5TNUxEDgWPR27x658qcHA54TPRhybb6z67cdmkPrQNXwumoGvoPNnqVcXsdXS71KpQViuk4wXBT156Nd7Tt9b3Dvx827QiLbjJXuajydCDFC6yp2sj5dk7uA5ArNfViybrVQaf71GNGwyh6USgVKBpTurrRBtxeGWNzXi4krd7XbseaU5Crnauk9fj5jEbVH88sPzuD6o4XReNW3odcKDkvqgUh9Vu6b2uGLJsV5wY44Kk3bf8PJmkTc6vQE7Mprkdi2jBfZrzffqoKC6hWLfSZNcUWFV821L43VkJbsaYLukMq1SBJ7y7rsnWcct1U8owQbDpboysHrxfeE84JMTterx8E8sxJqwQRRTxT7M',\n  [ChainType.Cardano]:\n    'ZsPNMsGz8D8y11MAneZTVjJndCjgTUnjAi7MBVhohaELkSWjyWJLdqw9DFRK5XJ5mS3TnP1cxLsjn38fsQ1FKDfXpczKLF38JVqUcTgTz4vWuQ3moQtya1Yb85tJXVnq2NgvDcuWJsRXQWyqBABL93WEFwT6TWiZeXVAQ7x3EhJGmFvUkbZqbtkHvbYACQ7PZVwVNXn44saome9v7QrCMqvxHHrdqaSc13dHXx2MGVut22sVvMsNXT5ody7hoAqmhfioxM6Yw238jUyturCgtbWdVr42Qv5t2aZ8YCdz6ifvqSbKmnNUBSiccfxr2G9Y4eceJ5jv7iJEaf3RAoYH9vTP1yiacpmFZLjtT38FUz5n95ubWfNg5kZAiefzyaFRpV8sRH147FoaQKFRUQRACivsVvXRBhZWYeA57VZ65E7E6d5RU4JJewNiQ5de5daAQXnC9aV2diVXw9obFC2aBYqHz3U14gHss9xvcVPuqFsJdQRLsejtnYxuoZcJF18vohmNKb',\n  [ChainType.Ergo]:\n    'ZsPNMsGz8D8y11MAneZTVjJndCjgTUjPFBh5wF6ZNmMySHVDcBmMx2VxGFNCcMxCKDPkdPEzZp4bt5pgwrpZyKV6nmzCAh6SaX5ZnN2fL2X2UTuLvmuk6t8BqrxoiKHmqASttYk6xJPNabuF9ZNMYQBikFWDmq2jrxZS1MG6gQQ2Mx1MgXVvPs9ZkDTe8TykK4MuvQwtjaatjugK3FC5gsB4e4KiTcMPzreUkHvC8mZQGTtGkmHSbq8hkUDfa8MUMAka4oV3unyhgvx9MHjSDNaKWtqrWJpHCsQqPxvzPKohoYSNQt6H3V6ddw1dzGbBz8eKSbno5tEaLSryLDeMAbXhivALPZ3uCyWvx9BKFxSpuqCuQs9aXH7zKedvxzE6XRrrC2TZcWn5UinvbMNu3S4i5oTK2Y8WeVfoy5XHRbK7AL9w9pimJBp5Dx2UnhhHrWbeg9XyVZP7uCEqcUK3iVFmdG2euUa84Jbr7XVaE8v3sBa8LvYdxc6wAVfgPNNbQNxK7Y',\n  [ChainType.Ethereum]:\n    'ZsPNMsGz8D8y11MAneZTVjJndCjgTUoSPbApCbagsfJ9WvbzbsgAbzHGNF5aNaoR2AyxnrCBH68d5TDEc8aBhVRBT4Q5UC5tdqi9JpMqC8CYFja9PYqMj7KZDjPyMHPxbqUSrq8pGVwe7f8dCV5brNYBCrNqcrC5TmYvp2HpoEUXVb7JsxCuPWQFJgXqYhzEbySQyZQGCdVX6XtjU7aQZK5bzijsXDJhuntTM7ntmdSBJjEhtkMrvrBH8RtTW2JHZw5ZW5QamM3MJbfYDExepJQeJtACiz5n36piDgebfWgjAgibjz6oXsky3mJk2rAETx25AMQSAkHz3cYnH5Gs6BorBka9qXK3U47Dk4tobZGbEZqVeFvuaoRb7VcGUvX8L4rQf72gXzVVCVvY9YEzVoFEfFGe392S5e7X6QpdBuap8maYY4RygToFx6fLeUggDP1gEQ2ptDXZoCcthQPR6ey1GtEju8jqujt2VvJ6A8VjCbU3JYvozB6kqGxLCLKHaN1zm1',\n  [ChainType.Binance]:\n    'ZsPNMsGz8D8y11MAneZTVjJndCjgTUmenzfjjRBRRAo2DZVkwmBZxuHGoNTFLLrmFhsvuagJbFxBVLFW2nnoSuDHhNckxkJhBKNVhfPghWoKTuCHsEdJcJ1RD6XTT2aWbGPwHkja29mj2RibYNyCqjkPWEmbRJhVvfN2DUZ9pExxBPTmghNa6tFQyLkkfHdmuXEXLdpmWndfdknawDuojQPGjx3p42ewB4eeV8Zs7dDCDLdUUghTcczqJAadPMroUpmifMTw1FrpU3jC3kMaSzYpcpPu4e44xEni3E9hrenfQePbFVe9Jq9bVyjsQBF8vC8UxqefzEFmMoHT9xkdRNsFmfLMAximM3nyNhTMgLimWvLcNddW11jK1FFPumgKRUUeRivjtnXiRsNedXpmHKhvSVvpS8wAJbuySw3bHqkrpgQHqAr6vUiXj5McjsYzVh7PZxrUgEGNe8uLk4UpxJGhW3TVLNcPHdEbq2AoyabVkK2ChbE9KZ2JJBdHah93VgZSVG',\n  [ChainType.Doge]:\n    'ZsPNMsGz8D8y11MAneZTVjJndCjgTUn38JxZpW4EiZgEoHt1Juw2od5nVwwx23kjav2ZzWjZAYrjAQnGwskZjCxmVagr3o3d8AfdQZySQigfqzTFjekNSHeQBuQPQ1y3ry6fN4w5ECxn9jrmho9pZFkBddZ2QLbAhvZVt8WrpduXniFkG27KsYo6ikCtgRsJyvzjE7kubBpsYfRf7tV8ZT2RyZaSGJp8Lo6SbrAMdDA1mke93sDDkP6B1cXi1UdSSg8nAi68b2HLJEdnw52KES4Xnh3Dg3s3n9Ur1mGf6WJ44oVVxwsBHoXWLhoAXJ6v6XSnX1rxBcqT344WHLrezqdGwzYAbKYqGtUiEZq6fcHVhL3Wu3pxkv2WbupVFpVAeFPxYzcwwf7vtibL7KG5RDuZ3rziqCgLC5jL9ckTS4KkZXH6YEJktNnUmULpcBdpGUHWzeea2SLMeiNYw1aoZ1k9QfmVK7TjxKJ5g8gSrSTwmfZHMPD5v6EBYyu4gBe31WXWVz',\n}"
                },
                {
                    "name": "permitTriggerAddresses",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/shared/ts/chain.service.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Record<ChainType, string>",
                    "defaultValue": "{\n  [ChainType.Bitcoin]:\n    '5ivrmzxYZZfH2wJRvogecZo1YYXm32CoKnSZdtwxbjNoogRakUFe56VrrcULZtCkvAzM2MNRMxPYSfZc2rB6tkLKLCirG14JPDMfqBoWMhyzzQLVsDukZupema1i8SvYUuoaiPL5rTyQmqgF3ftPbvM2dHY623B3KsKRTNDhkoMoRmKLzenNWqjXpkANpyc3TCkDuvBypXfbWVN55F2ZZUs8L3XkvaJKcb74GY7whJB8Zg31VgpmVW4uVEuqpcvPk5FYNiTdRakyYTUVFnAdCR6ZDjagBYMr3ks2uHMhQdjmoKmmwCocVm4SGZsA8rU8zj6zrEgpepLT5UPD9sZQWtvSi6C82fPEW9pvNXr4T3sFx2xNRv8meyNUhopUfiRzVoWfx6Q4ArqU3dnmRtN8pxkDfTZr7oGrzAFAb3DRhBUPhhfWY2USAw7LMqMAuW65pdUFcGnczQH3B6V4kALNaoGMD7ixKtkdMkrAPHkJmxKzeMEd6Y49PnHWxFkQbXwqGELjDppqmdbKceyrtjUp3JwcZ5qN7YcLg1yXhFUiWAHhnAwGkHsTHivXADhV81sDBVqM1GUB3piyt6gkJ5My3SaRRTsokrnJLoGL23GwjEfTzDsvXCoXww3MQcwUUCXehQConnMxYsK7HHGV4wf8kbctrFd2ekPkeHm5ksjagEVzKMraZJgrRSRWEHdYmUGkU6tLGZTUF4Xe4MkdzXC3sRtif4iUnZg6Tnt3DEx2i5fmPD4xasYkusc6thd77x5x7MZXMdkxuo9BWTG9iiYAaE4aLQ5yEbrYeVY85DCVFAKXTsiwUH1De3rDhRZfFfQRuDqiYomDFumxofAa9k89yLeCSRyQpAH55BXLqvppusJyDwYJKd5itao8z3Qi2Fsvt7oL77fDnbotPwp7EkFbQZdGi7aUU1SdyfhxNwx6dYcFe2zpj6Spj7zb98FR2HahXwXnqqZjuym7RjN55bqPt2FufJ7CwdgQmiBMid7E1sAVMxBZyAeNbhHEqRJCajpUyGXswJjQJ9S1u9c4rRHzdntMtr2RXDtdgrt6b69GpZgZNeAX3QG9W9kQK4SAHE2BULEmNSBZHHitrRYdx97AsDLFfLpzfsPa82ew9oBy3PacMAF2WP48yxQrAzSA2p5idB5QFbYoECBBLsCyApG37AMuPrr24JrWmZLqR5XEPYnKojYrMcciwkn3L6jRpC5c1D9KrsTGk5dGtqBji1FE9XAVxuVpdddJjBSjphPx2UWtvJnwcxB8CoRSsVDF8RoyPcVwMmSfL5arDGJxBUzVu',\n  [ChainType.Cardano]:\n    '5ivrmzxYZc1s5aYrsy9uMd3wphLaHx4Kqrw7wVDwQdtj967D3qYpAw15uAr1CK4RbXKFW7kersNNe9tXu22iut2zG7tCmAP9TzSNgHMSJFBzR9y7vmqpmTGyFmn6poS81E8MzwaJ2MxkULFoS2nj7CwVsCMGweg84sJShZkGm81jxw6N65GHddQ4sJsBJb6MYFcVXeLxrgnEMPd3eFH7XoVj5uM97P6rsUAztZmeaA9hdUkc9Bz497j5BKQaiXyrFj8ghEtL1cemwfnGrsybkuq132QT9qsW7dNaG95D5wSYNUoAP7mVcziPas1PvEa5xRgMKnvE4ByYPT6BfkAMijYfXSDLzi1EbksurZGfC6jX7jfSgwuugXMNbjrUwhzj6657H9MsytUxRW8kNUKN7mwUphQGFS3nWLG4hzyas5BF8MnK7usWD7MJko7FaUWwNPVrRdatwB5uu6rUrY8UeAW9DPQMrL6VZWMKMWFmoY722pVYHdMdCsehR3CnsRDGDpZtvdqJnGgn2czeZ4AfK8o6aykw3HMTvNP2e6pxNt6FYgr2WZhbXsmeqA6bG7t9JNCw6H7tA8KJPAN1X6CYeZMitX5RWCrMtrSy2NEDepNvMgH3n4GD3tvS5Rs94gFVWHfLu4JM5BaTwfRTcdfirnwPQhYhtH6SEc8b5SgGkraojn4JgkKGp2ftszDUNyaKrY8XJQusuMG64Aoe96wr2AaRKKtUhAKfk7kUXHtGoV3h4MhDy5Wnbgb6hXcmQoMQ8HnT7JMAFWUUeWyveNn3hdNucDf2WtmXBsRpwUidapBJPD9Xukw6uEsWdkzsCNcdhZM4EqnkadRKziCubVx52TYoxDYqupyLssPc6JdaLUWny1Nh2vsEdnuNYXj82iX7AeJRaHJeyn8wytA7G8NwQXp2THTniwF6hPCWTub5khfdJ2g4VDTv14GRL88NA6w49N5FaG2ZWxqgRKYxbEJqgBE91KWHoXfsB4qvo6cGfMwpeJU5g6FTiexmXZqrNpRwmnnx1NTGK4TdqnksfaXZPMfPBbdJnQu1vfGwLuMkP5f5EvyfQ4KzazA67AxoabFYkKJk4pvVkRqaWUps9b3nkZhErUMAgxYR4raNtKHSUT13c9RMaGQmtV8viR4b7Z2JoKjqiEP9xGVoZBANhDpJ3EpihvRmDuy7MAZfy1qEm59spvdgdPPEiffw8GBv9MyDfsAGNSzsMhiP1f8WKXduWy7AdEJZTrBJkLZFPTaRHHyU9XvbRyzrxhV87thVrfRhv88hN6Viw2CyRdMJUPmVt',\n  [ChainType.Ergo]:\n    '5ivrmzxYZTDDDoKD1urVYrXZG96ijTUYXQJzE6SCRJ2RR6Kj1UPWL1iN1xeHgYJEQjnQ7m3Ld9tBRRYqjzrAVAqHyGbZB3otUWZW4sUxN4E11fNUZEMQ3kVwnZxFmeSaxcXhQiTFH1cvBYWuFMRRFfaA2UMfpEgm2WoqeiJxPCojp9D7h6yMV4br5EtWTQJKRtcopBRoUgDg9mrKPAXGPZZKTZbYotgLKQ4nzD8QB5hjYJswhLmePaY3zK5eJq7NTcdoAgbNPK9nQ9UpBUgrc8RB76P8evPHMXg6HrVdQ2z3rkvYFVZqH9SmCkE8KGiLYGX7hwaXYGvPExdoVDp7qsSctsPjwgt9Vts2G76dzJzfBhEunJ33vdTEkEXX3wkjK4ZE8g5YKCwGpcED5PhtRQQtJZaZMYTZV3TpbPWy57U49cD3HVeUGR7efxUHZxYybWJ7q8i6NDm3PUwKFN63HmPYQn7TMYGkvSoizTuTAUJomiKgSnvoz2DSUzukRSRmUFA1cLqdR6s7FbeJfpbaKWX4kUGM2Xh38FdqNE94SjkQMY9bv3H5N8MgwGL2La12e1GXAdMCKJCWKRe27vjdaHJWmsKrBLuXQegGN8BaqNuvJbhrmreHAjR9tVwVkxcTUsr8u8TGUzkzN7coV8HiQV9KBMVgQ24NXPYyoCuedwfCiNwYX7PSSbvve7Dgyy5e1S6qbVpEpVtjy9NzWfRaqr5CyGDqhkfjizNG71NZu543vkacjXrrfPWqtNoXMtTRyM1pzwW9ze9aoRX6e92mVaCUB8hTnfH3Q8EstRLDJygLmp63y45tKwBVBDjog7Z6pWhTfBapMBz8Q28pMfPAR8ywfz8qvtkyQcv9SuEZWfvpZREaS5PGhBuqU79eR9bwNwS6TLu9BZV5Y1ahVFA1fMUxhXTvX69hKnNHFgZ35fZdrVrSeU4U5yGvYX7ViTqL2oFk16HLoTXgNs6KQz7PPZr373gDeRh7PfXpX5jWyxw6SRreE3jB5SUiQnZxmAbpJNVkPzFbZXcrsrS3JHSfiVeqp1tk5uNaZcX39tQTXtu4bGrpv6EiMvYPkiDhCiKd5oAVeZ8VxEGN7SP94vF9WhS2oWUMCVLU1XW2DDHejZ36Zo1Ho8fHbUEaKNbRBozY3HYnkYyJuF4wer8xJ6q4KcPppDrS5jqfAaZF6YWsdtqgse7qMeWVUPj23Vr5XG2S9sYmWA7femKuZki71S6BqZGNfit7F4vrzqNZd1L5oyLSVCtuiv3DybRnu2YEaUtrmCphsmrpAFSEwJWtFKqcC',\n  [ChainType.Ethereum]:\n    '5ivrmzxYZsMEcMTZnZnsQm6jutdmSRzVW7WZoqN2c82khPoBUwF6GRVZdd6XhnNf9gbi3fsoZRM3cHmvz3sgJEJmy61cRxTKrM4q9ZfxYKBtyfNXLwD4CCeMedd6pxYDbgT6h3W5Qce2DZX51sw7aP6hu73HxJvcAirXLCYdZxi1nnGUbZYd8WNkU9zZ5ZGLVasrL49hVLNoJsP3ZYLpqzXchCL8RKv42qnLJ2kHc9BZJyv3QAYqMZTZSHQyRnYj4GAbdB3aYP71ge2HXCb6Arc6upjU4cWJPrPY4f8QcMdhXTrUtWp9u443Ekqdd3S2y2jfWLjDLsd7S9y7ASHPqx3GnCcPK4i9YnCQhdM8i5f59nA5ENgo24BTJvyQiRssDrCPpHxeTUp5ae2E5D4vyAnFfWCFfD6f5Z6DEDQvFnu1JLjjLcunp3rehGTSNgjyNNzGkjf6GF2y6enPuNcfpyNWsY2QJot4r1yZWqzeHvMgjbhnjpcManj1ikT1FFeg1oKZCCNBUbed4jYnmM1qFFmTYaovRUuEFXKFU2fhpz3EfEB79PUd5g5YMu1MTkKdUzLrEnoTxz9GKNpXCsoFvwC82hEuwXPcPFuMHdBFa4jtqSueVFgCPHHiXMz2koe6FGmCzY67q8215taocoiEC8NjGNTJ6Bzz3apbT5JP2hLVi6z11kNDQgtTA4gNRoftjZBBNVaFFj1DwURqEBzdawony7FvSpQYzgFEz5PKN7rAAr8Dsd4phbesmeASSph4aQLzB7iuibFSZXxyBm1w8GUEodaWEhh2UeTCJx2XtocU9aLYrUSgA6PgBF5NWzWwXDihESwyboSKnDb2mfHeGyjkjKSfQP2oP8Las1CeMXPdnwXUggckB44f82qjE5ENnqYhah4s5WkgPzzSvx42uhxc8VTbySPgiDefVGuFCEATX6fgAs5ikKh38TYWzLbUi9qM5Ncz9G7Z7Mc8RTdKtRLSxLUoPpiabXtyfdBkNr5PYhznMd3TPy9EHKinSzPV3GiJHGEkfYAbGmf2imbG2LrGtCEnyft3vBXYVocEnAXZsVKSRMPvkWsA7J2LRuQHrZCbVwY4LBDpfrHriEGUnAd168HB7DKPqRtCsVLgd2h6JgSHS4xXvfSwhG371VfTxJgAAtHUgKttcZfpZGXffLCwP7zmQGNVz6FJLsTEN3VXaQMQ7ooCeGHFdL7nbB7ejitfnWzWqgwqi5kv3nZEcmx4YfcnyvAjBosChtBMNfkMSVqa42Mx1xat4eJvHD5Jm1AwYijVqQjcXYh1ZzHqD',\n  [ChainType.Binance]:\n    '5ivrmzxYZw1LAT2rQQY7Gkiuo36J5uzCTyMRoqee9QDzT4Wa1NnZaQ6zVLw3yw4ksfRCdfKiCYfjyiaJuAvdwi8WfVd2VJZo5VfoX7qNEELk34ZdvjCGsSdA3AWVfqSPy8NxPqm41xeccezcgRCVmyTHJa4pu38vtBvTZsnV4jzGTZsSstTQPGZMUUTys6VSBRUGqQjFpjVty3jTFudfJ4rRgyuGhyA1A3jgzY6wPSBXHniAi3c9rQLVEGNzpuyjXD1bFVemGdEmZp5tYLKb5BMsasJr6fa3P4xdyWryg6uUrxGiPZCRT4Z9DMmSyJdfVBFtnLaL7abqN3evRuHrGMn3KVVSFocUM9dLGZpU3XzzvWkgjwxB99FVJ4TzCSKphSgh3gPuCnwQWFhpuRuJJzV8je2jtYguEMNzcygK8WkvkuTsniW3zqJdGpHEqSKcQwnR7a5nP8yVyRRi26aYrNDjuJ2XoqnpLSSNAPmFZNApWcXGRqsqdaJBLsKPkkFXNYfcpwPNcpuExuFaeLhUaCbxdjWKBWMHPxqEhvK2dcs6uXhPjp4QX9XoMSiRqBGC7YAxhZkChKaxmBM3y2sTsyfW69LFM2VKs84FF7tXCGKPomVABQCgVbt5p9BKyPcL8ERa2LJrzfKJwfoXSAPrrK2QEd5zaDi7g6tSVy5QBFzrYARnncF2ZCuGR9Nmh6VAWumXpHfVq83iVVBWHKjSvKJuBEFUzg3G1dWmtwxqRZYFgdgd5FAZp5M6Nj6x4VMi4qcJe9S1exhMHKTDmKnmsJ7AX4YA4MdRGYXGJHRSUb842gqEYbqjjTSu8xRghbuxg9ghnr8NVx4uxwE56zJUMzhP4bVftTH6XhS1MDoRUPi451LcAbRr7QLR7gq8FS4H73FtJN4cni5mURRpNAnzEYFWcjmqaUuC9VSfkuD3Aqk7vSKpbJoSkcaZMXdqb9G4x6SGxjphx8kvxQDTJkmjkxNB5bADpRA7rfkSjRX9zekM8rb7NKu5doxYovb1qPgDuPPbD2eA279btntL8xzqTW2JWQdTPqdHG1ezxBsSWqWdFzzJYFh2VWuYB59A38EB9Mcihj995Y1DGfLt9vHMaw92ERCeqtk4MqX6WSBYc9QzTEA7wUtdYGXLydyRRxbLpYTfTX4sUvhCvg2YGix1L1G4nFaNRq28jiZjfKTCLr2TWDzFvX4jVWhFjFsBVRSCQhiKfDRpsUXm9CYXuk9tvnoVj2NN3e3SLyiWjCEUap84EhdyZn1zHHQSXnsSoSynR1kiWSDCuJCBcyM2MQ8wR',\n  [ChainType.Doge]:\n    '5ivrmzxYa3qBuYZ3teFTEJP1ziojbVZAYdZF528CNfT5tiycZoiqXfZEqgud81sBrXGyGoanY95RS1xwRSzc4nSGhvhg9Awr23q8vde4k7PWrErq42DeCwborsxAwKm1YrWJEwD8KZiKmSMR9jCD3pTxfsvoq4yMJeh4bscJKRj9iuy79tzWT3NU4L1vrVNjQd9ksz8V2mUeU7EXouDTHxAM5Vci3HgeC2CBqY23J3mpXryfb3UPha7a4zf2eF7Tv5viA7ayrGgu582W2ZttnLFHQTRn3gnTU715qzjk7NMer98y528FxXNZsjSFs72tZm4kL6zMthigXX1yNBtr5vXmYKcHUyAeRWuX2CK8jAFWYF4cJeceCN5E2KjoTK47Ge7q8B9MNZBVU83HPGzjVkqjvFDQsDZyt7hyCRhguwKibwyw1Y76ceNXrhzwPgukP6PsCWyipqSMVTAxB3QNR46mGi1v2S3MNKR9bThJU98yQntABweyLuqHVmALaU5s971p9SPi25gVnLsFD2FQnczLpHR2g8iJ2PcUZageyVyCxKbX3EvUoyQTymeaQuSwNgySKAs67YgUPFGcmXD33Fbs7vQvkrDbqUVprE2igGNZvCmStypiqZA6ijDzbaTX1XwFAehFT39WyGQ9NXzCtYn35fj95NLkDWugvEmqL5to8JFbCcHbV13WCJaVgvcerLKU922nuM54QXYNoSQHYdCypp3PXwaWBbsemt1cbH9mGM5JnYuhAm2gKctu7rUwCQ9P6qx7k4nC6ycUWLPsYeaYt23RXxF9cx31A9nUqSW4n4j46j3fVTkBX47C7X2TFF2VgHFJky4d3etKp5EQodYs2caNLgmmACErMCtJ1GuamHCfSEg3iLyLaPAmtRM9HFUVCsMEL3GwLzqEasH3fy9dpUrAh8FqAHPT16gAx7ePEPU8k9obwUyYqkxMBuyaMonoy37GejLXzpzM9DTacEuNCBKw9hVHnDCB5Zxkhuj5kkaH3794qur5GCF3XKFnWNuKf35DBwVeEq3SMMsWmcBB6ZqfJJxa4vCLS6aEhtDxnSxw1TS8T9bvu91dXLH6HoAfK5vnoGHKP387yTuJmcbacFtvBoT6EWDS6DvXQx9FptRgojeF9T1ZjCChE6igPL9WhWPvvCEm6BMR2Jtsxw16JJzqMW33W5CBJstoi8oSKE2yrw7i2hxsyY6UPDWZUe4Cex2tSfWSzSS3tXo5ahVMfoVHxUmmKJoE6St16U58ETVipwqU6WLJT6BGYboueetYfbzL37FPgQEruWWNT',\n}"
                },
                {
                    "name": "rewardAddresses",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/shared/ts/chain.service.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Record<ChainType, string>",
                    "defaultValue": "{\n  [ChainType.Bitcoin]:\n    '2Eit2LFRqu2Mo33z3pYTJRHNCPYS33MrU9QgeNcRsF9359pYMahqnLvKsHwwH72C6WDSZRj7G7WC5heVyUEawcSLSx821iJXT4xWf2F5fjVWDUpyGNdkxhFwQMhPKpx85Uu16put68V837wxDx19LRJ5uqi7xBa7EDFRU79Grzk8HDrfpUF3qct4xrQUvDofDroRQTuKueAbwybAfGDhNqG3jzKQchgjedBkbPAuDuNunehW4ZXUBLRSfqy3xofV76bxT5zpZjZcKud4XaRQvXUAVGunJzAs7RNZD5WZxenhmKzhiyuzWiq5QkWqxFw2h9vQ6Dd5PdYsWP3dPtaDC8WUjGz8tQ1tU9LuhqZ8QThQA5zBfoPFrk2iJ1repUuwZPjWnDRHLfWppqDQJGm2GEWHmYTQAfCJQFChUtSNstSATxw37xXjziKkPQRRVPr3VPapbHtGSoQyygzTHgcjxv3HSzwXkD7DScyA2iGDsd4B4WeXo4a6nM4CYpxa9f9FvabbNByhKsgq3ZoCsbUVXN99Pet93MFdxVmBBEsGYEYvtmMEDZEGb5z3JZDtVSdudFcm3bij82bdFzKSmmxxWZhscmLYpGGq1J5geqTiyTCgsmksAHumPFBmLkz8v843Jc3z5b6dwFgyXuBmQPTq6Nf8t95y1UYe8UYx3qNVfrHSGbToSgvCQyLKVv5ns8T2SZRWWr',\n  [ChainType.Cardano]:\n    '2Eit2LFRqu2Mo33z3pYTJRHNCPYS33MrU9QgeNcRsF9359pYMahqnLvKsHwwH72C6WDSZRj7G7WC5heVyUEawcSLSx821iJXT4xWf2F5fjVWDUskGdVdyYY5RBJnp3dfYC7iPoRNeopAFQWFwEbTieow347UhRyqvo2LntFpXzomvGwVTfq9YXS8Z1GGW5mUEioD5xC17Sz72NLbQrskSx7QZAxQTbMGh6vwM9J4q7NzRmQeHmWaHLpUHMU4Jdd5ccKumMvAY8d5C8RxB4iATySLY2N1wY84qNsWNaqkNofbUebf6LgmU9HTKAmU3nDoBfX7mhCjH8kXDhZeYdRsuLVFEYu83TkpwgHAYGmUoemxWAeA2BKMx8CBAy9jxbCyUjdnk9i7sLxuejrwLLh8W4tP81YkESjZ8BV65BhzPdvCaiX8vBSorgFfnvGKVzwfhhsSDwLY1GUwLTMLwTUTjSzEjsMX9hzsEEEmhxLsekabLmK3HZ1jssLrFryNuE59uS51hazJsi3gsT8SBk1J9YV6Dq6xto28nLqrMqK6raqLcAm2iU8hBtqdoSXqWzsrZHpqc2uLGhY52ee4k9TpFBvN1RovYUtY6KS4FncT4UgnbEFkzsnWYKX3CDn16tJs5CyZ97gKcvUonZ5EqTwabzni14CcQsTtKtEAqj1odvSyfJ94NnEjuiVPC3VmZbQvveN3bQ',\n  [ChainType.Ergo]:\n    '2Eit2LFRqu2Mo33z3pYTJRHNCPYS33MrU9QgeNcRsF9359pYMahqnLvKsHwwH72C6WDSZRj7G7WC5heVyUEawcSLSx821iJXT4xWf2F5fjVWDUmvtxr3QSv1aLwThLXxeqYCCc34xjxZDPqPyNGYvWLNeBZxATvBeDuQ6pSiiRFknqmvYVsm9eH4Et3eRHCyxDJEoqZsAahwfVSya34dZNHmjaPQkwWo3Coc17pxiEnWuWmG38wSJz1awE6cymzhojnjxDTbbXgjR1yfYU3AU2v9zttnT8Gz3gUzZNSwjiXSPu3G9zkDaFZVKqb5QwTWY3Pp6SFJgBQfx3C3sp4a9d3n9c98pfWFWAGQN5EfkoHosF8BQTDuzXG3NU8gVCNeNPXYA8iWCbvY3XpxQMvQUxqkjDv9VQfUNvAKVHLW43chi2rdBrQ7Teu6NnesLRWUKXpzSxpByWftkCCdBppjZtYmhhCHqpQGkQyTcMRoP2krFKe7xKbfnFkdkhaYH9TTdKuTuKtGb265RXxiqrc34KvkZpaBBQB5UvoCU4iLSDngNTjqkNPnWekDahzNHLd6CtcdC1B19jdGEXWeNADemDtdK4zrMNg7U8iVpyGYhLDnkeLVrcbhoxkHxrFwfrN19XvitDosQqmt9dseR6SWHBCDZJdmJecCiEwd2wBiwN5N5umEy3Dd4Hznv7kDr6eX7KtYxp',\n  [ChainType.Ethereum]:\n    '2Eit2LFRqu2Mo33z3pYTJRHNCPYS33MrU9QgeNcRsF9359pYMahqnLvKsHwwH72C6WDSZRj7G7WC5heVyUEawcSLSx821iJXT4xWf2F5fjVWDUpPyXf9D8PFkALkfhCu47xSApej3a8VHFCfLuQoMFV2LgTs6hEqRf2XQkDHzn3KYbGJ9b6gs2XcYf3ZQA2gJaWJXFErT11uifohMFFRJV7cb1eECubCbHCib3A434SJVrZee18QTRECrDirtC2GdZK6fiKGbGcKFTZWK4f3ChgnuZFCjRoCX2UquL25b2zkev34shFCspbYwYcyKmc5xxrvssUHgQmUZy7yu3RKJPXYuwH7SiittGsJ946spWJEp3cuBiMcpRvwbiCyrQqM1FtK3wZJKqy95bVDfj9zXwFfR1rE9wZADPs6xcJxi9P1z2iBXqPXGQHnKVaHJWEwNZfP2KAZeUi8etKnYSib68e5cuif3YNRVFdNtKAT2SJEsJCDmnUecmdCwvzMeH2EtNYsRBWVeTV4RBypRPi243qkFrct41bz6WZ8FhLFXU1tnExucXvQ48ZoQ4RQpNorEcGNDY8MC52yhkofS5b9wy6AYYjpQyTMmhD1QZF3VcQgPNT6x4yxPXYsjohYZh96h6M8T7m9gfVV3w8xowtVQVAB1kvJHMuZXxBkBNLwFbhxKuMwC2Dje3LZmuH9mhg94f7Uoe',\n  [ChainType.Binance]:\n    '2Eit2LFRqu2Mo33z3pYTJRHNCPYS33MrU9QgeNcRsF9359pYMahqnLvKsHwwH72C6WDSZRj7G7WC5heVyUEawcSLSx821iJXT4xWf2F5fjVWDUmAMWiE8WncsqsSRhckGHa5xwdGj7fCkypvX2Q9ypun1tUfQ8YwoXYgYCSF1M2t7WaUb2ZZzY9yETrdm8ywS3VzDFpirFEiLLgjE5vhsLkcW2PtiChF5npL3SFsxnSY92ZMmSw2U9GzhwDwTKXpPUD17dydf4CTbLATnCdiTkEYxCzVqh3XnBebDhEFSHWhCWVtqRniJJRqpRaAsv64qtBPabPG8HNRHT9TXFR4a58wH8VqdNuUSKHx1NQahaXTPYHfQX7H4mAzYU6fbH5uryhxqSh5HTBmCB8XrJcXCR41FeqjwrkwTiEHJkkyHVTeLdpyaUcHJ9M9nEsTbGbxMBLEc6CLtzRA5bDwFAKXN3i2mo86wUghaPMd72nd3pLDbhGYRntgYMrVWuVDzMhdJamVvFPbiEWiCs1BJ9NgJzasvJpJQxm1uBYskrWnULHQaJf8Kfoixaqcz6mcp2aAEAkoAmd3CcAddM4X1vCuapWeyaxLD7kXrHaafMsatugqJP4JQGFKEkXXBhthKScGLq5wcbYb2cVv6HuzyxyMg92UiLzTyFDB8QG2NwKgTfLGJ5iLDzzsFkPGtkxECDMVmiw21E',\n  [ChainType.Doge]:\n    '2Eit2LFRqu2Mo33z3pYTJRHNCPYS33MrU9QgeNcRsF9359pYMahqnLvKsHwwH72C6WDSZRj7G7WC5heVyUEawcSLSx821iJXT4xWf2F5fjVWDUkje1kCt7DSEufp9kN95BRzhkMTmgY2jmZ3gPH7hjfNkbPBkjLNifx5iH8wZ1EmiMFiWKozc1ZeT3QdnRhCtLZwHo5sBTek83753eK8YZNVgtykvcdLDbsgGyfCXZtJ2zxbNK7522JRormkeNkhLFBxC9u2tQ11EHyvcg8qHUhPA1GCXALUdtB1FkV2chfgewbDmtrpn7tqC7o3eaxQs3Ted3mo3TKmckYVWca7TqHnBCYGE1GRH2X3ZuWuSJXyi1AxKCyRi9JucVAGwpBhQPNR4viEZe5fo6kBiChWriCKmr7pti8685xoAz1ycFnLPKhbgdkwXmZtoLbYYrirEifkMJ1QXtaJStb86NQLQU2ThhqTzEkP22D8sRZ3Ud2b83KcxVvzzCvGeDRK7SkfjbmfhTCazJwwXiFTHBgT2tzfJvQTazwP6czcVC4taS55Ts2uKB4Z9Eu5MeWEvbBLBis8KxnkZkdMecxcBjRdAojCwyMBJUz8EPYo6x659TzbSJhjJiFaQ9f4kanVBV7nC9gK1rq5oY7bFH9MUcwGeu38HQk62kUbv7Q2dYx56CBVw6cHzdRJu6AXHY8dAy3BLqvHCV',\n}"
                },
                {
                    "name": "rewardsBinanceAddress",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/shared/ts/chain.service.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "defaultValue": "'2Eit2LFRqu2Mo33z3pYTJRHNCPYS33MrU9QgeNcRsF9359pYMahqnLvKsHwwH72C6WDSZRj7G7WC5heVyUEawcSLSx821iJXT4xWf2F5fjVWDUmAMWiE8WncsqsSRhckGHa5xwdGj7fCkypvX2Q9ypun1tUfQ8YwoXYgYCSF1M2t7WaUb2ZZzY9yETrdm8ywS3VzDFpirFEiLLgjE5vhsLkcW2PtiChF5npL3SFsxnSY92ZMmSw2U9GzhwDwTKXpPUD17dydf4CTbLATnCdiTkEYxCzVqh3XnBebDhEFSHWhCWVtqRniJJRqpRaAsv64qtBPabPG8HNRHT9TXFR4a58wH8VqdNuUSKHx1NQahaXTPYHfQX7H4mAzYU6fbH5uryhxqSh5HTBmCB8XrJcXCR41FeqjwrkwTiEHJkkyHVTeLdpyaUcHJ9M9nEsTbGbxMBLEc6CLtzRA5bDwFAKXN3i2mo86wUghaPMd72nd3pLDbhGYRntgYMrVWuVDzMhdJamVvFPbiEWiCs1BJ9NgJzasvJpJQxm1uBYskrWnULHQaJf8Kfoixaqcz6mcp2aAEAkoAmd3CcAddM4X1vCuapWeyaxLD7kXrHaafMsatugqJP4JQGFKEkXXBhthKScGLq5wcbYb2cVv6HuzyxyMg92UiLzTyFDB8QG2NwKgTfLGJ5iLDzzsFkPGtkxECDMVmiw21E'"
                },
                {
                    "name": "rewardsBitcoinAddress",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/shared/ts/chain.service.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "defaultValue": "'2Eit2LFRqu2Mo33z3pYTJRHNCPYS33MrU9QgeNcRsF9359pYMahqnLvKsHwwH72C6WDSZRj7G7WC5heVyUEawcSLSx821iJXT4xWf2F5fjVWDUpyGNdkxhFwQMhPKpx85Uu16put68V837wxDx19LRJ5uqi7xBa7EDFRU79Grzk8HDrfpUF3qct4xrQUvDofDroRQTuKueAbwybAfGDhNqG3jzKQchgjedBkbPAuDuNunehW4ZXUBLRSfqy3xofV76bxT5zpZjZcKud4XaRQvXUAVGunJzAs7RNZD5WZxenhmKzhiyuzWiq5QkWqxFw2h9vQ6Dd5PdYsWP3dPtaDC8WUjGz8tQ1tU9LuhqZ8QThQA5zBfoPFrk2iJ1repUuwZPjWnDRHLfWppqDQJGm2GEWHmYTQAfCJQFChUtSNstSATxw37xXjziKkPQRRVPr3VPapbHtGSoQyygzTHgcjxv3HSzwXkD7DScyA2iGDsd4B4WeXo4a6nM4CYpxa9f9FvabbNByhKsgq3ZoCsbUVXN99Pet93MFdxVmBBEsGYEYvtmMEDZEGb5z3JZDtVSdudFcm3bij82bdFzKSmmxxWZhscmLYpGGq1J5geqTiyTCgsmksAHumPFBmLkz8v843Jc3z5b6dwFgyXuBmQPTq6Nf8t95y1UYe8UYx3qNVfrHSGbToSgvCQyLKVv5ns8T2SZRWWr'"
                },
                {
                    "name": "rewardsCardanoAddress",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/shared/ts/chain.service.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "defaultValue": "'2Eit2LFRqu2Mo33z3pYTJRHNCPYS33MrU9QgeNcRsF9359pYMahqnLvKsHwwH72C6WDSZRj7G7WC5heVyUEawcSLSx821iJXT4xWf2F5fjVWDUskGdVdyYY5RBJnp3dfYC7iPoRNeopAFQWFwEbTieow347UhRyqvo2LntFpXzomvGwVTfq9YXS8Z1GGW5mUEioD5xC17Sz72NLbQrskSx7QZAxQTbMGh6vwM9J4q7NzRmQeHmWaHLpUHMU4Jdd5ccKumMvAY8d5C8RxB4iATySLY2N1wY84qNsWNaqkNofbUebf6LgmU9HTKAmU3nDoBfX7mhCjH8kXDhZeYdRsuLVFEYu83TkpwgHAYGmUoemxWAeA2BKMx8CBAy9jxbCyUjdnk9i7sLxuejrwLLh8W4tP81YkESjZ8BV65BhzPdvCaiX8vBSorgFfnvGKVzwfhhsSDwLY1GUwLTMLwTUTjSzEjsMX9hzsEEEmhxLsekabLmK3HZ1jssLrFryNuE59uS51hazJsi3gsT8SBk1J9YV6Dq6xto28nLqrMqK6raqLcAm2iU8hBtqdoSXqWzsrZHpqc2uLGhY52ee4k9TpFBvN1RovYUtY6KS4FncT4UgnbEFkzsnWYKX3CDn16tJs5CyZ97gKcvUonZ5EqTwabzni14CcQsTtKtEAqj1odvSyfJ94NnEjuiVPC3VmZbQvveN3bQ'"
                },
                {
                    "name": "rewardsErgoAddress",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/shared/ts/chain.service.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "defaultValue": "'2Eit2LFRqu2Mo33z3pYTJRHNCPYS33MrU9QgeNcRsF9359pYMahqnLvKsHwwH72C6WDSZRj7G7WC5heVyUEawcSLSx821iJXT4xWf2F5fjVWDUmvtxr3QSv1aLwThLXxeqYCCc34xjxZDPqPyNGYvWLNeBZxATvBeDuQ6pSiiRFknqmvYVsm9eH4Et3eRHCyxDJEoqZsAahwfVSya34dZNHmjaPQkwWo3Coc17pxiEnWuWmG38wSJz1awE6cymzhojnjxDTbbXgjR1yfYU3AU2v9zttnT8Gz3gUzZNSwjiXSPu3G9zkDaFZVKqb5QwTWY3Pp6SFJgBQfx3C3sp4a9d3n9c98pfWFWAGQN5EfkoHosF8BQTDuzXG3NU8gVCNeNPXYA8iWCbvY3XpxQMvQUxqkjDv9VQfUNvAKVHLW43chi2rdBrQ7Teu6NnesLRWUKXpzSxpByWftkCCdBppjZtYmhhCHqpQGkQyTcMRoP2krFKe7xKbfnFkdkhaYH9TTdKuTuKtGb265RXxiqrc34KvkZpaBBQB5UvoCU4iLSDngNTjqkNPnWekDahzNHLd6CtcdC1B19jdGEXWeNADemDtdK4zrMNg7U8iVpyGYhLDnkeLVrcbhoxkHxrFwfrN19XvitDosQqmt9dseR6SWHBCDZJdmJecCiEwd2wBiwN5N5umEy3Dd4Hznv7kDr6eX7KtYxp'"
                },
                {
                    "name": "rewardsEthereumAddress",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/shared/ts/chain.service.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "defaultValue": "'2Eit2LFRqu2Mo33z3pYTJRHNCPYS33MrU9QgeNcRsF9359pYMahqnLvKsHwwH72C6WDSZRj7G7WC5heVyUEawcSLSx821iJXT4xWf2F5fjVWDUpPyXf9D8PFkALkfhCu47xSApej3a8VHFCfLuQoMFV2LgTs6hEqRf2XQkDHzn3KYbGJ9b6gs2XcYf3ZQA2gJaWJXFErT11uifohMFFRJV7cb1eECubCbHCib3A434SJVrZee18QTRECrDirtC2GdZK6fiKGbGcKFTZWK4f3ChgnuZFCjRoCX2UquL25b2zkev34shFCspbYwYcyKmc5xxrvssUHgQmUZy7yu3RKJPXYuwH7SiittGsJ946spWJEp3cuBiMcpRvwbiCyrQqM1FtK3wZJKqy95bVDfj9zXwFfR1rE9wZADPs6xcJxi9P1z2iBXqPXGQHnKVaHJWEwNZfP2KAZeUi8etKnYSib68e5cuif3YNRVFdNtKAT2SJEsJCDmnUecmdCwvzMeH2EtNYsRBWVeTV4RBypRPi243qkFrct41bz6WZ8FhLFXU1tnExucXvQ48ZoQ4RQpNorEcGNDY8MC52yhkofS5b9wy6AYYjpQyTMmhD1QZF3VcQgPNT6x4yxPXYsjohYZh96h6M8T7m9gfVV3w8xowtVQVAB1kvJHMuZXxBkBNLwFbhxKuMwC2Dje3LZmuH9mhg94f7Uoe'"
                }
            ],
            "src/app/webcomponents/rosen-web-component.ts": [
                {
                    "name": "dataServiceInitializer",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/webcomponents/rosen-web-component.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "defaultValue": "{\n  provide: APP_INITIALIZER,\n  useFactory: initializeDataService,\n  deps: [ChainDataService],\n  multi: true,\n}"
                },
                {
                    "name": "serviceWorkerInitializer",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/webcomponents/rosen-web-component.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "defaultValue": "{\n  provide: APP_INITIALIZER,\n  useFactory: initializeServiceWorkerService,\n  deps: [ServiceWorkerService],\n  multi: true,\n}"
                }
            ],
            "src/app/service/tokens.ts": [
                {
                    "name": "IS_ELEMENTS_ACTIVE",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/service/tokens.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "new InjectionToken<boolean>('IS_ELEMENTS_ACTIVE', {\n  providedIn: 'root',\n  factory: () => false,\n})"
                }
            ],
            "src/shared/ts/constants.ts": [
                {
                    "name": "rs_Address_Key",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/shared/ts/constants.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "defaultValue": "'address'"
                },
                {
                    "name": "rs_AddressDataStoreName",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/shared/ts/constants.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "defaultValue": "'addressData'"
                },
                {
                    "name": "rs_DbName",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/shared/ts/constants.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "defaultValue": "'rosenDatabase_1.1.5'"
                },
                {
                    "name": "rs_DbVersion",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/shared/ts/constants.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "defaultValue": "28"
                },
                {
                    "name": "rs_DownloadStatusStoreName",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/shared/ts/constants.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "defaultValue": "'downloadStatusStore'"
                },
                {
                    "name": "rs_ErgoExplorerHost",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/shared/ts/constants.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "defaultValue": "'api.ergoplatform.com'"
                },
                {
                    "name": "rs_FullDownloadsBatchSize",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/shared/ts/constants.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "defaultValue": "400"
                },
                {
                    "name": "rs_InitialNDownloads",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/shared/ts/constants.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "defaultValue": "20"
                },
                {
                    "name": "rs_Input_Key",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/shared/ts/constants.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "defaultValue": "['boxId', 'outputAddress']"
                },
                {
                    "name": "rs_InputsStoreName",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/shared/ts/constants.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "defaultValue": "'inputBoxes'"
                },
                {
                    "name": "rs_PerfFullDownloadsBatchSize",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/shared/ts/constants.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "defaultValue": "40"
                },
                {
                    "name": "rs_PerfInitialNDownloads",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/shared/ts/constants.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "defaultValue": "10"
                },
                {
                    "name": "rs_PerfTx_Key",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/shared/ts/constants.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "defaultValue": "'id'"
                },
                {
                    "name": "rs_PerfTxStoreName",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/shared/ts/constants.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "defaultValue": "'perfTxs'"
                },
                {
                    "name": "rs_PermitCost",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/shared/ts/constants.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "defaultValue": "3000"
                },
                {
                    "name": "rs_StartFrom",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/shared/ts/constants.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Date",
                    "defaultValue": "new Date('2024-01-01')"
                },
                {
                    "name": "rs_WatcherCollateralERG",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/shared/ts/constants.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "defaultValue": "800"
                },
                {
                    "name": "rs_WatcherCollateralRSN",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/shared/ts/constants.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "defaultValue": "30000"
                }
            ]
        },
        "groupedFunctions": {
            "src/app/service/watchers.data.service.ts": [
                {
                    "name": "createChainNumber",
                    "file": "src/app/service/watchers.data.service.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [],
                    "returnType": "Record<ChainType, number | undefined>"
                }
            ],
            "src/shared/ts/chain.service.ts": [
                {
                    "name": "getChainType",
                    "file": "src/shared/ts/chain.service.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "<p>Determines the ChainType based on the provided address.</p>\n",
                    "args": [
                        {
                            "name": "address",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "returnType": "ChainType | null | undefined",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 28026,
                                "end": 28033,
                                "kind": 80,
                                "id": 0,
                                "flags": 16777216,
                                "transformFlags": 0,
                                "escapedText": "address"
                            },
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "pos": 28020,
                                "end": 28025,
                                "kind": 80,
                                "id": 0,
                                "flags": 16777216,
                                "transformFlags": 0,
                                "escapedText": "param"
                            },
                            "comment": "<p>The address to evaluate.</p>\n"
                        },
                        {
                            "tagName": {
                                "pos": 28063,
                                "end": 28070,
                                "kind": 80,
                                "id": 0,
                                "flags": 16777216,
                                "transformFlags": 0,
                                "escapedText": "returns"
                            },
                            "comment": "<p>The corresponding ChainType or null if not found.</p>\n"
                        }
                    ]
                }
            ],
            "src/main.ts": [
                {
                    "name": "getScriptFileName",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "file": "src/main.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [],
                    "returnType": "string"
                }
            ],
            "src/app/service/chain.data.service.ts": [
                {
                    "name": "initializeDataService",
                    "file": "src/app/service/chain.data.service.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "dataService",
                            "type": "ChainDataService",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "dataService",
                            "type": "ChainDataService",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "src/app/service/service.worker.service.ts": [
                {
                    "name": "initializeServiceWorkerService",
                    "file": "src/app/service/service.worker.service.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "serviceWorkerService",
                            "type": "ServiceWorkerService",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "serviceWorkerService",
                            "type": "ServiceWorkerService",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ]
        },
        "groupedEnumerations": {
            "src/shared/ts/chain.service.ts": [
                {
                    "name": "ChainType",
                    "childs": [
                        {
                            "name": "Bitcoin",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "Bitcoin"
                        },
                        {
                            "name": "Cardano",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "Cardano"
                        },
                        {
                            "name": "Ergo",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "Ergo"
                        },
                        {
                            "name": "Ethereum",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "Ethereum"
                        },
                        {
                            "name": "Binance",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "Binance"
                        },
                        {
                            "name": "Doge",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "Doge"
                        }
                    ],
                    "ctype": "miscellaneous",
                    "subtype": "enum",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "file": "src/shared/ts/chain.service.ts"
                }
            ],
            "src/service/ts/models/chaintype.ts": [
                {
                    "name": "ChainType",
                    "childs": [
                        {
                            "name": "Binance",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "Binance"
                        },
                        {
                            "name": "Bitcoin",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "Bitcoin"
                        },
                        {
                            "name": "Cardano",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "Cardano"
                        },
                        {
                            "name": "Ergo",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "Ergo"
                        },
                        {
                            "name": "Ethereum",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "Ethereum"
                        },
                        {
                            "name": "Doge",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "Doge"
                        }
                    ],
                    "ctype": "miscellaneous",
                    "subtype": "enum",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "file": "src/service/ts/models/chaintype.ts"
                }
            ],
            "src/shared/ts/constants.ts": [
                {
                    "name": "Currency",
                    "childs": [
                        {
                            "name": "EUR",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "EUR"
                        },
                        {
                            "name": "USD",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "USD"
                        },
                        {
                            "name": "ERG",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "ERG"
                        },
                        {
                            "name": "RSN",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "RSN"
                        }
                    ],
                    "ctype": "miscellaneous",
                    "subtype": "enum",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "file": "src/shared/ts/constants.ts"
                },
                {
                    "name": "Period",
                    "childs": [
                        {
                            "name": "Day",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "Day"
                        },
                        {
                            "name": "Week",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "Week"
                        },
                        {
                            "name": "Month",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "Month"
                        },
                        {
                            "name": "Year",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "year"
                        },
                        {
                            "name": "All",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "All"
                        }
                    ],
                    "ctype": "miscellaneous",
                    "subtype": "enum",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "file": "src/shared/ts/constants.ts"
                }
            ],
            "src/app/service/event.service.ts": [
                {
                    "name": "EventType",
                    "childs": [
                        {
                            "name": "StartFullDownload",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "StartFullDownload"
                        },
                        {
                            "name": "EndFullDownload",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "EndFullDownload"
                        },
                        {
                            "name": "RefreshInputs",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "RefreshInputs"
                        },
                        {
                            "name": "InputsChanged",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "InputsChanged"
                        },
                        {
                            "name": "PerfChartChanged",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "PerfChartChanged"
                        },
                        {
                            "name": "SwipeActivated",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "SwipeActivated"
                        },
                        {
                            "name": "SwipeDeActivated",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "SwipeDeActivated"
                        },
                        {
                            "name": "SwipeVertical",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "SwipeVertical"
                        },
                        {
                            "name": "StatisticsScreenLoaded",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "StatisticsScreenLoaded"
                        },
                        {
                            "name": "RequestInputsDownload",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "RequestInputsDownload"
                        },
                        {
                            "name": "WatchersScreenLoaded",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "WatchersScreenLoaded"
                        },
                        {
                            "name": "SettingsScreenLoaded",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "SettingsScreenLoaded"
                        },
                        {
                            "name": "PerformanceScreenLoaded",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "PerformanceScreenLoaded"
                        },
                        {
                            "name": "AddressChartChanged",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "AddressChartChanged"
                        },
                        {
                            "name": "WindowResized",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "WindowResized"
                        },
                        {
                            "name": "VersionUpdated",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "VersionUpdated"
                        },
                        {
                            "name": "WatchersStatsChanged",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "WatchersStatsChanged"
                        },
                        {
                            "name": "ChainPerformanceChartsChanged",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "ChainPerformanceChartsChanged"
                        }
                    ],
                    "ctype": "miscellaneous",
                    "subtype": "enum",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "file": "src/app/service/event.service.ts"
                }
            ]
        },
        "groupedTypeAliases": {
            "src/app/service/event.service.ts": [
                {
                    "name": "EventData",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "string | Input | object",
                    "file": "src/app/service/event.service.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 192
                }
            ],
            "src/app/service/chain.chart.service.ts": [
                {
                    "name": "LineChart",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "Chart<line | literal type[] | >",
                    "file": "src/app/service/chain.chart.service.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 183
                }
            ]
        }
    },
    "routes": [],
    "coverage": {
        "count": 1,
        "status": "low",
        "files": [
            {
                "filePath": "src/app/app.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "AppComponent",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/app.config.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "appConfig",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/basewatchercomponent.ts",
                "type": "component",
                "linktype": "component",
                "name": "BaseWatcherComponent",
                "coveragePercent": 0,
                "coverageCount": "0/19",
                "status": "low"
            },
            {
                "filePath": "src/app/elements/rosen.watcher.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "RosenWatcherComponent",
                "coveragePercent": 0,
                "coverageCount": "0/37",
                "status": "low"
            },
            {
                "filePath": "src/app/elements/statistics.chart.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "StatisticsChartComponent",
                "coveragePercent": 0,
                "coverageCount": "0/17",
                "status": "low"
            },
            {
                "filePath": "src/app/service/browser.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "BrowserService",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "src/app/service/browser.service.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "BeforeInstallPromptEvent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/service/browser.service.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "WindowWithPrompt",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/service/chain.chart.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "ChainChartService",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "src/app/service/chain.chart.service.ts",
                "type": "type alias",
                "linktype": "miscellaneous",
                "linksubtype": "typealias",
                "name": "LineChart",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/service/chain.data.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "ChainDataService",
                "coveragePercent": 0,
                "coverageCount": "0/15",
                "status": "low"
            },
            {
                "filePath": "src/app/service/chain.data.service.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "initializeDataService",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/service/chain.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "ChainService",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/service/event.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "EventService",
                "coveragePercent": 0,
                "coverageCount": "0/10",
                "status": "low"
            },
            {
                "filePath": "src/app/service/event.service.ts",
                "type": "type alias",
                "linktype": "miscellaneous",
                "linksubtype": "typealias",
                "name": "EventData",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/service/http.download.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "HttpDownloadService",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "src/app/service/navigation.service.ts",
                "type": "class",
                "linktype": "classe",
                "name": "NavigationItem",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/service/navigation.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "NavigationService",
                "coveragePercent": 0,
                "coverageCount": "0/15",
                "status": "low"
            },
            {
                "filePath": "src/app/service/price.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "PriceService",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/service/price.service.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "CurrencyRates",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/service/service.worker.service.ts",
                "type": "class",
                "linktype": "classe",
                "name": "AngularEventSender",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/service/service.worker.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "ServiceWorkerService",
                "coveragePercent": 0,
                "coverageCount": "0/10",
                "status": "low"
            },
            {
                "filePath": "src/app/service/service.worker.service.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ServiceWorkerMessage",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/service/service.worker.service.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "initializeServiceWorkerService",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/service/storage.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "StorageService",
                "coveragePercent": 0,
                "coverageCount": "0/12",
                "status": "low"
            },
            {
                "filePath": "src/app/service/swipe.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "SwipeService",
                "coveragePercent": 0,
                "coverageCount": "0/12",
                "status": "low"
            },
            {
                "filePath": "src/app/service/tokens.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "IS_ELEMENTS_ACTIVE",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/service/watchers.data.service.ts",
                "type": "class",
                "linktype": "classe",
                "name": "WatchersAmounts",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "src/app/service/watchers.data.service.ts",
                "type": "class",
                "linktype": "classe",
                "name": "WatchersStats",
                "coveragePercent": 0,
                "coverageCount": "0/17",
                "status": "low"
            },
            {
                "filePath": "src/app/service/watchers.data.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "WatchersDataService",
                "coveragePercent": 0,
                "coverageCount": "0/20",
                "status": "low"
            },
            {
                "filePath": "src/app/service/watchers.data.service.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "createChainNumber",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/settings/settings.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "SettingsComponent",
                "coveragePercent": 0,
                "coverageCount": "0/13",
                "status": "low"
            },
            {
                "filePath": "src/app/settings/settings.dialog.ts",
                "type": "component",
                "linktype": "component",
                "name": "SettingsDialogComponent",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/settings/settings.dialog.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "DialogData",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/statistics/chain.performance.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ChainPerformanceComponent",
                "coveragePercent": 0,
                "coverageCount": "0/33",
                "status": "low"
            },
            {
                "filePath": "src/app/statistics/csv.utils.ts",
                "type": "class",
                "linktype": "classe",
                "name": "CsvUtils",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/statistics/date.utils.ts",
                "type": "class",
                "linktype": "classe",
                "name": "DateUtils",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/statistics/filter.address.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "FilterAddressComponent",
                "coveragePercent": 0,
                "coverageCount": "0/9",
                "status": "low"
            },
            {
                "filePath": "src/app/statistics/filter.date.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "FilterDateComponent",
                "coveragePercent": 0,
                "coverageCount": "0/10",
                "status": "low"
            },
            {
                "filePath": "src/app/statistics/navigation.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "NavigationComponent",
                "coveragePercent": 0,
                "coverageCount": "0/21",
                "status": "low"
            },
            {
                "filePath": "src/app/statistics/performance.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "PerformanceComponent",
                "coveragePercent": 0,
                "coverageCount": "0/28",
                "status": "low"
            },
            {
                "filePath": "src/app/statistics/qrdialog.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "QRDialogComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/statistics/qrdialog.component.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "QRDialogData",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/statistics/reward.chart.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "RewardChartComponent",
                "coveragePercent": 0,
                "coverageCount": "0/14",
                "status": "low"
            },
            {
                "filePath": "src/app/statistics/statistics.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "StatisticsComponent",
                "coveragePercent": 0,
                "coverageCount": "0/51",
                "status": "low"
            },
            {
                "filePath": "src/app/statistics/watchers.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "WatchersComponent",
                "coveragePercent": 0,
                "coverageCount": "0/29",
                "status": "low"
            },
            {
                "filePath": "src/app/webcomponents/rosen-web-component.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "dataServiceInitializer",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/webcomponents/rosen-web-component.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "serviceWorkerInitializer",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/main.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "getScriptFileName",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/service/ts/models/address.ts",
                "type": "class",
                "linktype": "classe",
                "name": "Address",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "src/service/ts/models/asset.ts",
                "type": "class",
                "linktype": "classe",
                "name": "Asset",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/service/ts/models/chainperf.chart.point.ts",
                "type": "class",
                "linktype": "classe",
                "name": "ChainPerfChartPoint",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/service/ts/models/chart.dataset.ts",
                "type": "class",
                "linktype": "classe",
                "name": "ChainPerfChartDataSet",
                "coveragePercent": 0,
                "coverageCount": "0/9",
                "status": "low"
            },
            {
                "filePath": "src/service/ts/models/chart.dataset.ts",
                "type": "class",
                "linktype": "classe",
                "name": "ChartDataSet",
                "coveragePercent": 0,
                "coverageCount": "0/9",
                "status": "low"
            },
            {
                "filePath": "src/service/ts/models/chart.performance.ts",
                "type": "class",
                "linktype": "classe",
                "name": "ChainChartPerformance",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/service/ts/models/chart.performance.ts",
                "type": "class",
                "linktype": "classe",
                "name": "ChartPerformance",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/service/ts/models/chart.point.ts",
                "type": "class",
                "linktype": "classe",
                "name": "ChartPoint",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/service/ts/models/input.ts",
                "type": "class",
                "linktype": "classe",
                "name": "Input",
                "coveragePercent": 0,
                "coverageCount": "0/11",
                "status": "low"
            },
            {
                "filePath": "src/service/ts/models/token.ts",
                "type": "class",
                "linktype": "classe",
                "name": "Token",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/service/ts/models/transaction.ts",
                "type": "class",
                "linktype": "classe",
                "name": "Transaction",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/service/ts/models/watcher.info.ts",
                "type": "class",
                "linktype": "classe",
                "name": "WatcherInfo",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/shared/ts/chain.performance.data.service.ts",
                "type": "class",
                "linktype": "classe",
                "name": "ChainPerformanceDataService",
                "coveragePercent": 0,
                "coverageCount": "0/9",
                "status": "low"
            },
            {
                "filePath": "src/shared/ts/chain.performance.data.service.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "PerfTx",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/shared/ts/chain.service.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "getChainType",
                "coveragePercent": 100,
                "coverageCount": "1/1",
                "status": "very-good"
            },
            {
                "filePath": "src/shared/ts/chain.service.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "chainTypeTokens",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/shared/ts/chain.service.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "hotWalletAddress",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/shared/ts/chain.service.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "permitAddresses",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/shared/ts/chain.service.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "permitBulkAddresses",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/shared/ts/chain.service.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "permitTriggerAddresses",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/shared/ts/chain.service.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "rewardAddresses",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/shared/ts/chain.service.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "rewardsBinanceAddress",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/shared/ts/chain.service.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "rewardsBitcoinAddress",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/shared/ts/chain.service.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "rewardsCardanoAddress",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/shared/ts/chain.service.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "rewardsErgoAddress",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/shared/ts/chain.service.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "rewardsEthereumAddress",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/shared/ts/chart.service.ts",
                "type": "class",
                "linktype": "classe",
                "name": "ChartService",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/shared/ts/constants.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "DateNumberPoint",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/shared/ts/constants.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "rs_Address_Key",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/shared/ts/constants.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "rs_AddressDataStoreName",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/shared/ts/constants.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "rs_DbName",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/shared/ts/constants.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "rs_DbVersion",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/shared/ts/constants.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "rs_DownloadStatusStoreName",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/shared/ts/constants.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "rs_ErgoExplorerHost",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/shared/ts/constants.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "rs_FullDownloadsBatchSize",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/shared/ts/constants.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "rs_InitialNDownloads",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/shared/ts/constants.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "rs_Input_Key",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/shared/ts/constants.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "rs_InputsStoreName",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/shared/ts/constants.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "rs_PerfFullDownloadsBatchSize",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/shared/ts/constants.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "rs_PerfInitialNDownloads",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/shared/ts/constants.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "rs_PerfTx_Key",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/shared/ts/constants.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "rs_PerfTxStoreName",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/shared/ts/constants.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "rs_PermitCost",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/shared/ts/constants.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "rs_StartFrom",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/shared/ts/constants.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "rs_WatcherCollateralERG",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/shared/ts/constants.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "rs_WatcherCollateralRSN",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/shared/ts/data.service.ts",
                "type": "class",
                "linktype": "classe",
                "name": "DataService",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "src/shared/ts/data.service.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "Asset",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/shared/ts/data.service.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "DbInput",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/shared/ts/data.service.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "Input",
                "coveragePercent": 0,
                "coverageCount": "0/9",
                "status": "low"
            },
            {
                "filePath": "src/shared/ts/data.service.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "Output",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/shared/ts/download.service.ts",
                "type": "class",
                "linktype": "classe",
                "name": "DownloadService",
                "coveragePercent": 0,
                "coverageCount": "0/15",
                "status": "low"
            },
            {
                "filePath": "src/shared/ts/download.service.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "AddressData",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/shared/ts/download.service.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "DownloadStatus",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/shared/ts/download.service.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "FetchTransactionsResponse",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/shared/ts/download.service.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "TransactionItem",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/shared/ts/process.event.service.ts",
                "type": "class",
                "linktype": "classe",
                "name": "ProcessEventService",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/shared/ts/process.event.service.ts",
                "type": "class",
                "linktype": "classe",
                "name": "ServiceWorkerEventSender",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/shared/ts/process.event.service.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "EventPayload",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/shared/ts/process.event.service.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "EventSender",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/shared/ts/reward.data.service.ts",
                "type": "class",
                "linktype": "classe",
                "name": "RewardDataService",
                "coveragePercent": 0,
                "coverageCount": "0/11",
                "status": "low"
            },
            {
                "filePath": "src/shared/ts/rosen-download-worker.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "MessageEventData",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/stories/button.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ButtonComponent",
                "coveragePercent": 83,
                "coverageCount": "5/6",
                "status": "very-good"
            },
            {
                "filePath": "src/stories/header.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "HeaderComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/stories/page.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "PageComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/stories/user.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "User",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            }
        ]
    }
}