import { Directive, Input, HostListener } from '@angular/core';
import * as i0 from "@angular/core";
import * as i1 from "./img-manager";
import * as i2 from "../components/gallery-item.component";
export class ImgRecognizer {
    onLoad() {
        this.item.state$.next('success');
    }
    onError() {
        this.item.state$.next('failed');
    }
    constructor(el, manager, item) {
        this.el = el;
        this.manager = manager;
        this.item = item;
        if (item) {
            // Mark the gallery-item component as an image item
            item.isItemContainImage = true;
        }
        else {
            throw new Error('[NgGallery]: galleryImage directive should be only used inside gallery item templates!');
        }
    }
    ngOnInit() {
        this.manager.addItem(this.index, {
            state: this.item.state$.asObservable(),
            target: this.el.nativeElement
        });
    }
    ngOnDestroy() {
        this.manager.deleteItem(this.index);
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.2.1", ngImport: i0, type: ImgRecognizer, deps: [{ token: i0.ElementRef }, { token: i1.ImgManager }, { token: i2.GalleryItemComponent }], target: i0.ɵɵFactoryTarget.Directive }); }
    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "14.0.0", version: "18.2.1", type: ImgRecognizer, isStandalone: true, selector: "img[galleryImage]", inputs: { index: ["galleryImage", "index"] }, host: { listeners: { "load": "onLoad($event)", "error": "onError($event)" } }, ngImport: i0 }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.2.1", ngImport: i0, type: ImgRecognizer, decorators: [{
            type: Directive,
            args: [{
                    selector: 'img[galleryImage]',
                    standalone: true
                }]
        }], ctorParameters: () => [{ type: i0.ElementRef }, { type: i1.ImgManager }, { type: i2.GalleryItemComponent }], propDecorators: { index: [{
                type: Input,
                args: ['galleryImage']
            }], onLoad: [{
                type: HostListener,
                args: ['load', ['$event']]
            }], onError: [{
                type: HostListener,
                args: ['error', ['$event']]
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW1nLXJlY29nbml6ZXIuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9wcm9qZWN0cy9uZy1nYWxsZXJ5L3NyYy9saWIvdXRpbHMvaW1nLXJlY29nbml6ZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLFNBQVMsRUFBRSxLQUFLLEVBQUUsWUFBWSxFQUFpQyxNQUFNLGVBQWUsQ0FBQzs7OztBQVE5RixNQUFNLE9BQU8sYUFBYTtJQUt4QixNQUFNO1FBQ0osSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxDQUFDO0lBQ25DLENBQUM7SUFHRCxPQUFPO1FBQ0wsSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDO0lBQ2xDLENBQUM7SUFFRCxZQUFvQixFQUFnQyxFQUFVLE9BQW1CLEVBQVUsSUFBMEI7UUFBakcsT0FBRSxHQUFGLEVBQUUsQ0FBOEI7UUFBVSxZQUFPLEdBQVAsT0FBTyxDQUFZO1FBQVUsU0FBSSxHQUFKLElBQUksQ0FBc0I7UUFDbkgsSUFBSSxJQUFJLEVBQUUsQ0FBQztZQUNULG1EQUFtRDtZQUNuRCxJQUFJLENBQUMsa0JBQWtCLEdBQUcsSUFBSSxDQUFDO1FBQ2pDLENBQUM7YUFBTSxDQUFDO1lBQ04sTUFBTSxJQUFJLEtBQUssQ0FBQyx3RkFBd0YsQ0FBQyxDQUFBO1FBQzNHLENBQUM7SUFDSCxDQUFDO0lBRUQsUUFBUTtRQUNOLElBQUksQ0FBQyxPQUFPLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxLQUFLLEVBQUU7WUFDL0IsS0FBSyxFQUFFLElBQUksQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLFlBQVksRUFBRTtZQUN0QyxNQUFNLEVBQUUsSUFBSSxDQUFDLEVBQUUsQ0FBQyxhQUFhO1NBQzlCLENBQUMsQ0FBQztJQUNMLENBQUM7SUFFRCxXQUFXO1FBQ1QsSUFBSSxDQUFDLE9BQU8sQ0FBQyxVQUFVLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDO0lBQ3RDLENBQUM7OEdBaENVLGFBQWE7a0dBQWIsYUFBYTs7MkZBQWIsYUFBYTtrQkFKekIsU0FBUzttQkFBQztvQkFDVCxRQUFRLEVBQUUsbUJBQW1CO29CQUM3QixVQUFVLEVBQUUsSUFBSTtpQkFDakI7MklBR3dCLEtBQUs7c0JBQTNCLEtBQUs7dUJBQUMsY0FBYztnQkFHckIsTUFBTTtzQkFETCxZQUFZO3VCQUFDLE1BQU0sRUFBRSxDQUFDLFFBQVEsQ0FBQztnQkFNaEMsT0FBTztzQkFETixZQUFZO3VCQUFDLE9BQU8sRUFBRSxDQUFDLFFBQVEsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IERpcmVjdGl2ZSwgSW5wdXQsIEhvc3RMaXN0ZW5lciwgT25Jbml0LCBPbkRlc3Ryb3ksIEVsZW1lbnRSZWYgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuaW1wb3J0IHsgSW1nTWFuYWdlciB9IGZyb20gJy4vaW1nLW1hbmFnZXInO1xyXG5pbXBvcnQgeyBHYWxsZXJ5SXRlbUNvbXBvbmVudCB9IGZyb20gJy4uL2NvbXBvbmVudHMvZ2FsbGVyeS1pdGVtLmNvbXBvbmVudCc7XHJcblxyXG5ARGlyZWN0aXZlKHtcclxuICBzZWxlY3RvcjogJ2ltZ1tnYWxsZXJ5SW1hZ2VdJyxcclxuICBzdGFuZGFsb25lOiB0cnVlXHJcbn0pXHJcbmV4cG9ydCBjbGFzcyBJbWdSZWNvZ25pemVyIGltcGxlbWVudHMgT25Jbml0LCBPbkRlc3Ryb3kge1xyXG5cclxuICBASW5wdXQoJ2dhbGxlcnlJbWFnZScpIGluZGV4OiBudW1iZXI7XHJcblxyXG4gIEBIb3N0TGlzdGVuZXIoJ2xvYWQnLCBbJyRldmVudCddKVxyXG4gIG9uTG9hZCgpIHtcclxuICAgIHRoaXMuaXRlbS5zdGF0ZSQubmV4dCgnc3VjY2VzcycpO1xyXG4gIH1cclxuXHJcbiAgQEhvc3RMaXN0ZW5lcignZXJyb3InLCBbJyRldmVudCddKVxyXG4gIG9uRXJyb3IoKSB7XHJcbiAgICB0aGlzLml0ZW0uc3RhdGUkLm5leHQoJ2ZhaWxlZCcpO1xyXG4gIH1cclxuXHJcbiAgY29uc3RydWN0b3IocHJpdmF0ZSBlbDogRWxlbWVudFJlZjxIVE1MSW1hZ2VFbGVtZW50PiwgcHJpdmF0ZSBtYW5hZ2VyOiBJbWdNYW5hZ2VyLCBwcml2YXRlIGl0ZW06IEdhbGxlcnlJdGVtQ29tcG9uZW50KSB7XHJcbiAgICBpZiAoaXRlbSkge1xyXG4gICAgICAvLyBNYXJrIHRoZSBnYWxsZXJ5LWl0ZW0gY29tcG9uZW50IGFzIGFuIGltYWdlIGl0ZW1cclxuICAgICAgaXRlbS5pc0l0ZW1Db250YWluSW1hZ2UgPSB0cnVlO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgdGhyb3cgbmV3IEVycm9yKCdbTmdHYWxsZXJ5XTogZ2FsbGVyeUltYWdlIGRpcmVjdGl2ZSBzaG91bGQgYmUgb25seSB1c2VkIGluc2lkZSBnYWxsZXJ5IGl0ZW0gdGVtcGxhdGVzIScpXHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBuZ09uSW5pdCgpOiB2b2lkIHtcclxuICAgIHRoaXMubWFuYWdlci5hZGRJdGVtKHRoaXMuaW5kZXgsIHtcclxuICAgICAgc3RhdGU6IHRoaXMuaXRlbS5zdGF0ZSQuYXNPYnNlcnZhYmxlKCksXHJcbiAgICAgIHRhcmdldDogdGhpcy5lbC5uYXRpdmVFbGVtZW50XHJcbiAgICB9KTtcclxuICB9XHJcblxyXG4gIG5nT25EZXN0cm95KCk6IHZvaWQge1xyXG4gICAgdGhpcy5tYW5hZ2VyLmRlbGV0ZUl0ZW0odGhpcy5pbmRleCk7XHJcbiAgfVxyXG59XHJcbiJdfQ==