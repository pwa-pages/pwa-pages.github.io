import { Directive, Inject, Input, Output, EventEmitter } from '@angular/core';
import { DOCUMENT } from '@angular/common';
import { Orientation } from '../models/constants';
import * as i0 from "@angular/core";
import * as i1 from "@angular/cdk/bidi";
import * as i2 from "@angular/cdk/platform";
export class HammerSliding {
    get _viewport() {
        return this._el.nativeElement;
    }
    constructor(_document, _el, _dir, _platform, _zone) {
        this._document = _document;
        this._el = _el;
        this._dir = _dir;
        this._platform = _platform;
        this._zone = _zone;
        this.activeIndexChange = new EventEmitter();
        this.isSlidingChange = new EventEmitter();
    }
    ngOnChanges(changes) {
        if (changes.enabled && changes.enabled?.currentValue !== changes.enabled?.previousValue) {
            this.enabled ? this._subscribe() : this._unsubscribe();
        }
        if (!changes.adapter?.firstChange && changes.adapter?.currentValue !== changes.adapter?.previousValue) {
            this.enabled ? this._subscribe() : this._unsubscribe();
        }
    }
    ngOnDestroy() {
        this._unsubscribe();
    }
    _subscribe() {
        this._unsubscribe();
        if (!this._platform.ANDROID && !this._platform.IOS && typeof Hammer !== 'undefined') {
            this._zone.runOutsideAngular(() => {
                const direction = this.adapter.hammerDirection;
                this._hammer = new Hammer(this._el.nativeElement, { inputClass: Hammer.MouseInput });
                this._hammer.get('pan').set({ direction });
                let offset;
                // Set panOffset for sliding on pan start event
                this._hammer.on('panstart', () => {
                    this._zone.run(() => {
                        this.isSlidingChange.emit(true);
                    });
                    offset = this.adapter.scrollValue;
                    this._viewport.classList.add('g-sliding');
                    this._viewport.style.setProperty('--slider-scroll-snap-type', 'none');
                });
                this._hammer.on('panmove', (e) => this._viewport.scrollTo(this.adapter.getHammerValue(offset, e, 'auto')));
                this._hammer.on('panend', (e) => {
                    this._document.onselectstart = null;
                    this._viewport.classList.remove('g-sliding');
                    const index = this.getIndexOnMouseUp(e);
                    this._zone.run(() => {
                        this.isSlidingChange.emit(false);
                        this.activeIndexChange.emit(index);
                    });
                });
            });
        }
    }
    _unsubscribe() {
        this._hammer?.destroy();
    }
    getIndexOnMouseUp(e) {
        // Check if scrolled item is great enough to navigate
        const currElement = this.items[this.state.currIndex].nativeElement;
        // Find the gallery item element in the center elements
        const elementAtCenter = this.getElementFromViewportCenter();
        // Check if center item can be taken from element using
        if (elementAtCenter && elementAtCenter !== currElement) {
            return +elementAtCenter.getAttribute('galleryIndex');
        }
        const velocity = this.adapter.getHammerVelocity(e);
        // Check if velocity is great enough to navigate
        if (Math.abs(velocity) > 0.3) {
            if (this.config.orientation === Orientation.Horizontal) {
                if (velocity > 0) {
                    return this._dir.value === 'rtl' ? this.state.currIndex + 1 : this.state.currIndex - 1;
                }
                return this._dir.value === 'rtl' ? this.state.currIndex - 1 : this.state.currIndex + 1;
            }
            else {
                return velocity > 0 ? this.state.currIndex - 1 : this.state.currIndex + 1;
            }
        }
        // Reset position to the current index
        return -1;
    }
    getElementFromViewportCenter() {
        // Get slider position relative to the document
        const sliderRect = this._viewport.getBoundingClientRect();
        // Try look for the center item using `elementsFromPoint` function
        const centerElements = this._document.elementsFromPoint(sliderRect.x + (sliderRect.width / 2), sliderRect.y + (sliderRect.height / 2));
        // Find the gallery item element in the center elements
        return centerElements.find((element) => {
            return element.getAttribute('galleryId') === this.galleryId;
        });
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.2.1", ngImport: i0, type: HammerSliding, deps: [{ token: DOCUMENT }, { token: i0.ElementRef }, { token: i1.Directionality }, { token: i2.Platform }, { token: i0.NgZone }], target: i0.ɵɵFactoryTarget.Directive }); }
    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "14.0.0", version: "18.2.1", type: HammerSliding, isStandalone: true, selector: "[hammerSliding]", inputs: { enabled: ["hammerSliding", "enabled"], galleryId: "galleryId", items: "items", adapter: "adapter", state: "state", config: "config" }, outputs: { activeIndexChange: "activeIndexChange", isSlidingChange: "isSlidingChange" }, usesOnChanges: true, ngImport: i0 }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.2.1", ngImport: i0, type: HammerSliding, decorators: [{
            type: Directive,
            args: [{
                    selector: '[hammerSliding]',
                    standalone: true
                }]
        }], ctorParameters: () => [{ type: Document, decorators: [{
                    type: Inject,
                    args: [DOCUMENT]
                }] }, { type: i0.ElementRef }, { type: i1.Directionality }, { type: i2.Platform }, { type: i0.NgZone }], propDecorators: { enabled: [{
                type: Input,
                args: ['hammerSliding']
            }], galleryId: [{
                type: Input
            }], items: [{
                type: Input
            }], adapter: [{
                type: Input
            }], state: [{
                type: Input
            }], config: [{
                type: Input
            }], activeIndexChange: [{
                type: Output
            }], isSlidingChange: [{
                type: Output
            }] } });
//# sourceMappingURL=data:application/json;base64,