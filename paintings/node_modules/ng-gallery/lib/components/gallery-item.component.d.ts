import { EventEmitter, ElementRef, AfterViewInit } from '@angular/core';
import { BehaviorSubject } from 'rxjs';
import { GalleryItemContext } from '../directives/gallery-item-def.directive';
import { GalleryConfig } from '../models/config.model';
import { GalleryItemType, GalleryItemTypes } from '../models/constants';
import { GalleryItemData, ImageItemData, ItemState, VideoItemData } from './templates/items.model';
import * as i0 from "@angular/core";
export declare class GalleryItemComponent implements AfterViewInit {
    private el;
    readonly Types: typeof GalleryItemTypes;
    /** A stream that indicates that the height was emitted after the image is loaded, used only for gallery image types */
    readonly state$: BehaviorSubject<ItemState>;
    /** A flag that indicates if the item is type of image, it can be a custom template by the user,
     * The img recognizer directive will set it to true*/
    isItemContainImage: boolean;
    /** Gallery config */
    config: GalleryConfig;
    /** Item's index in the gallery */
    index: number;
    /** The number of total items */
    count: number;
    /** Gallery current index */
    currIndex: number;
    /** Item's type 'image', 'video', 'youtube', 'Vimeo', 'iframe' */
    type: GalleryItemType;
    /** Item's data, this object contains the data required to display the content (e.g. src path) */
    data: GalleryItemData;
    /** Stream that emits when an error occurs */
    error: EventEmitter<ErrorEvent>;
    get isActive(): boolean;
    get isIndexAttr(): number;
    get itemState(): ItemState;
    get imageContext(): GalleryItemContext<ImageItemData>;
    get itemContext(): GalleryItemContext<GalleryItemData>;
    get nativeElement(): HTMLElement;
    get isAutoPlay(): boolean;
    get youtubeSrc(): string;
    get vimeoSrc(): string;
    get load(): boolean;
    get imageData(): ImageItemData;
    get videoData(): VideoItemData;
    constructor(el: ElementRef);
    ngAfterViewInit(): void;
    static ɵfac: i0.ɵɵFactoryDeclaration<GalleryItemComponent, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<GalleryItemComponent, "gallery-item", never, { "config": { "alias": "config"; "required": false; }; "index": { "alias": "index"; "required": false; }; "count": { "alias": "count"; "required": false; }; "currIndex": { "alias": "currIndex"; "required": false; }; "type": { "alias": "type"; "required": false; }; "data": { "alias": "data"; "required": false; }; }, { "error": "error"; }, never, never, true, never>;
}
