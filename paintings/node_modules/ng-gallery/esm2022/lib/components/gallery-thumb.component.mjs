import { Component, Input, Output, HostBinding, EventEmitter, ChangeDetectionStrategy } from '@angular/core';
import { CommonModule } from '@angular/common';
import { GalleryImageComponent } from './templates/gallery-image.component';
import * as i0 from "@angular/core";
import * as i1 from "@angular/common";
export class GalleryThumbComponent {
    get isActive() {
        return this.index === this.currIndex;
    }
    get isIndexAttr() {
        return this.index;
    }
    get imageContext() {
        return {
            $implicit: this.data,
            index: this.index,
            type: this.type,
            active: this.isActive,
            count: this.count,
            first: this.index === 0,
            last: this.index === this.count - 1
        };
    }
    get nativeElement() {
        return this.el.nativeElement;
    }
    constructor(el) {
        this.el = el;
        this.error = new EventEmitter();
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.2.1", ngImport: i0, type: GalleryThumbComponent, deps: [{ token: i0.ElementRef }], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "18.2.1", type: GalleryThumbComponent, isStandalone: true, selector: "gallery-thumb", inputs: { config: "config", index: "index", count: "count", currIndex: "currIndex", type: "type", data: "data" }, outputs: { error: "error" }, host: { properties: { "class.g-active-thumb": "this.isActive", "attr.galleryIndex": "this.isIndexAttr" } }, ngImport: i0, template: `
    <gallery-image [src]="data.thumb"
                   [alt]="data.alt + '-thumbnail'"
                   [isThumbnail]="true"
                   [loadingIcon]="config.thumbLoadingIcon"
                   [loadingError]="config.thumbLoadingError"
                   (error)="error.emit($event)"></gallery-image>

    <div *ngIf="config.thumbTemplate" class="g-template g-thumb-template">
      <ng-container *ngTemplateOutlet="config.thumbTemplate; context: imageContext"></ng-container>
    </div>
  `, isInline: true, styles: [":host{cursor:var(--g-thumb-cursor);height:var(--g-thumb-height);width:var(--g-thumb-width);max-height:var(--g-thumb-height);max-width:var(--g-thumb-width);align-self:center;background:#000;position:relative;display:flex;overflow:hidden;flex-direction:column;flex:0 0 auto;scroll-snap-align:center;-webkit-user-select:none;user-select:none;-webkit-user-drag:none;-webkit-tap-highlight-color:rgba(0,0,0,0);--g-thumb-opacity: .5}:host.g-active-thumb{--g-thumb-opacity: 1}.g-template{position:absolute;z-index:10;inset:0;color:#fff;display:flex;align-items:center;justify-content:center;flex-direction:column}\n"], dependencies: [{ kind: "ngmodule", type: CommonModule }, { kind: "directive", type: i1.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { kind: "directive", type: i1.NgTemplateOutlet, selector: "[ngTemplateOutlet]", inputs: ["ngTemplateOutletContext", "ngTemplateOutlet", "ngTemplateOutletInjector"] }, { kind: "component", type: GalleryImageComponent, selector: "gallery-image", inputs: ["isThumbnail", "index", "loadingAttr", "alt", "src", "loadingIcon", "loadingError", "errorIcon"], outputs: ["error"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.2.1", ngImport: i0, type: GalleryThumbComponent, decorators: [{
            type: Component,
            args: [{ selector: 'gallery-thumb', changeDetection: ChangeDetectionStrategy.OnPush, template: `
    <gallery-image [src]="data.thumb"
                   [alt]="data.alt + '-thumbnail'"
                   [isThumbnail]="true"
                   [loadingIcon]="config.thumbLoadingIcon"
                   [loadingError]="config.thumbLoadingError"
                   (error)="error.emit($event)"></gallery-image>

    <div *ngIf="config.thumbTemplate" class="g-template g-thumb-template">
      <ng-container *ngTemplateOutlet="config.thumbTemplate; context: imageContext"></ng-container>
    </div>
  `, standalone: true, imports: [CommonModule, GalleryImageComponent], styles: [":host{cursor:var(--g-thumb-cursor);height:var(--g-thumb-height);width:var(--g-thumb-width);max-height:var(--g-thumb-height);max-width:var(--g-thumb-width);align-self:center;background:#000;position:relative;display:flex;overflow:hidden;flex-direction:column;flex:0 0 auto;scroll-snap-align:center;-webkit-user-select:none;user-select:none;-webkit-user-drag:none;-webkit-tap-highlight-color:rgba(0,0,0,0);--g-thumb-opacity: .5}:host.g-active-thumb{--g-thumb-opacity: 1}.g-template{position:absolute;z-index:10;inset:0;color:#fff;display:flex;align-items:center;justify-content:center;flex-direction:column}\n"] }]
        }], ctorParameters: () => [{ type: i0.ElementRef }], propDecorators: { config: [{
                type: Input
            }], index: [{
                type: Input
            }], count: [{
                type: Input
            }], currIndex: [{
                type: Input
            }], type: [{
                type: Input
            }], data: [{
                type: Input
            }], error: [{
                type: Output
            }], isActive: [{
                type: HostBinding,
                args: ['class.g-active-thumb']
            }], isIndexAttr: [{
                type: HostBinding,
                args: ['attr.galleryIndex']
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ2FsbGVyeS10aHVtYi5jb21wb25lbnQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9wcm9qZWN0cy9uZy1nYWxsZXJ5L3NyYy9saWIvY29tcG9uZW50cy9nYWxsZXJ5LXRodW1iLmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQ0wsU0FBUyxFQUNULEtBQUssRUFDTCxNQUFNLEVBQ04sV0FBVyxFQUNYLFlBQVksRUFFWix1QkFBdUIsRUFDeEIsTUFBTSxlQUFlLENBQUM7QUFDdkIsT0FBTyxFQUFFLFlBQVksRUFBRSxNQUFNLGlCQUFpQixDQUFDO0FBRS9DLE9BQU8sRUFBRSxxQkFBcUIsRUFBRSxNQUFNLHFDQUFxQyxDQUFDOzs7QUF3QjVFLE1BQU0sT0FBTyxxQkFBcUI7SUFxQmhDLElBQXlDLFFBQVE7UUFDL0MsT0FBTyxJQUFJLENBQUMsS0FBSyxLQUFLLElBQUksQ0FBQyxTQUFTLENBQUM7SUFDdkMsQ0FBQztJQUVELElBQXNDLFdBQVc7UUFDL0MsT0FBTyxJQUFJLENBQUMsS0FBSyxDQUFDO0lBQ3BCLENBQUM7SUFFRCxJQUFJLFlBQVk7UUFDZCxPQUFPO1lBQ0wsU0FBUyxFQUFFLElBQUksQ0FBQyxJQUFJO1lBQ3BCLEtBQUssRUFBRSxJQUFJLENBQUMsS0FBSztZQUNqQixJQUFJLEVBQUUsSUFBSSxDQUFDLElBQUk7WUFDZixNQUFNLEVBQUUsSUFBSSxDQUFDLFFBQVE7WUFDckIsS0FBSyxFQUFFLElBQUksQ0FBQyxLQUFLO1lBQ2pCLEtBQUssRUFBRSxJQUFJLENBQUMsS0FBSyxLQUFLLENBQUM7WUFDdkIsSUFBSSxFQUFFLElBQUksQ0FBQyxLQUFLLEtBQUssSUFBSSxDQUFDLEtBQUssR0FBRyxDQUFDO1NBQ3BDLENBQUE7SUFDSCxDQUFDO0lBRUQsSUFBSSxhQUFhO1FBQ2YsT0FBTyxJQUFJLENBQUMsRUFBRSxDQUFDLGFBQWEsQ0FBQztJQUMvQixDQUFDO0lBRUQsWUFBb0IsRUFBMkI7UUFBM0IsT0FBRSxHQUFGLEVBQUUsQ0FBeUI7UUExQnJDLFVBQUssR0FBNkIsSUFBSSxZQUFZLEVBQWMsQ0FBQztJQTJCM0UsQ0FBQzs4R0E5Q1UscUJBQXFCO2tHQUFyQixxQkFBcUIsb1VBZnRCOzs7Ozs7Ozs7OztHQVdULHdxQkFFUyxZQUFZLDBTQUFFLHFCQUFxQjs7MkZBRWxDLHFCQUFxQjtrQkFuQmpDLFNBQVM7K0JBQ0UsZUFBZSxtQkFDUix1QkFBdUIsQ0FBQyxNQUFNLFlBRXJDOzs7Ozs7Ozs7OztHQVdULGNBQ1csSUFBSSxXQUNQLENBQUMsWUFBWSxFQUFFLHFCQUFxQixDQUFDOytFQUlyQyxNQUFNO3NCQUFkLEtBQUs7Z0JBR0csS0FBSztzQkFBYixLQUFLO2dCQUdHLEtBQUs7c0JBQWIsS0FBSztnQkFHRyxTQUFTO3NCQUFqQixLQUFLO2dCQUdHLElBQUk7c0JBQVosS0FBSztnQkFHRyxJQUFJO3NCQUFaLEtBQUs7Z0JBRUksS0FBSztzQkFBZCxNQUFNO2dCQUVrQyxRQUFRO3NCQUFoRCxXQUFXO3VCQUFDLHNCQUFzQjtnQkFJRyxXQUFXO3NCQUFoRCxXQUFXO3VCQUFDLG1CQUFtQiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7XHJcbiAgQ29tcG9uZW50LFxyXG4gIElucHV0LFxyXG4gIE91dHB1dCxcclxuICBIb3N0QmluZGluZyxcclxuICBFdmVudEVtaXR0ZXIsXHJcbiAgRWxlbWVudFJlZixcclxuICBDaGFuZ2VEZXRlY3Rpb25TdHJhdGVneVxyXG59IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQgeyBDb21tb25Nb2R1bGUgfSBmcm9tICdAYW5ndWxhci9jb21tb24nO1xyXG5pbXBvcnQgeyBHYWxsZXJ5SXRlbUNvbnRleHQgfSBmcm9tICcuLi9kaXJlY3RpdmVzL2dhbGxlcnktaXRlbS1kZWYuZGlyZWN0aXZlJztcclxuaW1wb3J0IHsgR2FsbGVyeUltYWdlQ29tcG9uZW50IH0gZnJvbSAnLi90ZW1wbGF0ZXMvZ2FsbGVyeS1pbWFnZS5jb21wb25lbnQnO1xyXG5pbXBvcnQgeyBJbWFnZUl0ZW1EYXRhIH0gZnJvbSAnLi90ZW1wbGF0ZXMvaXRlbXMubW9kZWwnO1xyXG5pbXBvcnQgeyBHYWxsZXJ5Q29uZmlnIH0gZnJvbSAnLi4vbW9kZWxzL2NvbmZpZy5tb2RlbCc7XHJcbmltcG9ydCB7IEdhbGxlcnlJdGVtVHlwZSB9IGZyb20gJy4uL21vZGVscy9jb25zdGFudHMnO1xyXG5cclxuQENvbXBvbmVudCh7XHJcbiAgc2VsZWN0b3I6ICdnYWxsZXJ5LXRodW1iJyxcclxuICBjaGFuZ2VEZXRlY3Rpb246IENoYW5nZURldGVjdGlvblN0cmF0ZWd5Lk9uUHVzaCxcclxuICBzdHlsZVVybHM6IFsnLi9nYWxsZXJ5LXRodW1iLnNjc3MnXSxcclxuICB0ZW1wbGF0ZTogYFxyXG4gICAgPGdhbGxlcnktaW1hZ2UgW3NyY109XCJkYXRhLnRodW1iXCJcclxuICAgICAgICAgICAgICAgICAgIFthbHRdPVwiZGF0YS5hbHQgKyAnLXRodW1ibmFpbCdcIlxyXG4gICAgICAgICAgICAgICAgICAgW2lzVGh1bWJuYWlsXT1cInRydWVcIlxyXG4gICAgICAgICAgICAgICAgICAgW2xvYWRpbmdJY29uXT1cImNvbmZpZy50aHVtYkxvYWRpbmdJY29uXCJcclxuICAgICAgICAgICAgICAgICAgIFtsb2FkaW5nRXJyb3JdPVwiY29uZmlnLnRodW1iTG9hZGluZ0Vycm9yXCJcclxuICAgICAgICAgICAgICAgICAgIChlcnJvcik9XCJlcnJvci5lbWl0KCRldmVudClcIj48L2dhbGxlcnktaW1hZ2U+XHJcblxyXG4gICAgPGRpdiAqbmdJZj1cImNvbmZpZy50aHVtYlRlbXBsYXRlXCIgY2xhc3M9XCJnLXRlbXBsYXRlIGctdGh1bWItdGVtcGxhdGVcIj5cclxuICAgICAgPG5nLWNvbnRhaW5lciAqbmdUZW1wbGF0ZU91dGxldD1cImNvbmZpZy50aHVtYlRlbXBsYXRlOyBjb250ZXh0OiBpbWFnZUNvbnRleHRcIj48L25nLWNvbnRhaW5lcj5cclxuICAgIDwvZGl2PlxyXG4gIGAsXHJcbiAgc3RhbmRhbG9uZTogdHJ1ZSxcclxuICBpbXBvcnRzOiBbQ29tbW9uTW9kdWxlLCBHYWxsZXJ5SW1hZ2VDb21wb25lbnRdXHJcbn0pXHJcbmV4cG9ydCBjbGFzcyBHYWxsZXJ5VGh1bWJDb21wb25lbnQge1xyXG5cclxuICBASW5wdXQoKSBjb25maWc6IEdhbGxlcnlDb25maWc7XHJcblxyXG4gIC8qKiBJdGVtJ3MgaW5kZXggaW4gdGhlIGdhbGxlcnkgKi9cclxuICBASW5wdXQoKSBpbmRleDogbnVtYmVyO1xyXG5cclxuICAvKiogVGhlIG51bWJlciBvZiB0b3RhbCBpdGVtcyAqL1xyXG4gIEBJbnB1dCgpIGNvdW50OiBudW1iZXI7XHJcblxyXG4gIC8qKiBHYWxsZXJ5IGN1cnJlbnQgaW5kZXggKi9cclxuICBASW5wdXQoKSBjdXJySW5kZXg6IG51bWJlcjtcclxuXHJcbiAgLyoqIEl0ZW0ncyB0eXBlICdpbWFnZScsICd2aWRlbycsICd5b3V0dWJlJywgJ1ZpbWVvJywgJ2lmcmFtZScgKi9cclxuICBASW5wdXQoKSB0eXBlOiBHYWxsZXJ5SXRlbVR5cGU7XHJcblxyXG4gIC8qKiBJdGVtJ3MgZGF0YSwgdGhpcyBvYmplY3QgY29udGFpbnMgdGhlIGRhdGEgcmVxdWlyZWQgdG8gZGlzcGxheSB0aGUgY29udGVudCAoZS5nLiBzcmMgcGF0aCkgKi9cclxuICBASW5wdXQoKSBkYXRhOiBJbWFnZUl0ZW1EYXRhO1xyXG5cclxuICBAT3V0cHV0KCkgZXJyb3I6IEV2ZW50RW1pdHRlcjxFcnJvckV2ZW50PiA9IG5ldyBFdmVudEVtaXR0ZXI8RXJyb3JFdmVudD4oKTtcclxuXHJcbiAgQEhvc3RCaW5kaW5nKCdjbGFzcy5nLWFjdGl2ZS10aHVtYicpIGdldCBpc0FjdGl2ZSgpIHtcclxuICAgIHJldHVybiB0aGlzLmluZGV4ID09PSB0aGlzLmN1cnJJbmRleDtcclxuICB9XHJcblxyXG4gIEBIb3N0QmluZGluZygnYXR0ci5nYWxsZXJ5SW5kZXgnKSBnZXQgaXNJbmRleEF0dHIoKTogbnVtYmVyIHtcclxuICAgIHJldHVybiB0aGlzLmluZGV4O1xyXG4gIH1cclxuXHJcbiAgZ2V0IGltYWdlQ29udGV4dCgpOiBHYWxsZXJ5SXRlbUNvbnRleHQ8SW1hZ2VJdGVtRGF0YT4ge1xyXG4gICAgcmV0dXJuIHtcclxuICAgICAgJGltcGxpY2l0OiB0aGlzLmRhdGEsXHJcbiAgICAgIGluZGV4OiB0aGlzLmluZGV4LFxyXG4gICAgICB0eXBlOiB0aGlzLnR5cGUsXHJcbiAgICAgIGFjdGl2ZTogdGhpcy5pc0FjdGl2ZSxcclxuICAgICAgY291bnQ6IHRoaXMuY291bnQsXHJcbiAgICAgIGZpcnN0OiB0aGlzLmluZGV4ID09PSAwLFxyXG4gICAgICBsYXN0OiB0aGlzLmluZGV4ID09PSB0aGlzLmNvdW50IC0gMVxyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgZ2V0IG5hdGl2ZUVsZW1lbnQoKTogSFRNTEVsZW1lbnQge1xyXG4gICAgcmV0dXJuIHRoaXMuZWwubmF0aXZlRWxlbWVudDtcclxuICB9XHJcblxyXG4gIGNvbnN0cnVjdG9yKHByaXZhdGUgZWw6IEVsZW1lbnRSZWY8SFRNTEVsZW1lbnQ+KSB7XHJcbiAgfVxyXG59XHJcbiJdfQ==