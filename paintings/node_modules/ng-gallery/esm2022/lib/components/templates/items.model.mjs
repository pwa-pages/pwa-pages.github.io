import { GalleryItemTypes } from '../../models/constants';
export class ImageItem {
    constructor(data) {
        this.data = data;
        this.type = GalleryItemTypes.Image;
    }
}
export class VideoItem {
    constructor(data) {
        this.data = data;
        this.type = GalleryItemTypes.Video;
    }
}
export class IframeItem {
    constructor(data) {
        this.data = data;
        this.type = GalleryItemTypes.Iframe;
    }
}
export class YoutubeItem {
    constructor(data) {
        this.data = {
            ...data,
            ...{
                src: `https://youtube.com/embed/${data.src}`,
                thumb: data.thumb ? data.thumb : `//img.youtube.com/vi/${data.src}/default.jpg`
            }
        };
        this.type = GalleryItemTypes.Youtube;
    }
}
export class VimeoItem {
    constructor(data) {
        this.data = {
            ...data,
            ...{
                src: `https://player.vimeo.com/video/${data.src}`,
                thumb: data.thumb ? data.thumb : this.getVimeoThumb(data.src)
            }
        };
        this.type = GalleryItemTypes.Vimeo;
    }
    getVimeoThumb(videoId) {
        //Vimeo has no API for getting a thumbnail, but this project can do it: https://github.com/ThatGuySam/vumbnail
        return `//vumbnail.com/${videoId}.jpg`;
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaXRlbXMubW9kZWwuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi9wcm9qZWN0cy9uZy1nYWxsZXJ5L3NyYy9saWIvY29tcG9uZW50cy90ZW1wbGF0ZXMvaXRlbXMubW9kZWwudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQ0EsT0FBTyxFQUFtQixnQkFBZ0IsRUFBRSxNQUFNLHdCQUF3QixDQUFDO0FBRTNFLE1BQU0sT0FBTyxTQUFTO0lBSXBCLFlBQVksSUFBbUI7UUFDN0IsSUFBSSxDQUFDLElBQUksR0FBRyxJQUFJLENBQUM7UUFDakIsSUFBSSxDQUFDLElBQUksR0FBRyxnQkFBZ0IsQ0FBQyxLQUFLLENBQUM7SUFDckMsQ0FBQztDQUNGO0FBRUQsTUFBTSxPQUFPLFNBQVM7SUFJcEIsWUFBWSxJQUFtQjtRQUM3QixJQUFJLENBQUMsSUFBSSxHQUFHLElBQUksQ0FBQztRQUNqQixJQUFJLENBQUMsSUFBSSxHQUFHLGdCQUFnQixDQUFDLEtBQUssQ0FBQztJQUNyQyxDQUFDO0NBQ0Y7QUFFRCxNQUFNLE9BQU8sVUFBVTtJQUlyQixZQUFZLElBQW9CO1FBQzlCLElBQUksQ0FBQyxJQUFJLEdBQUcsSUFBSSxDQUFDO1FBQ2pCLElBQUksQ0FBQyxJQUFJLEdBQUcsZ0JBQWdCLENBQUMsTUFBTSxDQUFDO0lBQ3RDLENBQUM7Q0FDRjtBQUVELE1BQU0sT0FBTyxXQUFXO0lBSXRCLFlBQVksSUFBcUI7UUFDL0IsSUFBSSxDQUFDLElBQUksR0FBRztZQUNWLEdBQUcsSUFBSTtZQUNQLEdBQUc7Z0JBQ0QsR0FBRyxFQUFFLDZCQUE4QixJQUFJLENBQUMsR0FBSSxFQUFFO2dCQUM5QyxLQUFLLEVBQUUsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsd0JBQXlCLElBQUksQ0FBQyxHQUFJLGNBQWM7YUFDbEY7U0FDRixDQUFDO1FBQ0YsSUFBSSxDQUFDLElBQUksR0FBRyxnQkFBZ0IsQ0FBQyxPQUFPLENBQUM7SUFDdkMsQ0FBQztDQUNGO0FBRUQsTUFBTSxPQUFPLFNBQVM7SUFJcEIsWUFBWSxJQUFtQjtRQUM3QixJQUFJLENBQUMsSUFBSSxHQUFHO1lBQ1YsR0FBRyxJQUFJO1lBQ1AsR0FBRztnQkFDRCxHQUFHLEVBQUUsa0NBQW1DLElBQUksQ0FBQyxHQUFJLEVBQUU7Z0JBQ25ELEtBQUssRUFBRSxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsYUFBYSxDQUFDLElBQUksQ0FBQyxHQUFhLENBQUM7YUFDeEU7U0FDRixDQUFDO1FBR0YsSUFBSSxDQUFDLElBQUksR0FBRyxnQkFBZ0IsQ0FBQyxLQUFLLENBQUM7SUFDckMsQ0FBQztJQUVPLGFBQWEsQ0FBQyxPQUFlO1FBQ25DLDhHQUE4RztRQUM5RyxPQUFPLGtCQUFtQixPQUFRLE1BQU0sQ0FBQTtJQUMxQyxDQUFDO0NBQ0YiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBHYWxsZXJ5SXRlbSB9IGZyb20gJy4uLy4uL21vZGVscy9nYWxsZXJ5Lm1vZGVsJztcclxuaW1wb3J0IHsgR2FsbGVyeUl0ZW1UeXBlLCBHYWxsZXJ5SXRlbVR5cGVzIH0gZnJvbSAnLi4vLi4vbW9kZWxzL2NvbnN0YW50cyc7XHJcblxyXG5leHBvcnQgY2xhc3MgSW1hZ2VJdGVtIGltcGxlbWVudHMgR2FsbGVyeUl0ZW0ge1xyXG4gIHJlYWRvbmx5IHR5cGU6IEdhbGxlcnlJdGVtVHlwZTtcclxuICByZWFkb25seSBkYXRhOiBJbWFnZUl0ZW1EYXRhO1xyXG5cclxuICBjb25zdHJ1Y3RvcihkYXRhOiBJbWFnZUl0ZW1EYXRhKSB7XHJcbiAgICB0aGlzLmRhdGEgPSBkYXRhO1xyXG4gICAgdGhpcy50eXBlID0gR2FsbGVyeUl0ZW1UeXBlcy5JbWFnZTtcclxuICB9XHJcbn1cclxuXHJcbmV4cG9ydCBjbGFzcyBWaWRlb0l0ZW0gaW1wbGVtZW50cyBHYWxsZXJ5SXRlbSB7XHJcbiAgcmVhZG9ubHkgdHlwZTogR2FsbGVyeUl0ZW1UeXBlO1xyXG4gIHJlYWRvbmx5IGRhdGE6IFZpZGVvSXRlbURhdGE7XHJcblxyXG4gIGNvbnN0cnVjdG9yKGRhdGE6IFZpZGVvSXRlbURhdGEpIHtcclxuICAgIHRoaXMuZGF0YSA9IGRhdGE7XHJcbiAgICB0aGlzLnR5cGUgPSBHYWxsZXJ5SXRlbVR5cGVzLlZpZGVvO1xyXG4gIH1cclxufVxyXG5cclxuZXhwb3J0IGNsYXNzIElmcmFtZUl0ZW0gaW1wbGVtZW50cyBHYWxsZXJ5SXRlbSB7XHJcbiAgcmVhZG9ubHkgdHlwZTogR2FsbGVyeUl0ZW1UeXBlO1xyXG4gIHJlYWRvbmx5IGRhdGE6IElmcmFtZUl0ZW1EYXRhO1xyXG5cclxuICBjb25zdHJ1Y3RvcihkYXRhOiBJZnJhbWVJdGVtRGF0YSkge1xyXG4gICAgdGhpcy5kYXRhID0gZGF0YTtcclxuICAgIHRoaXMudHlwZSA9IEdhbGxlcnlJdGVtVHlwZXMuSWZyYW1lO1xyXG4gIH1cclxufVxyXG5cclxuZXhwb3J0IGNsYXNzIFlvdXR1YmVJdGVtIGltcGxlbWVudHMgR2FsbGVyeUl0ZW0ge1xyXG4gIHJlYWRvbmx5IHR5cGU6IEdhbGxlcnlJdGVtVHlwZTtcclxuICByZWFkb25seSBkYXRhOiBZb3V0dWJlSXRlbURhdGE7XHJcblxyXG4gIGNvbnN0cnVjdG9yKGRhdGE6IFlvdXR1YmVJdGVtRGF0YSkge1xyXG4gICAgdGhpcy5kYXRhID0ge1xyXG4gICAgICAuLi5kYXRhLFxyXG4gICAgICAuLi57XHJcbiAgICAgICAgc3JjOiBgaHR0cHM6Ly95b3V0dWJlLmNvbS9lbWJlZC8keyBkYXRhLnNyYyB9YCxcclxuICAgICAgICB0aHVtYjogZGF0YS50aHVtYiA/IGRhdGEudGh1bWIgOiBgLy9pbWcueW91dHViZS5jb20vdmkvJHsgZGF0YS5zcmMgfS9kZWZhdWx0LmpwZ2BcclxuICAgICAgfVxyXG4gICAgfTtcclxuICAgIHRoaXMudHlwZSA9IEdhbGxlcnlJdGVtVHlwZXMuWW91dHViZTtcclxuICB9XHJcbn1cclxuXHJcbmV4cG9ydCBjbGFzcyBWaW1lb0l0ZW0gaW1wbGVtZW50cyBHYWxsZXJ5SXRlbSB7XHJcbiAgcmVhZG9ubHkgdHlwZTogR2FsbGVyeUl0ZW1UeXBlO1xyXG4gIHJlYWRvbmx5IGRhdGE6IFZpbWVvSXRlbURhdGE7XHJcblxyXG4gIGNvbnN0cnVjdG9yKGRhdGE6IFZpbWVvSXRlbURhdGEpIHtcclxuICAgIHRoaXMuZGF0YSA9IHtcclxuICAgICAgLi4uZGF0YSxcclxuICAgICAgLi4ue1xyXG4gICAgICAgIHNyYzogYGh0dHBzOi8vcGxheWVyLnZpbWVvLmNvbS92aWRlby8keyBkYXRhLnNyYyB9YCxcclxuICAgICAgICB0aHVtYjogZGF0YS50aHVtYiA/IGRhdGEudGh1bWIgOiB0aGlzLmdldFZpbWVvVGh1bWIoZGF0YS5zcmMgYXMgc3RyaW5nKVxyXG4gICAgICB9XHJcbiAgICB9O1xyXG5cclxuXHJcbiAgICB0aGlzLnR5cGUgPSBHYWxsZXJ5SXRlbVR5cGVzLlZpbWVvO1xyXG4gIH1cclxuXHJcbiAgcHJpdmF0ZSBnZXRWaW1lb1RodW1iKHZpZGVvSWQ6IHN0cmluZyk6IHN0cmluZyB7XHJcbiAgICAvL1ZpbWVvIGhhcyBubyBBUEkgZm9yIGdldHRpbmcgYSB0aHVtYm5haWwsIGJ1dCB0aGlzIHByb2plY3QgY2FuIGRvIGl0OiBodHRwczovL2dpdGh1Yi5jb20vVGhhdEd1eVNhbS92dW1ibmFpbFxyXG4gICAgcmV0dXJuIGAvL3Z1bWJuYWlsLmNvbS8keyB2aWRlb0lkIH0uanBnYFxyXG4gIH1cclxufVxyXG5cclxudHlwZSBHYWxsZXJ5SXRlbU1vZGVsID0ge1xyXG4gIHR5cGU/OiBHYWxsZXJ5SXRlbVR5cGU7XHJcbiAgc3JjPzogc3RyaW5nIHwgeyB1cmw6IHN0cmluZywgdHlwZTogc3RyaW5nIH1bXTtcclxuICB0aHVtYj86IHN0cmluZztcclxuICBhcmdzPzogYW55O1xyXG59O1xyXG5cclxuZXhwb3J0IHR5cGUgSW1hZ2VJdGVtRGF0YSA9IEdhbGxlcnlJdGVtTW9kZWwgJiB7XHJcbiAgYWx0Pzogc3RyaW5nO1xyXG59O1xyXG5cclxuZXhwb3J0IHR5cGUgSWZyYW1lSXRlbURhdGEgPSBHYWxsZXJ5SXRlbU1vZGVsICYge1xyXG4gIHBhcmFtcz86IGFueTtcclxufTtcclxuXHJcbmV4cG9ydCB0eXBlIFlvdXR1YmVJdGVtRGF0YSA9IElmcmFtZUl0ZW1EYXRhICYge1xyXG4gIGF1dG9wbGF5PzogYm9vbGVhbjtcclxufTtcclxuXHJcbmV4cG9ydCB0eXBlIFZpbWVvSXRlbURhdGEgPSBJZnJhbWVJdGVtRGF0YSAmIHtcclxuICBhdXRvcGxheT86IGJvb2xlYW47XHJcbn07XHJcblxyXG5leHBvcnQgdHlwZSBWaWRlb0l0ZW1EYXRhID0gR2FsbGVyeUl0ZW1Nb2RlbCAmIHtcclxuICBwb3N0ZXI/OiBzdHJpbmc7XHJcbiAgbG9vcD86IGJvb2xlYW47XHJcbiAgLy8gVGhlIG9ubHkgb3B0aW9uIGZvciBib29sZWFuIHZpZGVvIGF0dHJpYnV0ZXMgaXMgJ3RydWUnLCBiZWNhdXNlIGZhbHNlIHdpbGwgc3RpbGwgYmUgZXZhbHVhdGVkIHRvIHRydWUgaW4gYXR0cmlidXRlcyBiaW5kaW5nXHJcbiAgbXV0ZT86IHRydWU7XHJcbiAgZGlzYWJsZVBpY3R1cmVJblBpY3R1cmU/OiB0cnVlO1xyXG4gIGNvbnRyb2xzPzogYm9vbGVhbjtcclxuICBhdXRvcGxheT86IGJvb2xlYW47XHJcbiAgcHJlbG9hZD86ICdub25lJyB8ICdtZXRhZGF0YScgfCAnYXV0bycgfCAnJztcclxuICBjb250cm9sc0xpc3Q/OiAnbm9kb3dubG9hZCcgfCAnbm9mdWxsc2NyZWVuJyB8ICdub3JlbW90ZXBsYXliYWNrJztcclxuICBkaXNhYmxlUmVtb3RlUGxheWJhY2s/OiBib29sZWFuO1xyXG59O1xyXG5cclxuZXhwb3J0IHR5cGUgR2FsbGVyeUl0ZW1EYXRhID0gSW1hZ2VJdGVtRGF0YSB8IFZpZGVvSXRlbURhdGEgfCBJZnJhbWVJdGVtRGF0YSB8IFlvdXR1YmVJdGVtRGF0YSB8IFZpbWVvSXRlbURhdGE7XHJcblxyXG5leHBvcnQgdHlwZSBJdGVtU3RhdGUgPSAnc3VjY2VzcycgfCAnbG9hZGluZycgfCAnZmFpbGVkJztcclxuIl19