import { Component, HostBinding, Input, Output, EventEmitter, ChangeDetectionStrategy } from '@angular/core';
import { CommonModule } from '@angular/common';
import { BehaviorSubject } from 'rxjs';
import { GalleryIframeComponent } from './templates/gallery-iframe.component';
import { GalleryVideoComponent } from './templates/gallery-video.component';
import { GalleryImageComponent } from './templates/gallery-image.component';
import { GalleryItemTypes, LoadingStrategy } from '../models/constants';
import * as i0 from "@angular/core";
import * as i1 from "@angular/common";
export class GalleryItemComponent {
    get isActive() {
        return this.index === this.currIndex;
    }
    get isIndexAttr() {
        return this.index;
    }
    get itemState() {
        return this.state$.value;
    }
    get imageContext() {
        return {
            $implicit: this.imageData,
            index: this.index,
            type: this.type,
            active: this.isActive,
            count: this.count,
            first: this.index === 0,
            last: this.index === this.count - 1
        };
    }
    get itemContext() {
        return {
            $implicit: this.data,
            index: this.index,
            type: this.type,
            active: this.isActive,
            count: this.count,
            first: this.index === 0,
            last: this.index === this.count - 1
        };
    }
    get nativeElement() {
        return this.el.nativeElement;
    }
    get isAutoPlay() {
        if (this.isActive) {
            if (this.type === GalleryItemTypes.Video || this.type === GalleryItemTypes.Youtube || this.type === GalleryItemTypes.Vimeo) {
                return this.videoData.autoplay;
            }
        }
    }
    get youtubeSrc() {
        let autoplay = 0;
        if (this.isActive && this.type === GalleryItemTypes.Youtube && this.data.autoplay) {
            autoplay = 1;
        }
        const url = new URL(this.data.src);
        url.search = new URLSearchParams({
            wmode: 'transparent',
            ...this.data.params,
            autoplay
        }).toString();
        return url.href;
    }
    get vimeoSrc() {
        let autoplay = 0;
        if (this.isActive && this.type === GalleryItemTypes.Vimeo) {
            if (this.data.autoplay) {
                autoplay = 1;
            }
        }
        const url = new URL(this.data.src);
        url.search = new URLSearchParams({
            ...this.data.params,
            autoplay,
        }).toString();
        return url.href;
    }
    get load() {
        switch (this.config.loadingStrategy) {
            case LoadingStrategy.Preload:
                return true;
            case LoadingStrategy.Lazy:
                return this.currIndex === this.index;
            default:
                return this.currIndex === this.index || this.currIndex === this.index - 1 || this.currIndex === this.index + 1;
        }
    }
    get imageData() {
        return this.data;
    }
    get videoData() {
        return this.data;
    }
    constructor(el) {
        this.el = el;
        this.Types = GalleryItemTypes;
        /** A stream that indicates that the height was emitted after the image is loaded, used only for gallery image types */
        this.state$ = new BehaviorSubject('loading');
        /** Stream that emits when an error occurs */
        this.error = new EventEmitter();
    }
    ngAfterViewInit() {
        // If item does not contain an image, then set the state to DONE
        if (!this.isItemContainImage) {
            this.state$.next('success');
        }
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.2.1", ngImport: i0, type: GalleryItemComponent, deps: [{ token: i0.ElementRef }], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "18.2.1", type: GalleryItemComponent, isStandalone: true, selector: "gallery-item", inputs: { config: "config", index: "index", count: "count", currIndex: "currIndex", type: "type", data: "data" }, outputs: { error: "error" }, host: { properties: { "class.g-active-item": "this.isActive", "attr.galleryIndex": "this.isIndexAttr", "attr.itemState": "this.itemState" } }, ngImport: i0, template: `
    <ng-container *ngIf="load" [ngSwitch]="type">
      <ng-container *ngSwitchCase="Types.Image">
        <gallery-image [src]="imageData.src"
                       [alt]="imageData.alt"
                       [index]="index"
                       [loadingAttr]="config.loadingAttr"
                       [loadingIcon]="config.loadingIcon"
                       [loadingError]="config.loadingError"
                       (error)="error.emit($event)"></gallery-image>

        <div *ngIf="config.imageTemplate" class="g-template g-item-template">
          <ng-container *ngTemplateOutlet="config.imageTemplate; context: imageContext"></ng-container>
        </div>
      </ng-container>

      <gallery-video *ngSwitchCase="Types.Video"
                     [src]="videoData.src"
                     [mute]="videoData.mute"
                     [poster]="videoData.poster"
                     [controls]="videoData.controls"
                     [controlsList]="videoData.controlsList"
                     [disablePictureInPicture]="videoData.disablePictureInPicture"
                     [play]="isAutoPlay"
                     [pause]="currIndex !== index"
                     (error)="error.emit($event)"></gallery-video>

      <gallery-iframe *ngSwitchCase="Types.Youtube"
                      [src]="youtubeSrc"
                      [autoplay]="isAutoPlay"
                      [loadingAttr]="config.loadingAttr"
                      [pause]="currIndex !== index"></gallery-iframe>

      <gallery-iframe *ngSwitchCase="Types.Vimeo"
                      [src]="vimeoSrc"
                      [autoplay]="isAutoPlay"
                      [loadingAttr]="config.loadingAttr"
                      [pause]="currIndex !== index"></gallery-iframe>

      <gallery-iframe *ngSwitchCase="Types.Iframe"
                      [src]="data.src"
                      [loadingAttr]="config.loadingAttr"></gallery-iframe>

      <ng-container *ngSwitchDefault>
        <div *ngIf="config.itemTemplate" class="g-template g-item-template">
          <ng-container *ngTemplateOutlet="config.itemTemplate; context: itemContext"></ng-container>
        </div>
      </ng-container>
    </ng-container>
  `, isInline: true, styles: [":host{cursor:var(--g-item-cursor);height:var(--g-item-height);width:var(--g-item-width);max-height:var(--g-item-max-height);max-width:var(--slider-width);z-index:10;position:relative;overflow:hidden;display:flex;flex-direction:column;flex:0 0 auto;scroll-snap-align:center;-webkit-user-select:none;user-select:none;-webkit-user-drag:none;-webkit-tap-highlight-color:rgba(0,0,0,0)}:host[itemState=loading]{width:var(--slider-width);height:var(--slider-height)}:host>*{height:100%}:host ::ng-deep video,:host ::ng-deep iframe{width:100%;height:100%}gallery-image{width:var(--g-item-width);height:var(--g-item-height)}.g-template{position:absolute;z-index:10;inset:0;color:#fff;display:flex;align-items:center;justify-content:center;flex-direction:column}\n"], dependencies: [{ kind: "ngmodule", type: CommonModule }, { kind: "directive", type: i1.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { kind: "directive", type: i1.NgTemplateOutlet, selector: "[ngTemplateOutlet]", inputs: ["ngTemplateOutletContext", "ngTemplateOutlet", "ngTemplateOutletInjector"] }, { kind: "directive", type: i1.NgSwitch, selector: "[ngSwitch]", inputs: ["ngSwitch"] }, { kind: "directive", type: i1.NgSwitchCase, selector: "[ngSwitchCase]", inputs: ["ngSwitchCase"] }, { kind: "directive", type: i1.NgSwitchDefault, selector: "[ngSwitchDefault]" }, { kind: "component", type: GalleryImageComponent, selector: "gallery-image", inputs: ["isThumbnail", "index", "loadingAttr", "alt", "src", "loadingIcon", "loadingError", "errorIcon"], outputs: ["error"] }, { kind: "component", type: GalleryVideoComponent, selector: "gallery-video", inputs: ["src", "poster", "mute", "loop", "controls", "controlsList", "disableRemotePlayback", "disablePictureInPicture", "pause", "play"], outputs: ["error"] }, { kind: "component", type: GalleryIframeComponent, selector: "gallery-iframe", inputs: ["src", "pause", "autoplay", "loadingAttr"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.2.1", ngImport: i0, type: GalleryItemComponent, decorators: [{
            type: Component,
            args: [{ selector: 'gallery-item', changeDetection: ChangeDetectionStrategy.OnPush, template: `
    <ng-container *ngIf="load" [ngSwitch]="type">
      <ng-container *ngSwitchCase="Types.Image">
        <gallery-image [src]="imageData.src"
                       [alt]="imageData.alt"
                       [index]="index"
                       [loadingAttr]="config.loadingAttr"
                       [loadingIcon]="config.loadingIcon"
                       [loadingError]="config.loadingError"
                       (error)="error.emit($event)"></gallery-image>

        <div *ngIf="config.imageTemplate" class="g-template g-item-template">
          <ng-container *ngTemplateOutlet="config.imageTemplate; context: imageContext"></ng-container>
        </div>
      </ng-container>

      <gallery-video *ngSwitchCase="Types.Video"
                     [src]="videoData.src"
                     [mute]="videoData.mute"
                     [poster]="videoData.poster"
                     [controls]="videoData.controls"
                     [controlsList]="videoData.controlsList"
                     [disablePictureInPicture]="videoData.disablePictureInPicture"
                     [play]="isAutoPlay"
                     [pause]="currIndex !== index"
                     (error)="error.emit($event)"></gallery-video>

      <gallery-iframe *ngSwitchCase="Types.Youtube"
                      [src]="youtubeSrc"
                      [autoplay]="isAutoPlay"
                      [loadingAttr]="config.loadingAttr"
                      [pause]="currIndex !== index"></gallery-iframe>

      <gallery-iframe *ngSwitchCase="Types.Vimeo"
                      [src]="vimeoSrc"
                      [autoplay]="isAutoPlay"
                      [loadingAttr]="config.loadingAttr"
                      [pause]="currIndex !== index"></gallery-iframe>

      <gallery-iframe *ngSwitchCase="Types.Iframe"
                      [src]="data.src"
                      [loadingAttr]="config.loadingAttr"></gallery-iframe>

      <ng-container *ngSwitchDefault>
        <div *ngIf="config.itemTemplate" class="g-template g-item-template">
          <ng-container *ngTemplateOutlet="config.itemTemplate; context: itemContext"></ng-container>
        </div>
      </ng-container>
    </ng-container>
  `, standalone: true, imports: [CommonModule, GalleryImageComponent, GalleryVideoComponent, GalleryIframeComponent], styles: [":host{cursor:var(--g-item-cursor);height:var(--g-item-height);width:var(--g-item-width);max-height:var(--g-item-max-height);max-width:var(--slider-width);z-index:10;position:relative;overflow:hidden;display:flex;flex-direction:column;flex:0 0 auto;scroll-snap-align:center;-webkit-user-select:none;user-select:none;-webkit-user-drag:none;-webkit-tap-highlight-color:rgba(0,0,0,0)}:host[itemState=loading]{width:var(--slider-width);height:var(--slider-height)}:host>*{height:100%}:host ::ng-deep video,:host ::ng-deep iframe{width:100%;height:100%}gallery-image{width:var(--g-item-width);height:var(--g-item-height)}.g-template{position:absolute;z-index:10;inset:0;color:#fff;display:flex;align-items:center;justify-content:center;flex-direction:column}\n"] }]
        }], ctorParameters: () => [{ type: i0.ElementRef }], propDecorators: { config: [{
                type: Input
            }], index: [{
                type: Input
            }], count: [{
                type: Input
            }], currIndex: [{
                type: Input
            }], type: [{
                type: Input
            }], data: [{
                type: Input
            }], error: [{
                type: Output
            }], isActive: [{
                type: HostBinding,
                args: ['class.g-active-item']
            }], isIndexAttr: [{
                type: HostBinding,
                args: ['attr.galleryIndex']
            }], itemState: [{
                type: HostBinding,
                args: ['attr.itemState']
            }] } });
//# sourceMappingURL=data:application/json;base64,